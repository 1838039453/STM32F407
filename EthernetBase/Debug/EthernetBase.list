
EthernetBase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffe8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fe4  08010178  08010178  00020178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801215c  0801215c  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  0801215c  0801215c  0002215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012164  08012164  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012164  08012164  00022164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012168  08012168  00022168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801216c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e3cc  20000074  080121e0  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  2000e440  080121e0  0003e440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000340e2  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000067f3  00000000  00000000  00064186  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ab8  00000000  00000000  0006a980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018c0  00000000  00000000  0006c438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ec00  00000000  00000000  0006dcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026bb7  00000000  00000000  0009c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7b44  00000000  00000000  000c34af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aaff3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070ec  00000000  00000000  001ab070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010160 	.word	0x08010160

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08010160 	.word	0x08010160

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000090 	.word	0x20000090
 80005a0:	200000e4 	.word	0x200000e4

080005a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <MX_FREERTOS_Init+0x30>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 f907 	bl	80037d4 <osThreadCreate>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <MX_FREERTOS_Init+0x34>)
 80005ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bdb0      	pop	{r4, r5, r7, pc}
 80005d4:	08010184 	.word	0x08010184
 80005d8:	200041d0 	.word	0x200041d0

080005dc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80005e4:	f002 fc58 	bl	8002e98 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f003 f93f 	bl	800386c <osDelay>
 80005ee:	e7fb      	b.n	80005e8 <StartDefaultTask+0xc>

080005f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08c      	sub	sp, #48	; 0x30
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <MX_GPIO_Init+0xec>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a33      	ldr	r2, [pc, #204]	; (80006dc <MX_GPIO_Init+0xec>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <MX_GPIO_Init+0xec>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <MX_GPIO_Init+0xec>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a2c      	ldr	r2, [pc, #176]	; (80006dc <MX_GPIO_Init+0xec>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <MX_GPIO_Init+0xec>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_GPIO_Init+0xec>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a25      	ldr	r2, [pc, #148]	; (80006dc <MX_GPIO_Init+0xec>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_GPIO_Init+0xec>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_GPIO_Init+0xec>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <MX_GPIO_Init+0xec>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_GPIO_Init+0xec>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_GPIO_Init+0xec>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <MX_GPIO_Init+0xec>)
 8000680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_GPIO_Init+0xec>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_GPIO_Init+0xec>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a10      	ldr	r2, [pc, #64]	; (80006dc <MX_GPIO_Init+0xec>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_GPIO_Init+0xec>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2108      	movs	r1, #8
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0xf0>)
 80006b4:	f001 fd4a 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin;
 80006b8:	2308      	movs	r3, #8
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0xf0>)
 80006d0:	f001 fba2 	bl	8001e18 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3730      	adds	r7, #48	; 0x30
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 fa3e 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f808 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f7ff ff7e 	bl	80005f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80006f4:	f7ff ff56 	bl	80005a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006f8:	f003 f855 	bl	80037a6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <main+0x18>
	...

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f00e fe3a 	bl	800f388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a27      	ldr	r2, [pc, #156]	; (80007cc <SystemClock_Config+0xcc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xd0>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000774:	23a8      	movs	r3, #168	; 0xa8
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fcfb 	bl	8002180 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000790:	f000 f832 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2105      	movs	r1, #5
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 ff26 	bl	8002604 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007be:	f000 f81b 	bl	80007f8 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e6:	f000 f9e1 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40010000 	.word	0x40010000

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_MspInit+0x54>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <HAL_MspInit+0x54>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x54>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_MspInit+0x54>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_MspInit+0x54>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_MspInit+0x54>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	210f      	movs	r1, #15
 800084a:	f06f 0001 	mvn.w	r0, #1
 800084e:	f000 faa7 	bl	8000da0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000870:	2200      	movs	r2, #0
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	2019      	movs	r0, #25
 8000876:	f000 fa93 	bl	8000da0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800087a:	2019      	movs	r0, #25
 800087c:	f000 faac 	bl	8000dd8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <HAL_InitTick+0xa4>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000888:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <HAL_InitTick+0xa4>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6453      	str	r3, [r2, #68]	; 0x44
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_InitTick+0xa4>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800089c:	f107 0210 	add.w	r2, r7, #16
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 f886 	bl	80029b8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008ac:	f002 f870 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 80008b0:	4603      	mov	r3, r0
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b8:	4a13      	ldr	r2, [pc, #76]	; (8000908 <HAL_InitTick+0xa8>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	0c9b      	lsrs	r3, r3, #18
 80008c0:	3b01      	subs	r3, #1
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_InitTick+0xac>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <HAL_InitTick+0xb0>)
 80008c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_InitTick+0xac>)
 80008cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_InitTick+0xac>)
 80008d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_InitTick+0xac>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_InitTick+0xac>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <HAL_InitTick+0xac>)
 80008e6:	f002 f899 	bl	8002a1c <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <HAL_InitTick+0xac>)
 80008f2:	f002 f8c8 	bl	8002a86 <HAL_TIM_Base_Start_IT>
 80008f6:	4603      	mov	r3, r0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	431bde83 	.word	0x431bde83
 800090c:	200041d4 	.word	0x200041d4
 8000910:	40010000 	.word	0x40010000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800094e:	f002 f8be 	bl	8002ace <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200041d4 	.word	0x200041d4

0800095c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <ETH_IRQHandler+0x10>)
 8000962:	f000 fe2d 	bl	80015c0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20005b30 	.word	0x20005b30

08000970 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
	}

return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e009      	b.n	80009d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf1      	blt.n	80009bc <_write+0x12>
	}
	return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_isatty>:

int _isatty(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x50>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x16>
		heap_end = &end;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <_sbrk+0x50>)
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <_sbrk+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <_sbrk+0x50>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <_sbrk+0x50>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	466a      	mov	r2, sp
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d905      	bls.n	8000a82 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <_sbrk+0x58>)
 8000a78:	220c      	movs	r2, #12
 8000a7a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	e006      	b.n	8000a90 <_sbrk+0x44>
	}

	heap_end += incr;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <_sbrk+0x50>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <_sbrk+0x50>)
 8000a8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	200002e4 	.word	0x200002e4
 8000aa0:	2000e440 	.word	0x2000e440
 8000aa4:	2000e438 	.word	0x2000e438

08000aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <SystemInit+0x60>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <SystemInit+0x60>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <SystemInit+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <SystemInit+0x64>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <SystemInit+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <SystemInit+0x64>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <SystemInit+0x64>)
 8000ad4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000adc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <SystemInit+0x64>)
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <SystemInit+0x68>)
 8000ae2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <SystemInit+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <SystemInit+0x64>)
 8000aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SystemInit+0x60>)
 8000af8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000afc:	609a      	str	r2, [r3, #8]
#endif
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	24003010 	.word	0x24003010

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b1a:	e003      	b.n	8000b24 <LoopCopyDataInit>

08000b1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b22:	3104      	adds	r1, #4

08000b24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b2c:	d3f6      	bcc.n	8000b1c <CopyDataInit>
  ldr  r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b30:	e002      	b.n	8000b38 <LoopFillZerobss>

08000b32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b34:	f842 3b04 	str.w	r3, [r2], #4

08000b38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b3c:	d3f9      	bcc.n	8000b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b3e:	f7ff ffb3 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f00e fbe3 	bl	800f30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fdcd 	bl	80006e4 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b50:	0801216c 	.word	0x0801216c
  ldr  r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b58:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b5c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b60:	2000e440 	.word	0x2000e440

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f8fa 	bl	8000d8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fe62 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe34 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000004 	.word	0x20000004
 8000bd0:	20004214 	.word	0x20004214

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20004214 	.word	0x20004214

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_Delay+0x40>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000004 	.word	0x20000004

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff4c 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db2:	f7ff ff61 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000db6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	6978      	ldr	r0, [r7, #20]
 8000dbe:	f7ff ffb1 	bl	8000d24 <NVIC_EncodePriority>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff80 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff54 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000e04:	4baa      	ldr	r3, [pc, #680]	; (80010b0 <HAL_ETH_Init+0x2bc>)
 8000e06:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e185      	b.n	8001126 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d106      	bne.n	8000e34 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f002 f960 	bl	80030f4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	4b9e      	ldr	r3, [pc, #632]	; (80010b4 <HAL_ETH_Init+0x2c0>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3c:	4a9d      	ldr	r2, [pc, #628]	; (80010b4 <HAL_ETH_Init+0x2c0>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6453      	str	r3, [r2, #68]	; 0x44
 8000e44:	4b9b      	ldr	r3, [pc, #620]	; (80010b4 <HAL_ETH_Init+0x2c0>)
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000e50:	4b99      	ldr	r3, [pc, #612]	; (80010b8 <HAL_ETH_Init+0x2c4>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4a98      	ldr	r2, [pc, #608]	; (80010b8 <HAL_ETH_Init+0x2c4>)
 8000e56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e5a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000e5c:	4b96      	ldr	r3, [pc, #600]	; (80010b8 <HAL_ETH_Init+0x2c4>)
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4994      	ldr	r1, [pc, #592]	; (80010b8 <HAL_ETH_Init+0x2c4>)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 0201 	orr.w	r2, r2, #1
 8000e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e80:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e82:	f7ff fea7 	bl	8000bd4 <HAL_GetTick>
 8000e86:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e88:	e011      	b.n	8000eae <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000e8a:	f7ff fea3 	bl	8000bd4 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e98:	d909      	bls.n	8000eae <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e13b      	b.n	8001126 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1e4      	bne.n	8000e8a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f023 031c 	bic.w	r3, r3, #28
 8000ece:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000ed0:	f001 fd52 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8000ed4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4a78      	ldr	r2, [pc, #480]	; (80010bc <HAL_ETH_Init+0x2c8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d908      	bls.n	8000ef0 <HAL_ETH_Init+0xfc>
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4a77      	ldr	r2, [pc, #476]	; (80010c0 <HAL_ETH_Init+0x2cc>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d804      	bhi.n	8000ef0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e027      	b.n	8000f40 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	4a73      	ldr	r2, [pc, #460]	; (80010c0 <HAL_ETH_Init+0x2cc>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d908      	bls.n	8000f0a <HAL_ETH_Init+0x116>
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	4a72      	ldr	r2, [pc, #456]	; (80010c4 <HAL_ETH_Init+0x2d0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d804      	bhi.n	8000f0a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f043 030c 	orr.w	r3, r3, #12
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	e01a      	b.n	8000f40 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	4a6d      	ldr	r2, [pc, #436]	; (80010c4 <HAL_ETH_Init+0x2d0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d903      	bls.n	8000f1a <HAL_ETH_Init+0x126>
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4a6c      	ldr	r2, [pc, #432]	; (80010c8 <HAL_ETH_Init+0x2d4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d911      	bls.n	8000f3e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4a6a      	ldr	r2, [pc, #424]	; (80010c8 <HAL_ETH_Init+0x2d4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d908      	bls.n	8000f34 <HAL_ETH_Init+0x140>
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4a69      	ldr	r2, [pc, #420]	; (80010cc <HAL_ETH_Init+0x2d8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d804      	bhi.n	8000f34 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e005      	b.n	8000f40 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	e000      	b.n	8000f40 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000f3e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fc19 	bl	8001786 <HAL_ETH_WritePHYRegister>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00b      	beq.n	8000f72 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000f5e:	6939      	ldr	r1, [r7, #16]
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 fca5 	bl	80018b0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e0d9      	b.n	8001126 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000f72:	20ff      	movs	r0, #255	; 0xff
 8000f74:	f7ff fe3a 	bl	8000bec <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80a7 	beq.w	80010d0 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f82:	f7ff fe27 	bl	8000bd4 <HAL_GetTick>
 8000f86:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2101      	movs	r1, #1
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fb90 	bl	80016b6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000f96:	f7ff fe1d 	bl	8000bd4 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d90f      	bls.n	8000fc8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000fac:	6939      	ldr	r1, [r7, #16]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fc7e 	bl	80018b0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e0ae      	b.n	8001126 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0da      	beq.n	8000f88 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fbd4 	bl	8001786 <HAL_ETH_WritePHYRegister>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00b      	beq.n	8000ffc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fe8:	6939      	ldr	r1, [r7, #16]
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fc60 	bl	80018b0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e094      	b.n	8001126 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ffc:	f7ff fdea 	bl	8000bd4 <HAL_GetTick>
 8001000:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	461a      	mov	r2, r3
 8001008:	2101      	movs	r1, #1
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 fb53 	bl	80016b6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001010:	f7ff fde0 	bl	8000bd4 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f241 3288 	movw	r2, #5000	; 0x1388
 800101e:	4293      	cmp	r3, r2
 8001020:	d90f      	bls.n	8001042 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001026:	6939      	ldr	r1, [r7, #16]
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fc41 	bl	80018b0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e071      	b.n	8001126 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f003 0320 	and.w	r3, r3, #32
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0da      	beq.n	8001002 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	461a      	mov	r2, r3
 8001052:	211f      	movs	r1, #31
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fb2e 	bl	80016b6 <HAL_ETH_ReadPHYRegister>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fc22 	bl	80018b0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001074:	2301      	movs	r3, #1
 8001076:	e056      	b.n	8001126 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	2b00      	cmp	r3, #0
 8001080:	d004      	beq.n	800108c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	e002      	b.n	8001092 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	e037      	b.n	8001114 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	e032      	b.n	8001114 <HAL_ETH_Init+0x320>
 80010ae:	bf00      	nop
 80010b0:	03938700 	.word	0x03938700
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	01312cff 	.word	0x01312cff
 80010c0:	02160ebf 	.word	0x02160ebf
 80010c4:	039386ff 	.word	0x039386ff
 80010c8:	05f5e0ff 	.word	0x05f5e0ff
 80010cc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	08db      	lsrs	r3, r3, #3
 80010d6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	085b      	lsrs	r3, r3, #1
 80010de:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fb4c 	bl	8001786 <HAL_ETH_WritePHYRegister>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010f8:	6939      	ldr	r1, [r7, #16]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 fbd8 	bl	80018b0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e00c      	b.n	8001126 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800110c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001110:	f7ff fd6c 	bl	8000bec <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001114:	6939      	ldr	r1, [r7, #16]
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 fbca 	bl	80018b0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop

08001130 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_ETH_DMATxDescListInit+0x20>
 800114c:	2302      	movs	r3, #2
 800114e:	e052      	b.n	80011f6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2202      	movs	r2, #2
 800115c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e030      	b.n	80011ce <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	015b      	lsls	r3, r3, #5
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	4413      	add	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800117c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	461a      	mov	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d105      	bne.n	80011a6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d208      	bcs.n	80011c2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3301      	adds	r3, #1
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	4413      	add	r3, r2
 80011ba:	461a      	mov	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	e002      	b.n	80011c8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ca      	bcc.n	800116c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e0:	3310      	adds	r3, #16
 80011e2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001202:	b480      	push	{r7}
 8001204:	b087      	sub	sp, #28
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_ETH_DMARxDescListInit+0x20>
 800121e:	2302      	movs	r3, #2
 8001220:	e056      	b.n	80012d0 <HAL_ETH_DMARxDescListInit+0xce>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2202      	movs	r2, #2
 800122e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e034      	b.n	80012a8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	4413      	add	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800124e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001256:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	461a      	mov	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	3b01      	subs	r3, #1
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	429a      	cmp	r2, r3
 8001288:	d208      	bcs.n	800129c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	4413      	add	r3, r2
 8001294:	461a      	mov	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	e002      	b.n	80012a2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3c6      	bcc.n	800123e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ba:	330c      	adds	r3, #12
 80012bc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_ETH_TransmitFrame+0x24>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e0cd      	b.n	800149c <HAL_ETH_TransmitFrame+0x1c0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001326:	2301      	movs	r3, #1
 8001328:	e0b8      	b.n	800149c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	da09      	bge.n	8001348 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2212      	movs	r2, #18
 8001338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0a9      	b.n	800149c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800134e:	4293      	cmp	r3, r2
 8001350:	d915      	bls.n	800137e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	4a54      	ldr	r2, [pc, #336]	; (80014a8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0a9b      	lsrs	r3, r3, #10
 800135c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001362:	fba3 1302 	umull	r1, r3, r3, r2
 8001366:	0a9b      	lsrs	r3, r3, #10
 8001368:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e001      	b.n	8001382 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800137e:	2301      	movs	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d11c      	bne.n	80013c2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001396:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013a2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013b2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
 80013c0:	e04b      	b.n	800145a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e044      	b.n	8001452 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d107      	bne.n	80013ee <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013ec:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013f6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d116      	bne.n	8001430 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001410:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4a25      	ldr	r2, [pc, #148]	; (80014ac <HAL_ETH_TransmitFrame+0x1d0>)
 8001416:	fb02 f203 	mul.w	r2, r2, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	4413      	add	r3, r2
 800141e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001422:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800142e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800143e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	461a      	mov	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	3301      	adds	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3b6      	bcc.n	80013c8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001462:	3314      	adds	r3, #20
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00d      	beq.n	800148a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001476:	3314      	adds	r3, #20
 8001478:	2204      	movs	r2, #4
 800147a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001484:	3304      	adds	r3, #4
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	ac02b00b 	.word	0xac02b00b
 80014ac:	fffffa0c 	.word	0xfffffa0c

080014b0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e074      	b.n	80015b4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2202      	movs	r2, #2
 80014d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80014da:	e05a      	b.n	8001592 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3301      	adds	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f0:	d10d      	bne.n	800150e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
 800150c:	e041      	b.n	8001592 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10b      	bne.n	8001534 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	461a      	mov	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
 8001532:	e02e      	b.n	8001592 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	2b01      	cmp	r3, #1
 800154c:	d103      	bne.n	8001556 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0c1b      	lsrs	r3, r3, #16
 800155e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001562:	1f1a      	subs	r2, r3, #4
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e010      	b.n	80015b4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db02      	blt.n	80015a2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d99c      	bls.n	80014dc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d0:	3314      	adds	r3, #20
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d8:	2b40      	cmp	r3, #64	; 0x40
 80015da:	d112      	bne.n	8001602 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f001 fe45 	bl	800326c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ea:	3314      	adds	r3, #20
 80015ec:	2240      	movs	r2, #64	; 0x40
 80015ee:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001600:	e01b      	b.n	800163a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160a:	3314      	adds	r3, #20
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b01      	cmp	r3, #1
 8001614:	d111      	bne.n	800163a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f839 	bl	800168e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001624:	3314      	adds	r3, #20
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	3314      	adds	r3, #20
 8001644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001648:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001652:	3314      	adds	r3, #20
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800165e:	d112      	bne.n	8001686 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f81e 	bl	80016a2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166e:	3314      	adds	r3, #20
 8001670:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001674:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	460b      	mov	r3, r1
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b82      	cmp	r3, #130	; 0x82
 80016d6:	d101      	bne.n	80016dc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016d8:	2302      	movs	r3, #2
 80016da:	e050      	b.n	800177e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2282      	movs	r2, #130	; 0x82
 80016e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 031c 	and.w	r3, r3, #28
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8a1b      	ldrh	r3, [r3, #16]
 80016f8:	02db      	lsls	r3, r3, #11
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4313      	orrs	r3, r2
 8001700:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f023 0302 	bic.w	r3, r3, #2
 8001716:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001728:	f7ff fa54 	bl	8000bd4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800172e:	e015      	b.n	800175c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001730:	f7ff fa50 	bl	8000bd4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173e:	d309      	bcc.n	8001754 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e014      	b.n	800177e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1e4      	bne.n	8001730 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	b29b      	uxth	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	460b      	mov	r3, r1
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b42      	cmp	r3, #66	; 0x42
 80017a6:	d101      	bne.n	80017ac <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80017a8:	2302      	movs	r3, #2
 80017aa:	e04e      	b.n	800184a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2242      	movs	r2, #66	; 0x42
 80017b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8a1b      	ldrh	r3, [r3, #16]
 80017c8:	02db      	lsls	r3, r3, #11
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80017d2:	897b      	ldrh	r3, [r7, #10]
 80017d4:	019b      	lsls	r3, r3, #6
 80017d6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001802:	f7ff f9e7 	bl	8000bd4 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001808:	e015      	b.n	8001836 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800180a:	f7ff f9e3 	bl	8000bd4 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d309      	bcc.n	800182e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e00d      	b.n	800184a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e4      	bne.n	800180a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_ETH_Start+0x16>
 8001864:	2302      	movs	r3, #2
 8001866:	e01f      	b.n	80018a8 <HAL_ETH_Start+0x56>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fa1b 	bl	8001cb4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fa35 	bl	8001cee <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa7f 	bl	8001d88 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fa4c 	bl	8001d28 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fa61 	bl	8001d58 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0b0      	sub	sp, #192	; 0xc0
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018cc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80018de:	2300      	movs	r3, #0
 80018e0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80018f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fa:	663b      	str	r3, [r7, #96]	; 0x60
 80018fc:	e001      	b.n	8001902 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001906:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800190c:	2300      	movs	r3, #0
 800190e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001984:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001988:	4bac      	ldr	r3, [pc, #688]	; (8001c3c <ETH_MACDMAConfig+0x38c>)
 800198a:	4013      	ands	r3, r2
 800198c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001990:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001994:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001998:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800199a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800199c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80019a2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80019a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80019a6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80019a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80019aa:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80019b0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80019b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80019b4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80019b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80019b8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80019ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80019bc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80019be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80019c0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80019c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80019c4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019ca:	4313      	orrs	r3, r2
 80019cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff f901 	bl	8000bec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80019f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019f8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80019fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80019fc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80019fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001a02:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001a08:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001a0e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001a14:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001a18:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001a20:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a22:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f7ff f8dc 	bl	8000bec <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a3c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a46:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a50:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a60:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a64:	4013      	ands	r3, r2
 8001a66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a6e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a74:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001a7a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001a80:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001a86:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001a88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001a8c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aa0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff f89d 	bl	8000bec <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aba:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001abc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001ac0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff f888 	bl	8000bec <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ae4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aee:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001af4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001af8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b24:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3a:	3318      	adds	r3, #24
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <ETH_MACDMAConfig+0x390>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b4e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001b50:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b52:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001b54:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001b56:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001b58:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001b5a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001b5c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001b5e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001b60:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001b62:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001b64:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001b66:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001b6a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001b6e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b74:	4313      	orrs	r3, r2
 8001b76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	3318      	adds	r3, #24
 8001b84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b88:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b92:	3318      	adds	r3, #24
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f7ff f826 	bl	8000bec <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba8:	3318      	adds	r3, #24
 8001baa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bae:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bb4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001bb8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001bbc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001bc0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bc4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001bc6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001bca:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7fe ffff 	bl	8000bec <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bfa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10f      	bne.n	8001c24 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0c:	331c      	adds	r3, #28
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c20:	331c      	adds	r3, #28
 8001c22:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f809 	bl	8001c44 <ETH_MACAddressConfig>
}
 8001c32:	bf00      	nop
 8001c34:	37c0      	adds	r7, #192	; 0xc0
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	ff20810f 	.word	0xff20810f
 8001c40:	f8de3f23 	.word	0xf8de3f23

08001c44 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3305      	adds	r3, #5
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	3204      	adds	r2, #4
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <ETH_MACAddressConfig+0x68>)
 8001c66:	4413      	add	r3, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3303      	adds	r3, #3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	061a      	lsls	r2, r3, #24
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3302      	adds	r3, #2
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3301      	adds	r3, #1
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <ETH_MACAddressConfig+0x6c>)
 8001c96:	4413      	add	r3, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	6013      	str	r3, [r2, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40028040 	.word	0x40028040
 8001cb0:	40028044 	.word	0x40028044

08001cb4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0208 	orr.w	r2, r2, #8
 8001cce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f000 f87f 	bl	8001ddc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0204 	orr.w	r2, r2, #4
 8001d08:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f000 f862 	bl	8001ddc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d38:	3318      	adds	r3, #24
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d48:	3318      	adds	r3, #24
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d68:	3318      	adds	r3, #24
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0202 	orr.w	r2, r2, #2
 8001d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d78:	3318      	adds	r3, #24
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9c:	3318      	adds	r3, #24
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dac:	3318      	adds	r3, #24
 8001dae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db8:	3318      	adds	r3, #24
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 f80c 	bl	8001ddc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dce:	3318      	adds	r3, #24
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <ETH_Delay+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <ETH_Delay+0x38>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0a5b      	lsrs	r3, r3, #9
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001df8:	bf00      	nop
  } 
  while (Delay --);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	60fa      	str	r2, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f9      	bne.n	8001df8 <ETH_Delay+0x1c>
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	20000000 	.word	0x20000000
 8001e14:	10624dd3 	.word	0x10624dd3

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e16b      	b.n	800210c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 815a 	bne.w	8002106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x4a>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b12      	cmp	r3, #18
 8001e60:	d123      	bne.n	8001eaa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	220f      	movs	r2, #15
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	08da      	lsrs	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3208      	adds	r2, #8
 8001ea4:	69b9      	ldr	r1, [r7, #24]
 8001ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0203 	and.w	r2, r3, #3
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d00b      	beq.n	8001efe <HAL_GPIO_Init+0xe6>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef2:	2b11      	cmp	r3, #17
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d130      	bne.n	8001f60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80b4 	beq.w	8002106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_GPIO_Init+0x308>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a5e      	ldr	r2, [pc, #376]	; (8002120 <HAL_GPIO_Init+0x308>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_GPIO_Init+0x308>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fba:	4a5a      	ldr	r2, [pc, #360]	; (8002124 <HAL_GPIO_Init+0x30c>)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a51      	ldr	r2, [pc, #324]	; (8002128 <HAL_GPIO_Init+0x310>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02b      	beq.n	800203e <HAL_GPIO_Init+0x226>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a50      	ldr	r2, [pc, #320]	; (800212c <HAL_GPIO_Init+0x314>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d025      	beq.n	800203a <HAL_GPIO_Init+0x222>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_GPIO_Init+0x318>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <HAL_GPIO_Init+0x21e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4e      	ldr	r2, [pc, #312]	; (8002134 <HAL_GPIO_Init+0x31c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d019      	beq.n	8002032 <HAL_GPIO_Init+0x21a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x320>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0x216>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_GPIO_Init+0x324>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_GPIO_Init+0x212>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4b      	ldr	r2, [pc, #300]	; (8002140 <HAL_GPIO_Init+0x328>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4a      	ldr	r2, [pc, #296]	; (8002144 <HAL_GPIO_Init+0x32c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_GPIO_Init+0x20a>
 800201e:	2307      	movs	r3, #7
 8002020:	e00e      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002022:	2308      	movs	r3, #8
 8002024:	e00c      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002026:	2306      	movs	r3, #6
 8002028:	e00a      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800202a:	2305      	movs	r3, #5
 800202c:	e008      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800202e:	2304      	movs	r3, #4
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002032:	2303      	movs	r3, #3
 8002034:	e004      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002036:	2302      	movs	r3, #2
 8002038:	e002      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800203e:	2300      	movs	r3, #0
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f002 0203 	and.w	r2, r2, #3
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	4093      	lsls	r3, r2
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002050:	4934      	ldr	r1, [pc, #208]	; (8002124 <HAL_GPIO_Init+0x30c>)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800205e:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_GPIO_Init+0x330>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002082:	4a31      	ldr	r2, [pc, #196]	; (8002148 <HAL_GPIO_Init+0x330>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002088:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_GPIO_Init+0x330>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <HAL_GPIO_Init+0x330>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b2:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_GPIO_Init+0x330>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d6:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <HAL_GPIO_Init+0x330>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_GPIO_Init+0x330>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_GPIO_Init+0x330>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	f67f ae90 	bls.w	8001e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002114:	bf00      	nop
 8002116:	3724      	adds	r7, #36	; 0x24
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40023800 	.word	0x40023800
 8002124:	40013800 	.word	0x40013800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	40020c00 	.word	0x40020c00
 8002138:	40021000 	.word	0x40021000
 800213c:	40021400 	.word	0x40021400
 8002140:	40021800 	.word	0x40021800
 8002144:	40021c00 	.word	0x40021c00
 8002148:	40013c00 	.word	0x40013c00

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e22d      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d075      	beq.n	800228a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800219e:	4ba3      	ldr	r3, [pc, #652]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d00c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021aa:	4ba0      	ldr	r3, [pc, #640]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d112      	bne.n	80021dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b6:	4b9d      	ldr	r3, [pc, #628]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c2:	d10b      	bne.n	80021dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	4b99      	ldr	r3, [pc, #612]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d05b      	beq.n	8002288 <HAL_RCC_OscConfig+0x108>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d157      	bne.n	8002288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e208      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d106      	bne.n	80021f4 <HAL_RCC_OscConfig+0x74>
 80021e6:	4b91      	ldr	r3, [pc, #580]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a90      	ldr	r2, [pc, #576]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0xb0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x98>
 80021fe:	4b8b      	ldr	r3, [pc, #556]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a8a      	ldr	r2, [pc, #552]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b88      	ldr	r3, [pc, #544]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a87      	ldr	r2, [pc, #540]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xb0>
 8002218:	4b84      	ldr	r3, [pc, #528]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a83      	ldr	r2, [pc, #524]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b81      	ldr	r3, [pc, #516]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a80      	ldr	r2, [pc, #512]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe fccc 	bl	8000bd4 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002240:	f7fe fcc8 	bl	8000bd4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1cd      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0xc0>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe fcb8 	bl	8000bd4 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002268:	f7fe fcb4 	bl	8000bd4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1b9      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	4b6c      	ldr	r3, [pc, #432]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0xe8>
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002296:	4b65      	ldr	r3, [pc, #404]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a2:	4b62      	ldr	r3, [pc, #392]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ae:	4b5f      	ldr	r3, [pc, #380]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	4b5c      	ldr	r3, [pc, #368]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x152>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e18d      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b56      	ldr	r3, [pc, #344]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4952      	ldr	r1, [pc, #328]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e03a      	b.n	800235e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <HAL_RCC_OscConfig+0x2b0>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe fc6d 	bl	8000bd4 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fe:	f7fe fc69 	bl	8000bd4 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e16e      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	4b46      	ldr	r3, [pc, #280]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b43      	ldr	r3, [pc, #268]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4940      	ldr	r1, [pc, #256]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCC_OscConfig+0x2b0>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fc4c 	bl	8000bd4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002340:	f7fe fc48 	bl	8000bd4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e14d      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d030      	beq.n	80023cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_RCC_OscConfig+0x2b4>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fc2c 	bl	8000bd4 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fc28 	bl	8000bd4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e12d      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 8002394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x200>
 800239e:	e015      	b.n	80023cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_OscConfig+0x2b4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7fe fc15 	bl	8000bd4 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe fc11 	bl	8000bd4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e116      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a0 	beq.w	800251a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10f      	bne.n	800240a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a0e      	ldr	r2, [pc, #56]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_OscConfig+0x2b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d121      	bne.n	800245a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_RCC_OscConfig+0x2b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_RCC_OscConfig+0x2b8>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002422:	f7fe fbd7 	bl	8000bd4 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	e011      	b.n	800244e <HAL_RCC_OscConfig+0x2ce>
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	42470000 	.word	0x42470000
 8002434:	42470e80 	.word	0x42470e80
 8002438:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243c:	f7fe fbca 	bl	8000bd4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0cf      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x478>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d106      	bne.n	8002470 <HAL_RCC_OscConfig+0x2f0>
 8002462:	4b66      	ldr	r3, [pc, #408]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	4a65      	ldr	r2, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6713      	str	r3, [r2, #112]	; 0x70
 800246e:	e01c      	b.n	80024aa <HAL_RCC_OscConfig+0x32a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d10c      	bne.n	8002492 <HAL_RCC_OscConfig+0x312>
 8002478:	4b60      	ldr	r3, [pc, #384]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a5f      	ldr	r2, [pc, #380]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
 8002484:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a5c      	ldr	r2, [pc, #368]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	e00b      	b.n	80024aa <HAL_RCC_OscConfig+0x32a>
 8002492:	4b5a      	ldr	r3, [pc, #360]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a59      	ldr	r2, [pc, #356]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d015      	beq.n	80024de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b2:	f7fe fb8f 	bl	8000bd4 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe fb8b 	bl	8000bd4 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e08e      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ee      	beq.n	80024ba <HAL_RCC_OscConfig+0x33a>
 80024dc:	e014      	b.n	8002508 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7fe fb79 	bl	8000bd4 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fb75 	bl	8000bd4 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e078      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ee      	bne.n	80024e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d105      	bne.n	800251a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a3a      	ldr	r2, [pc, #232]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d064      	beq.n	80025ec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002522:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d05c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d141      	bne.n	80025ba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b32      	ldr	r3, [pc, #200]	; (8002600 <HAL_RCC_OscConfig+0x480>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fb4a 	bl	8000bd4 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fb46 	bl	8000bd4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e04b      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	019b      	lsls	r3, r3, #6
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	3b01      	subs	r3, #1
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	491d      	ldr	r1, [pc, #116]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_RCC_OscConfig+0x480>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fb1f 	bl	8000bd4 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fb1b 	bl	8000bd4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e020      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x41a>
 80025b8:	e018      	b.n	80025ec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_OscConfig+0x480>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fb08 	bl	8000bd4 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fb04 	bl	8000bd4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e009      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCC_OscConfig+0x47c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x448>
 80025e6:	e001      	b.n	80025ec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40007000 	.word	0x40007000
 80025fc:	40023800 	.word	0x40023800
 8002600:	42470060 	.word	0x42470060

08002604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0ca      	b.n	80027ae <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b67      	ldr	r3, [pc, #412]	; (80027b8 <HAL_RCC_ClockConfig+0x1b4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d90c      	bls.n	8002640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b62      	ldr	r3, [pc, #392]	; (80027b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b6      	b.n	80027ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b58      	ldr	r3, [pc, #352]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a57      	ldr	r2, [pc, #348]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002670:	4b52      	ldr	r3, [pc, #328]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a51      	ldr	r2, [pc, #324]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800267a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b4f      	ldr	r3, [pc, #316]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494c      	ldr	r1, [pc, #304]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d044      	beq.n	8002724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b46      	ldr	r3, [pc, #280]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d119      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07d      	b.n	80027ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b3e      	ldr	r3, [pc, #248]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e06d      	b.n	80027ae <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e065      	b.n	80027ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4933      	ldr	r1, [pc, #204]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fa6e 	bl	8000bd4 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fa6a 	bl	8000bd4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e04d      	b.n	80027ae <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d20c      	bcs.n	800274c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <HAL_RCC_ClockConfig+0x1b4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e030      	b.n	80027ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4915      	ldr	r1, [pc, #84]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	490d      	ldr	r1, [pc, #52]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800278a:	f000 f81d 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 800278e:	4601      	mov	r1, r0
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	fa21 f303 	lsr.w	r3, r1, r3
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe f85a 	bl	8000860 <HAL_InitTick>

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00
 80027bc:	40023800 	.word	0x40023800
 80027c0:	08011f80 	.word	0x08011f80
 80027c4:	20000000 	.word	0x20000000

080027c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d007      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x32>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d008      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x38>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 80b4 	bne.w	800295c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f4:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027f6:	60bb      	str	r3, [r7, #8]
       break;
 80027f8:	e0b3      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fa:	4b5e      	ldr	r3, [pc, #376]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80027fc:	60bb      	str	r3, [r7, #8]
      break;
 80027fe:	e0b0      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002800:	4b5a      	ldr	r3, [pc, #360]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280a:	4b58      	ldr	r3, [pc, #352]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04a      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002816:	4b55      	ldr	r3, [pc, #340]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	099b      	lsrs	r3, r3, #6
 800281c:	f04f 0400 	mov.w	r4, #0
 8002820:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	ea03 0501 	and.w	r5, r3, r1
 800282c:	ea04 0602 	and.w	r6, r4, r2
 8002830:	4629      	mov	r1, r5
 8002832:	4632      	mov	r2, r6
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	f04f 0400 	mov.w	r4, #0
 800283c:	0154      	lsls	r4, r2, #5
 800283e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002842:	014b      	lsls	r3, r1, #5
 8002844:	4619      	mov	r1, r3
 8002846:	4622      	mov	r2, r4
 8002848:	1b49      	subs	r1, r1, r5
 800284a:	eb62 0206 	sbc.w	r2, r2, r6
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	f04f 0400 	mov.w	r4, #0
 8002856:	0194      	lsls	r4, r2, #6
 8002858:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800285c:	018b      	lsls	r3, r1, #6
 800285e:	1a5b      	subs	r3, r3, r1
 8002860:	eb64 0402 	sbc.w	r4, r4, r2
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	00e2      	lsls	r2, r4, #3
 800286e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002872:	00d9      	lsls	r1, r3, #3
 8002874:	460b      	mov	r3, r1
 8002876:	4614      	mov	r4, r2
 8002878:	195b      	adds	r3, r3, r5
 800287a:	eb44 0406 	adc.w	r4, r4, r6
 800287e:	f04f 0100 	mov.w	r1, #0
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	0262      	lsls	r2, r4, #9
 8002888:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800288c:	0259      	lsls	r1, r3, #9
 800288e:	460b      	mov	r3, r1
 8002890:	4614      	mov	r4, r2
 8002892:	4618      	mov	r0, r3
 8002894:	4621      	mov	r1, r4
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f04f 0400 	mov.w	r4, #0
 800289c:	461a      	mov	r2, r3
 800289e:	4623      	mov	r3, r4
 80028a0:	f7fd fce6 	bl	8000270 <__aeabi_uldivmod>
 80028a4:	4603      	mov	r3, r0
 80028a6:	460c      	mov	r4, r1
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	e049      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ac:	4b2f      	ldr	r3, [pc, #188]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	f04f 0400 	mov.w	r4, #0
 80028b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	ea03 0501 	and.w	r5, r3, r1
 80028c2:	ea04 0602 	and.w	r6, r4, r2
 80028c6:	4629      	mov	r1, r5
 80028c8:	4632      	mov	r2, r6
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	f04f 0400 	mov.w	r4, #0
 80028d2:	0154      	lsls	r4, r2, #5
 80028d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028d8:	014b      	lsls	r3, r1, #5
 80028da:	4619      	mov	r1, r3
 80028dc:	4622      	mov	r2, r4
 80028de:	1b49      	subs	r1, r1, r5
 80028e0:	eb62 0206 	sbc.w	r2, r2, r6
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	f04f 0400 	mov.w	r4, #0
 80028ec:	0194      	lsls	r4, r2, #6
 80028ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028f2:	018b      	lsls	r3, r1, #6
 80028f4:	1a5b      	subs	r3, r3, r1
 80028f6:	eb64 0402 	sbc.w	r4, r4, r2
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	00e2      	lsls	r2, r4, #3
 8002904:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002908:	00d9      	lsls	r1, r3, #3
 800290a:	460b      	mov	r3, r1
 800290c:	4614      	mov	r4, r2
 800290e:	195b      	adds	r3, r3, r5
 8002910:	eb44 0406 	adc.w	r4, r4, r6
 8002914:	f04f 0100 	mov.w	r1, #0
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	02a2      	lsls	r2, r4, #10
 800291e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002922:	0299      	lsls	r1, r3, #10
 8002924:	460b      	mov	r3, r1
 8002926:	4614      	mov	r4, r2
 8002928:	4618      	mov	r0, r3
 800292a:	4621      	mov	r1, r4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f04f 0400 	mov.w	r4, #0
 8002932:	461a      	mov	r2, r3
 8002934:	4623      	mov	r3, r4
 8002936:	f7fd fc9b 	bl	8000270 <__aeabi_uldivmod>
 800293a:	4603      	mov	r3, r0
 800293c:	460c      	mov	r4, r1
 800293e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	60bb      	str	r3, [r7, #8]
      break;
 800295a:	e002      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800295e:	60bb      	str	r3, [r7, #8]
      break;
 8002960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002962:	68bb      	ldr	r3, [r7, #8]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	00f42400 	.word	0x00f42400
 8002974:	007a1200 	.word	0x007a1200

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <HAL_RCC_GetHCLKFreq+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002994:	f7ff fff0 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002998:	4601      	mov	r1, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0b5b      	lsrs	r3, r3, #13
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4a03      	ldr	r2, [pc, #12]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	08011f90 	.word	0x08011f90

080029b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	220f      	movs	r2, #15
 80029c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_RCC_GetClockConfig+0x5c>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0203 	and.w	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <HAL_RCC_GetClockConfig+0x5c>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_GetClockConfig+0x5c>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_GetClockConfig+0x5c>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_RCC_GetClockConfig+0x60>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 020f 	and.w	r2, r3, #15
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40023c00 	.word	0x40023c00

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e01d      	b.n	8002a6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f815 	bl	8002a72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 f968 	bl	8002d30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b06      	cmp	r3, #6
 8002aae:	d007      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d122      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d11b      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f06f 0202 	mvn.w	r2, #2
 8002afa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f8ee 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002b16:	e005      	b.n	8002b24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f8e0 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8f1 	bl	8002d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d122      	bne.n	8002b7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d11b      	bne.n	8002b7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0204 	mvn.w	r2, #4
 8002b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f8c4 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002b6a:	e005      	b.n	8002b78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f8b6 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8c7 	bl	8002d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d122      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d11b      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0208 	mvn.w	r2, #8
 8002ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f89a 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002bbe:	e005      	b.n	8002bcc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f88c 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f89d 	bl	8002d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d122      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d11b      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0210 	mvn.w	r2, #16
 8002bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f870 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002c12:	e005      	b.n	8002c20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f862 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f873 	bl	8002d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d10e      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0201 	mvn.w	r2, #1
 8002c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7fd fdc1 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d10e      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b80      	cmp	r3, #128	; 0x80
 8002c6c:	d107      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f903 	bl	8002e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d10e      	bne.n	8002caa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d107      	bne.n	8002caa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f838 	bl	8002d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d10e      	bne.n	8002cd6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d107      	bne.n	8002cd6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f06f 0220 	mvn.w	r2, #32
 8002cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8cd 	bl	8002e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <TIM_Base_SetConfig+0x114>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d00f      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3d      	ldr	r2, [pc, #244]	; (8002e48 <TIM_Base_SetConfig+0x118>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00b      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3c      	ldr	r2, [pc, #240]	; (8002e4c <TIM_Base_SetConfig+0x11c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <TIM_Base_SetConfig+0x120>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <TIM_Base_SetConfig+0x124>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d108      	bne.n	8002d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <TIM_Base_SetConfig+0x114>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02b      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d027      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <TIM_Base_SetConfig+0x118>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d023      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2b      	ldr	r2, [pc, #172]	; (8002e4c <TIM_Base_SetConfig+0x11c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01f      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	; (8002e50 <TIM_Base_SetConfig+0x120>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01b      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <TIM_Base_SetConfig+0x124>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d017      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <TIM_Base_SetConfig+0x128>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <TIM_Base_SetConfig+0x12c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00f      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a26      	ldr	r2, [pc, #152]	; (8002e60 <TIM_Base_SetConfig+0x130>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <TIM_Base_SetConfig+0x134>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <TIM_Base_SetConfig+0x138>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <TIM_Base_SetConfig+0x13c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <TIM_Base_SetConfig+0x114>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <TIM_Base_SetConfig+0xf8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <TIM_Base_SetConfig+0x124>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d103      	bne.n	8002e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	615a      	str	r2, [r3, #20]
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	40010400 	.word	0x40010400
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40014400 	.word	0x40014400
 8002e60:	40014800 	.word	0x40014800
 8002e64:	40001800 	.word	0x40001800
 8002e68:	40001c00 	.word	0x40001c00
 8002e6c:	40002000 	.word	0x40002000

08002e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002e9e:	4b8c      	ldr	r3, [pc, #560]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002ea0:	22c0      	movs	r2, #192	; 0xc0
 8002ea2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002ea4:	4b8a      	ldr	r3, [pc, #552]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002ea6:	22a8      	movs	r2, #168	; 0xa8
 8002ea8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8002eaa:	4b89      	ldr	r3, [pc, #548]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8002eb0:	4b87      	ldr	r3, [pc, #540]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002eb2:	220a      	movs	r2, #10
 8002eb4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002eb6:	4b87      	ldr	r3, [pc, #540]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002eb8:	22ff      	movs	r2, #255	; 0xff
 8002eba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002ebc:	4b85      	ldr	r3, [pc, #532]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002ebe:	22ff      	movs	r2, #255	; 0xff
 8002ec0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002ec2:	4b84      	ldr	r3, [pc, #528]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002ec8:	4b82      	ldr	r3, [pc, #520]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002ece:	4b82      	ldr	r3, [pc, #520]	; (80030d8 <MX_LWIP_Init+0x240>)
 8002ed0:	22c0      	movs	r2, #192	; 0xc0
 8002ed2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002ed4:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <MX_LWIP_Init+0x240>)
 8002ed6:	22a8      	movs	r2, #168	; 0xa8
 8002ed8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002eda:	4b7f      	ldr	r3, [pc, #508]	; (80030d8 <MX_LWIP_Init+0x240>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002ee0:	4b7d      	ldr	r3, [pc, #500]	; (80030d8 <MX_LWIP_Init+0x240>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f003 fc25 	bl	8006738 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002eee:	4b78      	ldr	r3, [pc, #480]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	061a      	lsls	r2, r3, #24
 8002ef4:	4b76      	ldr	r3, [pc, #472]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	431a      	orrs	r2, r3
 8002efc:	4b74      	ldr	r3, [pc, #464]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002efe:	789b      	ldrb	r3, [r3, #2]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	4313      	orrs	r3, r2
 8002f04:	4a72      	ldr	r2, [pc, #456]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f06:	78d2      	ldrb	r2, [r2, #3]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	061a      	lsls	r2, r3, #24
 8002f0c:	4b70      	ldr	r3, [pc, #448]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	0619      	lsls	r1, r3, #24
 8002f12:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	4319      	orrs	r1, r3
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f1c:	789b      	ldrb	r3, [r3, #2]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	430b      	orrs	r3, r1
 8002f22:	496b      	ldr	r1, [pc, #428]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f24:	78c9      	ldrb	r1, [r1, #3]
 8002f26:	430b      	orrs	r3, r1
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	0619      	lsls	r1, r3, #24
 8002f36:	4b66      	ldr	r3, [pc, #408]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	4319      	orrs	r1, r3
 8002f3e:	4b64      	ldr	r3, [pc, #400]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f40:	789b      	ldrb	r3, [r3, #2]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	430b      	orrs	r3, r1
 8002f46:	4962      	ldr	r1, [pc, #392]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f48:	78c9      	ldrb	r1, [r1, #3]
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f52:	431a      	orrs	r2, r3
 8002f54:	4b5e      	ldr	r3, [pc, #376]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	0619      	lsls	r1, r3, #24
 8002f5a:	4b5d      	ldr	r3, [pc, #372]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f5c:	785b      	ldrb	r3, [r3, #1]
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	4319      	orrs	r1, r3
 8002f62:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f64:	789b      	ldrb	r3, [r3, #2]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	4959      	ldr	r1, [pc, #356]	; (80030d0 <MX_LWIP_Init+0x238>)
 8002f6c:	78c9      	ldrb	r1, [r1, #3]
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	0e1b      	lsrs	r3, r3, #24
 8002f72:	4313      	orrs	r3, r2
 8002f74:	4a59      	ldr	r2, [pc, #356]	; (80030dc <MX_LWIP_Init+0x244>)
 8002f76:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002f78:	4b56      	ldr	r3, [pc, #344]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	061a      	lsls	r2, r3, #24
 8002f7e:	4b55      	ldr	r3, [pc, #340]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002f80:	785b      	ldrb	r3, [r3, #1]
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	431a      	orrs	r2, r3
 8002f86:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002f88:	789b      	ldrb	r3, [r3, #2]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	4a51      	ldr	r2, [pc, #324]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002f90:	78d2      	ldrb	r2, [r2, #3]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	061a      	lsls	r2, r3, #24
 8002f96:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	0619      	lsls	r1, r3, #24
 8002f9c:	4b4d      	ldr	r3, [pc, #308]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	4319      	orrs	r1, r3
 8002fa4:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002fa6:	789b      	ldrb	r3, [r3, #2]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	430b      	orrs	r3, r1
 8002fac:	4949      	ldr	r1, [pc, #292]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002fae:	78c9      	ldrb	r1, [r1, #3]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	0619      	lsls	r1, r3, #24
 8002fc0:	4b44      	ldr	r3, [pc, #272]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	4319      	orrs	r1, r3
 8002fc8:	4b42      	ldr	r3, [pc, #264]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002fca:	789b      	ldrb	r3, [r3, #2]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	4940      	ldr	r1, [pc, #256]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002fd2:	78c9      	ldrb	r1, [r1, #3]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	0619      	lsls	r1, r3, #24
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	4319      	orrs	r1, r3
 8002fec:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002fee:	789b      	ldrb	r3, [r3, #2]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	4937      	ldr	r1, [pc, #220]	; (80030d4 <MX_LWIP_Init+0x23c>)
 8002ff6:	78c9      	ldrb	r1, [r1, #3]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	0e1b      	lsrs	r3, r3, #24
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <MX_LWIP_Init+0x248>)
 8003000:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003002:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	061a      	lsls	r2, r3, #24
 8003008:	4b33      	ldr	r3, [pc, #204]	; (80030d8 <MX_LWIP_Init+0x240>)
 800300a:	785b      	ldrb	r3, [r3, #1]
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	431a      	orrs	r2, r3
 8003010:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003012:	789b      	ldrb	r3, [r3, #2]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	4313      	orrs	r3, r2
 8003018:	4a2f      	ldr	r2, [pc, #188]	; (80030d8 <MX_LWIP_Init+0x240>)
 800301a:	78d2      	ldrb	r2, [r2, #3]
 800301c:	4313      	orrs	r3, r2
 800301e:	061a      	lsls	r2, r3, #24
 8003020:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	0619      	lsls	r1, r3, #24
 8003026:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	4319      	orrs	r1, r3
 800302e:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003030:	789b      	ldrb	r3, [r3, #2]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	430b      	orrs	r3, r1
 8003036:	4928      	ldr	r1, [pc, #160]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003038:	78c9      	ldrb	r1, [r1, #3]
 800303a:	430b      	orrs	r3, r1
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003042:	431a      	orrs	r2, r3
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	0619      	lsls	r1, r3, #24
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <MX_LWIP_Init+0x240>)
 800304c:	785b      	ldrb	r3, [r3, #1]
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	4319      	orrs	r1, r3
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003054:	789b      	ldrb	r3, [r3, #2]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	430b      	orrs	r3, r1
 800305a:	491f      	ldr	r1, [pc, #124]	; (80030d8 <MX_LWIP_Init+0x240>)
 800305c:	78c9      	ldrb	r1, [r1, #3]
 800305e:	430b      	orrs	r3, r1
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003066:	431a      	orrs	r2, r3
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <MX_LWIP_Init+0x240>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	0619      	lsls	r1, r3, #24
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	4319      	orrs	r1, r3
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003078:	789b      	ldrb	r3, [r3, #2]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	430b      	orrs	r3, r1
 800307e:	4916      	ldr	r1, [pc, #88]	; (80030d8 <MX_LWIP_Init+0x240>)
 8003080:	78c9      	ldrb	r1, [r1, #3]
 8003082:	430b      	orrs	r3, r1
 8003084:	0e1b      	lsrs	r3, r3, #24
 8003086:	4313      	orrs	r3, r2
 8003088:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <MX_LWIP_Init+0x24c>)
 800308a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <MX_LWIP_Init+0x250>)
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <MX_LWIP_Init+0x254>)
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2300      	movs	r3, #0
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <MX_LWIP_Init+0x24c>)
 800309a:	4a11      	ldr	r2, [pc, #68]	; (80030e0 <MX_LWIP_Init+0x248>)
 800309c:	490f      	ldr	r1, [pc, #60]	; (80030dc <MX_LWIP_Init+0x244>)
 800309e:	4814      	ldr	r0, [pc, #80]	; (80030f0 <MX_LWIP_Init+0x258>)
 80030a0:	f004 f806 	bl	80070b0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80030a4:	4812      	ldr	r0, [pc, #72]	; (80030f0 <MX_LWIP_Init+0x258>)
 80030a6:	f004 f8e3 	bl	8007270 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <MX_LWIP_Init+0x258>)
 80030ac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80030bc:	480c      	ldr	r0, [pc, #48]	; (80030f0 <MX_LWIP_Init+0x258>)
 80030be:	f004 f8e7 	bl	8007290 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80030c2:	e002      	b.n	80030ca <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 80030c4:	480a      	ldr	r0, [pc, #40]	; (80030f0 <MX_LWIP_Init+0x258>)
 80030c6:	f004 f927 	bl	8007318 <netif_set_down>
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20004254 	.word	0x20004254
 80030d4:	20004250 	.word	0x20004250
 80030d8:	20004218 	.word	0x20004218
 80030dc:	2000424c 	.word	0x2000424c
 80030e0:	20004258 	.word	0x20004258
 80030e4:	2000425c 	.word	0x2000425c
 80030e8:	08006661 	.word	0x08006661
 80030ec:	080036e9 	.word	0x080036e9
 80030f0:	2000421c 	.word	0x2000421c

080030f4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a50      	ldr	r2, [pc, #320]	; (8003254 <HAL_ETH_MspInit+0x160>)
 8003112:	4293      	cmp	r3, r2
 8003114:	f040 809a 	bne.w	800324c <HAL_ETH_MspInit+0x158>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
 800311c:	4b4e      	ldr	r3, [pc, #312]	; (8003258 <HAL_ETH_MspInit+0x164>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_ETH_MspInit+0x164>)
 8003122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003126:	6313      	str	r3, [r2, #48]	; 0x30
 8003128:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <HAL_ETH_MspInit+0x164>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_ETH_MspInit+0x164>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	4a46      	ldr	r2, [pc, #280]	; (8003258 <HAL_ETH_MspInit+0x164>)
 800313e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003142:	6313      	str	r3, [r2, #48]	; 0x30
 8003144:	4b44      	ldr	r3, [pc, #272]	; (8003258 <HAL_ETH_MspInit+0x164>)
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_ETH_MspInit+0x164>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	4a3f      	ldr	r2, [pc, #252]	; (8003258 <HAL_ETH_MspInit+0x164>)
 800315a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800315e:	6313      	str	r3, [r2, #48]	; 0x30
 8003160:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <HAL_ETH_MspInit+0x164>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	4b39      	ldr	r3, [pc, #228]	; (8003258 <HAL_ETH_MspInit+0x164>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4a38      	ldr	r2, [pc, #224]	; (8003258 <HAL_ETH_MspInit+0x164>)
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	6313      	str	r3, [r2, #48]	; 0x30
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_ETH_MspInit+0x164>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <HAL_ETH_MspInit+0x164>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a31      	ldr	r2, [pc, #196]	; (8003258 <HAL_ETH_MspInit+0x164>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6313      	str	r3, [r2, #48]	; 0x30
 8003198:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_ETH_MspInit+0x164>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_ETH_MspInit+0x164>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <HAL_ETH_MspInit+0x164>)
 80031ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b2:	6313      	str	r3, [r2, #48]	; 0x30
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_ETH_MspInit+0x164>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80031c0:	2332      	movs	r3, #50	; 0x32
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031cc:	2303      	movs	r3, #3
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031d0:	230b      	movs	r3, #11
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d8:	4619      	mov	r1, r3
 80031da:	4820      	ldr	r0, [pc, #128]	; (800325c <HAL_ETH_MspInit+0x168>)
 80031dc:	f7fe fe1c 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80031e0:	2386      	movs	r3, #134	; 0x86
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ec:	2303      	movs	r3, #3
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031f0:	230b      	movs	r3, #11
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f8:	4619      	mov	r1, r3
 80031fa:	4819      	ldr	r0, [pc, #100]	; (8003260 <HAL_ETH_MspInit+0x16c>)
 80031fc:	f7fe fe0c 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003200:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320e:	2303      	movs	r3, #3
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003212:	230b      	movs	r3, #11
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321a:	4619      	mov	r1, r3
 800321c:	4811      	ldr	r0, [pc, #68]	; (8003264 <HAL_ETH_MspInit+0x170>)
 800321e:	f7fe fdfb 	bl	8001e18 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2105      	movs	r1, #5
 8003226:	203d      	movs	r0, #61	; 0x3d
 8003228:	f7fd fdba 	bl	8000da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800322c:	203d      	movs	r0, #61	; 0x3d
 800322e:	f7fd fdd3 	bl	8000dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */
	HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_RESET);
 8003232:	2200      	movs	r2, #0
 8003234:	2108      	movs	r1, #8
 8003236:	480c      	ldr	r0, [pc, #48]	; (8003268 <HAL_ETH_MspInit+0x174>)
 8003238:	f7fe ff88 	bl	800214c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800323c:	2032      	movs	r0, #50	; 0x32
 800323e:	f7fd fcd5 	bl	8000bec <HAL_Delay>
	HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 8003242:	2201      	movs	r2, #1
 8003244:	2108      	movs	r1, #8
 8003246:	4808      	ldr	r0, [pc, #32]	; (8003268 <HAL_ETH_MspInit+0x174>)
 8003248:	f7fe ff80 	bl	800214c <HAL_GPIO_WritePin>
  /* USER CODE END ETH_MspInit 1 */
  }
}
 800324c:	bf00      	nop
 800324e:	3738      	adds	r7, #56	; 0x38
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40028000 	.word	0x40028000
 8003258:	40023800 	.word	0x40023800
 800325c:	40020800 	.word	0x40020800
 8003260:	40020000 	.word	0x40020000
 8003264:	40021800 	.word	0x40021800
 8003268:	40020c00 	.word	0x40020c00

0800326c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_ETH_RxCpltCallback+0x1c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fc29 	bl	8003ad0 <osSemaphoreRelease>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200002e8 	.word	0x200002e8

0800328c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800328c:	b5b0      	push	{r4, r5, r7, lr}
 800328e:	b08e      	sub	sp, #56	; 0x38
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <low_level_init+0x14c>)
 8003296:	4a51      	ldr	r2, [pc, #324]	; (80033dc <low_level_init+0x150>)
 8003298:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800329a:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <low_level_init+0x14c>)
 800329c:	2201      	movs	r2, #1
 800329e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS;
 80032a0:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <low_level_init+0x14c>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80032b2:	23e1      	movs	r3, #225	; 0xe1
 80032b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80032ca:	4a43      	ldr	r2, [pc, #268]	; (80033d8 <low_level_init+0x14c>)
 80032cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032d0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80032d2:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <low_level_init+0x14c>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80032d8:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <low_level_init+0x14c>)
 80032da:	2200      	movs	r2, #0
 80032dc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80032de:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <low_level_init+0x14c>)
 80032e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80032e4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80032e6:	483c      	ldr	r0, [pc, #240]	; (80033d8 <low_level_init+0x14c>)
 80032e8:	f7fd fd84 	bl	8000df4 <HAL_ETH_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (hal_eth_init_status == HAL_OK)
 80032f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <low_level_init+0x80>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	b2da      	uxtb	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800330c:	2304      	movs	r3, #4
 800330e:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <low_level_init+0x154>)
 8003310:	4934      	ldr	r1, [pc, #208]	; (80033e4 <low_level_init+0x158>)
 8003312:	4831      	ldr	r0, [pc, #196]	; (80033d8 <low_level_init+0x14c>)
 8003314:	f7fd ff0c 	bl	8001130 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003318:	2304      	movs	r3, #4
 800331a:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <low_level_init+0x15c>)
 800331c:	4933      	ldr	r1, [pc, #204]	; (80033ec <low_level_init+0x160>)
 800331e:	482e      	ldr	r0, [pc, #184]	; (80033d8 <low_level_init+0x14c>)
 8003320:	f7fd ff6f 	bl	8001202 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2206      	movs	r2, #6
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800332c:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <low_level_init+0x14c>)
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003338:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <low_level_init+0x14c>)
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	785a      	ldrb	r2, [r3, #1]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <low_level_init+0x14c>)
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	789a      	ldrb	r2, [r3, #2]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003350:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <low_level_init+0x14c>)
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	78da      	ldrb	r2, [r3, #3]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <low_level_init+0x14c>)
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	791a      	ldrb	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <low_level_init+0x14c>)
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	795a      	ldrb	r2, [r3, #5]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800337a:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003382:	f043 030a 	orr.w	r3, r3, #10
 8003386:	b2da      	uxtb	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800338e:	2300      	movs	r3, #0
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
 8003392:	2300      	movs	r3, #0
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800339a:	2101      	movs	r1, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fb15 	bl	80039cc <osSemaphoreCreate>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <low_level_init+0x164>)
 80033a6:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <low_level_init+0x168>)
 80033aa:	f107 040c 	add.w	r4, r7, #12
 80033ae:	461d      	mov	r5, r3
 80033b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80033bc:	f107 030c 	add.w	r3, r7, #12
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fa06 	bl	80037d4 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80033c8:	4803      	ldr	r0, [pc, #12]	; (80033d8 <low_level_init+0x14c>)
 80033ca:	f7fe fa42 	bl	8001852 <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80033ce:	bf00      	nop
 80033d0:	3738      	adds	r7, #56	; 0x38
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bdb0      	pop	{r4, r5, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20005b30 	.word	0x20005b30
 80033dc:	40028000 	.word	0x40028000
 80033e0:	20005b78 	.word	0x20005b78
 80033e4:	20004260 	.word	0x20004260
 80033e8:	200042e0 	.word	0x200042e0
 80033ec:	20005ab0 	.word	0x20005ab0
 80033f0:	200002e8 	.word	0x200002e8
 80033f4:	080101a8 	.word	0x080101a8

080033f8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003402:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <low_level_output+0x138>)
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800341a:	4b45      	ldr	r3, [pc, #276]	; (8003530 <low_level_output+0x138>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	e05a      	b.n	80034e0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	da03      	bge.n	800343a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003432:	23f8      	movs	r3, #248	; 0xf8
 8003434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003438:	e05c      	b.n	80034f4 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	895b      	ldrh	r3, [r3, #10]
 800343e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003444:	e02f      	b.n	80034a6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	18d0      	adds	r0, r2, r3
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	18d1      	adds	r1, r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800345a:	3304      	adds	r3, #4
 800345c:	461a      	mov	r2, r3
 800345e:	f00b ff88 	bl	800f372 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	da03      	bge.n	8003478 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003470:	23f8      	movs	r3, #248	; 0xf8
 8003472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003476:	e03d      	b.n	80034f4 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003488:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003494:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80034a0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d8c8      	bhi.n	8003446 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	18d0      	adds	r0, r2, r3
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4413      	add	r3, r2
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4619      	mov	r1, r3
 80034c6:	f00b ff54 	bl	800f372 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1a1      	bne.n	800342a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	4811      	ldr	r0, [pc, #68]	; (8003530 <low_level_output+0x138>)
 80034ea:	f7fd fef7 	bl	80012dc <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <low_level_output+0x138>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fc:	3314      	adds	r3, #20
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <low_level_output+0x138>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003510:	3314      	adds	r3, #20
 8003512:	2220      	movs	r2, #32
 8003514:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <low_level_output+0x138>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351e:	3304      	adds	r3, #4
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003528:	4618      	mov	r0, r3
 800352a:	3728      	adds	r7, #40	; 0x28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20005b30 	.word	0x20005b30

08003534 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08c      	sub	sp, #48	; 0x30
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800353c:	2300      	movs	r3, #0
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003558:	484e      	ldr	r0, [pc, #312]	; (8003694 <low_level_input+0x160>)
 800355a:	f7fd ffa9 	bl	80014b0 <HAL_ETH_GetReceivedFrame_IT>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <low_level_input+0x34>
    return NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	e091      	b.n	800368c <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003568:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <low_level_input+0x160>)
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800356e:	4b49      	ldr	r3, [pc, #292]	; (8003694 <low_level_input+0x160>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8003574:	89fb      	ldrh	r3, [r7, #14]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	2203      	movs	r2, #3
 800357e:	4619      	mov	r1, r3
 8003580:	2004      	movs	r0, #4
 8003582:	f003 ff4b 	bl	800741c <pbuf_alloc>
 8003586:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d04b      	beq.n	8003626 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <low_level_input+0x160>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
 800359c:	e040      	b.n	8003620 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	895b      	ldrh	r3, [r3, #10]
 80035a2:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80035a8:	e021      	b.n	80035ee <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	18d0      	adds	r0, r2, r3
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	18d1      	adds	r1, r2, r3
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80035be:	3304      	adds	r3, #4
 80035c0:	461a      	mov	r2, r3
 80035c2:	f00b fed6 	bl	800f372 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	4413      	add	r3, r2
 80035d8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80035dc:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80035e8:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d8d6      	bhi.n	80035aa <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	18d0      	adds	r0, r2, r3
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4619      	mov	r1, r3
 800360e:	f00b feb0 	bl	800f372 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4413      	add	r3, r2
 8003618:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1bb      	bne.n	800359e <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <low_level_input+0x160>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	e00b      	b.n	800364a <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	3301      	adds	r3, #1
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <low_level_input+0x160>)
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	429a      	cmp	r2, r3
 8003652:	d3ee      	bcc.n	8003632 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <low_level_input+0x160>)
 8003656:	2200      	movs	r2, #0
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <low_level_input+0x160>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003662:	3314      	adds	r3, #20
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <low_level_input+0x160>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003676:	3314      	adds	r3, #20
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <low_level_input+0x160>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003684:	3308      	adds	r3, #8
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
  }
  return p;
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800368c:	4618      	mov	r0, r3
 800368e:	3730      	adds	r7, #48	; 0x30
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20005b30 	.word	0x20005b30

08003698 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <ethernetif_input+0x4c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f9c1 	bl	8003a34 <osSemaphoreWait>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f5      	bne.n	80036a4 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f7ff ff3b 	bl	8003534 <low_level_input>
 80036be:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	68b8      	ldr	r0, [r7, #8]
 80036ce:	4798      	blx	r3
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80036d6:	68b8      	ldr	r0, [r7, #8]
 80036d8:	f004 fa14 	bl	8007b04 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ea      	bne.n	80036b8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80036e2:	e7df      	b.n	80036a4 <ethernetif_input+0xc>
 80036e4:	200002e8 	.word	0x200002e8

080036e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <ethernetif_init+0x1c>
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <ethernetif_init+0x48>)
 80036f8:	f240 221a 	movw	r2, #538	; 0x21a
 80036fc:	490d      	ldr	r1, [pc, #52]	; (8003734 <ethernetif_init+0x4c>)
 80036fe:	480e      	ldr	r0, [pc, #56]	; (8003738 <ethernetif_init+0x50>)
 8003700:	f00b fe4a 	bl	800f398 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2273      	movs	r2, #115	; 0x73
 8003708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2274      	movs	r2, #116	; 0x74
 8003710:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <ethernetif_init+0x54>)
 8003718:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a08      	ldr	r2, [pc, #32]	; (8003740 <ethernetif_init+0x58>)
 800371e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fdb3 	bl	800328c <low_level_init>

  return ERR_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	080101c4 	.word	0x080101c4
 8003734:	080101e0 	.word	0x080101e0
 8003738:	080101f0 	.word	0x080101f0
 800373c:	0800d4e1 	.word	0x0800d4e1
 8003740:	080033f9 	.word	0x080033f9

08003744 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003748:	f7fd fa44 	bl	8000bd4 <HAL_GetTick>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	bd80      	pop	{r7, pc}

08003752 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003764:	2b84      	cmp	r3, #132	; 0x84
 8003766:	d005      	beq.n	8003774 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003768:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	3303      	adds	r3, #3
 8003772:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003774:	68fb      	ldr	r3, [r7, #12]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003788:	f3ef 8305 	mrs	r3, IPSR
 800378c:	607b      	str	r3, [r7, #4]
  return(result);
 800378e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037aa:	f001 fc39 	bl	8005020 <vTaskStartScheduler>
  
  return osOK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80037b8:	f7ff ffe3 	bl	8003782 <inHandlerMode>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80037c2:	f001 fd45 	bl	8005250 <xTaskGetTickCountFromISR>
 80037c6:	4603      	mov	r3, r0
 80037c8:	e002      	b.n	80037d0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80037ca:	f001 fd31 	bl	8005230 <xTaskGetTickCount>
 80037ce:	4603      	mov	r3, r0
  }
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af04      	add	r7, sp, #16
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d020      	beq.n	8003828 <osThreadCreate+0x54>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01c      	beq.n	8003828 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685c      	ldr	r4, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681d      	ldr	r5, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691e      	ldr	r6, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ffa6 	bl	8003752 <makeFreeRtosPriority>
 8003806:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003810:	9202      	str	r2, [sp, #8]
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	9100      	str	r1, [sp, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	4632      	mov	r2, r6
 800381a:	4629      	mov	r1, r5
 800381c:	4620      	mov	r0, r4
 800381e:	f001 fa44 	bl	8004caa <xTaskCreateStatic>
 8003822:	4603      	mov	r3, r0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e01c      	b.n	8003862 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685c      	ldr	r4, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003834:	b29e      	uxth	r6, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff88 	bl	8003752 <makeFreeRtosPriority>
 8003842:	4602      	mov	r2, r0
 8003844:	f107 030c 	add.w	r3, r7, #12
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	9200      	str	r2, [sp, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4632      	mov	r2, r6
 8003850:	4629      	mov	r1, r5
 8003852:	4620      	mov	r0, r4
 8003854:	f001 fa82 	bl	8004d5c <xTaskCreate>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003862:	68fb      	ldr	r3, [r7, #12]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800386c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <osDelay+0x16>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	e000      	b.n	8003884 <osDelay+0x18>
 8003882:	2301      	movs	r3, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f001 fb97 	bl	8004fb8 <vTaskDelay>
  
  return osOK;
 800388a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4619      	mov	r1, r3
 80038aa:	2001      	movs	r0, #1
 80038ac:	f000 fc40 	bl	8004130 <xQueueCreateMutexStatic>
 80038b0:	4603      	mov	r3, r0
 80038b2:	e003      	b.n	80038bc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80038b4:	2001      	movs	r0, #1
 80038b6:	f000 fc23 	bl	8004100 <xQueueCreateMutex>
 80038ba:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <osMutexWait+0x18>
    return osErrorParameter;
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	e03a      	b.n	8003952 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d103      	bne.n	80038f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e009      	b.n	8003904 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d006      	beq.n	8003904 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <osMutexWait+0x40>
      ticks = 1;
 8003900:	2301      	movs	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003904:	f7ff ff3d 	bl	8003782 <inHandlerMode>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d017      	beq.n	800393e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800390e:	f107 0308 	add.w	r3, r7, #8
 8003912:	461a      	mov	r2, r3
 8003914:	2100      	movs	r1, #0
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f001 f822 	bl	8004960 <xQueueReceiveFromISR>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d001      	beq.n	8003926 <osMutexWait+0x62>
      return osErrorOS;
 8003922:	23ff      	movs	r3, #255	; 0xff
 8003924:	e015      	b.n	8003952 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d011      	beq.n	8003950 <osMutexWait+0x8c>
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <osMutexWait+0x98>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	e008      	b.n	8003950 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 ff05 	bl	8004750 <xQueueSemaphoreTake>
 8003946:	4603      	mov	r3, r0
 8003948:	2b01      	cmp	r3, #1
 800394a:	d001      	beq.n	8003950 <osMutexWait+0x8c>
    return osErrorOS;
 800394c:	23ff      	movs	r3, #255	; 0xff
 800394e:	e000      	b.n	8003952 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000ed04 	.word	0xe000ed04

08003960 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003970:	f7ff ff07 	bl	8003782 <inHandlerMode>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fd7f 	bl	8004484 <xQueueGiveFromISR>
 8003986:	4603      	mov	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d001      	beq.n	8003990 <osMutexRelease+0x30>
      return osErrorOS;
 800398c:	23ff      	movs	r3, #255	; 0xff
 800398e:	e017      	b.n	80039c0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d013      	beq.n	80039be <osMutexRelease+0x5e>
 8003996:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <osMutexRelease+0x68>)
 8003998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	e00a      	b.n	80039be <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80039a8:	2300      	movs	r3, #0
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fbda 	bl	8004168 <xQueueGenericSend>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d001      	beq.n	80039be <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80039ba:	23ff      	movs	r3, #255	; 0xff
 80039bc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10b      	bne.n	80039fc <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	2303      	movs	r3, #3
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	2100      	movs	r1, #0
 80039f2:	2001      	movs	r0, #1
 80039f4:	f000 fa9c 	bl	8003f30 <xQueueGenericCreateStatic>
 80039f8:	4603      	mov	r3, r0
 80039fa:	e016      	b.n	8003a2a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e014      	b.n	8003a2a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d110      	bne.n	8003a28 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003a06:	2203      	movs	r2, #3
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f000 fb02 	bl	8004014 <xQueueGenericCreate>
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <osSemaphoreCreate+0x58>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fba2 	bl	8004168 <xQueueGenericSend>
      return sema;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	e000      	b.n	8003a2a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003a28:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	e03a      	b.n	8003ac2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d103      	bne.n	8003a60 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e009      	b.n	8003a74 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <osSemaphoreWait+0x40>
      ticks = 1;
 8003a70:	2301      	movs	r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003a74:	f7ff fe85 	bl	8003782 <inHandlerMode>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d017      	beq.n	8003aae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003a7e:	f107 0308 	add.w	r3, r7, #8
 8003a82:	461a      	mov	r2, r3
 8003a84:	2100      	movs	r1, #0
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 ff6a 	bl	8004960 <xQueueReceiveFromISR>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003a92:	23ff      	movs	r3, #255	; 0xff
 8003a94:	e015      	b.n	8003ac2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d011      	beq.n	8003ac0 <osSemaphoreWait+0x8c>
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <osSemaphoreWait+0x98>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	e008      	b.n	8003ac0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fe4d 	bl	8004750 <xQueueSemaphoreTake>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003abc:	23ff      	movs	r3, #255	; 0xff
 8003abe:	e000      	b.n	8003ac2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003ae0:	f7ff fe4f 	bl	8003782 <inHandlerMode>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fcc7 	bl	8004484 <xQueueGiveFromISR>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d001      	beq.n	8003b00 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003afc:	23ff      	movs	r3, #255	; 0xff
 8003afe:	e017      	b.n	8003b30 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d013      	beq.n	8003b2e <osSemaphoreRelease+0x5e>
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <osSemaphoreRelease+0x68>)
 8003b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	e00a      	b.n	8003b2e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fb22 	bl	8004168 <xQueueGenericSend>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d001      	beq.n	8003b2e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003b2a:	23ff      	movs	r3, #255	; 0xff
 8003b2c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <osMessageCreate+0x38>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68dc      	ldr	r4, [r3, #12]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	f000 f9e0 	bl	8003f30 <xQueueGenericCreateStatic>
 8003b70:	4603      	mov	r3, r0
 8003b72:	e008      	b.n	8003b86 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f000 fa48 	bl	8004014 <xQueueGenericCreate>
 8003b84:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd90      	pop	{r4, r7, pc}
	...

08003b90 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <osMessagePut+0x1e>
    ticks = 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003bae:	f7ff fde8 	bl	8003782 <inHandlerMode>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d018      	beq.n	8003bea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003bb8:	f107 0210 	add.w	r2, r7, #16
 8003bbc:	f107 0108 	add.w	r1, r7, #8
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fbca 	bl	800435c <xQueueGenericSendFromISR>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <osMessagePut+0x42>
      return osErrorOS;
 8003bce:	23ff      	movs	r3, #255	; 0xff
 8003bd0:	e018      	b.n	8003c04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d014      	beq.n	8003c02 <osMessagePut+0x72>
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <osMessagePut+0x7c>)
 8003bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	e00b      	b.n	8003c02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003bea:	f107 0108 	add.w	r1, r7, #8
 8003bee:	2300      	movs	r3, #0
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fab8 	bl	8004168 <xQueueGenericSend>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <osMessagePut+0x72>
      return osErrorOS;
 8003bfe:	23ff      	movs	r3, #255	; 0xff
 8003c00:	e000      	b.n	8003c04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b08b      	sub	sp, #44	; 0x2c
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	617b      	str	r3, [r7, #20]
    return event;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	461c      	mov	r4, r3
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c3e:	e054      	b.n	8003cea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d103      	bne.n	8003c58 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	e009      	b.n	8003c6c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <osMessageGet+0x5c>
      ticks = 1;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003c6c:	f7ff fd89 	bl	8003782 <inHandlerMode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01c      	beq.n	8003cb0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003c76:	f107 0220 	add.w	r2, r7, #32
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	68b8      	ldr	r0, [r7, #8]
 8003c84:	f000 fe6c 	bl	8004960 <xQueueReceiveFromISR>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003c8e:	2310      	movs	r3, #16
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e001      	b.n	8003c98 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01d      	beq.n	8003cda <osMessageGet+0xca>
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <osMessageGet+0xe4>)
 8003ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	e014      	b.n	8003cda <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	4619      	mov	r1, r3
 8003cba:	68b8      	ldr	r0, [r7, #8]
 8003cbc:	f000 fc6c 	bl	8004598 <xQueueReceive>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	e006      	b.n	8003cda <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <osMessageGet+0xc6>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e000      	b.n	8003cd8 <osMessageGet+0xc8>
 8003cd6:	2340      	movs	r3, #64	; 0x40
 8003cd8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	461c      	mov	r4, r3
 8003cde:	f107 0314 	add.w	r3, r7, #20
 8003ce2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	372c      	adds	r7, #44	; 0x2c
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd90      	pop	{r4, r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f103 0208 	add.w	r2, r3, #8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f103 0208 	add.w	r2, r3, #8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f103 0208 	add.w	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d103      	bne.n	8003dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e00c      	b.n	8003dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	e002      	b.n	8003dc8 <vListInsert+0x2e>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d2f6      	bcs.n	8003dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6892      	ldr	r2, [r2, #8]
 8003e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6852      	ldr	r2, [r2, #4]
 8003e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d103      	bne.n	8003e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	1e5a      	subs	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	e7fe      	b.n	8003e86 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003e88:	f002 f850 	bl	8005f2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	441a      	add	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	441a      	add	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	22ff      	movs	r2, #255	; 0xff
 8003ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	22ff      	movs	r2, #255	; 0xff
 8003ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d114      	bne.n	8003f08 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01a      	beq.n	8003f1c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3310      	adds	r3, #16
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 fafc 	bl	80054e8 <xTaskRemoveFromEventList>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d012      	beq.n	8003f1c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <xQueueGenericReset+0xcc>)
 8003ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	e009      	b.n	8003f1c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3310      	adds	r3, #16
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fef3 	bl	8003cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3324      	adds	r3, #36	; 0x24
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff feee 	bl	8003cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f1c:	f002 f834 	bl	8005f88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f20:	2301      	movs	r3, #1
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	e000ed04 	.word	0xe000ed04

08003f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08e      	sub	sp, #56	; 0x38
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <xQueueGenericCreateStatic+0x28>
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f56:	e7fe      	b.n	8003f56 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <xQueueGenericCreateStatic+0x42>
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	e7fe      	b.n	8003f70 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <xQueueGenericCreateStatic+0x4e>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <xQueueGenericCreateStatic+0x52>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <xQueueGenericCreateStatic+0x54>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <xQueueGenericCreateStatic+0x6c>
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	e7fe      	b.n	8003f9a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <xQueueGenericCreateStatic+0x78>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <xQueueGenericCreateStatic+0x7c>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <xQueueGenericCreateStatic+0x7e>
 8003fac:	2300      	movs	r3, #0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <xQueueGenericCreateStatic+0x96>
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fc6:	2348      	movs	r3, #72	; 0x48
 8003fc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b48      	cmp	r3, #72	; 0x48
 8003fce:	d009      	beq.n	8003fe4 <xQueueGenericCreateStatic+0xb4>
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	e7fe      	b.n	8003fe2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f842 	bl	800408e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800400c:	4618      	mov	r0, r3
 800400e:	3730      	adds	r7, #48	; 0x30
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	4613      	mov	r3, r2
 8004020:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <xQueueGenericCreate+0x28>
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e7fe      	b.n	800403a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e004      	b.n	8004052 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	fb02 f303 	mul.w	r3, r2, r3
 8004050:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3348      	adds	r3, #72	; 0x48
 8004056:	4618      	mov	r0, r3
 8004058:	f002 f882 	bl	8006160 <pvPortMalloc>
 800405c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00f      	beq.n	8004084 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	3348      	adds	r3, #72	; 0x48
 8004068:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004072:	79fa      	ldrb	r2, [r7, #7]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f805 	bl	800408e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004084:	69bb      	ldr	r3, [r7, #24]
	}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e002      	b.n	80040b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040bc:	2101      	movs	r1, #1
 80040be:	69b8      	ldr	r0, [r7, #24]
 80040c0:	f7ff fece 	bl	8003e60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00e      	beq.n	80040f8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80040ec:	2300      	movs	r3, #0
 80040ee:	2200      	movs	r2, #0
 80040f0:	2100      	movs	r1, #0
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f838 	bl	8004168 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800410a:	2301      	movs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	461a      	mov	r2, r3
 8004116:	6939      	ldr	r1, [r7, #16]
 8004118:	6978      	ldr	r0, [r7, #20]
 800411a:	f7ff ff7b 	bl	8004014 <xQueueGenericCreate>
 800411e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff ffd3 	bl	80040cc <prvInitialiseMutex>

		return pxNewQueue;
 8004126:	68fb      	ldr	r3, [r7, #12]
	}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	6939      	ldr	r1, [r7, #16]
 800414e:	6978      	ldr	r0, [r7, #20]
 8004150:	f7ff feee 	bl	8003f30 <xQueueGenericCreateStatic>
 8004154:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff ffb8 	bl	80040cc <prvInitialiseMutex>

		return pxNewQueue;
 800415c:	68fb      	ldr	r3, [r7, #12]
	}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08e      	sub	sp, #56	; 0x38
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004176:	2300      	movs	r3, #0
 8004178:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <xQueueGenericSend+0x30>
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
 8004196:	e7fe      	b.n	8004196 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSend+0x3e>
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <xQueueGenericSend+0x42>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueGenericSend+0x44>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <xQueueGenericSend+0x5c>
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	e7fe      	b.n	80041c2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d103      	bne.n	80041d2 <xQueueGenericSend+0x6a>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <xQueueGenericSend+0x6e>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <xQueueGenericSend+0x70>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <xQueueGenericSend+0x88>
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	e7fe      	b.n	80041ee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041f0:	f001 fb36 	bl	8005860 <xTaskGetSchedulerState>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <xQueueGenericSend+0x98>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <xQueueGenericSend+0x9c>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <xQueueGenericSend+0x9e>
 8004204:	2300      	movs	r3, #0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <xQueueGenericSend+0xb6>
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	e7fe      	b.n	800421c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800421e:	f001 fe85 	bl	8005f2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <xQueueGenericSend+0xcc>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d129      	bne.n	8004288 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800423a:	f000 fc26 	bl	8004a8a <prvCopyDataToQueue>
 800423e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	3324      	adds	r3, #36	; 0x24
 800424c:	4618      	mov	r0, r3
 800424e:	f001 f94b 	bl	80054e8 <xTaskRemoveFromEventList>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004258:	4b3f      	ldr	r3, [pc, #252]	; (8004358 <xQueueGenericSend+0x1f0>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	e00a      	b.n	8004280 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004270:	4b39      	ldr	r3, [pc, #228]	; (8004358 <xQueueGenericSend+0x1f0>)
 8004272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004280:	f001 fe82 	bl	8005f88 <vPortExitCritical>
				return pdPASS;
 8004284:	2301      	movs	r3, #1
 8004286:	e063      	b.n	8004350 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800428e:	f001 fe7b 	bl	8005f88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004292:	2300      	movs	r3, #0
 8004294:	e05c      	b.n	8004350 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 f983 	bl	80055ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042aa:	f001 fe6d 	bl	8005f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ae:	f000 ff15 	bl	80050dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042b2:	f001 fe3b 	bl	8005f2c <vPortEnterCritical>
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d103      	bne.n	80042cc <xQueueGenericSend+0x164>
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d2:	b25b      	sxtb	r3, r3
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d103      	bne.n	80042e2 <xQueueGenericSend+0x17a>
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e2:	f001 fe51 	bl	8005f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042e6:	1d3a      	adds	r2, r7, #4
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f972 	bl	80055d8 <xTaskCheckForTimeOut>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d124      	bne.n	8004344 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fc:	f000 fcbd 	bl	8004c7a <prvIsQueueFull>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d018      	beq.n	8004338 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	3310      	adds	r3, #16
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f8c6 	bl	80054a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004316:	f000 fc48 	bl	8004baa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800431a:	f000 feed 	bl	80050f8 <xTaskResumeAll>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f af7c 	bne.w	800421e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <xQueueGenericSend+0x1f0>)
 8004328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	e772      	b.n	800421e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800433a:	f000 fc36 	bl	8004baa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800433e:	f000 fedb 	bl	80050f8 <xTaskResumeAll>
 8004342:	e76c      	b.n	800421e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004346:	f000 fc30 	bl	8004baa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800434a:	f000 fed5 	bl	80050f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800434e:	2300      	movs	r3, #0
		}
	}
}
 8004350:	4618      	mov	r0, r3
 8004352:	3738      	adds	r7, #56	; 0x38
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <xQueueGenericSendFromISR+0x2c>
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	e7fe      	b.n	8004386 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <xQueueGenericSendFromISR+0x3a>
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <xQueueGenericSendFromISR+0x3e>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <xQueueGenericSendFromISR+0x40>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <xQueueGenericSendFromISR+0x58>
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	623b      	str	r3, [r7, #32]
 80043b2:	e7fe      	b.n	80043b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d103      	bne.n	80043c2 <xQueueGenericSendFromISR+0x66>
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <xQueueGenericSendFromISR+0x6a>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <xQueueGenericSendFromISR+0x6c>
 80043c6:	2300      	movs	r3, #0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <xQueueGenericSendFromISR+0x84>
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e7fe      	b.n	80043de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043e0:	f001 fe80 	bl	80060e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043e4:	f3ef 8211 	mrs	r2, BASEPRI
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61ba      	str	r2, [r7, #24]
 80043fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	429a      	cmp	r2, r3
 800440a:	d302      	bcc.n	8004412 <xQueueGenericSendFromISR+0xb6>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d12c      	bne.n	800446c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004422:	f000 fb32 	bl	8004a8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004426:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d112      	bne.n	8004456 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d016      	beq.n	8004466 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	3324      	adds	r3, #36	; 0x24
 800443c:	4618      	mov	r0, r3
 800443e:	f001 f853 	bl	80054e8 <xTaskRemoveFromEventList>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00e      	beq.n	8004466 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e007      	b.n	8004466 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800445a:	3301      	adds	r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	b25a      	sxtb	r2, r3
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004466:	2301      	movs	r3, #1
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800446a:	e001      	b.n	8004470 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800446c:	2300      	movs	r3, #0
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800447c:	4618      	mov	r0, r3
 800447e:	3738      	adds	r7, #56	; 0x38
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08e      	sub	sp, #56	; 0x38
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <xQueueGiveFromISR+0x28>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	e7fe      	b.n	80044aa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <xQueueGiveFromISR+0x44>
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	e7fe      	b.n	80044c6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <xQueueGiveFromISR+0x54>
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <xQueueGiveFromISR+0x58>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <xQueueGiveFromISR+0x5a>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <xQueueGiveFromISR+0x72>
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	e7fe      	b.n	80044f4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044f6:	f001 fdf5 	bl	80060e4 <vPortValidateInterruptPriority>
	__asm volatile
 80044fa:	f3ef 8211 	mrs	r2, BASEPRI
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	617a      	str	r2, [r7, #20]
 8004510:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004512:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004522:	429a      	cmp	r2, r3
 8004524:	d22b      	bcs.n	800457e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800452c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d112      	bne.n	8004568 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	3324      	adds	r3, #36	; 0x24
 800454e:	4618      	mov	r0, r3
 8004550:	f000 ffca 	bl	80054e8 <xTaskRemoveFromEventList>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e007      	b.n	8004578 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800456c:	3301      	adds	r3, #1
 800456e:	b2db      	uxtb	r3, r3
 8004570:	b25a      	sxtb	r2, r3
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004578:	2301      	movs	r3, #1
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
 800457c:	e001      	b.n	8004582 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800457e:	2300      	movs	r3, #0
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800458c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800458e:	4618      	mov	r0, r3
 8004590:	3738      	adds	r7, #56	; 0x38
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <xQueueReceive+0x2e>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	e7fe      	b.n	80045c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d103      	bne.n	80045d4 <xQueueReceive+0x3c>
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <xQueueReceive+0x40>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <xQueueReceive+0x42>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <xQueueReceive+0x5a>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	e7fe      	b.n	80045f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045f2:	f001 f935 	bl	8005860 <xTaskGetSchedulerState>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <xQueueReceive+0x6a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <xQueueReceive+0x6e>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <xQueueReceive+0x70>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <xQueueReceive+0x88>
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	e7fe      	b.n	800461e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004620:	f001 fc84 	bl	8005f2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01f      	beq.n	8004670 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004634:	f000 fa93 	bl	8004b5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	1e5a      	subs	r2, r3, #1
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00f      	beq.n	8004668 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	3310      	adds	r3, #16
 800464c:	4618      	mov	r0, r3
 800464e:	f000 ff4b 	bl	80054e8 <xTaskRemoveFromEventList>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004658:	4b3c      	ldr	r3, [pc, #240]	; (800474c <xQueueReceive+0x1b4>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004668:	f001 fc8e 	bl	8005f88 <vPortExitCritical>
				return pdPASS;
 800466c:	2301      	movs	r3, #1
 800466e:	e069      	b.n	8004744 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004676:	f001 fc87 	bl	8005f88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800467a:	2300      	movs	r3, #0
 800467c:	e062      	b.n	8004744 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004684:	f107 0310 	add.w	r3, r7, #16
 8004688:	4618      	mov	r0, r3
 800468a:	f000 ff8f 	bl	80055ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800468e:	2301      	movs	r3, #1
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004692:	f001 fc79 	bl	8005f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004696:	f000 fd21 	bl	80050dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800469a:	f001 fc47 	bl	8005f2c <vPortEnterCritical>
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a4:	b25b      	sxtb	r3, r3
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d103      	bne.n	80046b4 <xQueueReceive+0x11c>
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ba:	b25b      	sxtb	r3, r3
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d103      	bne.n	80046ca <xQueueReceive+0x132>
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ca:	f001 fc5d 	bl	8005f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ce:	1d3a      	adds	r2, r7, #4
 80046d0:	f107 0310 	add.w	r3, r7, #16
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 ff7e 	bl	80055d8 <xTaskCheckForTimeOut>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d123      	bne.n	800472a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e4:	f000 fab3 	bl	8004c4e <prvIsQueueEmpty>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d017      	beq.n	800471e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	3324      	adds	r3, #36	; 0x24
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fed2 	bl	80054a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046fe:	f000 fa54 	bl	8004baa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004702:	f000 fcf9 	bl	80050f8 <xTaskResumeAll>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d189      	bne.n	8004620 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <xQueueReceive+0x1b4>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	e780      	b.n	8004620 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800471e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004720:	f000 fa43 	bl	8004baa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004724:	f000 fce8 	bl	80050f8 <xTaskResumeAll>
 8004728:	e77a      	b.n	8004620 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800472a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472c:	f000 fa3d 	bl	8004baa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004730:	f000 fce2 	bl	80050f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004736:	f000 fa8a 	bl	8004c4e <prvIsQueueEmpty>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	f43f af6f 	beq.w	8004620 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004742:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004744:	4618      	mov	r0, r3
 8004746:	3730      	adds	r7, #48	; 0x30
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	; 0x38
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004762:	2300      	movs	r3, #0
 8004764:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <xQueueSemaphoreTake+0x30>
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	e7fe      	b.n	800477e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <xQueueSemaphoreTake+0x4c>
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e7fe      	b.n	800479a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800479c:	f001 f860 	bl	8005860 <xTaskGetSchedulerState>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <xQueueSemaphoreTake+0x5c>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <xQueueSemaphoreTake+0x60>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <xQueueSemaphoreTake+0x62>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <xQueueSemaphoreTake+0x7a>
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	e7fe      	b.n	80047c8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80047ca:	f001 fbaf 	bl	8005f2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d024      	beq.n	8004824 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	1e5a      	subs	r2, r3, #1
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80047ea:	f001 f9ff 	bl	8005bec <pvTaskIncrementMutexHeldCount>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00f      	beq.n	800481c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	3310      	adds	r3, #16
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fe71 	bl	80054e8 <xTaskRemoveFromEventList>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800480c:	4b53      	ldr	r3, [pc, #332]	; (800495c <xQueueSemaphoreTake+0x20c>)
 800480e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800481c:	f001 fbb4 	bl	8005f88 <vPortExitCritical>
				return pdPASS;
 8004820:	2301      	movs	r3, #1
 8004822:	e096      	b.n	8004952 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d110      	bne.n	800484c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <xQueueSemaphoreTake+0xf4>
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e7fe      	b.n	8004842 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004844:	f001 fba0 	bl	8005f88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004848:	2300      	movs	r3, #0
 800484a:	e082      	b.n	8004952 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004852:	f107 030c 	add.w	r3, r7, #12
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fea8 	bl	80055ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800485c:	2301      	movs	r3, #1
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004860:	f001 fb92 	bl	8005f88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004864:	f000 fc3a 	bl	80050dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004868:	f001 fb60 	bl	8005f2c <vPortEnterCritical>
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004872:	b25b      	sxtb	r3, r3
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d103      	bne.n	8004882 <xQueueSemaphoreTake+0x132>
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004888:	b25b      	sxtb	r3, r3
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d103      	bne.n	8004898 <xQueueSemaphoreTake+0x148>
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004898:	f001 fb76 	bl	8005f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800489c:	463a      	mov	r2, r7
 800489e:	f107 030c 	add.w	r3, r7, #12
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fe97 	bl	80055d8 <xTaskCheckForTimeOut>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d132      	bne.n	8004916 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048b2:	f000 f9cc 	bl	8004c4e <prvIsQueueEmpty>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d026      	beq.n	800490a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d109      	bne.n	80048d8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80048c4:	f001 fb32 	bl	8005f2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 ffe5 	bl	800589c <xTaskPriorityInherit>
 80048d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80048d4:	f001 fb58 	bl	8005f88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	3324      	adds	r3, #36	; 0x24
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fddd 	bl	80054a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048e8:	f000 f95f 	bl	8004baa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048ec:	f000 fc04 	bl	80050f8 <xTaskResumeAll>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f47f af69 	bne.w	80047ca <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80048f8:	4b18      	ldr	r3, [pc, #96]	; (800495c <xQueueSemaphoreTake+0x20c>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	e75f      	b.n	80047ca <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800490a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800490c:	f000 f94d 	bl	8004baa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004910:	f000 fbf2 	bl	80050f8 <xTaskResumeAll>
 8004914:	e759      	b.n	80047ca <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004918:	f000 f947 	bl	8004baa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800491c:	f000 fbec 	bl	80050f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004922:	f000 f994 	bl	8004c4e <prvIsQueueEmpty>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	f43f af4e 	beq.w	80047ca <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004934:	f001 fafa 	bl	8005f2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800493a:	f000 f88e 	bl	8004a5a <prvGetDisinheritPriorityAfterTimeout>
 800493e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004946:	4618      	mov	r0, r3
 8004948:	f001 f8b2 	bl	8005ab0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800494c:	f001 fb1c 	bl	8005f88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004952:	4618      	mov	r0, r3
 8004954:	3738      	adds	r7, #56	; 0x38
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	e000ed04 	.word	0xe000ed04

08004960 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08e      	sub	sp, #56	; 0x38
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <xQueueReceiveFromISR+0x2a>
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	623b      	str	r3, [r7, #32]
 8004988:	e7fe      	b.n	8004988 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <xQueueReceiveFromISR+0x38>
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <xQueueReceiveFromISR+0x3c>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <xQueueReceiveFromISR+0x3e>
 800499c:	2300      	movs	r3, #0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <xQueueReceiveFromISR+0x56>
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	e7fe      	b.n	80049b4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049b6:	f001 fb95 	bl	80060e4 <vPortValidateInterruptPriority>
	__asm volatile
 80049ba:	f3ef 8211 	mrs	r2, BASEPRI
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	61ba      	str	r2, [r7, #24]
 80049d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80049d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02f      	beq.n	8004a42 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f0:	f000 f8b5 	bl	8004b5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	1e5a      	subs	r2, r3, #1
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80049fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d112      	bne.n	8004a2c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	3310      	adds	r3, #16
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fd68 	bl	80054e8 <xTaskRemoveFromEventList>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00e      	beq.n	8004a3c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e007      	b.n	8004a3c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a30:	3301      	adds	r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	b25a      	sxtb	r2, r3
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a40:	e001      	b.n	8004a46 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3738      	adds	r7, #56	; 0x38
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1c3 0307 	rsb	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e001      	b.n	8004a7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
	}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10d      	bne.n	8004ac4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d14d      	bne.n	8004b4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 ff77 	bl	80059a8 <xTaskPriorityDisinherit>
 8004aba:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	e043      	b.n	8004b4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d119      	bne.n	8004afe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6898      	ldr	r0, [r3, #8]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	f00a fc4c 	bl	800f372 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	441a      	add	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d32b      	bcc.n	8004b4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	e026      	b.n	8004b4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68d8      	ldr	r0, [r3, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	461a      	mov	r2, r3
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	f00a fc32 	bl	800f372 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	425b      	negs	r3, r3
 8004b18:	441a      	add	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d207      	bcs.n	8004b3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	425b      	negs	r3, r3
 8004b34:	441a      	add	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d105      	bne.n	8004b4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b54:	697b      	ldr	r3, [r7, #20]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d018      	beq.n	8004ba2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	441a      	add	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d303      	bcc.n	8004b92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68d9      	ldr	r1, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6838      	ldr	r0, [r7, #0]
 8004b9e:	f00a fbe8 	bl	800f372 <memcpy>
	}
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bb2:	f001 f9bb 	bl	8005f2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bbe:	e011      	b.n	8004be4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d012      	beq.n	8004bee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3324      	adds	r3, #36	; 0x24
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fc8b 	bl	80054e8 <xTaskRemoveFromEventList>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bd8:	f000 fd5e 	bl	8005698 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	dce9      	bgt.n	8004bc0 <prvUnlockQueue+0x16>
 8004bec:	e000      	b.n	8004bf0 <prvUnlockQueue+0x46>
					break;
 8004bee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	22ff      	movs	r2, #255	; 0xff
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bf8:	f001 f9c6 	bl	8005f88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bfc:	f001 f996 	bl	8005f2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c08:	e011      	b.n	8004c2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d012      	beq.n	8004c38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3310      	adds	r3, #16
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fc66 	bl	80054e8 <xTaskRemoveFromEventList>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c22:	f000 fd39 	bl	8005698 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c26:	7bbb      	ldrb	r3, [r7, #14]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	dce9      	bgt.n	8004c0a <prvUnlockQueue+0x60>
 8004c36:	e000      	b.n	8004c3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	22ff      	movs	r2, #255	; 0xff
 8004c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c42:	f001 f9a1 	bl	8005f88 <vPortExitCritical>
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c56:	f001 f969 	bl	8005f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c62:	2301      	movs	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e001      	b.n	8004c6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c6c:	f001 f98c 	bl	8005f88 <vPortExitCritical>

	return xReturn;
 8004c70:	68fb      	ldr	r3, [r7, #12]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c82:	f001 f953 	bl	8005f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d102      	bne.n	8004c98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c92:	2301      	movs	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e001      	b.n	8004c9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c9c:	f001 f974 	bl	8005f88 <vPortExitCritical>

	return xReturn;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b08e      	sub	sp, #56	; 0x38
 8004cae:	af04      	add	r7, sp, #16
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <xTaskCreateStatic+0x28>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	623b      	str	r3, [r7, #32]
 8004cd0:	e7fe      	b.n	8004cd0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <xTaskCreateStatic+0x42>
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	e7fe      	b.n	8004cea <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cec:	2354      	movs	r3, #84	; 0x54
 8004cee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b54      	cmp	r3, #84	; 0x54
 8004cf4:	d009      	beq.n	8004d0a <xTaskCreateStatic+0x60>
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	61bb      	str	r3, [r7, #24]
 8004d08:	e7fe      	b.n	8004d08 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01e      	beq.n	8004d4e <xTaskCreateStatic+0xa4>
 8004d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d28:	2300      	movs	r3, #0
 8004d2a:	9303      	str	r3, [sp, #12]
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	9302      	str	r3, [sp, #8]
 8004d30:	f107 0314 	add.w	r3, r7, #20
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f850 	bl	8004de6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d48:	f000 f8cc 	bl	8004ee4 <prvAddNewTaskToReadyList>
 8004d4c:	e001      	b.n	8004d52 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d52:	697b      	ldr	r3, [r7, #20]
	}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3728      	adds	r7, #40	; 0x28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08c      	sub	sp, #48	; 0x30
 8004d60:	af04      	add	r7, sp, #16
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f9f5 	bl	8006160 <pvPortMalloc>
 8004d76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00e      	beq.n	8004d9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d7e:	2054      	movs	r0, #84	; 0x54
 8004d80:	f001 f9ee 	bl	8006160 <pvPortMalloc>
 8004d84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
 8004d92:	e005      	b.n	8004da0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d94:	6978      	ldr	r0, [r7, #20]
 8004d96:	f001 faa5 	bl	80062e4 <vPortFree>
 8004d9a:	e001      	b.n	8004da0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d017      	beq.n	8004dd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	2300      	movs	r3, #0
 8004db2:	9303      	str	r3, [sp, #12]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	9302      	str	r3, [sp, #8]
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f80e 	bl	8004de6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dca:	69f8      	ldr	r0, [r7, #28]
 8004dcc:	f000 f88a 	bl	8004ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	e002      	b.n	8004ddc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
	}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b088      	sub	sp, #32
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <prvInitialiseNewTask+0x46>
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	e7fe      	b.n	8004e2a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e012      	b.n	8004e58 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	7819      	ldrb	r1, [r3, #0]
 8004e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	3334      	adds	r3, #52	; 0x34
 8004e42:	460a      	mov	r2, r1
 8004e44:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d9e9      	bls.n	8004e32 <prvInitialiseNewTask+0x4c>
 8004e5e:	e000      	b.n	8004e62 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004e60:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d901      	bls.n	8004e74 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e70:	2306      	movs	r3, #6
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e7e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	2200      	movs	r2, #0
 8004e84:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe ff54 	bl	8003d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	3318      	adds	r3, #24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe ff4f 	bl	8003d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	f1c3 0207 	rsb	r2, r3, #7
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	69b8      	ldr	r0, [r7, #24]
 8004ec4:	f000 ff0c 	bl	8005ce0 <pxPortInitialiseStack>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eda:	bf00      	nop
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004eec:	f001 f81e 	bl	8005f2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ef0:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <prvAddNewTaskToReadyList+0xb8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4a29      	ldr	r2, [pc, #164]	; (8004f9c <prvAddNewTaskToReadyList+0xb8>)
 8004ef8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004efa:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <prvAddNewTaskToReadyList+0xbc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f02:	4a27      	ldr	r2, [pc, #156]	; (8004fa0 <prvAddNewTaskToReadyList+0xbc>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f08:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <prvAddNewTaskToReadyList+0xb8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d110      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f10:	f000 fbe6 	bl	80056e0 <prvInitialiseTaskLists>
 8004f14:	e00d      	b.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f16:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <prvAddNewTaskToReadyList+0xc0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f1e:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <prvAddNewTaskToReadyList+0xbc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d802      	bhi.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f2c:	4a1c      	ldr	r2, [pc, #112]	; (8004fa0 <prvAddNewTaskToReadyList+0xbc>)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f32:	4b1d      	ldr	r3, [pc, #116]	; (8004fa8 <prvAddNewTaskToReadyList+0xc4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3301      	adds	r3, #1
 8004f38:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <prvAddNewTaskToReadyList+0xc4>)
 8004f3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	2201      	movs	r2, #1
 8004f42:	409a      	lsls	r2, r3
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <prvAddNewTaskToReadyList+0xc8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	4a18      	ldr	r2, [pc, #96]	; (8004fac <prvAddNewTaskToReadyList+0xc8>)
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <prvAddNewTaskToReadyList+0xcc>)
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3304      	adds	r3, #4
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f7fe fef4 	bl	8003d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f6a:	f001 f80d 	bl	8005f88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <prvAddNewTaskToReadyList+0xc0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00e      	beq.n	8004f94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <prvAddNewTaskToReadyList+0xbc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d207      	bcs.n	8004f94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <prvAddNewTaskToReadyList+0xd0>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	200003ec 	.word	0x200003ec
 8004fa0:	200002ec 	.word	0x200002ec
 8004fa4:	200003f8 	.word	0x200003f8
 8004fa8:	20000408 	.word	0x20000408
 8004fac:	200003f4 	.word	0x200003f4
 8004fb0:	200002f0 	.word	0x200002f0
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <vTaskDelay+0x60>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <vTaskDelay+0x2e>
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	e7fe      	b.n	8004fe4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004fe6:	f000 f879 	bl	80050dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fea:	2100      	movs	r1, #0
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fe11 	bl	8005c14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ff2:	f000 f881 	bl	80050f8 <xTaskResumeAll>
 8004ff6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d107      	bne.n	800500e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004ffe:	4b07      	ldr	r3, [pc, #28]	; (800501c <vTaskDelay+0x64>)
 8005000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000414 	.word	0x20000414
 800501c:	e000ed04 	.word	0xe000ed04

08005020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800502a:	2300      	movs	r3, #0
 800502c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800502e:	463a      	mov	r2, r7
 8005030:	1d39      	adds	r1, r7, #4
 8005032:	f107 0308 	add.w	r3, r7, #8
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb fa9a 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	9202      	str	r2, [sp, #8]
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	2300      	movs	r3, #0
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	2300      	movs	r3, #0
 800504c:	460a      	mov	r2, r1
 800504e:	491d      	ldr	r1, [pc, #116]	; (80050c4 <vTaskStartScheduler+0xa4>)
 8005050:	481d      	ldr	r0, [pc, #116]	; (80050c8 <vTaskStartScheduler+0xa8>)
 8005052:	f7ff fe2a 	bl	8004caa <xTaskCreateStatic>
 8005056:	4602      	mov	r2, r0
 8005058:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <vTaskStartScheduler+0xac>)
 800505a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800505c:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <vTaskStartScheduler+0xac>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005064:	2301      	movs	r3, #1
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e001      	b.n	800506e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d115      	bne.n	80050a0 <vTaskStartScheduler+0x80>
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005086:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <vTaskStartScheduler+0xb0>)
 8005088:	f04f 32ff 	mov.w	r2, #4294967295
 800508c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <vTaskStartScheduler+0xb4>)
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005094:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <vTaskStartScheduler+0xb8>)
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800509a:	f000 fea9 	bl	8005df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800509e:	e00d      	b.n	80050bc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d109      	bne.n	80050bc <vTaskStartScheduler+0x9c>
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e7fe      	b.n	80050ba <vTaskStartScheduler+0x9a>
}
 80050bc:	bf00      	nop
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	08010218 	.word	0x08010218
 80050c8:	080056b1 	.word	0x080056b1
 80050cc:	20000410 	.word	0x20000410
 80050d0:	2000040c 	.word	0x2000040c
 80050d4:	200003f8 	.word	0x200003f8
 80050d8:	200003f0 	.word	0x200003f0

080050dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80050e0:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <vTaskSuspendAll+0x18>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4a03      	ldr	r2, [pc, #12]	; (80050f4 <vTaskSuspendAll+0x18>)
 80050e8:	6013      	str	r3, [r2, #0]
}
 80050ea:	bf00      	nop
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	20000414 	.word	0x20000414

080050f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005106:	4b41      	ldr	r3, [pc, #260]	; (800520c <xTaskResumeAll+0x114>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <xTaskResumeAll+0x2a>
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	e7fe      	b.n	8005120 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005122:	f000 ff03 	bl	8005f2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005126:	4b39      	ldr	r3, [pc, #228]	; (800520c <xTaskResumeAll+0x114>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3b01      	subs	r3, #1
 800512c:	4a37      	ldr	r2, [pc, #220]	; (800520c <xTaskResumeAll+0x114>)
 800512e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005130:	4b36      	ldr	r3, [pc, #216]	; (800520c <xTaskResumeAll+0x114>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d161      	bne.n	80051fc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005138:	4b35      	ldr	r3, [pc, #212]	; (8005210 <xTaskResumeAll+0x118>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d05d      	beq.n	80051fc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005140:	e02e      	b.n	80051a0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005142:	4b34      	ldr	r3, [pc, #208]	; (8005214 <xTaskResumeAll+0x11c>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3318      	adds	r3, #24
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fe5c 	bl	8003e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3304      	adds	r3, #4
 8005158:	4618      	mov	r0, r3
 800515a:	f7fe fe57 	bl	8003e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	2201      	movs	r2, #1
 8005164:	409a      	lsls	r2, r3
 8005166:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <xTaskResumeAll+0x120>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4313      	orrs	r3, r2
 800516c:	4a2a      	ldr	r2, [pc, #168]	; (8005218 <xTaskResumeAll+0x120>)
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4a27      	ldr	r2, [pc, #156]	; (800521c <xTaskResumeAll+0x124>)
 800517e:	441a      	add	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f7fe fde3 	bl	8003d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	4b23      	ldr	r3, [pc, #140]	; (8005220 <xTaskResumeAll+0x128>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800519a:	4b22      	ldr	r3, [pc, #136]	; (8005224 <xTaskResumeAll+0x12c>)
 800519c:	2201      	movs	r2, #1
 800519e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051a0:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <xTaskResumeAll+0x11c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1cc      	bne.n	8005142 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051ae:	f000 fb31 	bl	8005814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051b2:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <xTaskResumeAll+0x130>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d010      	beq.n	80051e0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051be:	f000 f859 	bl	8005274 <xTaskIncrementTick>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80051c8:	4b16      	ldr	r3, [pc, #88]	; (8005224 <xTaskResumeAll+0x12c>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f1      	bne.n	80051be <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <xTaskResumeAll+0x130>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051e0:	4b10      	ldr	r3, [pc, #64]	; (8005224 <xTaskResumeAll+0x12c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051ec:	4b0f      	ldr	r3, [pc, #60]	; (800522c <xTaskResumeAll+0x134>)
 80051ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051fc:	f000 fec4 	bl	8005f88 <vPortExitCritical>

	return xAlreadyYielded;
 8005200:	68bb      	ldr	r3, [r7, #8]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000414 	.word	0x20000414
 8005210:	200003ec 	.word	0x200003ec
 8005214:	200003ac 	.word	0x200003ac
 8005218:	200003f4 	.word	0x200003f4
 800521c:	200002f0 	.word	0x200002f0
 8005220:	200002ec 	.word	0x200002ec
 8005224:	20000400 	.word	0x20000400
 8005228:	200003fc 	.word	0x200003fc
 800522c:	e000ed04 	.word	0xe000ed04

08005230 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <xTaskGetTickCount+0x1c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800523c:	687b      	ldr	r3, [r7, #4]
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	200003f0 	.word	0x200003f0

08005250 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005256:	f000 ff45 	bl	80060e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800525a:	2300      	movs	r3, #0
 800525c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <xTaskGetTickCountFromISR+0x20>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005264:	683b      	ldr	r3, [r7, #0]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	200003f0 	.word	0x200003f0

08005274 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800527e:	4b50      	ldr	r3, [pc, #320]	; (80053c0 <xTaskIncrementTick+0x14c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f040 808c 	bne.w	80053a0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005288:	4b4e      	ldr	r3, [pc, #312]	; (80053c4 <xTaskIncrementTick+0x150>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005290:	4a4c      	ldr	r2, [pc, #304]	; (80053c4 <xTaskIncrementTick+0x150>)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11f      	bne.n	80052dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800529c:	4b4a      	ldr	r3, [pc, #296]	; (80053c8 <xTaskIncrementTick+0x154>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <xTaskIncrementTick+0x46>
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	e7fe      	b.n	80052b8 <xTaskIncrementTick+0x44>
 80052ba:	4b43      	ldr	r3, [pc, #268]	; (80053c8 <xTaskIncrementTick+0x154>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	4b42      	ldr	r3, [pc, #264]	; (80053cc <xTaskIncrementTick+0x158>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a40      	ldr	r2, [pc, #256]	; (80053c8 <xTaskIncrementTick+0x154>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4a40      	ldr	r2, [pc, #256]	; (80053cc <xTaskIncrementTick+0x158>)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	4b40      	ldr	r3, [pc, #256]	; (80053d0 <xTaskIncrementTick+0x15c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a3e      	ldr	r2, [pc, #248]	; (80053d0 <xTaskIncrementTick+0x15c>)
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	f000 fa9c 	bl	8005814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052dc:	4b3d      	ldr	r3, [pc, #244]	; (80053d4 <xTaskIncrementTick+0x160>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d34d      	bcc.n	8005382 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052e6:	4b38      	ldr	r3, [pc, #224]	; (80053c8 <xTaskIncrementTick+0x154>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <xTaskIncrementTick+0x80>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <xTaskIncrementTick+0x82>
 80052f4:	2300      	movs	r3, #0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fa:	4b36      	ldr	r3, [pc, #216]	; (80053d4 <xTaskIncrementTick+0x160>)
 80052fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005300:	601a      	str	r2, [r3, #0]
					break;
 8005302:	e03e      	b.n	8005382 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005304:	4b30      	ldr	r3, [pc, #192]	; (80053c8 <xTaskIncrementTick+0x154>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d203      	bcs.n	8005324 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800531c:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <xTaskIncrementTick+0x160>)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6013      	str	r3, [r2, #0]
						break;
 8005322:	e02e      	b.n	8005382 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	3304      	adds	r3, #4
 8005328:	4618      	mov	r0, r3
 800532a:	f7fe fd6f 	bl	8003e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	3318      	adds	r3, #24
 800533a:	4618      	mov	r0, r3
 800533c:	f7fe fd66 	bl	8003e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	2201      	movs	r2, #1
 8005346:	409a      	lsls	r2, r3
 8005348:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <xTaskIncrementTick+0x164>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4313      	orrs	r3, r2
 800534e:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <xTaskIncrementTick+0x164>)
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <xTaskIncrementTick+0x168>)
 8005360:	441a      	add	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	3304      	adds	r3, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4610      	mov	r0, r2
 800536a:	f7fe fcf2 	bl	8003d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005372:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <xTaskIncrementTick+0x16c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	429a      	cmp	r2, r3
 800537a:	d3b4      	bcc.n	80052e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800537c:	2301      	movs	r3, #1
 800537e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005380:	e7b1      	b.n	80052e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005382:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <xTaskIncrementTick+0x16c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	4914      	ldr	r1, [pc, #80]	; (80053dc <xTaskIncrementTick+0x168>)
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d907      	bls.n	80053aa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800539a:	2301      	movs	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e004      	b.n	80053aa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053a0:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <xTaskIncrementTick+0x170>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	4a0f      	ldr	r2, [pc, #60]	; (80053e4 <xTaskIncrementTick+0x170>)
 80053a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053aa:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <xTaskIncrementTick+0x174>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80053b2:	2301      	movs	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053b6:	697b      	ldr	r3, [r7, #20]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000414 	.word	0x20000414
 80053c4:	200003f0 	.word	0x200003f0
 80053c8:	200003a4 	.word	0x200003a4
 80053cc:	200003a8 	.word	0x200003a8
 80053d0:	20000404 	.word	0x20000404
 80053d4:	2000040c 	.word	0x2000040c
 80053d8:	200003f4 	.word	0x200003f4
 80053dc:	200002f0 	.word	0x200002f0
 80053e0:	200002ec 	.word	0x200002ec
 80053e4:	200003fc 	.word	0x200003fc
 80053e8:	20000400 	.word	0x20000400

080053ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <vTaskSwitchContext+0xa0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053fa:	4b25      	ldr	r3, [pc, #148]	; (8005490 <vTaskSwitchContext+0xa4>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005400:	e03e      	b.n	8005480 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005402:	4b23      	ldr	r3, [pc, #140]	; (8005490 <vTaskSwitchContext+0xa4>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005408:	4b22      	ldr	r3, [pc, #136]	; (8005494 <vTaskSwitchContext+0xa8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	fab3 f383 	clz	r3, r3
 8005414:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005416:	7afb      	ldrb	r3, [r7, #11]
 8005418:	f1c3 031f 	rsb	r3, r3, #31
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	491e      	ldr	r1, [pc, #120]	; (8005498 <vTaskSwitchContext+0xac>)
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	607b      	str	r3, [r7, #4]
 8005444:	e7fe      	b.n	8005444 <vTaskSwitchContext+0x58>
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4a11      	ldr	r2, [pc, #68]	; (8005498 <vTaskSwitchContext+0xac>)
 8005452:	4413      	add	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	605a      	str	r2, [r3, #4]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3308      	adds	r3, #8
 8005468:	429a      	cmp	r2, r3
 800546a:	d104      	bne.n	8005476 <vTaskSwitchContext+0x8a>
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4a07      	ldr	r2, [pc, #28]	; (800549c <vTaskSwitchContext+0xb0>)
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000414 	.word	0x20000414
 8005490:	20000400 	.word	0x20000400
 8005494:	200003f4 	.word	0x200003f4
 8005498:	200002f0 	.word	0x200002f0
 800549c:	200002ec 	.word	0x200002ec

080054a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <vTaskPlaceOnEventList+0x24>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e7fe      	b.n	80054c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054c4:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <vTaskPlaceOnEventList+0x44>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3318      	adds	r3, #24
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fe fc64 	bl	8003d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054d2:	2101      	movs	r1, #1
 80054d4:	6838      	ldr	r0, [r7, #0]
 80054d6:	f000 fb9d 	bl	8005c14 <prvAddCurrentTaskToDelayedList>
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	200002ec 	.word	0x200002ec

080054e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <xTaskRemoveFromEventList+0x2a>
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	e7fe      	b.n	8005510 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3318      	adds	r3, #24
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe fc78 	bl	8003e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <xTaskRemoveFromEventList+0xac>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11c      	bne.n	800555e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	3304      	adds	r3, #4
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe fc6f 	bl	8003e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	2201      	movs	r2, #1
 8005534:	409a      	lsls	r2, r3
 8005536:	4b18      	ldr	r3, [pc, #96]	; (8005598 <xTaskRemoveFromEventList+0xb0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4313      	orrs	r3, r2
 800553c:	4a16      	ldr	r2, [pc, #88]	; (8005598 <xTaskRemoveFromEventList+0xb0>)
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4a13      	ldr	r2, [pc, #76]	; (800559c <xTaskRemoveFromEventList+0xb4>)
 800554e:	441a      	add	r2, r3
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	3304      	adds	r3, #4
 8005554:	4619      	mov	r1, r3
 8005556:	4610      	mov	r0, r2
 8005558:	f7fe fbfb 	bl	8003d52 <vListInsertEnd>
 800555c:	e005      	b.n	800556a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	3318      	adds	r3, #24
 8005562:	4619      	mov	r1, r3
 8005564:	480e      	ldr	r0, [pc, #56]	; (80055a0 <xTaskRemoveFromEventList+0xb8>)
 8005566:	f7fe fbf4 	bl	8003d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <xTaskRemoveFromEventList+0xbc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	429a      	cmp	r2, r3
 8005576:	d905      	bls.n	8005584 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005578:	2301      	movs	r3, #1
 800557a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <xTaskRemoveFromEventList+0xc0>)
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e001      	b.n	8005588 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005588:	697b      	ldr	r3, [r7, #20]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000414 	.word	0x20000414
 8005598:	200003f4 	.word	0x200003f4
 800559c:	200002f0 	.word	0x200002f0
 80055a0:	200003ac 	.word	0x200003ac
 80055a4:	200002ec 	.word	0x200002ec
 80055a8:	20000400 	.word	0x20000400

080055ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <vTaskInternalSetTimeOutState+0x24>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <vTaskInternalSetTimeOutState+0x28>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	605a      	str	r2, [r3, #4]
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20000404 	.word	0x20000404
 80055d4:	200003f0 	.word	0x200003f0

080055d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <xTaskCheckForTimeOut+0x24>
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	e7fe      	b.n	80055fa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <xTaskCheckForTimeOut+0x3e>
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e7fe      	b.n	8005614 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005616:	f000 fc89 	bl	8005f2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <xTaskCheckForTimeOut+0xb8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d102      	bne.n	800563a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e023      	b.n	8005682 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <xTaskCheckForTimeOut+0xbc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d007      	beq.n	8005656 <xTaskCheckForTimeOut+0x7e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	429a      	cmp	r2, r3
 800564e:	d302      	bcc.n	8005656 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	e015      	b.n	8005682 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d20b      	bcs.n	8005678 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad2      	subs	r2, r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ff9d 	bl	80055ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	e004      	b.n	8005682 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800567e:	2301      	movs	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005682:	f000 fc81 	bl	8005f88 <vPortExitCritical>

	return xReturn;
 8005686:	69fb      	ldr	r3, [r7, #28]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	200003f0 	.word	0x200003f0
 8005694:	20000404 	.word	0x20000404

08005698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <vTaskMissedYield+0x14>)
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
}
 80056a2:	bf00      	nop
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000400 	.word	0x20000400

080056b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056b8:	f000 f852 	bl	8005760 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <prvIdleTask+0x28>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d9f9      	bls.n	80056b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <prvIdleTask+0x2c>)
 80056c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056d4:	e7f0      	b.n	80056b8 <prvIdleTask+0x8>
 80056d6:	bf00      	nop
 80056d8:	200002f0 	.word	0x200002f0
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056e6:	2300      	movs	r3, #0
 80056e8:	607b      	str	r3, [r7, #4]
 80056ea:	e00c      	b.n	8005706 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4a12      	ldr	r2, [pc, #72]	; (8005740 <prvInitialiseTaskLists+0x60>)
 80056f8:	4413      	add	r3, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe fafc 	bl	8003cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3301      	adds	r3, #1
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d9ef      	bls.n	80056ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800570c:	480d      	ldr	r0, [pc, #52]	; (8005744 <prvInitialiseTaskLists+0x64>)
 800570e:	f7fe faf3 	bl	8003cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005712:	480d      	ldr	r0, [pc, #52]	; (8005748 <prvInitialiseTaskLists+0x68>)
 8005714:	f7fe faf0 	bl	8003cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005718:	480c      	ldr	r0, [pc, #48]	; (800574c <prvInitialiseTaskLists+0x6c>)
 800571a:	f7fe faed 	bl	8003cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800571e:	480c      	ldr	r0, [pc, #48]	; (8005750 <prvInitialiseTaskLists+0x70>)
 8005720:	f7fe faea 	bl	8003cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005724:	480b      	ldr	r0, [pc, #44]	; (8005754 <prvInitialiseTaskLists+0x74>)
 8005726:	f7fe fae7 	bl	8003cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <prvInitialiseTaskLists+0x78>)
 800572c:	4a05      	ldr	r2, [pc, #20]	; (8005744 <prvInitialiseTaskLists+0x64>)
 800572e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <prvInitialiseTaskLists+0x7c>)
 8005732:	4a05      	ldr	r2, [pc, #20]	; (8005748 <prvInitialiseTaskLists+0x68>)
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200002f0 	.word	0x200002f0
 8005744:	2000037c 	.word	0x2000037c
 8005748:	20000390 	.word	0x20000390
 800574c:	200003ac 	.word	0x200003ac
 8005750:	200003c0 	.word	0x200003c0
 8005754:	200003d8 	.word	0x200003d8
 8005758:	200003a4 	.word	0x200003a4
 800575c:	200003a8 	.word	0x200003a8

08005760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005766:	e019      	b.n	800579c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005768:	f000 fbe0 	bl	8005f2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800576c:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <prvCheckTasksWaitingTermination+0x4c>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fb47 	bl	8003e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <prvCheckTasksWaitingTermination+0x50>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3b01      	subs	r3, #1
 8005784:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <prvCheckTasksWaitingTermination+0x50>)
 8005786:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <prvCheckTasksWaitingTermination+0x54>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3b01      	subs	r3, #1
 800578e:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <prvCheckTasksWaitingTermination+0x54>)
 8005790:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005792:	f000 fbf9 	bl	8005f88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f80e 	bl	80057b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <prvCheckTasksWaitingTermination+0x54>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e1      	bne.n	8005768 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	200003c0 	.word	0x200003c0
 80057b0:	200003ec 	.word	0x200003ec
 80057b4:	200003d4 	.word	0x200003d4

080057b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d108      	bne.n	80057dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fd88 	bl	80062e4 <vPortFree>
				vPortFree( pxTCB );
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fd85 	bl	80062e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057da:	e017      	b.n	800580c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d103      	bne.n	80057ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fd7c 	bl	80062e4 <vPortFree>
	}
 80057ec:	e00e      	b.n	800580c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d009      	beq.n	800580c <prvDeleteTCB+0x54>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	e7fe      	b.n	800580a <prvDeleteTCB+0x52>
	}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581a:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <prvResetNextTaskUnblockTime+0x44>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <prvResetNextTaskUnblockTime+0x14>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <prvResetNextTaskUnblockTime+0x16>
 8005828:	2300      	movs	r3, #0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800582e:	4b0b      	ldr	r3, [pc, #44]	; (800585c <prvResetNextTaskUnblockTime+0x48>)
 8005830:	f04f 32ff 	mov.w	r2, #4294967295
 8005834:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005836:	e008      	b.n	800584a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005838:	4b07      	ldr	r3, [pc, #28]	; (8005858 <prvResetNextTaskUnblockTime+0x44>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4a05      	ldr	r2, [pc, #20]	; (800585c <prvResetNextTaskUnblockTime+0x48>)
 8005848:	6013      	str	r3, [r2, #0]
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	200003a4 	.word	0x200003a4
 800585c:	2000040c 	.word	0x2000040c

08005860 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <xTaskGetSchedulerState+0x34>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800586e:	2301      	movs	r3, #1
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	e008      	b.n	8005886 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <xTaskGetSchedulerState+0x38>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800587c:	2302      	movs	r3, #2
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	e001      	b.n	8005886 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005882:	2300      	movs	r3, #0
 8005884:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005886:	687b      	ldr	r3, [r7, #4]
	}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	200003f8 	.word	0x200003f8
 8005898:	20000414 	.word	0x20000414

0800589c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d06e      	beq.n	8005990 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b6:	4b39      	ldr	r3, [pc, #228]	; (800599c <xTaskPriorityInherit+0x100>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	429a      	cmp	r2, r3
 80058be:	d25e      	bcs.n	800597e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	db06      	blt.n	80058d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c8:	4b34      	ldr	r3, [pc, #208]	; (800599c <xTaskPriorityInherit+0x100>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	f1c3 0207 	rsb	r2, r3, #7
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6959      	ldr	r1, [r3, #20]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4a2e      	ldr	r2, [pc, #184]	; (80059a0 <xTaskPriorityInherit+0x104>)
 80058e8:	4413      	add	r3, r2
 80058ea:	4299      	cmp	r1, r3
 80058ec:	d101      	bne.n	80058f2 <xTaskPriorityInherit+0x56>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <xTaskPriorityInherit+0x58>
 80058f2:	2300      	movs	r3, #0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d03a      	beq.n	800596e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe fa85 	bl	8003e0c <uxListRemove>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d115      	bne.n	8005934 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4924      	ldr	r1, [pc, #144]	; (80059a0 <xTaskPriorityInherit+0x104>)
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <xTaskPriorityInherit+0x98>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	2201      	movs	r2, #1
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	43da      	mvns	r2, r3
 800592a:	4b1e      	ldr	r3, [pc, #120]	; (80059a4 <xTaskPriorityInherit+0x108>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4013      	ands	r3, r2
 8005930:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <xTaskPriorityInherit+0x108>)
 8005932:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005934:	4b19      	ldr	r3, [pc, #100]	; (800599c <xTaskPriorityInherit+0x100>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	2201      	movs	r2, #1
 8005944:	409a      	lsls	r2, r3
 8005946:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <xTaskPriorityInherit+0x108>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4313      	orrs	r3, r2
 800594c:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <xTaskPriorityInherit+0x108>)
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4a10      	ldr	r2, [pc, #64]	; (80059a0 <xTaskPriorityInherit+0x104>)
 800595e:	441a      	add	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7fe f9f3 	bl	8003d52 <vListInsertEnd>
 800596c:	e004      	b.n	8005978 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800596e:	4b0b      	ldr	r3, [pc, #44]	; (800599c <xTaskPriorityInherit+0x100>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	e008      	b.n	8005990 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <xTaskPriorityInherit+0x100>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	429a      	cmp	r2, r3
 800598a:	d201      	bcs.n	8005990 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005990:	68fb      	ldr	r3, [r7, #12]
	}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	200002ec 	.word	0x200002ec
 80059a0:	200002f0 	.word	0x200002f0
 80059a4:	200003f4 	.word	0x200003f4

080059a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d06c      	beq.n	8005a98 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059be:	4b39      	ldr	r3, [pc, #228]	; (8005aa4 <xTaskPriorityDisinherit+0xfc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d009      	beq.n	80059dc <xTaskPriorityDisinherit+0x34>
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e7fe      	b.n	80059da <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <xTaskPriorityDisinherit+0x50>
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	e7fe      	b.n	80059f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fc:	1e5a      	subs	r2, r3, #1
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d044      	beq.n	8005a98 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d140      	bne.n	8005a98 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe f9f6 	bl	8003e0c <uxListRemove>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d115      	bne.n	8005a52 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	491f      	ldr	r1, [pc, #124]	; (8005aa8 <xTaskPriorityDisinherit+0x100>)
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <xTaskPriorityDisinherit+0xaa>
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	2201      	movs	r2, #1
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	43da      	mvns	r2, r3
 8005a48:	4b18      	ldr	r3, [pc, #96]	; (8005aac <xTaskPriorityDisinherit+0x104>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <xTaskPriorityDisinherit+0x104>)
 8005a50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	f1c3 0207 	rsb	r2, r3, #7
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <xTaskPriorityDisinherit+0x104>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <xTaskPriorityDisinherit+0x104>)
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <xTaskPriorityDisinherit+0x100>)
 8005a86:	441a      	add	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7fe f95f 	bl	8003d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a98:	697b      	ldr	r3, [r7, #20]
	}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200002ec 	.word	0x200002ec
 8005aa8:	200002f0 	.word	0x200002f0
 8005aac:	200003f4 	.word	0x200003f4

08005ab0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8086 	beq.w	8005bd6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e7fe      	b.n	8005ae4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d902      	bls.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	61fb      	str	r3, [r7, #28]
 8005af4:	e002      	b.n	8005afc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d067      	beq.n	8005bd6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d162      	bne.n	8005bd6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b10:	4b33      	ldr	r3, [pc, #204]	; (8005be0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d109      	bne.n	8005b2e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	60bb      	str	r3, [r7, #8]
 8005b2c:	e7fe      	b.n	8005b2c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	db04      	blt.n	8005b4c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f1c3 0207 	rsb	r2, r3, #7
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	6959      	ldr	r1, [r3, #20]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4a22      	ldr	r2, [pc, #136]	; (8005be4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	d101      	bne.n	8005b66 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d034      	beq.n	8005bd6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe f94b 	bl	8003e0c <uxListRemove>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d115      	bne.n	8005ba8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b80:	4918      	ldr	r1, [pc, #96]	; (8005be4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	2201      	movs	r2, #1
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43da      	mvns	r2, r3
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	4a10      	ldr	r2, [pc, #64]	; (8005be8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005ba6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	2201      	movs	r2, #1
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a07      	ldr	r2, [pc, #28]	; (8005be4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005bc8:	441a      	add	r2, r3
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7fe f8be 	bl	8003d52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bd6:	bf00      	nop
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	200002ec 	.word	0x200002ec
 8005be4:	200002f0 	.word	0x200002f0
 8005be8:	200003f4 	.word	0x200003f4

08005bec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bfe:	3201      	adds	r2, #1
 8005c00:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005c02:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c04:	681b      	ldr	r3, [r3, #0]
	}
 8005c06:	4618      	mov	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	200002ec 	.word	0x200002ec

08005c14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c1e:	4b29      	ldr	r3, [pc, #164]	; (8005cc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c24:	4b28      	ldr	r3, [pc, #160]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fe f8ee 	bl	8003e0c <uxListRemove>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10b      	bne.n	8005c4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005c36:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43da      	mvns	r2, r3
 8005c44:	4b21      	ldr	r3, [pc, #132]	; (8005ccc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	4a20      	ldr	r2, [pc, #128]	; (8005ccc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d10a      	bne.n	8005c6c <prvAddCurrentTaskToDelayedList+0x58>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4619      	mov	r1, r3
 8005c64:	481a      	ldr	r0, [pc, #104]	; (8005cd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c66:	f7fe f874 	bl	8003d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c6a:	e026      	b.n	8005cba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c74:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d209      	bcs.n	8005c98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c84:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f7fe f882 	bl	8003d9a <vListInsert>
}
 8005c96:	e010      	b.n	8005cba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c98:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f7fe f878 	bl	8003d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005caa:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d202      	bcs.n	8005cba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005cb4:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6013      	str	r3, [r2, #0]
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200003f0 	.word	0x200003f0
 8005cc8:	200002ec 	.word	0x200002ec
 8005ccc:	200003f4 	.word	0x200003f4
 8005cd0:	200003d8 	.word	0x200003d8
 8005cd4:	200003a8 	.word	0x200003a8
 8005cd8:	200003a4 	.word	0x200003a4
 8005cdc:	2000040c 	.word	0x2000040c

08005ce0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3b04      	subs	r3, #4
 8005cf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3b04      	subs	r3, #4
 8005cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f023 0201 	bic.w	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3b04      	subs	r3, #4
 8005d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d10:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <pxPortInitialiseStack+0x64>)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3b14      	subs	r3, #20
 8005d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3b04      	subs	r3, #4
 8005d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f06f 0202 	mvn.w	r2, #2
 8005d2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3b20      	subs	r3, #32
 8005d34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d36:	68fb      	ldr	r3, [r7, #12]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	08005d49 	.word	0x08005d49

08005d48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d52:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <prvTaskExitError+0x50>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5a:	d009      	beq.n	8005d70 <prvTaskExitError+0x28>
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e7fe      	b.n	8005d6e <prvTaskExitError+0x26>
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d82:	bf00      	nop
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0fc      	beq.n	8005d84 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000008 	.word	0x20000008
 8005d9c:	00000000 	.word	0x00000000

08005da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <pxCurrentTCBConst2>)
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	6808      	ldr	r0, [r1, #0]
 8005da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005daa:	f380 8809 	msr	PSP, r0
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f04f 0000 	mov.w	r0, #0
 8005db6:	f380 8811 	msr	BASEPRI, r0
 8005dba:	4770      	bx	lr
 8005dbc:	f3af 8000 	nop.w

08005dc0 <pxCurrentTCBConst2>:
 8005dc0:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop

08005dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005dc8:	4808      	ldr	r0, [pc, #32]	; (8005dec <prvPortStartFirstTask+0x24>)
 8005dca:	6800      	ldr	r0, [r0, #0]
 8005dcc:	6800      	ldr	r0, [r0, #0]
 8005dce:	f380 8808 	msr	MSP, r0
 8005dd2:	f04f 0000 	mov.w	r0, #0
 8005dd6:	f380 8814 	msr	CONTROL, r0
 8005dda:	b662      	cpsie	i
 8005ddc:	b661      	cpsie	f
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	df00      	svc	0
 8005de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dea:	bf00      	nop
 8005dec:	e000ed08 	.word	0xe000ed08

08005df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005df6:	4b44      	ldr	r3, [pc, #272]	; (8005f08 <xPortStartScheduler+0x118>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a44      	ldr	r2, [pc, #272]	; (8005f0c <xPortStartScheduler+0x11c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d109      	bne.n	8005e14 <xPortStartScheduler+0x24>
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	e7fe      	b.n	8005e12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e14:	4b3c      	ldr	r3, [pc, #240]	; (8005f08 <xPortStartScheduler+0x118>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a3d      	ldr	r2, [pc, #244]	; (8005f10 <xPortStartScheduler+0x120>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d109      	bne.n	8005e32 <xPortStartScheduler+0x42>
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e7fe      	b.n	8005e30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e32:	4b38      	ldr	r3, [pc, #224]	; (8005f14 <xPortStartScheduler+0x124>)
 8005e34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	22ff      	movs	r2, #255	; 0xff
 8005e42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	4b30      	ldr	r3, [pc, #192]	; (8005f18 <xPortStartScheduler+0x128>)
 8005e58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e5a:	4b30      	ldr	r3, [pc, #192]	; (8005f1c <xPortStartScheduler+0x12c>)
 8005e5c:	2207      	movs	r2, #7
 8005e5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e60:	e009      	b.n	8005e76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005e62:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <xPortStartScheduler+0x12c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <xPortStartScheduler+0x12c>)
 8005e6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7e:	2b80      	cmp	r3, #128	; 0x80
 8005e80:	d0ef      	beq.n	8005e62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e82:	4b26      	ldr	r3, [pc, #152]	; (8005f1c <xPortStartScheduler+0x12c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f1c3 0307 	rsb	r3, r3, #7
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d009      	beq.n	8005ea2 <xPortStartScheduler+0xb2>
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	e7fe      	b.n	8005ea0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ea2:	4b1e      	ldr	r3, [pc, #120]	; (8005f1c <xPortStartScheduler+0x12c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <xPortStartScheduler+0x12c>)
 8005eaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005eac:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <xPortStartScheduler+0x12c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eb4:	4a19      	ldr	r2, [pc, #100]	; (8005f1c <xPortStartScheduler+0x12c>)
 8005eb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ec0:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <xPortStartScheduler+0x130>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <xPortStartScheduler+0x130>)
 8005ec6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ecc:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <xPortStartScheduler+0x130>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a13      	ldr	r2, [pc, #76]	; (8005f20 <xPortStartScheduler+0x130>)
 8005ed2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ed6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ed8:	f000 f8d6 	bl	8006088 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005edc:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <xPortStartScheduler+0x134>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ee2:	f000 f8f5 	bl	80060d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ee6:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <xPortStartScheduler+0x138>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a0f      	ldr	r2, [pc, #60]	; (8005f28 <xPortStartScheduler+0x138>)
 8005eec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ef0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ef2:	f7ff ff69 	bl	8005dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ef6:	f7ff fa79 	bl	80053ec <vTaskSwitchContext>
	prvTaskExitError();
 8005efa:	f7ff ff25 	bl	8005d48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	e000ed00 	.word	0xe000ed00
 8005f0c:	410fc271 	.word	0x410fc271
 8005f10:	410fc270 	.word	0x410fc270
 8005f14:	e000e400 	.word	0xe000e400
 8005f18:	20000418 	.word	0x20000418
 8005f1c:	2000041c 	.word	0x2000041c
 8005f20:	e000ed20 	.word	0xe000ed20
 8005f24:	20000008 	.word	0x20000008
 8005f28:	e000ef34 	.word	0xe000ef34

08005f2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f44:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <vPortEnterCritical+0x54>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	4a0d      	ldr	r2, [pc, #52]	; (8005f80 <vPortEnterCritical+0x54>)
 8005f4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f4e:	4b0c      	ldr	r3, [pc, #48]	; (8005f80 <vPortEnterCritical+0x54>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10e      	bne.n	8005f74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <vPortEnterCritical+0x58>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <vPortEnterCritical+0x48>
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	e7fe      	b.n	8005f72 <vPortEnterCritical+0x46>
	}
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	20000008 	.word	0x20000008
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <vPortExitCritical+0x4c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <vPortExitCritical+0x22>
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	e7fe      	b.n	8005fa8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <vPortExitCritical+0x4c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	4a08      	ldr	r2, [pc, #32]	; (8005fd4 <vPortExitCritical+0x4c>)
 8005fb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <vPortExitCritical+0x4c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <vPortExitCritical+0x3e>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000008 	.word	0x20000008
	...

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f01e 0f10 	tst.w	lr, #16
 8005ff0:	bf08      	it	eq
 8005ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006004:	f380 8811 	msr	BASEPRI, r0
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f7ff f9ec 	bl	80053ec <vTaskSwitchContext>
 8006014:	f04f 0000 	mov.w	r0, #0
 8006018:	f380 8811 	msr	BASEPRI, r0
 800601c:	bc09      	pop	{r0, r3}
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006026:	f01e 0f10 	tst.w	lr, #16
 800602a:	bf08      	it	eq
 800602c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006030:	f380 8809 	msr	PSP, r0
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst>:
 8006040:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006060:	f7ff f908 	bl	8005274 <xTaskIncrementTick>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800606a:	4b06      	ldr	r3, [pc, #24]	; (8006084 <SysTick_Handler+0x3c>)
 800606c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	2300      	movs	r3, #0
 8006074:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800607c:	bf00      	nop
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	e000ed04 	.word	0xe000ed04

08006088 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800608c:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <vPortSetupTimerInterrupt+0x34>)
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <vPortSetupTimerInterrupt+0x38>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <vPortSetupTimerInterrupt+0x3c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a0a      	ldr	r2, [pc, #40]	; (80060c8 <vPortSetupTimerInterrupt+0x40>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	099b      	lsrs	r3, r3, #6
 80060a4:	4a09      	ldr	r2, [pc, #36]	; (80060cc <vPortSetupTimerInterrupt+0x44>)
 80060a6:	3b01      	subs	r3, #1
 80060a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060aa:	4b04      	ldr	r3, [pc, #16]	; (80060bc <vPortSetupTimerInterrupt+0x34>)
 80060ac:	2207      	movs	r2, #7
 80060ae:	601a      	str	r2, [r3, #0]
}
 80060b0:	bf00      	nop
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	e000e010 	.word	0xe000e010
 80060c0:	e000e018 	.word	0xe000e018
 80060c4:	20000000 	.word	0x20000000
 80060c8:	10624dd3 	.word	0x10624dd3
 80060cc:	e000e014 	.word	0xe000e014

080060d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060e0 <vPortEnableVFP+0x10>
 80060d4:	6801      	ldr	r1, [r0, #0]
 80060d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060da:	6001      	str	r1, [r0, #0]
 80060dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060de:	bf00      	nop
 80060e0:	e000ed88 	.word	0xe000ed88

080060e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ea:	f3ef 8305 	mrs	r3, IPSR
 80060ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b0f      	cmp	r3, #15
 80060f4:	d913      	bls.n	800611e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060f6:	4a16      	ldr	r2, [pc, #88]	; (8006150 <vPortValidateInterruptPriority+0x6c>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006100:	4b14      	ldr	r3, [pc, #80]	; (8006154 <vPortValidateInterruptPriority+0x70>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	7afa      	ldrb	r2, [r7, #11]
 8006106:	429a      	cmp	r2, r3
 8006108:	d209      	bcs.n	800611e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	e7fe      	b.n	800611c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800611e:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <vPortValidateInterruptPriority+0x74>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <vPortValidateInterruptPriority+0x78>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d909      	bls.n	8006142 <vPortValidateInterruptPriority+0x5e>
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	e7fe      	b.n	8006140 <vPortValidateInterruptPriority+0x5c>
	}
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	e000e3f0 	.word	0xe000e3f0
 8006154:	20000418 	.word	0x20000418
 8006158:	e000ed0c 	.word	0xe000ed0c
 800615c:	2000041c 	.word	0x2000041c

08006160 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006168:	2300      	movs	r3, #0
 800616a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800616c:	f7fe ffb6 	bl	80050dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006170:	4b57      	ldr	r3, [pc, #348]	; (80062d0 <pvPortMalloc+0x170>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006178:	f000 f90c 	bl	8006394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800617c:	4b55      	ldr	r3, [pc, #340]	; (80062d4 <pvPortMalloc+0x174>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	f040 808c 	bne.w	80062a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01c      	beq.n	80061ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006190:	2208      	movs	r2, #8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d013      	beq.n	80061ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f023 0307 	bic.w	r3, r3, #7
 80061a8:	3308      	adds	r3, #8
 80061aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <pvPortMalloc+0x6a>
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e7fe      	b.n	80061c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d068      	beq.n	80062a2 <pvPortMalloc+0x142>
 80061d0:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <pvPortMalloc+0x178>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d863      	bhi.n	80062a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061da:	4b40      	ldr	r3, [pc, #256]	; (80062dc <pvPortMalloc+0x17c>)
 80061dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061de:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <pvPortMalloc+0x17c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061e4:	e004      	b.n	80061f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d903      	bls.n	8006202 <pvPortMalloc+0xa2>
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f1      	bne.n	80061e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006202:	4b33      	ldr	r3, [pc, #204]	; (80062d0 <pvPortMalloc+0x170>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006208:	429a      	cmp	r2, r3
 800620a:	d04a      	beq.n	80062a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2208      	movs	r2, #8
 8006212:	4413      	add	r3, r2
 8006214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	1ad2      	subs	r2, r2, r3
 8006226:	2308      	movs	r3, #8
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	429a      	cmp	r2, r3
 800622c:	d91e      	bls.n	800626c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800622e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4413      	add	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <pvPortMalloc+0xf4>
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	613b      	str	r3, [r7, #16]
 8006252:	e7fe      	b.n	8006252 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006266:	69b8      	ldr	r0, [r7, #24]
 8006268:	f000 f8f6 	bl	8006458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800626c:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <pvPortMalloc+0x178>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <pvPortMalloc+0x178>)
 8006278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <pvPortMalloc+0x178>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <pvPortMalloc+0x180>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d203      	bcs.n	800628e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <pvPortMalloc+0x178>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <pvPortMalloc+0x180>)
 800628c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <pvPortMalloc+0x174>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	431a      	orrs	r2, r3
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062a2:	f7fe ff29 	bl	80050f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <pvPortMalloc+0x164>
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e7fe      	b.n	80062c2 <pvPortMalloc+0x162>
	return pvReturn;
 80062c4:	69fb      	ldr	r3, [r7, #28]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3728      	adds	r7, #40	; 0x28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20004028 	.word	0x20004028
 80062d4:	20004034 	.word	0x20004034
 80062d8:	2000402c 	.word	0x2000402c
 80062dc:	20004020 	.word	0x20004020
 80062e0:	20004030 	.word	0x20004030

080062e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d046      	beq.n	8006384 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062f6:	2308      	movs	r3, #8
 80062f8:	425b      	negs	r3, r3
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4413      	add	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	4b20      	ldr	r3, [pc, #128]	; (800638c <vPortFree+0xa8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <vPortFree+0x42>
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e7fe      	b.n	8006324 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <vPortFree+0x5e>
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	e7fe      	b.n	8006340 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	4b11      	ldr	r3, [pc, #68]	; (800638c <vPortFree+0xa8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d019      	beq.n	8006384 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d115      	bne.n	8006384 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	4b0b      	ldr	r3, [pc, #44]	; (800638c <vPortFree+0xa8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	43db      	mvns	r3, r3
 8006362:	401a      	ands	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006368:	f7fe feb8 	bl	80050dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <vPortFree+0xac>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4413      	add	r3, r2
 8006376:	4a06      	ldr	r2, [pc, #24]	; (8006390 <vPortFree+0xac>)
 8006378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800637a:	6938      	ldr	r0, [r7, #16]
 800637c:	f000 f86c 	bl	8006458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006380:	f7fe feba 	bl	80050f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006384:	bf00      	nop
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20004034 	.word	0x20004034
 8006390:	2000402c 	.word	0x2000402c

08006394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800639a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800639e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063a0:	4b27      	ldr	r3, [pc, #156]	; (8006440 <prvHeapInit+0xac>)
 80063a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00c      	beq.n	80063c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3307      	adds	r3, #7
 80063b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0307 	bic.w	r3, r3, #7
 80063ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <prvHeapInit+0xac>)
 80063c4:	4413      	add	r3, r2
 80063c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <prvHeapInit+0xb0>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063d2:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <prvHeapInit+0xb0>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4413      	add	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063e0:	2208      	movs	r2, #8
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a15      	ldr	r2, [pc, #84]	; (8006448 <prvHeapInit+0xb4>)
 80063f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063f6:	4b14      	ldr	r3, [pc, #80]	; (8006448 <prvHeapInit+0xb4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2200      	movs	r2, #0
 80063fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <prvHeapInit+0xb4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006414:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <prvHeapInit+0xb4>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a0a      	ldr	r2, [pc, #40]	; (800644c <prvHeapInit+0xb8>)
 8006422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4a09      	ldr	r2, [pc, #36]	; (8006450 <prvHeapInit+0xbc>)
 800642a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800642c:	4b09      	ldr	r3, [pc, #36]	; (8006454 <prvHeapInit+0xc0>)
 800642e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006432:	601a      	str	r2, [r3, #0]
}
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20000420 	.word	0x20000420
 8006444:	20004020 	.word	0x20004020
 8006448:	20004028 	.word	0x20004028
 800644c:	20004030 	.word	0x20004030
 8006450:	2000402c 	.word	0x2000402c
 8006454:	20004034 	.word	0x20004034

08006458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006460:	4b28      	ldr	r3, [pc, #160]	; (8006504 <prvInsertBlockIntoFreeList+0xac>)
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e002      	b.n	800646c <prvInsertBlockIntoFreeList+0x14>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	429a      	cmp	r2, r3
 8006474:	d8f7      	bhi.n	8006466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	4413      	add	r3, r2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	429a      	cmp	r2, r3
 8006486:	d108      	bne.n	800649a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	441a      	add	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	441a      	add	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d118      	bne.n	80064e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <prvInsertBlockIntoFreeList+0xb0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d00d      	beq.n	80064d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	441a      	add	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e008      	b.n	80064e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064d6:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <prvInsertBlockIntoFreeList+0xb0>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e003      	b.n	80064e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d002      	beq.n	80064f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20004020 	.word	0x20004020
 8006508:	20004028 	.word	0x20004028

0800650c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8006514:	4b29      	ldr	r3, [pc, #164]	; (80065bc <tcpip_thread+0xb0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800651c:	4b27      	ldr	r3, [pc, #156]	; (80065bc <tcpip_thread+0xb0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <tcpip_thread+0xb4>)
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	4610      	mov	r0, r2
 8006526:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8006528:	4826      	ldr	r0, [pc, #152]	; (80065c4 <tcpip_thread+0xb8>)
 800652a:	f008 fe8f 	bl	800f24c <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800652e:	4825      	ldr	r0, [pc, #148]	; (80065c4 <tcpip_thread+0xb8>)
 8006530:	f008 fe9b 	bl	800f26a <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8006534:	f107 030c 	add.w	r3, r7, #12
 8006538:	4619      	mov	r1, r3
 800653a:	4823      	ldr	r0, [pc, #140]	; (80065c8 <tcpip_thread+0xbc>)
 800653c:	f006 fa32 	bl	800c9a4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006540:	4820      	ldr	r0, [pc, #128]	; (80065c4 <tcpip_thread+0xb8>)
 8006542:	f008 fe83 	bl	800f24c <sys_mutex_lock>
    if (msg == NULL) {
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800654c:	4b1f      	ldr	r3, [pc, #124]	; (80065cc <tcpip_thread+0xc0>)
 800654e:	2269      	movs	r2, #105	; 0x69
 8006550:	491f      	ldr	r1, [pc, #124]	; (80065d0 <tcpip_thread+0xc4>)
 8006552:	4820      	ldr	r0, [pc, #128]	; (80065d4 <tcpip_thread+0xc8>)
 8006554:	f008 ff20 	bl	800f398 <iprintf>
      continue;
 8006558:	e02f      	b.n	80065ba <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b03      	cmp	r3, #3
 8006560:	d011      	beq.n	8006586 <tcpip_thread+0x7a>
 8006562:	2b04      	cmp	r3, #4
 8006564:	d01b      	beq.n	800659e <tcpip_thread+0x92>
 8006566:	2b02      	cmp	r3, #2
 8006568:	d120      	bne.n	80065ac <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	6850      	ldr	r0, [r2, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	6892      	ldr	r2, [r2, #8]
 8006576:	4611      	mov	r1, r2
 8006578:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4619      	mov	r1, r3
 800657e:	2009      	movs	r0, #9
 8006580:	f000 fd64 	bl	800704c <memp_free>
      break;
 8006584:	e019      	b.n	80065ba <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	6892      	ldr	r2, [r2, #8]
 800658e:	4610      	mov	r0, r2
 8006590:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4619      	mov	r1, r3
 8006596:	2008      	movs	r0, #8
 8006598:	f000 fd58 	bl	800704c <memp_free>
      break;
 800659c:	e00d      	b.n	80065ba <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	6892      	ldr	r2, [r2, #8]
 80065a6:	4610      	mov	r0, r2
 80065a8:	4798      	blx	r3
      break;
 80065aa:	e006      	b.n	80065ba <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <tcpip_thread+0xc0>)
 80065ae:	229b      	movs	r2, #155	; 0x9b
 80065b0:	4907      	ldr	r1, [pc, #28]	; (80065d0 <tcpip_thread+0xc4>)
 80065b2:	4808      	ldr	r0, [pc, #32]	; (80065d4 <tcpip_thread+0xc8>)
 80065b4:	f008 fef0 	bl	800f398 <iprintf>
      break;
 80065b8:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 80065ba:	e7b8      	b.n	800652e <tcpip_thread+0x22>
 80065bc:	20004038 	.word	0x20004038
 80065c0:	2000403c 	.word	0x2000403c
 80065c4:	20007348 	.word	0x20007348
 80065c8:	20004040 	.word	0x20004040
 80065cc:	08010220 	.word	0x08010220
 80065d0:	08010250 	.word	0x08010250
 80065d4:	08010270 	.word	0x08010270

080065d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80065e4:	481a      	ldr	r0, [pc, #104]	; (8006650 <tcpip_inpkt+0x78>)
 80065e6:	f008 fdf5 	bl	800f1d4 <sys_mbox_valid>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <tcpip_inpkt+0x24>
 80065f0:	4b18      	ldr	r3, [pc, #96]	; (8006654 <tcpip_inpkt+0x7c>)
 80065f2:	22b5      	movs	r2, #181	; 0xb5
 80065f4:	4918      	ldr	r1, [pc, #96]	; (8006658 <tcpip_inpkt+0x80>)
 80065f6:	4819      	ldr	r0, [pc, #100]	; (800665c <tcpip_inpkt+0x84>)
 80065f8:	f008 fece 	bl	800f398 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80065fc:	2009      	movs	r0, #9
 80065fe:	f000 fcd3 	bl	8006fa8 <memp_malloc>
 8006602:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
 800660e:	e01a      	b.n	8006646 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2202      	movs	r2, #2
 8006614:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8006628:	6979      	ldr	r1, [r7, #20]
 800662a:	4809      	ldr	r0, [pc, #36]	; (8006650 <tcpip_inpkt+0x78>)
 800662c:	f008 fd79 	bl	800f122 <sys_mbox_trypost>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d006      	beq.n	8006644 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006636:	6979      	ldr	r1, [r7, #20]
 8006638:	2009      	movs	r0, #9
 800663a:	f000 fd07 	bl	800704c <memp_free>
    return ERR_MEM;
 800663e:	f04f 33ff 	mov.w	r3, #4294967295
 8006642:	e000      	b.n	8006646 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8006644:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20004040 	.word	0x20004040
 8006654:	08010220 	.word	0x08010220
 8006658:	08010298 	.word	0x08010298
 800665c:	08010270 	.word	0x08010270

08006660 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006670:	f003 0318 	and.w	r3, r3, #24
 8006674:	2b00      	cmp	r3, #0
 8006676:	d006      	beq.n	8006686 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8006678:	4a08      	ldr	r2, [pc, #32]	; (800669c <tcpip_input+0x3c>)
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff ffab 	bl	80065d8 <tcpip_inpkt>
 8006682:	4603      	mov	r3, r0
 8006684:	e005      	b.n	8006692 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <tcpip_input+0x40>)
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ffa4 	bl	80065d8 <tcpip_inpkt>
 8006690:	4603      	mov	r3, r0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	0800eefd 	.word	0x0800eefd
 80066a0:	0800dec1 	.word	0x0800dec1

080066a4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80066b2:	481d      	ldr	r0, [pc, #116]	; (8006728 <tcpip_callback_with_block+0x84>)
 80066b4:	f008 fd8e 	bl	800f1d4 <sys_mbox_valid>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d105      	bne.n	80066ca <tcpip_callback_with_block+0x26>
 80066be:	4b1b      	ldr	r3, [pc, #108]	; (800672c <tcpip_callback_with_block+0x88>)
 80066c0:	22ee      	movs	r2, #238	; 0xee
 80066c2:	491b      	ldr	r1, [pc, #108]	; (8006730 <tcpip_callback_with_block+0x8c>)
 80066c4:	481b      	ldr	r0, [pc, #108]	; (8006734 <tcpip_callback_with_block+0x90>)
 80066c6:	f008 fe67 	bl	800f398 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80066ca:	2008      	movs	r0, #8
 80066cc:	f000 fc6c 	bl	8006fa8 <memp_malloc>
 80066d0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d102      	bne.n	80066de <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 80066d8:	f04f 33ff 	mov.w	r3, #4294967295
 80066dc:	e01f      	b.n	800671e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2203      	movs	r2, #3
 80066e2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	609a      	str	r2, [r3, #8]
  if (block) {
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d004      	beq.n	8006700 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 80066f6:	6979      	ldr	r1, [r7, #20]
 80066f8:	480b      	ldr	r0, [pc, #44]	; (8006728 <tcpip_callback_with_block+0x84>)
 80066fa:	f008 fcfd 	bl	800f0f8 <sys_mbox_post>
 80066fe:	e00d      	b.n	800671c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8006700:	6979      	ldr	r1, [r7, #20]
 8006702:	4809      	ldr	r0, [pc, #36]	; (8006728 <tcpip_callback_with_block+0x84>)
 8006704:	f008 fd0d 	bl	800f122 <sys_mbox_trypost>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d006      	beq.n	800671c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800670e:	6979      	ldr	r1, [r7, #20]
 8006710:	2008      	movs	r0, #8
 8006712:	f000 fc9b 	bl	800704c <memp_free>
      return ERR_MEM;
 8006716:	f04f 33ff 	mov.w	r3, #4294967295
 800671a:	e000      	b.n	800671e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20004040 	.word	0x20004040
 800672c:	08010220 	.word	0x08010220
 8006730:	08010298 	.word	0x08010298
 8006734:	08010270 	.word	0x08010270

08006738 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af02      	add	r7, sp, #8
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  lwip_init();
 8006742:	f000 f86a 	bl	800681a <lwip_init>

  tcpip_init_done = initfunc;
 8006746:	4a17      	ldr	r2, [pc, #92]	; (80067a4 <tcpip_init+0x6c>)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800674c:	4a16      	ldr	r2, [pc, #88]	; (80067a8 <tcpip_init+0x70>)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006752:	2106      	movs	r1, #6
 8006754:	4815      	ldr	r0, [pc, #84]	; (80067ac <tcpip_init+0x74>)
 8006756:	f008 fcad 	bl	800f0b4 <sys_mbox_new>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d006      	beq.n	800676e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006760:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <tcpip_init+0x78>)
 8006762:	f240 12d5 	movw	r2, #469	; 0x1d5
 8006766:	4913      	ldr	r1, [pc, #76]	; (80067b4 <tcpip_init+0x7c>)
 8006768:	4813      	ldr	r0, [pc, #76]	; (80067b8 <tcpip_init+0x80>)
 800676a:	f008 fe15 	bl	800f398 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800676e:	4813      	ldr	r0, [pc, #76]	; (80067bc <tcpip_init+0x84>)
 8006770:	f008 fd50 	bl	800f214 <sys_mutex_new>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800677a:	4b0d      	ldr	r3, [pc, #52]	; (80067b0 <tcpip_init+0x78>)
 800677c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8006780:	490f      	ldr	r1, [pc, #60]	; (80067c0 <tcpip_init+0x88>)
 8006782:	480d      	ldr	r0, [pc, #52]	; (80067b8 <tcpip_init+0x80>)
 8006784:	f008 fe08 	bl	800f398 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006788:	2303      	movs	r3, #3
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006790:	2200      	movs	r2, #0
 8006792:	490c      	ldr	r1, [pc, #48]	; (80067c4 <tcpip_init+0x8c>)
 8006794:	480c      	ldr	r0, [pc, #48]	; (80067c8 <tcpip_init+0x90>)
 8006796:	f008 fd75 	bl	800f284 <sys_thread_new>
}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20004038 	.word	0x20004038
 80067a8:	2000403c 	.word	0x2000403c
 80067ac:	20004040 	.word	0x20004040
 80067b0:	08010220 	.word	0x08010220
 80067b4:	080102a8 	.word	0x080102a8
 80067b8:	08010270 	.word	0x08010270
 80067bc:	20007348 	.word	0x20007348
 80067c0:	080102cc 	.word	0x080102cc
 80067c4:	0800650d 	.word	0x0800650d
 80067c8:	080102f0 	.word	0x080102f0

080067cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	ba5b      	rev16	r3, r3
 80067da:	b29b      	uxth	r3, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	061a      	lsls	r2, r3, #24
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	021b      	lsls	r3, r3, #8
 80067f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	0a1b      	lsrs	r3, r3, #8
 8006802:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	0e1b      	lsrs	r3, r3, #24
 800680c:	4313      	orrs	r3, r2
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006824:	f008 fce8 	bl	800f1f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006828:	f000 f8a6 	bl	8006978 <mem_init>
  memp_init();
 800682c:	f000 fb70 	bl	8006f10 <memp_init>
  pbuf_init();
  netif_init();
 8006830:	f000 fc36 	bl	80070a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006834:	f006 f8dc 	bl	800c9f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006838:	f001 fbda 	bl	8007ff0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800683c:	f005 ff6e 	bl	800c71c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006850:	4b40      	ldr	r3, [pc, #256]	; (8006954 <plug_holes+0x10c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d206      	bcs.n	8006868 <plug_holes+0x20>
 800685a:	4b3f      	ldr	r3, [pc, #252]	; (8006958 <plug_holes+0x110>)
 800685c:	f240 125d 	movw	r2, #349	; 0x15d
 8006860:	493e      	ldr	r1, [pc, #248]	; (800695c <plug_holes+0x114>)
 8006862:	483f      	ldr	r0, [pc, #252]	; (8006960 <plug_holes+0x118>)
 8006864:	f008 fd98 	bl	800f398 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006868:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <plug_holes+0x11c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d306      	bcc.n	8006880 <plug_holes+0x38>
 8006872:	4b39      	ldr	r3, [pc, #228]	; (8006958 <plug_holes+0x110>)
 8006874:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006878:	493b      	ldr	r1, [pc, #236]	; (8006968 <plug_holes+0x120>)
 800687a:	4839      	ldr	r0, [pc, #228]	; (8006960 <plug_holes+0x118>)
 800687c:	f008 fd8c 	bl	800f398 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	791b      	ldrb	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d006      	beq.n	8006896 <plug_holes+0x4e>
 8006888:	4b33      	ldr	r3, [pc, #204]	; (8006958 <plug_holes+0x110>)
 800688a:	f240 125f 	movw	r2, #351	; 0x15f
 800688e:	4937      	ldr	r1, [pc, #220]	; (800696c <plug_holes+0x124>)
 8006890:	4833      	ldr	r0, [pc, #204]	; (8006960 <plug_holes+0x118>)
 8006892:	f008 fd81 	bl	800f398 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800689e:	d906      	bls.n	80068ae <plug_holes+0x66>
 80068a0:	4b2d      	ldr	r3, [pc, #180]	; (8006958 <plug_holes+0x110>)
 80068a2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80068a6:	4932      	ldr	r1, [pc, #200]	; (8006970 <plug_holes+0x128>)
 80068a8:	482d      	ldr	r0, [pc, #180]	; (8006960 <plug_holes+0x118>)
 80068aa:	f008 fd75 	bl	800f398 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <plug_holes+0x10c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	8812      	ldrh	r2, [r2, #0]
 80068b6:	4413      	add	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d01f      	beq.n	8006902 <plug_holes+0xba>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	791b      	ldrb	r3, [r3, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d11b      	bne.n	8006902 <plug_holes+0xba>
 80068ca:	4b26      	ldr	r3, [pc, #152]	; (8006964 <plug_holes+0x11c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d016      	beq.n	8006902 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80068d4:	4b27      	ldr	r3, [pc, #156]	; (8006974 <plug_holes+0x12c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d102      	bne.n	80068e4 <plug_holes+0x9c>
      lfree = mem;
 80068de:	4a25      	ldr	r2, [pc, #148]	; (8006974 <plug_holes+0x12c>)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	881a      	ldrh	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a19      	ldr	r2, [pc, #100]	; (8006954 <plug_holes+0x10c>)
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	1a99      	subs	r1, r3, r2
 80068f4:	4b17      	ldr	r3, [pc, #92]	; (8006954 <plug_holes+0x10c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	8812      	ldrh	r2, [r2, #0]
 80068fc:	4413      	add	r3, r2
 80068fe:	b28a      	uxth	r2, r1
 8006900:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006902:	4b14      	ldr	r3, [pc, #80]	; (8006954 <plug_holes+0x10c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	8852      	ldrh	r2, [r2, #2]
 800690a:	4413      	add	r3, r2
 800690c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d01a      	beq.n	800694c <plug_holes+0x104>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	791b      	ldrb	r3, [r3, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d116      	bne.n	800694c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <plug_holes+0x12c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	d102      	bne.n	800692e <plug_holes+0xe6>
      lfree = pmem;
 8006928:	4a12      	ldr	r2, [pc, #72]	; (8006974 <plug_holes+0x12c>)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	881a      	ldrh	r2, [r3, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4a06      	ldr	r2, [pc, #24]	; (8006954 <plug_holes+0x10c>)
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	1a99      	subs	r1, r3, r2
 800693e:	4b05      	ldr	r3, [pc, #20]	; (8006954 <plug_holes+0x10c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	8812      	ldrh	r2, [r2, #0]
 8006946:	4413      	add	r3, r2
 8006948:	b28a      	uxth	r2, r1
 800694a:	805a      	strh	r2, [r3, #2]
  }
}
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20004044 	.word	0x20004044
 8006958:	08010300 	.word	0x08010300
 800695c:	08010330 	.word	0x08010330
 8006960:	08010348 	.word	0x08010348
 8006964:	20004048 	.word	0x20004048
 8006968:	08010370 	.word	0x08010370
 800696c:	0801038c 	.word	0x0801038c
 8006970:	080103a8 	.word	0x080103a8
 8006974:	2000404c 	.word	0x2000404c

08006978 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800697e:	4b1e      	ldr	r3, [pc, #120]	; (80069f8 <mem_init+0x80>)
 8006980:	3303      	adds	r3, #3
 8006982:	f023 0303 	bic.w	r3, r3, #3
 8006986:	461a      	mov	r2, r3
 8006988:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <mem_init+0x84>)
 800698a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800698c:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <mem_init+0x84>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006998:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <mem_init+0x84>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80069ae:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <mem_init+0x88>)
 80069b0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80069b2:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <mem_init+0x88>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2201      	movs	r2, #1
 80069b8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80069ba:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <mem_init+0x88>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80069c2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <mem_init+0x88>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80069cc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <mem_init+0x84>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a0c      	ldr	r2, [pc, #48]	; (8006a04 <mem_init+0x8c>)
 80069d4:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80069d6:	480c      	ldr	r0, [pc, #48]	; (8006a08 <mem_init+0x90>)
 80069d8:	f008 fc1c 	bl	800f214 <sys_mutex_new>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <mem_init+0x94>)
 80069e4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80069e8:	4909      	ldr	r1, [pc, #36]	; (8006a10 <mem_init+0x98>)
 80069ea:	480a      	ldr	r0, [pc, #40]	; (8006a14 <mem_init+0x9c>)
 80069ec:	f008 fcd4 	bl	800f398 <iprintf>
  }
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20007364 	.word	0x20007364
 80069fc:	20004044 	.word	0x20004044
 8006a00:	20004048 	.word	0x20004048
 8006a04:	2000404c 	.word	0x2000404c
 8006a08:	20004050 	.word	0x20004050
 8006a0c:	08010300 	.word	0x08010300
 8006a10:	080103d4 	.word	0x080103d4
 8006a14:	08010348 	.word	0x08010348

08006a18 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d050      	beq.n	8006ac8 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d006      	beq.n	8006a3e <mem_free+0x26>
 8006a30:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <mem_free+0xb8>)
 8006a32:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8006a36:	4927      	ldr	r1, [pc, #156]	; (8006ad4 <mem_free+0xbc>)
 8006a38:	4827      	ldr	r0, [pc, #156]	; (8006ad8 <mem_free+0xc0>)
 8006a3a:	f008 fcad 	bl	800f398 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006a3e:	4b27      	ldr	r3, [pc, #156]	; (8006adc <mem_free+0xc4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d304      	bcc.n	8006a52 <mem_free+0x3a>
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <mem_free+0xc8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d306      	bcc.n	8006a60 <mem_free+0x48>
 8006a52:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <mem_free+0xb8>)
 8006a54:	f240 12af 	movw	r2, #431	; 0x1af
 8006a58:	4922      	ldr	r1, [pc, #136]	; (8006ae4 <mem_free+0xcc>)
 8006a5a:	481f      	ldr	r0, [pc, #124]	; (8006ad8 <mem_free+0xc0>)
 8006a5c:	f008 fc9c 	bl	800f398 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006a60:	4b1e      	ldr	r3, [pc, #120]	; (8006adc <mem_free+0xc4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d304      	bcc.n	8006a74 <mem_free+0x5c>
 8006a6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <mem_free+0xc8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d306      	bcc.n	8006a82 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8006a74:	f008 fc2c 	bl	800f2d0 <sys_arch_protect>
 8006a78:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8006a7a:	68b8      	ldr	r0, [r7, #8]
 8006a7c:	f008 fc36 	bl	800f2ec <sys_arch_unprotect>
    return;
 8006a80:	e023      	b.n	8006aca <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006a82:	4819      	ldr	r0, [pc, #100]	; (8006ae8 <mem_free+0xd0>)
 8006a84:	f008 fbe2 	bl	800f24c <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3b08      	subs	r3, #8
 8006a8c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	791b      	ldrb	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <mem_free+0x8c>
 8006a96:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <mem_free+0xb8>)
 8006a98:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006a9c:	4913      	ldr	r1, [pc, #76]	; (8006aec <mem_free+0xd4>)
 8006a9e:	480e      	ldr	r0, [pc, #56]	; (8006ad8 <mem_free+0xc0>)
 8006aa0:	f008 fc7a 	bl	800f398 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006aaa:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <mem_free+0xd8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d202      	bcs.n	8006aba <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006ab4:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <mem_free+0xd8>)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7ff fec4 	bl	8006848 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006ac0:	4809      	ldr	r0, [pc, #36]	; (8006ae8 <mem_free+0xd0>)
 8006ac2:	f008 fbd2 	bl	800f26a <sys_mutex_unlock>
 8006ac6:	e000      	b.n	8006aca <mem_free+0xb2>
    return;
 8006ac8:	bf00      	nop
}
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	08010300 	.word	0x08010300
 8006ad4:	080103f0 	.word	0x080103f0
 8006ad8:	08010348 	.word	0x08010348
 8006adc:	20004044 	.word	0x20004044
 8006ae0:	20004048 	.word	0x20004048
 8006ae4:	08010414 	.word	0x08010414
 8006ae8:	20004050 	.word	0x20004050
 8006aec:	0801042c 	.word	0x0801042c
 8006af0:	2000404c 	.word	0x2000404c

08006af4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006b00:	887b      	ldrh	r3, [r7, #2]
 8006b02:	3303      	adds	r3, #3
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8006b0c:	887b      	ldrh	r3, [r7, #2]
 8006b0e:	2b0b      	cmp	r3, #11
 8006b10:	d801      	bhi.n	8006b16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006b12:	230c      	movs	r3, #12
 8006b14:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006b16:	887b      	ldrh	r3, [r7, #2]
 8006b18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b1c:	d901      	bls.n	8006b22 <mem_trim+0x2e>
    return NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e0bd      	b.n	8006c9e <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006b22:	4b61      	ldr	r3, [pc, #388]	; (8006ca8 <mem_trim+0x1b4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d304      	bcc.n	8006b36 <mem_trim+0x42>
 8006b2c:	4b5f      	ldr	r3, [pc, #380]	; (8006cac <mem_trim+0x1b8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d306      	bcc.n	8006b44 <mem_trim+0x50>
 8006b36:	4b5e      	ldr	r3, [pc, #376]	; (8006cb0 <mem_trim+0x1bc>)
 8006b38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b3c:	495d      	ldr	r1, [pc, #372]	; (8006cb4 <mem_trim+0x1c0>)
 8006b3e:	485e      	ldr	r0, [pc, #376]	; (8006cb8 <mem_trim+0x1c4>)
 8006b40:	f008 fc2a 	bl	800f398 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006b44:	4b58      	ldr	r3, [pc, #352]	; (8006ca8 <mem_trim+0x1b4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d304      	bcc.n	8006b58 <mem_trim+0x64>
 8006b4e:	4b57      	ldr	r3, [pc, #348]	; (8006cac <mem_trim+0x1b8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d307      	bcc.n	8006b68 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8006b58:	f008 fbba 	bl	800f2d0 <sys_arch_protect>
 8006b5c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f008 fbc4 	bl	800f2ec <sys_arch_unprotect>
    return rmem;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	e09a      	b.n	8006c9e <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3b08      	subs	r3, #8
 8006b6c:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4a4d      	ldr	r2, [pc, #308]	; (8006ca8 <mem_trim+0x1b4>)
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	881a      	ldrh	r2, [r3, #0]
 8006b7c:	8b7b      	ldrh	r3, [r7, #26]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b08      	subs	r3, #8
 8006b84:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006b86:	887a      	ldrh	r2, [r7, #2]
 8006b88:	8b3b      	ldrh	r3, [r7, #24]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d906      	bls.n	8006b9c <mem_trim+0xa8>
 8006b8e:	4b48      	ldr	r3, [pc, #288]	; (8006cb0 <mem_trim+0x1bc>)
 8006b90:	f240 2206 	movw	r2, #518	; 0x206
 8006b94:	4949      	ldr	r1, [pc, #292]	; (8006cbc <mem_trim+0x1c8>)
 8006b96:	4848      	ldr	r0, [pc, #288]	; (8006cb8 <mem_trim+0x1c4>)
 8006b98:	f008 fbfe 	bl	800f398 <iprintf>
  if (newsize > size) {
 8006b9c:	887a      	ldrh	r2, [r7, #2]
 8006b9e:	8b3b      	ldrh	r3, [r7, #24]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d901      	bls.n	8006ba8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e07a      	b.n	8006c9e <mem_trim+0x1aa>
  }
  if (newsize == size) {
 8006ba8:	887a      	ldrh	r2, [r7, #2]
 8006baa:	8b3b      	ldrh	r3, [r7, #24]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d101      	bne.n	8006bb4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	e074      	b.n	8006c9e <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006bb4:	4842      	ldr	r0, [pc, #264]	; (8006cc0 <mem_trim+0x1cc>)
 8006bb6:	f008 fb49 	bl	800f24c <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006bba:	4b3b      	ldr	r3, [pc, #236]	; (8006ca8 <mem_trim+0x1b4>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	8812      	ldrh	r2, [r2, #0]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	791b      	ldrb	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d131      	bne.n	8006c32 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006bd4:	8b7a      	ldrh	r2, [r7, #26]
 8006bd6:	887b      	ldrh	r3, [r7, #2]
 8006bd8:	4413      	add	r3, r2
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3308      	adds	r3, #8
 8006bde:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 8006be0:	4b38      	ldr	r3, [pc, #224]	; (8006cc4 <mem_trim+0x1d0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d105      	bne.n	8006bf6 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8006bea:	4b2f      	ldr	r3, [pc, #188]	; (8006ca8 <mem_trim+0x1b4>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	8a7b      	ldrh	r3, [r7, #18]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	4a34      	ldr	r2, [pc, #208]	; (8006cc4 <mem_trim+0x1d0>)
 8006bf4:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006bf6:	4b2c      	ldr	r3, [pc, #176]	; (8006ca8 <mem_trim+0x1b4>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	8a7b      	ldrh	r3, [r7, #18]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2200      	movs	r2, #0
 8006c04:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	8a3a      	ldrh	r2, [r7, #16]
 8006c0a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	8b7a      	ldrh	r2, [r7, #26]
 8006c10:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	8a7a      	ldrh	r2, [r7, #18]
 8006c16:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c20:	d039      	beq.n	8006c96 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006c22:	4b21      	ldr	r3, [pc, #132]	; (8006ca8 <mem_trim+0x1b4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	8812      	ldrh	r2, [r2, #0]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	8a7a      	ldrh	r2, [r7, #18]
 8006c2e:	805a      	strh	r2, [r3, #2]
 8006c30:	e031      	b.n	8006c96 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006c32:	887b      	ldrh	r3, [r7, #2]
 8006c34:	f103 0214 	add.w	r2, r3, #20
 8006c38:	8b3b      	ldrh	r3, [r7, #24]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d82b      	bhi.n	8006c96 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006c3e:	8b7a      	ldrh	r2, [r7, #26]
 8006c40:	887b      	ldrh	r3, [r7, #2]
 8006c42:	4413      	add	r3, r2
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3308      	adds	r3, #8
 8006c48:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006c4a:	4b17      	ldr	r3, [pc, #92]	; (8006ca8 <mem_trim+0x1b4>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	8a7b      	ldrh	r3, [r7, #18]
 8006c50:	4413      	add	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 8006c54:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <mem_trim+0x1d0>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d202      	bcs.n	8006c64 <mem_trim+0x170>
      lfree = mem2;
 8006c5e:	4a19      	ldr	r2, [pc, #100]	; (8006cc4 <mem_trim+0x1d0>)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2200      	movs	r2, #0
 8006c68:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	881a      	ldrh	r2, [r3, #0]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	8b7a      	ldrh	r2, [r7, #26]
 8006c76:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	8a7a      	ldrh	r2, [r7, #18]
 8006c7c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c86:	d006      	beq.n	8006c96 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006c88:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <mem_trim+0x1b4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	8812      	ldrh	r2, [r2, #0]
 8006c90:	4413      	add	r3, r2
 8006c92:	8a7a      	ldrh	r2, [r7, #18]
 8006c94:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006c96:	480a      	ldr	r0, [pc, #40]	; (8006cc0 <mem_trim+0x1cc>)
 8006c98:	f008 fae7 	bl	800f26a <sys_mutex_unlock>
  return rmem;
 8006c9c:	687b      	ldr	r3, [r7, #4]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20004044 	.word	0x20004044
 8006cac:	20004048 	.word	0x20004048
 8006cb0:	08010300 	.word	0x08010300
 8006cb4:	08010440 	.word	0x08010440
 8006cb8:	08010348 	.word	0x08010348
 8006cbc:	08010458 	.word	0x08010458
 8006cc0:	20004050 	.word	0x20004050
 8006cc4:	2000404c 	.word	0x2000404c

08006cc8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <mem_malloc+0x14>
    return NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e0d1      	b.n	8006e80 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8006cdc:	88fb      	ldrh	r3, [r7, #6]
 8006cde:	3303      	adds	r3, #3
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f023 0303 	bic.w	r3, r3, #3
 8006ce6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	2b0b      	cmp	r3, #11
 8006cec:	d801      	bhi.n	8006cf2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006cee:	230c      	movs	r3, #12
 8006cf0:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006cf8:	d901      	bls.n	8006cfe <mem_malloc+0x36>
    return NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e0c0      	b.n	8006e80 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8006cfe:	4862      	ldr	r0, [pc, #392]	; (8006e88 <mem_malloc+0x1c0>)
 8006d00:	f008 faa4 	bl	800f24c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006d04:	4b61      	ldr	r3, [pc, #388]	; (8006e8c <mem_malloc+0x1c4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4b61      	ldr	r3, [pc, #388]	; (8006e90 <mem_malloc+0x1c8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	83fb      	strh	r3, [r7, #30]
 8006d12:	e0aa      	b.n	8006e6a <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8006d14:	4b5e      	ldr	r3, [pc, #376]	; (8006e90 <mem_malloc+0x1c8>)
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	8bfb      	ldrh	r3, [r7, #30]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	791b      	ldrb	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 809b 	bne.w	8006e5e <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	8bfb      	ldrh	r3, [r7, #30]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	f1a3 0208 	sub.w	r2, r3, #8
 8006d36:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	f0c0 8090 	bcc.w	8006e5e <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	8bfb      	ldrh	r3, [r7, #30]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	f1a3 0208 	sub.w	r2, r3, #8
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d327      	bcc.n	8006da4 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006d54:	8bfa      	ldrh	r2, [r7, #30]
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	4413      	add	r3, r2
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006d60:	4b4b      	ldr	r3, [pc, #300]	; (8006e90 <mem_malloc+0x1c8>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	8a7b      	ldrh	r3, [r7, #18]
 8006d66:	4413      	add	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	881a      	ldrh	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8bfa      	ldrh	r2, [r7, #30]
 8006d7c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	8a7a      	ldrh	r2, [r7, #18]
 8006d82:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2201      	movs	r2, #1
 8006d88:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d92:	d00a      	beq.n	8006daa <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006d94:	4b3e      	ldr	r3, [pc, #248]	; (8006e90 <mem_malloc+0x1c8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	8812      	ldrh	r2, [r2, #0]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	8a7a      	ldrh	r2, [r7, #18]
 8006da0:	805a      	strh	r2, [r3, #2]
 8006da2:	e002      	b.n	8006daa <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2201      	movs	r2, #1
 8006da8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006daa:	4b38      	ldr	r3, [pc, #224]	; (8006e8c <mem_malloc+0x1c4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d127      	bne.n	8006e04 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 8006db4:	4b35      	ldr	r3, [pc, #212]	; (8006e8c <mem_malloc+0x1c4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006dba:	e005      	b.n	8006dc8 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8006dbc:	4b34      	ldr	r3, [pc, #208]	; (8006e90 <mem_malloc+0x1c8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	8812      	ldrh	r2, [r2, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	791b      	ldrb	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <mem_malloc+0x112>
 8006dd0:	4b30      	ldr	r3, [pc, #192]	; (8006e94 <mem_malloc+0x1cc>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d1f0      	bne.n	8006dbc <mem_malloc+0xf4>
          }
          lfree = cur;
 8006dda:	4a2c      	ldr	r2, [pc, #176]	; (8006e8c <mem_malloc+0x1c4>)
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006de0:	4b2a      	ldr	r3, [pc, #168]	; (8006e8c <mem_malloc+0x1c4>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	4b2b      	ldr	r3, [pc, #172]	; (8006e94 <mem_malloc+0x1cc>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d00b      	beq.n	8006e04 <mem_malloc+0x13c>
 8006dec:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <mem_malloc+0x1c4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	791b      	ldrb	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d006      	beq.n	8006e04 <mem_malloc+0x13c>
 8006df6:	4b28      	ldr	r3, [pc, #160]	; (8006e98 <mem_malloc+0x1d0>)
 8006df8:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006dfc:	4927      	ldr	r1, [pc, #156]	; (8006e9c <mem_malloc+0x1d4>)
 8006dfe:	4828      	ldr	r0, [pc, #160]	; (8006ea0 <mem_malloc+0x1d8>)
 8006e00:	f008 faca 	bl	800f398 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8006e04:	4820      	ldr	r0, [pc, #128]	; (8006e88 <mem_malloc+0x1c0>)
 8006e06:	f008 fa30 	bl	800f26a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006e0a:	88fa      	ldrh	r2, [r7, #6]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	3308      	adds	r3, #8
 8006e12:	4a20      	ldr	r2, [pc, #128]	; (8006e94 <mem_malloc+0x1cc>)
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d906      	bls.n	8006e28 <mem_malloc+0x160>
 8006e1a:	4b1f      	ldr	r3, [pc, #124]	; (8006e98 <mem_malloc+0x1d0>)
 8006e1c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8006e20:	4920      	ldr	r1, [pc, #128]	; (8006ea4 <mem_malloc+0x1dc>)
 8006e22:	481f      	ldr	r0, [pc, #124]	; (8006ea0 <mem_malloc+0x1d8>)
 8006e24:	f008 fab8 	bl	800f398 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d006      	beq.n	8006e40 <mem_malloc+0x178>
 8006e32:	4b19      	ldr	r3, [pc, #100]	; (8006e98 <mem_malloc+0x1d0>)
 8006e34:	f240 22d6 	movw	r2, #726	; 0x2d6
 8006e38:	491b      	ldr	r1, [pc, #108]	; (8006ea8 <mem_malloc+0x1e0>)
 8006e3a:	4819      	ldr	r0, [pc, #100]	; (8006ea0 <mem_malloc+0x1d8>)
 8006e3c:	f008 faac 	bl	800f398 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d006      	beq.n	8006e58 <mem_malloc+0x190>
 8006e4a:	4b13      	ldr	r3, [pc, #76]	; (8006e98 <mem_malloc+0x1d0>)
 8006e4c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8006e50:	4916      	ldr	r1, [pc, #88]	; (8006eac <mem_malloc+0x1e4>)
 8006e52:	4813      	ldr	r0, [pc, #76]	; (8006ea0 <mem_malloc+0x1d8>)
 8006e54:	f008 faa0 	bl	800f398 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	e010      	b.n	8006e80 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <mem_malloc+0x1c8>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	8bfb      	ldrh	r3, [r7, #30]
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006e6a:	8bfa      	ldrh	r2, [r7, #30]
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006e72:	429a      	cmp	r2, r3
 8006e74:	f4ff af4e 	bcc.w	8006d14 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8006e78:	4803      	ldr	r0, [pc, #12]	; (8006e88 <mem_malloc+0x1c0>)
 8006e7a:	f008 f9f6 	bl	800f26a <sys_mutex_unlock>
  return NULL;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20004050 	.word	0x20004050
 8006e8c:	2000404c 	.word	0x2000404c
 8006e90:	20004044 	.word	0x20004044
 8006e94:	20004048 	.word	0x20004048
 8006e98:	08010300 	.word	0x08010300
 8006e9c:	08010478 	.word	0x08010478
 8006ea0:	08010348 	.word	0x08010348
 8006ea4:	08010494 	.word	0x08010494
 8006ea8:	080104c4 	.word	0x080104c4
 8006eac:	080104f4 	.word	0x080104f4

08006eb0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	3303      	adds	r3, #3
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e011      	b.n	8006ef6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	461a      	mov	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	dbe7      	blt.n	8006ed2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006f16:	2300      	movs	r3, #0
 8006f18:	80fb      	strh	r3, [r7, #6]
 8006f1a:	e009      	b.n	8006f30 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	4a08      	ldr	r2, [pc, #32]	; (8006f40 <memp_init+0x30>)
 8006f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff ffc3 	bl	8006eb0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006f2a:	88fb      	ldrh	r3, [r7, #6]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	80fb      	strh	r3, [r7, #6]
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	2b0c      	cmp	r3, #12
 8006f34:	d9f2      	bls.n	8006f1c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	08012034 	.word	0x08012034

08006f44 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006f4c:	f008 f9c0 	bl	800f2d0 <sys_arch_protect>
 8006f50:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d015      	beq.n	8006f8c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d006      	beq.n	8006f82 <do_memp_malloc_pool+0x3e>
 8006f74:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <do_memp_malloc_pool+0x58>)
 8006f76:	f240 1249 	movw	r2, #329	; 0x149
 8006f7a:	4909      	ldr	r1, [pc, #36]	; (8006fa0 <do_memp_malloc_pool+0x5c>)
 8006f7c:	4809      	ldr	r0, [pc, #36]	; (8006fa4 <do_memp_malloc_pool+0x60>)
 8006f7e:	f008 fa0b 	bl	800f398 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f008 f9b2 	bl	800f2ec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	e003      	b.n	8006f94 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f008 f9ad 	bl	800f2ec <sys_arch_unprotect>
  return NULL;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	08010518 	.word	0x08010518
 8006fa0:	08010548 	.word	0x08010548
 8006fa4:	0801056c 	.word	0x0801056c

08006fa8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	2b0c      	cmp	r3, #12
 8006fb6:	d908      	bls.n	8006fca <memp_malloc+0x22>
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <memp_malloc+0x3c>)
 8006fba:	f240 1287 	movw	r2, #391	; 0x187
 8006fbe:	490a      	ldr	r1, [pc, #40]	; (8006fe8 <memp_malloc+0x40>)
 8006fc0:	480a      	ldr	r0, [pc, #40]	; (8006fec <memp_malloc+0x44>)
 8006fc2:	f008 f9e9 	bl	800f398 <iprintf>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e008      	b.n	8006fdc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <memp_malloc+0x48>)
 8006fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff ffb6 	bl	8006f44 <do_memp_malloc_pool>
 8006fd8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006fda:	68fb      	ldr	r3, [r7, #12]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	08010518 	.word	0x08010518
 8006fe8:	080105a8 	.word	0x080105a8
 8006fec:	0801056c 	.word	0x0801056c
 8006ff0:	08012034 	.word	0x08012034

08006ff4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d006      	beq.n	8007016 <do_memp_free_pool+0x22>
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <do_memp_free_pool+0x4c>)
 800700a:	f240 129d 	movw	r2, #413	; 0x19d
 800700e:	490d      	ldr	r1, [pc, #52]	; (8007044 <do_memp_free_pool+0x50>)
 8007010:	480d      	ldr	r0, [pc, #52]	; (8007048 <do_memp_free_pool+0x54>)
 8007012:	f008 f9c1 	bl	800f398 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800701a:	f008 f959 	bl	800f2d0 <sys_arch_protect>
 800701e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007032:	68b8      	ldr	r0, [r7, #8]
 8007034:	f008 f95a 	bl	800f2ec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	08010518 	.word	0x08010518
 8007044:	080105c8 	.word	0x080105c8
 8007048:	0801056c 	.word	0x0801056c

0800704c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	2b0c      	cmp	r3, #12
 800705c:	d907      	bls.n	800706e <memp_free+0x22>
 800705e:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <memp_free+0x44>)
 8007060:	f240 12db 	movw	r2, #475	; 0x1db
 8007064:	490b      	ldr	r1, [pc, #44]	; (8007094 <memp_free+0x48>)
 8007066:	480c      	ldr	r0, [pc, #48]	; (8007098 <memp_free+0x4c>)
 8007068:	f008 f996 	bl	800f398 <iprintf>
 800706c:	e00c      	b.n	8007088 <memp_free+0x3c>

  if (mem == NULL) {
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d008      	beq.n	8007086 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	4a09      	ldr	r2, [pc, #36]	; (800709c <memp_free+0x50>)
 8007078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff ffb8 	bl	8006ff4 <do_memp_free_pool>
 8007084:	e000      	b.n	8007088 <memp_free+0x3c>
    return;
 8007086:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	08010518 	.word	0x08010518
 8007094:	080105e8 	.word	0x080105e8
 8007098:	0801056c 	.word	0x0801056c
 800709c:	08012034 	.word	0x08012034

080070a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80070a4:	bf00      	nop
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
	...

080070b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d105      	bne.n	80070d0 <netif_add+0x20>
 80070c4:	4b1f      	ldr	r3, [pc, #124]	; (8007144 <netif_add+0x94>)
 80070c6:	22fb      	movs	r2, #251	; 0xfb
 80070c8:	491f      	ldr	r1, [pc, #124]	; (8007148 <netif_add+0x98>)
 80070ca:	4820      	ldr	r0, [pc, #128]	; (800714c <netif_add+0x9c>)
 80070cc:	f008 f964 	bl	800f398 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2203      	movs	r2, #3
 80070ee:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80070f8:	4b15      	ldr	r3, [pc, #84]	; (8007150 <netif_add+0xa0>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	b2d1      	uxtb	r1, r2
 8007100:	4a13      	ldr	r2, [pc, #76]	; (8007150 <netif_add+0xa0>)
 8007102:	7011      	strb	r1, [r2, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a3a      	ldr	r2, [r7, #32]
 800710e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f81e 	bl	8007158 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	4798      	blx	r3
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <netif_add+0x7c>
    return NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	e007      	b.n	800713c <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800712c:	4b09      	ldr	r3, [pc, #36]	; (8007154 <netif_add+0xa4>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007134:	4a07      	ldr	r2, [pc, #28]	; (8007154 <netif_add+0xa4>)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800713a:	68fb      	ldr	r3, [r7, #12]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	08010604 	.word	0x08010604
 8007148:	08010638 	.word	0x08010638
 800714c:	08010650 	.word	0x08010650
 8007150:	20004088 	.word	0x20004088
 8007154:	2000e40c 	.word	0x2000e40c

08007158 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <netif_set_addr+0x1c>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10c      	bne.n	800718e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f81a 	bl	80071b0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f862 	bl	8007248 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f84a 	bl	8007220 <netif_set_gw>
 800718c:	e00b      	b.n	80071a6 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f859 	bl	8007248 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f841 	bl	8007220 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f805 	bl	80071b0 <netif_set_ipaddr>
  }
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <netif_set_ipaddr+0x18>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e002      	b.n	80071ce <netif_set_ipaddr+0x1e>
 80071c8:	4b14      	ldr	r3, [pc, #80]	; (800721c <netif_set_ipaddr+0x6c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3304      	adds	r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d01c      	beq.n	8007214 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3304      	adds	r3, #4
 80071de:	f107 020c 	add.w	r2, r7, #12
 80071e2:	4611      	mov	r1, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f002 f895 	bl	8009314 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3304      	adds	r3, #4
 80071ee:	f107 020c 	add.w	r2, r7, #12
 80071f2:	4611      	mov	r1, r2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f005 fd25 	bl	800cc44 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <netif_set_ipaddr+0x56>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	e000      	b.n	8007208 <netif_set_ipaddr+0x58>
 8007206:	2300      	movs	r3, #0
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800720c:	2101      	movs	r1, #1
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f861 	bl	80072d6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	080120a8 	.word	0x080120a8

08007220 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <netif_set_gw+0x16>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	e000      	b.n	8007238 <netif_set_gw+0x18>
 8007236:	2300      	movs	r3, #0
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <netif_set_netmask+0x16>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	e000      	b.n	8007260 <netif_set_netmask+0x18>
 800725e:	2300      	movs	r3, #0
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007278:	4a04      	ldr	r2, [pc, #16]	; (800728c <netif_set_default+0x1c>)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	2000e410 	.word	0x2000e410

08007290 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d113      	bne.n	80072ce <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80072ac:	f043 0301 	orr.w	r3, r3, #1
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80072c6:	2103      	movs	r1, #3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f804 	bl	80072d6 <netif_issue_reports>
    }
  }
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d011      	beq.n	8007310 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80072fc:	f003 0308 	and.w	r3, r3, #8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f006 fbce 	bl	800daac <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d012      	beq.n	8007354 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	b2da      	uxtb	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f005 ff72 	bl	800d238 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007362:	f007 ffb5 	bl	800f2d0 <sys_arch_protect>
 8007366:	6038      	str	r0, [r7, #0]
 8007368:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <pbuf_free_ooseq+0x4c>)
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	6838      	ldr	r0, [r7, #0]
 8007370:	f007 ffbc 	bl	800f2ec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007374:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <pbuf_free_ooseq+0x50>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	607b      	str	r3, [r7, #4]
 800737a:	e00f      	b.n	800739c <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fcff 	bl	8008d8c <tcp_segs_free>
      pcb->ooseq = NULL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8007394:	e005      	b.n	80073a2 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	607b      	str	r3, [r7, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1ec      	bne.n	800737c <pbuf_free_ooseq+0x20>
    }
  }
}
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	2000e414 	.word	0x2000e414
 80073ac:	2000e41c 	.word	0x2000e41c

080073b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80073b8:	f7ff ffd0 	bl	800735c <pbuf_free_ooseq>
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80073ca:	f007 ff81 	bl	800f2d0 <sys_arch_protect>
 80073ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80073d0:	4b10      	ldr	r3, [pc, #64]	; (8007414 <pbuf_pool_is_empty+0x50>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80073d6:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <pbuf_pool_is_empty+0x50>)
 80073d8:	2201      	movs	r2, #1
 80073da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f007 ff85 	bl	800f2ec <sys_arch_unprotect>

  if (!queued) {
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d110      	bne.n	800740a <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80073e8:	2200      	movs	r2, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	480a      	ldr	r0, [pc, #40]	; (8007418 <pbuf_pool_is_empty+0x54>)
 80073ee:	f7ff f959 	bl	80066a4 <tcpip_callback_with_block>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d008      	beq.n	800740a <pbuf_pool_is_empty+0x46>
 80073f8:	f007 ff6a 	bl	800f2d0 <sys_arch_protect>
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <pbuf_pool_is_empty+0x50>)
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f007 ff71 	bl	800f2ec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	2000e414 	.word	0x2000e414
 8007418:	080073b1 	.word	0x080073b1

0800741c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	71fb      	strb	r3, [r7, #7]
 8007426:	460b      	mov	r3, r1
 8007428:	80bb      	strh	r3, [r7, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	2b04      	cmp	r3, #4
 8007432:	d81c      	bhi.n	800746e <pbuf_alloc+0x52>
 8007434:	a201      	add	r2, pc, #4	; (adr r2, 800743c <pbuf_alloc+0x20>)
 8007436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743a:	bf00      	nop
 800743c:	08007451 	.word	0x08007451
 8007440:	08007457 	.word	0x08007457
 8007444:	0800745d 	.word	0x0800745d
 8007448:	08007463 	.word	0x08007463
 800744c:	08007469 	.word	0x08007469
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007450:	2336      	movs	r3, #54	; 0x36
 8007452:	82fb      	strh	r3, [r7, #22]
    break;
 8007454:	e014      	b.n	8007480 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007456:	2322      	movs	r3, #34	; 0x22
 8007458:	82fb      	strh	r3, [r7, #22]
    break;
 800745a:	e011      	b.n	8007480 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800745c:	230e      	movs	r3, #14
 800745e:	82fb      	strh	r3, [r7, #22]
    break;
 8007460:	e00e      	b.n	8007480 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8007462:	2300      	movs	r3, #0
 8007464:	82fb      	strh	r3, [r7, #22]
    break;
 8007466:	e00b      	b.n	8007480 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	82fb      	strh	r3, [r7, #22]
    break;
 800746c:	e008      	b.n	8007480 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800746e:	4ba6      	ldr	r3, [pc, #664]	; (8007708 <pbuf_alloc+0x2ec>)
 8007470:	f44f 728b 	mov.w	r2, #278	; 0x116
 8007474:	49a5      	ldr	r1, [pc, #660]	; (800770c <pbuf_alloc+0x2f0>)
 8007476:	48a6      	ldr	r0, [pc, #664]	; (8007710 <pbuf_alloc+0x2f4>)
 8007478:	f007 ff8e 	bl	800f398 <iprintf>
    return NULL;
 800747c:	2300      	movs	r3, #0
 800747e:	e15f      	b.n	8007740 <pbuf_alloc+0x324>
  }

  switch (type) {
 8007480:	79bb      	ldrb	r3, [r7, #6]
 8007482:	2b03      	cmp	r3, #3
 8007484:	f200 8136 	bhi.w	80076f4 <pbuf_alloc+0x2d8>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <pbuf_alloc+0x74>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	08007635 	.word	0x08007635
 8007494:	080076c1 	.word	0x080076c1
 8007498:	080076c1 	.word	0x080076c1
 800749c:	080074a1 	.word	0x080074a1
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80074a0:	200c      	movs	r0, #12
 80074a2:	f7ff fd81 	bl	8006fa8 <memp_malloc>
 80074a6:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d103      	bne.n	80074b6 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80074ae:	f7ff ff89 	bl	80073c4 <pbuf_pool_is_empty>
      return NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e144      	b.n	8007740 <pbuf_alloc+0x324>
    }
    p->type = type;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	79ba      	ldrb	r2, [r7, #6]
 80074ba:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80074c2:	8afb      	ldrh	r3, [r7, #22]
 80074c4:	3310      	adds	r3, #16
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	3303      	adds	r3, #3
 80074cc:	f023 0303 	bic.w	r3, r3, #3
 80074d0:	461a      	mov	r2, r3
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d006      	beq.n	80074f0 <pbuf_alloc+0xd4>
 80074e2:	4b89      	ldr	r3, [pc, #548]	; (8007708 <pbuf_alloc+0x2ec>)
 80074e4:	f240 1229 	movw	r2, #297	; 0x129
 80074e8:	498a      	ldr	r1, [pc, #552]	; (8007714 <pbuf_alloc+0x2f8>)
 80074ea:	4889      	ldr	r0, [pc, #548]	; (8007710 <pbuf_alloc+0x2f4>)
 80074ec:	f007 ff54 	bl	800f398 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	88ba      	ldrh	r2, [r7, #4]
 80074f4:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80074f6:	8afb      	ldrh	r3, [r7, #22]
 80074f8:	3303      	adds	r3, #3
 80074fa:	f023 0303 	bic.w	r3, r3, #3
 80074fe:	f5c3 63bd 	rsb	r3, r3, #1512	; 0x5e8
 8007502:	3304      	adds	r3, #4
 8007504:	88ba      	ldrh	r2, [r7, #4]
 8007506:	4293      	cmp	r3, r2
 8007508:	bf28      	it	cs
 800750a:	4613      	movcs	r3, r2
 800750c:	b29a      	uxth	r2, r3
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	8952      	ldrh	r2, [r2, #10]
 800751a:	441a      	add	r2, r3
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8007522:	429a      	cmp	r2, r3
 8007524:	d906      	bls.n	8007534 <pbuf_alloc+0x118>
 8007526:	4b78      	ldr	r3, [pc, #480]	; (8007708 <pbuf_alloc+0x2ec>)
 8007528:	f44f 7298 	mov.w	r2, #304	; 0x130
 800752c:	497a      	ldr	r1, [pc, #488]	; (8007718 <pbuf_alloc+0x2fc>)
 800752e:	4878      	ldr	r0, [pc, #480]	; (8007710 <pbuf_alloc+0x2f4>)
 8007530:	f007 ff32 	bl	800f398 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007534:	8afb      	ldrh	r3, [r7, #22]
 8007536:	3303      	adds	r3, #3
 8007538:	f023 0303 	bic.w	r3, r3, #3
 800753c:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8007540:	4293      	cmp	r3, r2
 8007542:	d106      	bne.n	8007552 <pbuf_alloc+0x136>
 8007544:	4b70      	ldr	r3, [pc, #448]	; (8007708 <pbuf_alloc+0x2ec>)
 8007546:	f44f 7299 	mov.w	r2, #306	; 0x132
 800754a:	4974      	ldr	r1, [pc, #464]	; (800771c <pbuf_alloc+0x300>)
 800754c:	4870      	ldr	r0, [pc, #448]	; (8007710 <pbuf_alloc+0x2f4>)
 800754e:	f007 ff23 	bl	800f398 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2201      	movs	r2, #1
 8007556:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800755c:	88bb      	ldrh	r3, [r7, #4]
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	8952      	ldrh	r2, [r2, #10]
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8007566:	e061      	b.n	800762c <pbuf_alloc+0x210>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007568:	200c      	movs	r0, #12
 800756a:	f7ff fd1d 	bl	8006fa8 <memp_malloc>
 800756e:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <pbuf_alloc+0x168>
        PBUF_POOL_IS_EMPTY();
 8007576:	f7ff ff25 	bl	80073c4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800757a:	69f8      	ldr	r0, [r7, #28]
 800757c:	f000 fac2 	bl	8007b04 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8007580:	2300      	movs	r3, #0
 8007582:	e0dd      	b.n	8007740 <pbuf_alloc+0x324>
      }
      q->type = type;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	79ba      	ldrb	r2, [r7, #6]
 8007588:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075a2:	4293      	cmp	r3, r2
 80075a4:	dd06      	ble.n	80075b4 <pbuf_alloc+0x198>
 80075a6:	4b58      	ldr	r3, [pc, #352]	; (8007708 <pbuf_alloc+0x2ec>)
 80075a8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80075ac:	495c      	ldr	r1, [pc, #368]	; (8007720 <pbuf_alloc+0x304>)
 80075ae:	4858      	ldr	r0, [pc, #352]	; (8007710 <pbuf_alloc+0x2f4>)
 80075b0:	f007 fef2 	bl	800f398 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	f240 52ec 	movw	r2, #1516	; 0x5ec
 80075c4:	4293      	cmp	r3, r2
 80075c6:	bf28      	it	cs
 80075c8:	4613      	movcs	r3, r2
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f103 0210 	add.w	r2, r3, #16
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d006      	beq.n	80075f4 <pbuf_alloc+0x1d8>
 80075e6:	4b48      	ldr	r3, [pc, #288]	; (8007708 <pbuf_alloc+0x2ec>)
 80075e8:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80075ec:	494d      	ldr	r1, [pc, #308]	; (8007724 <pbuf_alloc+0x308>)
 80075ee:	4848      	ldr	r0, [pc, #288]	; (8007710 <pbuf_alloc+0x2f4>)
 80075f0:	f007 fed2 	bl	800f398 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	8952      	ldrh	r2, [r2, #10]
 80075fc:	441a      	add	r2, r3
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8007604:	429a      	cmp	r2, r3
 8007606:	d906      	bls.n	8007616 <pbuf_alloc+0x1fa>
 8007608:	4b3f      	ldr	r3, [pc, #252]	; (8007708 <pbuf_alloc+0x2ec>)
 800760a:	f240 1255 	movw	r2, #341	; 0x155
 800760e:	4942      	ldr	r1, [pc, #264]	; (8007718 <pbuf_alloc+0x2fc>)
 8007610:	483f      	ldr	r0, [pc, #252]	; (8007710 <pbuf_alloc+0x2f4>)
 8007612:	f007 fec1 	bl	800f398 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	895b      	ldrh	r3, [r3, #10]
 8007620:	461a      	mov	r2, r3
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	dc9a      	bgt.n	8007568 <pbuf_alloc+0x14c>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8007632:	e07e      	b.n	8007732 <pbuf_alloc+0x316>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8007634:	8afb      	ldrh	r3, [r7, #22]
 8007636:	3313      	adds	r3, #19
 8007638:	b29b      	uxth	r3, r3
 800763a:	f023 0303 	bic.w	r3, r3, #3
 800763e:	b29a      	uxth	r2, r3
 8007640:	88bb      	ldrh	r3, [r7, #4]
 8007642:	3303      	adds	r3, #3
 8007644:	b29b      	uxth	r3, r3
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	b29b      	uxth	r3, r3
 800764c:	4413      	add	r3, r2
 800764e:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8007650:	897a      	ldrh	r2, [r7, #10]
 8007652:	88bb      	ldrh	r3, [r7, #4]
 8007654:	3303      	adds	r3, #3
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	429a      	cmp	r2, r3
 800765c:	d201      	bcs.n	8007662 <pbuf_alloc+0x246>
        return NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	e06e      	b.n	8007740 <pbuf_alloc+0x324>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8007662:	897b      	ldrh	r3, [r7, #10]
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff fb2f 	bl	8006cc8 <mem_malloc>
 800766a:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <pbuf_alloc+0x25a>
      return NULL;
 8007672:	2300      	movs	r3, #0
 8007674:	e064      	b.n	8007740 <pbuf_alloc+0x324>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007676:	8afb      	ldrh	r3, [r7, #22]
 8007678:	3310      	adds	r3, #16
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	3303      	adds	r3, #3
 8007680:	f023 0303 	bic.w	r3, r3, #3
 8007684:	461a      	mov	r2, r3
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	88ba      	ldrh	r2, [r7, #4]
 800768e:	811a      	strh	r2, [r3, #8]
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	891a      	ldrh	r2, [r3, #8]
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
    p->type = type;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	79ba      	ldrb	r2, [r7, #6]
 80076a2:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d03f      	beq.n	8007730 <pbuf_alloc+0x314>
 80076b0:	4b15      	ldr	r3, [pc, #84]	; (8007708 <pbuf_alloc+0x2ec>)
 80076b2:	f240 1277 	movw	r2, #375	; 0x177
 80076b6:	491c      	ldr	r1, [pc, #112]	; (8007728 <pbuf_alloc+0x30c>)
 80076b8:	4815      	ldr	r0, [pc, #84]	; (8007710 <pbuf_alloc+0x2f4>)
 80076ba:	f007 fe6d 	bl	800f398 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80076be:	e037      	b.n	8007730 <pbuf_alloc+0x314>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80076c0:	200b      	movs	r0, #11
 80076c2:	f7ff fc71 	bl	8006fa8 <memp_malloc>
 80076c6:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <pbuf_alloc+0x2b6>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e036      	b.n	8007740 <pbuf_alloc+0x324>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2200      	movs	r2, #0
 80076d6:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	88ba      	ldrh	r2, [r7, #4]
 80076dc:	811a      	strh	r2, [r3, #8]
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	891a      	ldrh	r2, [r3, #8]
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]
    p->type = type;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	79ba      	ldrb	r2, [r7, #6]
 80076f0:	731a      	strb	r2, [r3, #12]
    break;
 80076f2:	e01e      	b.n	8007732 <pbuf_alloc+0x316>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80076f4:	4b04      	ldr	r3, [pc, #16]	; (8007708 <pbuf_alloc+0x2ec>)
 80076f6:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80076fa:	490c      	ldr	r1, [pc, #48]	; (800772c <pbuf_alloc+0x310>)
 80076fc:	4804      	ldr	r0, [pc, #16]	; (8007710 <pbuf_alloc+0x2f4>)
 80076fe:	f007 fe4b 	bl	800f398 <iprintf>
    return NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	e01c      	b.n	8007740 <pbuf_alloc+0x324>
 8007706:	bf00      	nop
 8007708:	08010678 	.word	0x08010678
 800770c:	080106a8 	.word	0x080106a8
 8007710:	080106c4 	.word	0x080106c4
 8007714:	080106ec 	.word	0x080106ec
 8007718:	0801071c 	.word	0x0801071c
 800771c:	08010750 	.word	0x08010750
 8007720:	08010784 	.word	0x08010784
 8007724:	08010798 	.word	0x08010798
 8007728:	080107c8 	.word	0x080107c8
 800772c:	080107f4 	.word	0x080107f4
    break;
 8007730:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	2201      	movs	r2, #1
 8007736:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	2200      	movs	r2, #0
 800773c:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800773e:	69fb      	ldr	r3, [r7, #28]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	4603      	mov	r3, r0
 8007752:	71fb      	strb	r3, [r7, #7]
 8007754:	460b      	mov	r3, r1
 8007756:	80bb      	strh	r3, [r7, #4]
 8007758:	4613      	mov	r3, r2
 800775a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	2b04      	cmp	r3, #4
 8007760:	d81b      	bhi.n	800779a <pbuf_alloced_custom+0x52>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <pbuf_alloced_custom+0x20>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	0800777d 	.word	0x0800777d
 800776c:	08007783 	.word	0x08007783
 8007770:	08007789 	.word	0x08007789
 8007774:	0800778f 	.word	0x0800778f
 8007778:	08007795 	.word	0x08007795
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800777c:	2336      	movs	r3, #54	; 0x36
 800777e:	81fb      	strh	r3, [r7, #14]
    break;
 8007780:	e014      	b.n	80077ac <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007782:	2322      	movs	r3, #34	; 0x22
 8007784:	81fb      	strh	r3, [r7, #14]
    break;
 8007786:	e011      	b.n	80077ac <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007788:	230e      	movs	r3, #14
 800778a:	81fb      	strh	r3, [r7, #14]
    break;
 800778c:	e00e      	b.n	80077ac <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800778e:	2300      	movs	r3, #0
 8007790:	81fb      	strh	r3, [r7, #14]
    break;
 8007792:	e00b      	b.n	80077ac <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	81fb      	strh	r3, [r7, #14]
    break;
 8007798:	e008      	b.n	80077ac <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800779a:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <pbuf_alloced_custom+0xc8>)
 800779c:	f240 12c5 	movw	r2, #453	; 0x1c5
 80077a0:	491c      	ldr	r1, [pc, #112]	; (8007814 <pbuf_alloced_custom+0xcc>)
 80077a2:	481d      	ldr	r0, [pc, #116]	; (8007818 <pbuf_alloced_custom+0xd0>)
 80077a4:	f007 fdf8 	bl	800f398 <iprintf>
    return NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e02d      	b.n	8007808 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80077ac:	89fb      	ldrh	r3, [r7, #14]
 80077ae:	3303      	adds	r3, #3
 80077b0:	f023 0203 	bic.w	r2, r3, #3
 80077b4:	88bb      	ldrh	r3, [r7, #4]
 80077b6:	441a      	add	r2, r3
 80077b8:	8bbb      	ldrh	r3, [r7, #28]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d901      	bls.n	80077c2 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	e022      	b.n	8007808 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d008      	beq.n	80077e0 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80077ce:	89fb      	ldrh	r3, [r7, #14]
 80077d0:	3303      	adds	r3, #3
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	441a      	add	r2, r3
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	605a      	str	r2, [r3, #4]
 80077de:	e002      	b.n	80077e6 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2200      	movs	r2, #0
 80077e4:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2202      	movs	r2, #2
 80077ea:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	88ba      	ldrh	r2, [r7, #4]
 80077f0:	811a      	strh	r2, [r3, #8]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	891a      	ldrh	r2, [r3, #8]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	79ba      	ldrb	r2, [r7, #6]
 80077fe:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2201      	movs	r2, #1
 8007804:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8007806:	683b      	ldr	r3, [r7, #0]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	08010678 	.word	0x08010678
 8007814:	08010810 	.word	0x08010810
 8007818:	080106c4 	.word	0x080106c4

0800781c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d106      	bne.n	800783c <pbuf_realloc+0x20>
 800782e:	4b4b      	ldr	r3, [pc, #300]	; (800795c <pbuf_realloc+0x140>)
 8007830:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007834:	494a      	ldr	r1, [pc, #296]	; (8007960 <pbuf_realloc+0x144>)
 8007836:	484b      	ldr	r0, [pc, #300]	; (8007964 <pbuf_realloc+0x148>)
 8007838:	f007 fdae 	bl	800f398 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7b1b      	ldrb	r3, [r3, #12]
 8007840:	2b03      	cmp	r3, #3
 8007842:	d012      	beq.n	800786a <pbuf_realloc+0x4e>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7b1b      	ldrb	r3, [r3, #12]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d00e      	beq.n	800786a <pbuf_realloc+0x4e>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7b1b      	ldrb	r3, [r3, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <pbuf_realloc+0x4e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	7b1b      	ldrb	r3, [r3, #12]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d006      	beq.n	800786a <pbuf_realloc+0x4e>
 800785c:	4b3f      	ldr	r3, [pc, #252]	; (800795c <pbuf_realloc+0x140>)
 800785e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007862:	4941      	ldr	r1, [pc, #260]	; (8007968 <pbuf_realloc+0x14c>)
 8007864:	483f      	ldr	r0, [pc, #252]	; (8007964 <pbuf_realloc+0x148>)
 8007866:	f007 fd97 	bl	800f398 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	891b      	ldrh	r3, [r3, #8]
 800786e:	887a      	ldrh	r2, [r7, #2]
 8007870:	429a      	cmp	r2, r3
 8007872:	d26f      	bcs.n	8007954 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8007874:	887b      	ldrh	r3, [r7, #2]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	8912      	ldrh	r2, [r2, #8]
 800787a:	1a9b      	subs	r3, r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800787e:	887b      	ldrh	r3, [r7, #2]
 8007880:	827b      	strh	r3, [r7, #18]
  q = p;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007886:	e025      	b.n	80078d4 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	895b      	ldrh	r3, [r3, #10]
 800788c:	8a7a      	ldrh	r2, [r7, #18]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007898:	4293      	cmp	r3, r2
 800789a:	dd06      	ble.n	80078aa <pbuf_realloc+0x8e>
 800789c:	4b2f      	ldr	r3, [pc, #188]	; (800795c <pbuf_realloc+0x140>)
 800789e:	f240 220b 	movw	r2, #523	; 0x20b
 80078a2:	4932      	ldr	r1, [pc, #200]	; (800796c <pbuf_realloc+0x150>)
 80078a4:	482f      	ldr	r0, [pc, #188]	; (8007964 <pbuf_realloc+0x148>)
 80078a6:	f007 fd77 	bl	800f398 <iprintf>
    q->tot_len += (u16_t)grow;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	891a      	ldrh	r2, [r3, #8]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4413      	add	r3, r2
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <pbuf_realloc+0xb8>
 80078c6:	4b25      	ldr	r3, [pc, #148]	; (800795c <pbuf_realloc+0x140>)
 80078c8:	f240 220f 	movw	r2, #527	; 0x20f
 80078cc:	4928      	ldr	r1, [pc, #160]	; (8007970 <pbuf_realloc+0x154>)
 80078ce:	4825      	ldr	r0, [pc, #148]	; (8007964 <pbuf_realloc+0x148>)
 80078d0:	f007 fd62 	bl	800f398 <iprintf>
  while (rem_len > q->len) {
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	895b      	ldrh	r3, [r3, #10]
 80078d8:	8a7a      	ldrh	r2, [r7, #18]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d8d4      	bhi.n	8007888 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	7b1b      	ldrb	r3, [r3, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d122      	bne.n	800792c <pbuf_realloc+0x110>
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	895b      	ldrh	r3, [r3, #10]
 80078ea:	8a7a      	ldrh	r2, [r7, #18]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d01d      	beq.n	800792c <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	7b5b      	ldrb	r3, [r3, #13]
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d117      	bne.n	800792c <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	461a      	mov	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	b29a      	uxth	r2, r3
 8007908:	8a7b      	ldrh	r3, [r7, #18]
 800790a:	4413      	add	r3, r2
 800790c:	b29b      	uxth	r3, r3
 800790e:	4619      	mov	r1, r3
 8007910:	6978      	ldr	r0, [r7, #20]
 8007912:	f7ff f8ef 	bl	8006af4 <mem_trim>
 8007916:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <pbuf_realloc+0x110>
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <pbuf_realloc+0x140>)
 8007920:	f240 221d 	movw	r2, #541	; 0x21d
 8007924:	4913      	ldr	r1, [pc, #76]	; (8007974 <pbuf_realloc+0x158>)
 8007926:	480f      	ldr	r0, [pc, #60]	; (8007964 <pbuf_realloc+0x148>)
 8007928:	f007 fd36 	bl	800f398 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	8a7a      	ldrh	r2, [r7, #18]
 8007930:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	895a      	ldrh	r2, [r3, #10]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d004      	beq.n	800794c <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f8dc 	bl	8007b04 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	e000      	b.n	8007956 <pbuf_realloc+0x13a>
    return;
 8007954:	bf00      	nop

}
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	08010678 	.word	0x08010678
 8007960:	08010834 	.word	0x08010834
 8007964:	080106c4 	.word	0x080106c4
 8007968:	0801084c 	.word	0x0801084c
 800796c:	08010868 	.word	0x08010868
 8007970:	0801087c 	.word	0x0801087c
 8007974:	08010894 	.word	0x08010894

08007978 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	807b      	strh	r3, [r7, #2]
 8007984:	4613      	mov	r3, r2
 8007986:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d106      	bne.n	800799c <pbuf_header_impl+0x24>
 800798e:	4b46      	ldr	r3, [pc, #280]	; (8007aa8 <pbuf_header_impl+0x130>)
 8007990:	f240 223f 	movw	r2, #575	; 0x23f
 8007994:	4945      	ldr	r1, [pc, #276]	; (8007aac <pbuf_header_impl+0x134>)
 8007996:	4846      	ldr	r0, [pc, #280]	; (8007ab0 <pbuf_header_impl+0x138>)
 8007998:	f007 fcfe 	bl	800f398 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800799c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <pbuf_header_impl+0x32>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <pbuf_header_impl+0x36>
    return 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	e078      	b.n	8007aa0 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80079ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da10      	bge.n	80079d8 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80079b6:	887b      	ldrh	r3, [r7, #2]
 80079b8:	425b      	negs	r3, r3
 80079ba:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	895b      	ldrh	r3, [r3, #10]
 80079c0:	89fa      	ldrh	r2, [r7, #14]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d90a      	bls.n	80079dc <pbuf_header_impl+0x64>
 80079c6:	4b38      	ldr	r3, [pc, #224]	; (8007aa8 <pbuf_header_impl+0x130>)
 80079c8:	f240 2247 	movw	r2, #583	; 0x247
 80079cc:	4939      	ldr	r1, [pc, #228]	; (8007ab4 <pbuf_header_impl+0x13c>)
 80079ce:	4838      	ldr	r0, [pc, #224]	; (8007ab0 <pbuf_header_impl+0x138>)
 80079d0:	f007 fce2 	bl	800f398 <iprintf>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e063      	b.n	8007aa0 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80079d8:	887b      	ldrh	r3, [r7, #2]
 80079da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7b1b      	ldrb	r3, [r3, #12]
 80079e0:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80079e8:	89bb      	ldrh	r3, [r7, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <pbuf_header_impl+0x7c>
 80079ee:	89bb      	ldrh	r3, [r7, #12]
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d112      	bne.n	8007a1a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079fc:	425b      	negs	r3, r3
 80079fe:	441a      	add	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3310      	adds	r3, #16
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d238      	bcs.n	8007a82 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e042      	b.n	8007aa0 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8007a1a:	89bb      	ldrh	r3, [r7, #12]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d002      	beq.n	8007a26 <pbuf_header_impl+0xae>
 8007a20:	89bb      	ldrh	r3, [r7, #12]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d124      	bne.n	8007a70 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007a26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da0d      	bge.n	8007a4a <pbuf_header_impl+0xd2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	895b      	ldrh	r3, [r3, #10]
 8007a32:	89fa      	ldrh	r2, [r7, #14]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d808      	bhi.n	8007a4a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a40:	425b      	negs	r3, r3
 8007a42:	441a      	add	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	605a      	str	r2, [r3, #4]
 8007a48:	e011      	b.n	8007a6e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8007a4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd0b      	ble.n	8007a6a <pbuf_header_impl+0xf2>
 8007a52:	787b      	ldrb	r3, [r7, #1]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d008      	beq.n	8007a6a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a60:	425b      	negs	r3, r3
 8007a62:	441a      	add	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	605a      	str	r2, [r3, #4]
 8007a68:	e001      	b.n	8007a6e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e018      	b.n	8007aa0 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007a6e:	e008      	b.n	8007a82 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8007a70:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <pbuf_header_impl+0x130>)
 8007a72:	f240 2277 	movw	r2, #631	; 0x277
 8007a76:	4910      	ldr	r1, [pc, #64]	; (8007ab8 <pbuf_header_impl+0x140>)
 8007a78:	480d      	ldr	r0, [pc, #52]	; (8007ab0 <pbuf_header_impl+0x138>)
 8007a7a:	f007 fc8d 	bl	800f398 <iprintf>
    return 1;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e00e      	b.n	8007aa0 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	895a      	ldrh	r2, [r3, #10]
 8007a86:	887b      	ldrh	r3, [r7, #2]
 8007a88:	4413      	add	r3, r2
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	891a      	ldrh	r2, [r3, #8]
 8007a94:	887b      	ldrh	r3, [r7, #2]
 8007a96:	4413      	add	r3, r2
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	08010678 	.word	0x08010678
 8007aac:	080108b0 	.word	0x080108b0
 8007ab0:	080106c4 	.word	0x080106c4
 8007ab4:	080108bc 	.word	0x080108bc
 8007ab8:	080108dc 	.word	0x080108dc

08007abc <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8007ac8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007acc:	2200      	movs	r2, #0
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff ff51 	bl	8007978 <pbuf_header_impl>
 8007ad6:	4603      	mov	r3, r0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8007aec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007af0:	2201      	movs	r2, #1
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff ff3f 	bl	8007978 <pbuf_header_impl>
 8007afa:	4603      	mov	r3, r0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10b      	bne.n	8007b2a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <pbuf_free+0x22>
 8007b18:	4b41      	ldr	r3, [pc, #260]	; (8007c20 <pbuf_free+0x11c>)
 8007b1a:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007b1e:	4941      	ldr	r1, [pc, #260]	; (8007c24 <pbuf_free+0x120>)
 8007b20:	4841      	ldr	r0, [pc, #260]	; (8007c28 <pbuf_free+0x124>)
 8007b22:	f007 fc39 	bl	800f398 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e076      	b.n	8007c18 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7b1b      	ldrb	r3, [r3, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d012      	beq.n	8007b58 <pbuf_free+0x54>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	7b1b      	ldrb	r3, [r3, #12]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d00e      	beq.n	8007b58 <pbuf_free+0x54>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7b1b      	ldrb	r3, [r3, #12]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d00a      	beq.n	8007b58 <pbuf_free+0x54>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	7b1b      	ldrb	r3, [r3, #12]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d006      	beq.n	8007b58 <pbuf_free+0x54>
 8007b4a:	4b35      	ldr	r3, [pc, #212]	; (8007c20 <pbuf_free+0x11c>)
 8007b4c:	f240 22de 	movw	r2, #734	; 0x2de
 8007b50:	4936      	ldr	r1, [pc, #216]	; (8007c2c <pbuf_free+0x128>)
 8007b52:	4835      	ldr	r0, [pc, #212]	; (8007c28 <pbuf_free+0x124>)
 8007b54:	f007 fc20 	bl	800f398 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007b5c:	e058      	b.n	8007c10 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8007b5e:	f007 fbb7 	bl	800f2d0 <sys_arch_protect>
 8007b62:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	89db      	ldrh	r3, [r3, #14]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d106      	bne.n	8007b7a <pbuf_free+0x76>
 8007b6c:	4b2c      	ldr	r3, [pc, #176]	; (8007c20 <pbuf_free+0x11c>)
 8007b6e:	f240 22eb 	movw	r2, #747	; 0x2eb
 8007b72:	492f      	ldr	r1, [pc, #188]	; (8007c30 <pbuf_free+0x12c>)
 8007b74:	482c      	ldr	r0, [pc, #176]	; (8007c28 <pbuf_free+0x124>)
 8007b76:	f007 fc0f 	bl	800f398 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	89db      	ldrh	r3, [r3, #14]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	81da      	strh	r2, [r3, #14]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	89db      	ldrh	r3, [r3, #14]
 8007b8a:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8007b8c:	69b8      	ldr	r0, [r7, #24]
 8007b8e:	f007 fbad 	bl	800f2ec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007b92:	8afb      	ldrh	r3, [r7, #22]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d139      	bne.n	8007c0c <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7b1b      	ldrb	r3, [r3, #12]
 8007ba2:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7b5b      	ldrb	r3, [r3, #13]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d011      	beq.n	8007bd4 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <pbuf_free+0xc6>
 8007bbc:	4b18      	ldr	r3, [pc, #96]	; (8007c20 <pbuf_free+0x11c>)
 8007bbe:	f240 22f9 	movw	r2, #761	; 0x2f9
 8007bc2:	491c      	ldr	r1, [pc, #112]	; (8007c34 <pbuf_free+0x130>)
 8007bc4:	4818      	ldr	r0, [pc, #96]	; (8007c28 <pbuf_free+0x124>)
 8007bc6:	f007 fbe7 	bl	800f398 <iprintf>
        pc->custom_free_function(p);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
 8007bd2:	e015      	b.n	8007c00 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8007bd4:	89fb      	ldrh	r3, [r7, #14]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d104      	bne.n	8007be4 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	200c      	movs	r0, #12
 8007bde:	f7ff fa35 	bl	800704c <memp_free>
 8007be2:	e00d      	b.n	8007c00 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8007be4:	89fb      	ldrh	r3, [r7, #14]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d002      	beq.n	8007bf0 <pbuf_free+0xec>
 8007bea:	89fb      	ldrh	r3, [r7, #14]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d104      	bne.n	8007bfa <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	200b      	movs	r0, #11
 8007bf4:	f7ff fa2a 	bl	800704c <memp_free>
 8007bf8:	e002      	b.n	8007c00 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7fe ff0c 	bl	8006a18 <mem_free>
        }
      }
      count++;
 8007c00:	7ffb      	ldrb	r3, [r7, #31]
 8007c02:	3301      	adds	r3, #1
 8007c04:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	607b      	str	r3, [r7, #4]
 8007c0a:	e001      	b.n	8007c10 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1a3      	bne.n	8007b5e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	08010678 	.word	0x08010678
 8007c24:	080108b0 	.word	0x080108b0
 8007c28:	080106c4 	.word	0x080106c4
 8007c2c:	080108ec 	.word	0x080108ec
 8007c30:	08010904 	.word	0x08010904
 8007c34:	0801091c 	.word	0x0801091c

08007c38 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007c44:	e005      	b.n	8007c52 <pbuf_clen+0x1a>
    ++len;
 8007c46:	89fb      	ldrh	r3, [r7, #14]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f6      	bne.n	8007c46 <pbuf_clen+0xe>
  }
  return len;
 8007c58:	89fb      	ldrh	r3, [r7, #14]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
	...

08007c68 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d016      	beq.n	8007ca4 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8007c76:	f007 fb2b 	bl	800f2d0 <sys_arch_protect>
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	89db      	ldrh	r3, [r3, #14]
 8007c80:	3301      	adds	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	81da      	strh	r2, [r3, #14]
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f007 fb2f 	bl	800f2ec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	89db      	ldrh	r3, [r3, #14]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <pbuf_ref+0x3c>
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <pbuf_ref+0x44>)
 8007c98:	f240 3239 	movw	r2, #825	; 0x339
 8007c9c:	4904      	ldr	r1, [pc, #16]	; (8007cb0 <pbuf_ref+0x48>)
 8007c9e:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <pbuf_ref+0x4c>)
 8007ca0:	f007 fb7a 	bl	800f398 <iprintf>
  }
}
 8007ca4:	bf00      	nop
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	08010678 	.word	0x08010678
 8007cb0:	08010940 	.word	0x08010940
 8007cb4:	080106c4 	.word	0x080106c4

08007cb8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <pbuf_cat+0x16>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d107      	bne.n	8007cde <pbuf_cat+0x26>
 8007cce:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <pbuf_cat+0x98>)
 8007cd0:	f240 324d 	movw	r2, #845	; 0x34d
 8007cd4:	491f      	ldr	r1, [pc, #124]	; (8007d54 <pbuf_cat+0x9c>)
 8007cd6:	4820      	ldr	r0, [pc, #128]	; (8007d58 <pbuf_cat+0xa0>)
 8007cd8:	f007 fb5e 	bl	800f398 <iprintf>
 8007cdc:	e034      	b.n	8007d48 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	e00a      	b.n	8007cfa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	891a      	ldrh	r2, [r3, #8]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	891b      	ldrh	r3, [r3, #8]
 8007cec:	4413      	add	r3, r2
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f0      	bne.n	8007ce4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	891a      	ldrh	r2, [r3, #8]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	895b      	ldrh	r3, [r3, #10]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d006      	beq.n	8007d1c <pbuf_cat+0x64>
 8007d0e:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <pbuf_cat+0x98>)
 8007d10:	f240 3255 	movw	r2, #853	; 0x355
 8007d14:	4911      	ldr	r1, [pc, #68]	; (8007d5c <pbuf_cat+0xa4>)
 8007d16:	4810      	ldr	r0, [pc, #64]	; (8007d58 <pbuf_cat+0xa0>)
 8007d18:	f007 fb3e 	bl	800f398 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d006      	beq.n	8007d32 <pbuf_cat+0x7a>
 8007d24:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <pbuf_cat+0x98>)
 8007d26:	f240 3256 	movw	r2, #854	; 0x356
 8007d2a:	490d      	ldr	r1, [pc, #52]	; (8007d60 <pbuf_cat+0xa8>)
 8007d2c:	480a      	ldr	r0, [pc, #40]	; (8007d58 <pbuf_cat+0xa0>)
 8007d2e:	f007 fb33 	bl	800f398 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	891a      	ldrh	r2, [r3, #8]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	891b      	ldrh	r3, [r3, #8]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	08010678 	.word	0x08010678
 8007d54:	08010954 	.word	0x08010954
 8007d58:	080106c4 	.word	0x080106c4
 8007d5c:	0801098c 	.word	0x0801098c
 8007d60:	080109bc 	.word	0x080109bc

08007d64 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	81fb      	strh	r3, [r7, #14]
 8007d72:	2300      	movs	r3, #0
 8007d74:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d008      	beq.n	8007d8e <pbuf_copy+0x2a>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <pbuf_copy+0x2a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	891a      	ldrh	r2, [r3, #8]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	891b      	ldrh	r3, [r3, #8]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d209      	bcs.n	8007da2 <pbuf_copy+0x3e>
 8007d8e:	4b54      	ldr	r3, [pc, #336]	; (8007ee0 <pbuf_copy+0x17c>)
 8007d90:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007d94:	4953      	ldr	r1, [pc, #332]	; (8007ee4 <pbuf_copy+0x180>)
 8007d96:	4854      	ldr	r0, [pc, #336]	; (8007ee8 <pbuf_copy+0x184>)
 8007d98:	f007 fafe 	bl	800f398 <iprintf>
 8007d9c:	f06f 030f 	mvn.w	r3, #15
 8007da0:	e099      	b.n	8007ed6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	895b      	ldrh	r3, [r3, #10]
 8007da6:	461a      	mov	r2, r3
 8007da8:	89fb      	ldrh	r3, [r7, #14]
 8007daa:	1ad2      	subs	r2, r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	895b      	ldrh	r3, [r3, #10]
 8007db0:	4619      	mov	r1, r3
 8007db2:	89bb      	ldrh	r3, [r7, #12]
 8007db4:	1acb      	subs	r3, r1, r3
 8007db6:	429a      	cmp	r2, r3
 8007db8:	db05      	blt.n	8007dc6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	895a      	ldrh	r2, [r3, #10]
 8007dbe:	89bb      	ldrh	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	817b      	strh	r3, [r7, #10]
 8007dc4:	e004      	b.n	8007dd0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	895a      	ldrh	r2, [r3, #10]
 8007dca:	89fb      	ldrh	r3, [r7, #14]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	89fb      	ldrh	r3, [r7, #14]
 8007dd6:	18d0      	adds	r0, r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	89bb      	ldrh	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	897a      	ldrh	r2, [r7, #10]
 8007de2:	4619      	mov	r1, r3
 8007de4:	f007 fac5 	bl	800f372 <memcpy>
    offset_to += len;
 8007de8:	89fa      	ldrh	r2, [r7, #14]
 8007dea:	897b      	ldrh	r3, [r7, #10]
 8007dec:	4413      	add	r3, r2
 8007dee:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8007df0:	89ba      	ldrh	r2, [r7, #12]
 8007df2:	897b      	ldrh	r3, [r7, #10]
 8007df4:	4413      	add	r3, r2
 8007df6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	895b      	ldrh	r3, [r3, #10]
 8007dfc:	89fa      	ldrh	r2, [r7, #14]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d906      	bls.n	8007e10 <pbuf_copy+0xac>
 8007e02:	4b37      	ldr	r3, [pc, #220]	; (8007ee0 <pbuf_copy+0x17c>)
 8007e04:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007e08:	4938      	ldr	r1, [pc, #224]	; (8007eec <pbuf_copy+0x188>)
 8007e0a:	4837      	ldr	r0, [pc, #220]	; (8007ee8 <pbuf_copy+0x184>)
 8007e0c:	f007 fac4 	bl	800f398 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	895b      	ldrh	r3, [r3, #10]
 8007e14:	89ba      	ldrh	r2, [r7, #12]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d906      	bls.n	8007e28 <pbuf_copy+0xc4>
 8007e1a:	4b31      	ldr	r3, [pc, #196]	; (8007ee0 <pbuf_copy+0x17c>)
 8007e1c:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007e20:	4933      	ldr	r1, [pc, #204]	; (8007ef0 <pbuf_copy+0x18c>)
 8007e22:	4831      	ldr	r0, [pc, #196]	; (8007ee8 <pbuf_copy+0x184>)
 8007e24:	f007 fab8 	bl	800f398 <iprintf>
    if (offset_from >= p_from->len) {
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	895b      	ldrh	r3, [r3, #10]
 8007e2c:	89ba      	ldrh	r2, [r7, #12]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d304      	bcc.n	8007e3c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	895b      	ldrh	r3, [r3, #10]
 8007e40:	89fa      	ldrh	r2, [r7, #14]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d114      	bne.n	8007e70 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10c      	bne.n	8007e70 <pbuf_copy+0x10c>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d009      	beq.n	8007e70 <pbuf_copy+0x10c>
 8007e5c:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <pbuf_copy+0x17c>)
 8007e5e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8007e62:	4924      	ldr	r1, [pc, #144]	; (8007ef4 <pbuf_copy+0x190>)
 8007e64:	4820      	ldr	r0, [pc, #128]	; (8007ee8 <pbuf_copy+0x184>)
 8007e66:	f007 fa97 	bl	800f398 <iprintf>
 8007e6a:	f06f 030f 	mvn.w	r3, #15
 8007e6e:	e032      	b.n	8007ed6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d013      	beq.n	8007e9e <pbuf_copy+0x13a>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	895a      	ldrh	r2, [r3, #10]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	891b      	ldrh	r3, [r3, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d10d      	bne.n	8007e9e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d009      	beq.n	8007e9e <pbuf_copy+0x13a>
 8007e8a:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <pbuf_copy+0x17c>)
 8007e8c:	f240 32de 	movw	r2, #990	; 0x3de
 8007e90:	4919      	ldr	r1, [pc, #100]	; (8007ef8 <pbuf_copy+0x194>)
 8007e92:	4815      	ldr	r0, [pc, #84]	; (8007ee8 <pbuf_copy+0x184>)
 8007e94:	f007 fa80 	bl	800f398 <iprintf>
 8007e98:	f06f 0305 	mvn.w	r3, #5
 8007e9c:	e01b      	b.n	8007ed6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d013      	beq.n	8007ecc <pbuf_copy+0x168>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	895a      	ldrh	r2, [r3, #10]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	891b      	ldrh	r3, [r3, #8]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d10d      	bne.n	8007ecc <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <pbuf_copy+0x168>
 8007eb8:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <pbuf_copy+0x17c>)
 8007eba:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007ebe:	490e      	ldr	r1, [pc, #56]	; (8007ef8 <pbuf_copy+0x194>)
 8007ec0:	4809      	ldr	r0, [pc, #36]	; (8007ee8 <pbuf_copy+0x184>)
 8007ec2:	f007 fa69 	bl	800f398 <iprintf>
 8007ec6:	f06f 0305 	mvn.w	r3, #5
 8007eca:	e004      	b.n	8007ed6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f47f af67 	bne.w	8007da2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	08010678 	.word	0x08010678
 8007ee4:	08010a08 	.word	0x08010a08
 8007ee8:	080106c4 	.word	0x080106c4
 8007eec:	08010a38 	.word	0x08010a38
 8007ef0:	08010a50 	.word	0x08010a50
 8007ef4:	08010a6c 	.word	0x08010a6c
 8007ef8:	08010a7c 	.word	0x08010a7c

08007efc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4611      	mov	r1, r2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	80fb      	strh	r3, [r7, #6]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d108      	bne.n	8007f2e <pbuf_copy_partial+0x32>
 8007f1c:	4b30      	ldr	r3, [pc, #192]	; (8007fe0 <pbuf_copy_partial+0xe4>)
 8007f1e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007f22:	4930      	ldr	r1, [pc, #192]	; (8007fe4 <pbuf_copy_partial+0xe8>)
 8007f24:	4830      	ldr	r0, [pc, #192]	; (8007fe8 <pbuf_copy_partial+0xec>)
 8007f26:	f007 fa37 	bl	800f398 <iprintf>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e054      	b.n	8007fd8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d108      	bne.n	8007f46 <pbuf_copy_partial+0x4a>
 8007f34:	4b2a      	ldr	r3, [pc, #168]	; (8007fe0 <pbuf_copy_partial+0xe4>)
 8007f36:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007f3a:	492c      	ldr	r1, [pc, #176]	; (8007fec <pbuf_copy_partial+0xf0>)
 8007f3c:	482a      	ldr	r0, [pc, #168]	; (8007fe8 <pbuf_copy_partial+0xec>)
 8007f3e:	f007 fa2b 	bl	800f398 <iprintf>
 8007f42:	2300      	movs	r3, #0
 8007f44:	e048      	b.n	8007fd8 <pbuf_copy_partial+0xdc>

  left = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <pbuf_copy_partial+0x5a>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <pbuf_copy_partial+0x5e>
    return 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	e03e      	b.n	8007fd8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	61fb      	str	r3, [r7, #28]
 8007f5e:	e034      	b.n	8007fca <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8007f60:	88bb      	ldrh	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <pbuf_copy_partial+0x80>
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	895b      	ldrh	r3, [r3, #10]
 8007f6a:	88ba      	ldrh	r2, [r7, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d305      	bcc.n	8007f7c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	895b      	ldrh	r3, [r3, #10]
 8007f74:	88ba      	ldrh	r2, [r7, #4]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	80bb      	strh	r3, [r7, #4]
 8007f7a:	e023      	b.n	8007fc4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	895a      	ldrh	r2, [r3, #10]
 8007f80:	88bb      	ldrh	r3, [r7, #4]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007f86:	8b3a      	ldrh	r2, [r7, #24]
 8007f88:	88fb      	ldrh	r3, [r7, #6]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d901      	bls.n	8007f92 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007f92:	8b7b      	ldrh	r3, [r7, #26]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	18d0      	adds	r0, r2, r3
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	88bb      	ldrh	r3, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	8b3a      	ldrh	r2, [r7, #24]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f007 f9e5 	bl	800f372 <memcpy>
      copied_total += buf_copy_len;
 8007fa8:	8afa      	ldrh	r2, [r7, #22]
 8007faa:	8b3b      	ldrh	r3, [r7, #24]
 8007fac:	4413      	add	r3, r2
 8007fae:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8007fb0:	8b7a      	ldrh	r2, [r7, #26]
 8007fb2:	8b3b      	ldrh	r3, [r7, #24]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	8b3b      	ldrh	r3, [r7, #24]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	88fb      	ldrh	r3, [r7, #6]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <pbuf_copy_partial+0xda>
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1c4      	bne.n	8007f60 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8007fd6:	8afb      	ldrh	r3, [r7, #22]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3720      	adds	r7, #32
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	08010678 	.word	0x08010678
 8007fe4:	08010aa8 	.word	0x08010aa8
 8007fe8:	080106c4 	.word	0x080106c4
 8007fec:	08010ac8 	.word	0x08010ac8

08007ff0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
	...

08008000 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008004:	f000 fdf4 	bl	8008bf0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008008:	4b07      	ldr	r3, [pc, #28]	; (8008028 <tcp_tmr+0x28>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	3301      	adds	r3, #1
 800800e:	b2da      	uxtb	r2, r3
 8008010:	4b05      	ldr	r3, [pc, #20]	; (8008028 <tcp_tmr+0x28>)
 8008012:	701a      	strb	r2, [r3, #0]
 8008014:	4b04      	ldr	r3, [pc, #16]	; (8008028 <tcp_tmr+0x28>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008020:	f000 fb26 	bl	8008670 <tcp_slowtmr>
  }
}
 8008024:	bf00      	nop
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20004089 	.word	0x20004089

0800802c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	e00a      	b.n	8008052 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d102      	bne.n	800804c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1f1      	bne.n	800803c <tcp_remove_listener+0x10>
      }
   }
}
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d105      	bne.n	800807e <tcp_listen_closed+0x1a>
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <tcp_listen_closed+0x5c>)
 8008074:	22c0      	movs	r2, #192	; 0xc0
 8008076:	4913      	ldr	r1, [pc, #76]	; (80080c4 <tcp_listen_closed+0x60>)
 8008078:	4813      	ldr	r0, [pc, #76]	; (80080c8 <tcp_listen_closed+0x64>)
 800807a:	f007 f98d 	bl	800f398 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7d1b      	ldrb	r3, [r3, #20]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d005      	beq.n	8008092 <tcp_listen_closed+0x2e>
 8008086:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <tcp_listen_closed+0x5c>)
 8008088:	22c1      	movs	r2, #193	; 0xc1
 800808a:	4910      	ldr	r1, [pc, #64]	; (80080cc <tcp_listen_closed+0x68>)
 800808c:	480e      	ldr	r0, [pc, #56]	; (80080c8 <tcp_listen_closed+0x64>)
 800808e:	f007 f983 	bl	800f398 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008092:	2301      	movs	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e00b      	b.n	80080b0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008098:	4a0d      	ldr	r2, [pc, #52]	; (80080d0 <tcp_listen_closed+0x6c>)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff ffc1 	bl	800802c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d9f0      	bls.n	8008098 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80080b6:	bf00      	nop
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	08010bfc 	.word	0x08010bfc
 80080c4:	08010c2c 	.word	0x08010c2c
 80080c8:	08010c38 	.word	0x08010c38
 80080cc:	08010c60 	.word	0x08010c60
 80080d0:	08012080 	.word	0x08012080

080080d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80080d4:	b5b0      	push	{r4, r5, r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af02      	add	r7, sp, #8
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d076      	beq.n	80081d4 <tcp_close_shutdown+0x100>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7d1b      	ldrb	r3, [r3, #20]
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d003      	beq.n	80080f6 <tcp_close_shutdown+0x22>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	7d1b      	ldrb	r3, [r3, #20]
 80080f2:	2b07      	cmp	r3, #7
 80080f4:	d16e      	bne.n	80081d4 <tcp_close_shutdown+0x100>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d105      	bne.n	800810a <tcp_close_shutdown+0x36>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008102:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8008106:	4293      	cmp	r3, r2
 8008108:	d064      	beq.n	80081d4 <tcp_close_shutdown+0x100>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	7e9b      	ldrb	r3, [r3, #26]
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <tcp_close_shutdown+0x50>
 8008116:	4b5a      	ldr	r3, [pc, #360]	; (8008280 <tcp_close_shutdown+0x1ac>)
 8008118:	f240 120f 	movw	r2, #271	; 0x10f
 800811c:	4959      	ldr	r1, [pc, #356]	; (8008284 <tcp_close_shutdown+0x1b0>)
 800811e:	485a      	ldr	r0, [pc, #360]	; (8008288 <tcp_close_shutdown+0x1b4>)
 8008120:	f007 f93a 	bl	800f398 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800812c:	687c      	ldr	r4, [r7, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	1d1d      	adds	r5, r3, #4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	8adb      	ldrh	r3, [r3, #22]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	8b12      	ldrh	r2, [r2, #24]
 800813a:	9201      	str	r2, [sp, #4]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	462b      	mov	r3, r5
 8008140:	4622      	mov	r2, r4
 8008142:	f004 f865 	bl	800c210 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 ffc8 	bl	80090dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800814c:	4b4f      	ldr	r3, [pc, #316]	; (800828c <tcp_close_shutdown+0x1b8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d105      	bne.n	8008162 <tcp_close_shutdown+0x8e>
 8008156:	4b4d      	ldr	r3, [pc, #308]	; (800828c <tcp_close_shutdown+0x1b8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	4a4b      	ldr	r2, [pc, #300]	; (800828c <tcp_close_shutdown+0x1b8>)
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	e013      	b.n	800818a <tcp_close_shutdown+0xb6>
 8008162:	4b4a      	ldr	r3, [pc, #296]	; (800828c <tcp_close_shutdown+0x1b8>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e00c      	b.n	8008184 <tcp_close_shutdown+0xb0>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	429a      	cmp	r2, r3
 8008172:	d104      	bne.n	800817e <tcp_close_shutdown+0xaa>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	60da      	str	r2, [r3, #12]
 800817c:	e005      	b.n	800818a <tcp_close_shutdown+0xb6>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1ef      	bne.n	800816a <tcp_close_shutdown+0x96>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	60da      	str	r2, [r3, #12]
 8008190:	4b3f      	ldr	r3, [pc, #252]	; (8008290 <tcp_close_shutdown+0x1bc>)
 8008192:	2201      	movs	r2, #1
 8008194:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	7d1b      	ldrb	r3, [r3, #20]
 800819a:	2b04      	cmp	r3, #4
 800819c:	d10c      	bne.n	80081b8 <tcp_close_shutdown+0xe4>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	220a      	movs	r2, #10
 80081a2:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80081a4:	4b3b      	ldr	r3, [pc, #236]	; (8008294 <tcp_close_shutdown+0x1c0>)
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60da      	str	r2, [r3, #12]
 80081ac:	4a39      	ldr	r2, [pc, #228]	; (8008294 <tcp_close_shutdown+0x1c0>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	f004 fa7d 	bl	800c6b0 <tcp_timer_needed>
 80081b6:	e00b      	b.n	80081d0 <tcp_close_shutdown+0xfc>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80081b8:	4b37      	ldr	r3, [pc, #220]	; (8008298 <tcp_close_shutdown+0x1c4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d102      	bne.n	80081c8 <tcp_close_shutdown+0xf4>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80081c2:	f003 faef 	bl	800b7a4 <tcp_trigger_input_pcb_close>
 80081c6:	e003      	b.n	80081d0 <tcp_close_shutdown+0xfc>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80081c8:	6879      	ldr	r1, [r7, #4]
 80081ca:	2001      	movs	r0, #1
 80081cc:	f7fe ff3e 	bl	800704c <memp_free>
        }
      }
      return ERR_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e050      	b.n	8008276 <tcp_close_shutdown+0x1a2>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7d1b      	ldrb	r3, [r3, #20]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d02e      	beq.n	800823a <tcp_close_shutdown+0x166>
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d038      	beq.n	8008252 <tcp_close_shutdown+0x17e>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d142      	bne.n	800826a <tcp_close_shutdown+0x196>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8adb      	ldrh	r3, [r3, #22]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d021      	beq.n	8008230 <tcp_close_shutdown+0x15c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80081ec:	4b2b      	ldr	r3, [pc, #172]	; (800829c <tcp_close_shutdown+0x1c8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d105      	bne.n	8008202 <tcp_close_shutdown+0x12e>
 80081f6:	4b29      	ldr	r3, [pc, #164]	; (800829c <tcp_close_shutdown+0x1c8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	4a27      	ldr	r2, [pc, #156]	; (800829c <tcp_close_shutdown+0x1c8>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	e013      	b.n	800822a <tcp_close_shutdown+0x156>
 8008202:	4b26      	ldr	r3, [pc, #152]	; (800829c <tcp_close_shutdown+0x1c8>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60bb      	str	r3, [r7, #8]
 8008208:	e00c      	b.n	8008224 <tcp_close_shutdown+0x150>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	429a      	cmp	r2, r3
 8008212:	d104      	bne.n	800821e <tcp_close_shutdown+0x14a>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	60da      	str	r2, [r3, #12]
 800821c:	e005      	b.n	800822a <tcp_close_shutdown+0x156>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	60bb      	str	r3, [r7, #8]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1ef      	bne.n	800820a <tcp_close_shutdown+0x136>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	2001      	movs	r0, #1
 8008234:	f7fe ff0a 	bl	800704c <memp_free>
    break;
 8008238:	e01c      	b.n	8008274 <tcp_close_shutdown+0x1a0>
  case LISTEN:
    tcp_listen_closed(pcb);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7ff ff12 	bl	8008064 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008240:	6879      	ldr	r1, [r7, #4]
 8008242:	4817      	ldr	r0, [pc, #92]	; (80082a0 <tcp_close_shutdown+0x1cc>)
 8008244:	f000 ff8c 	bl	8009160 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	2002      	movs	r0, #2
 800824c:	f7fe fefe 	bl	800704c <memp_free>
    break;
 8008250:	e010      	b.n	8008274 <tcp_close_shutdown+0x1a0>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	480d      	ldr	r0, [pc, #52]	; (800828c <tcp_close_shutdown+0x1b8>)
 8008256:	f000 ff83 	bl	8009160 <tcp_pcb_remove>
 800825a:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <tcp_close_shutdown+0x1bc>)
 800825c:	2201      	movs	r2, #1
 800825e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	2001      	movs	r0, #1
 8008264:	f7fe fef2 	bl	800704c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8008268:	e004      	b.n	8008274 <tcp_close_shutdown+0x1a0>
  default:
    return tcp_close_shutdown_fin(pcb);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f81a 	bl	80082a4 <tcp_close_shutdown_fin>
 8008270:	4603      	mov	r3, r0
 8008272:	e000      	b.n	8008276 <tcp_close_shutdown+0x1a2>
  }
  return ERR_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bdb0      	pop	{r4, r5, r7, pc}
 800827e:	bf00      	nop
 8008280:	08010bfc 	.word	0x08010bfc
 8008284:	08010c78 	.word	0x08010c78
 8008288:	08010c38 	.word	0x08010c38
 800828c:	2000e41c 	.word	0x2000e41c
 8008290:	2000e418 	.word	0x2000e418
 8008294:	2000e42c 	.word	0x2000e42c
 8008298:	2000e430 	.word	0x2000e430
 800829c:	2000e428 	.word	0x2000e428
 80082a0:	2000e424 	.word	0x2000e424

080082a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <tcp_close_shutdown_fin+0x1c>
 80082b2:	4b2c      	ldr	r3, [pc, #176]	; (8008364 <tcp_close_shutdown_fin+0xc0>)
 80082b4:	f240 124d 	movw	r2, #333	; 0x14d
 80082b8:	492b      	ldr	r1, [pc, #172]	; (8008368 <tcp_close_shutdown_fin+0xc4>)
 80082ba:	482c      	ldr	r0, [pc, #176]	; (800836c <tcp_close_shutdown_fin+0xc8>)
 80082bc:	f007 f86c 	bl	800f398 <iprintf>

  switch (pcb->state) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	7d1b      	ldrb	r3, [r3, #20]
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d010      	beq.n	80082ea <tcp_close_shutdown_fin+0x46>
 80082c8:	2b07      	cmp	r3, #7
 80082ca:	d01b      	beq.n	8008304 <tcp_close_shutdown_fin+0x60>
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d126      	bne.n	800831e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f003 faf3 	bl	800b8bc <tcp_send_fin>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80082da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d11f      	bne.n	8008322 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2205      	movs	r2, #5
 80082e6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80082e8:	e01b      	b.n	8008322 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f003 fae6 	bl	800b8bc <tcp_send_fin>
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80082f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d114      	bne.n	8008326 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2205      	movs	r2, #5
 8008300:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008302:	e010      	b.n	8008326 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f003 fad9 	bl	800b8bc <tcp_send_fin>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800830e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2209      	movs	r2, #9
 800831a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800831c:	e005      	b.n	800832a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	e01c      	b.n	800835c <tcp_close_shutdown_fin+0xb8>
    break;
 8008322:	bf00      	nop
 8008324:	e002      	b.n	800832c <tcp_close_shutdown_fin+0x88>
    break;
 8008326:	bf00      	nop
 8008328:	e000      	b.n	800832c <tcp_close_shutdown_fin+0x88>
    break;
 800832a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800832c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f003 fce1 	bl	800bcfc <tcp_output>
 800833a:	e00d      	b.n	8008358 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800833c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d108      	bne.n	8008358 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	7e9b      	ldrb	r3, [r3, #26]
 800834a:	f043 0308 	orr.w	r3, r3, #8
 800834e:	b2da      	uxtb	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	e001      	b.n	800835c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8008358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	08010bfc 	.word	0x08010bfc
 8008368:	08010c2c 	.word	0x08010c2c
 800836c:	08010c38 	.word	0x08010c38

08008370 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7d1b      	ldrb	r3, [r3, #20]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d006      	beq.n	800838e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	7e9b      	ldrb	r3, [r3, #26]
 8008384:	f043 0310 	orr.w	r3, r3, #16
 8008388:	b2da      	uxtb	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800838e:	2101      	movs	r1, #1
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7ff fe9f 	bl	80080d4 <tcp_close_shutdown>
 8008396:	4603      	mov	r3, r0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08c      	sub	sp, #48	; 0x30
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7d1b      	ldrb	r3, [r3, #20]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d106      	bne.n	80083c0 <tcp_abandon+0x20>
 80083b2:	4b4d      	ldr	r3, [pc, #308]	; (80084e8 <tcp_abandon+0x148>)
 80083b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80083b8:	494c      	ldr	r1, [pc, #304]	; (80084ec <tcp_abandon+0x14c>)
 80083ba:	484d      	ldr	r0, [pc, #308]	; (80084f0 <tcp_abandon+0x150>)
 80083bc:	f006 ffec 	bl	800f398 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7d1b      	ldrb	r3, [r3, #20]
 80083c4:	2b0a      	cmp	r3, #10
 80083c6:	d108      	bne.n	80083da <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	484a      	ldr	r0, [pc, #296]	; (80084f4 <tcp_abandon+0x154>)
 80083cc:	f000 fec8 	bl	8009160 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	2001      	movs	r0, #1
 80083d4:	f7fe fe3a 	bl	800704c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80083d8:	e081      	b.n	80084de <tcp_abandon+0x13e>
    int send_rst = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7d1b      	ldrb	r3, [r3, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d126      	bne.n	8008452 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	8adb      	ldrh	r3, [r3, #22]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d02e      	beq.n	800846a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800840c:	4b3a      	ldr	r3, [pc, #232]	; (80084f8 <tcp_abandon+0x158>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	429a      	cmp	r2, r3
 8008414:	d105      	bne.n	8008422 <tcp_abandon+0x82>
 8008416:	4b38      	ldr	r3, [pc, #224]	; (80084f8 <tcp_abandon+0x158>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	4a36      	ldr	r2, [pc, #216]	; (80084f8 <tcp_abandon+0x158>)
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	e013      	b.n	800844a <tcp_abandon+0xaa>
 8008422:	4b35      	ldr	r3, [pc, #212]	; (80084f8 <tcp_abandon+0x158>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	61fb      	str	r3, [r7, #28]
 8008428:	e00c      	b.n	8008444 <tcp_abandon+0xa4>
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	429a      	cmp	r2, r3
 8008432:	d104      	bne.n	800843e <tcp_abandon+0x9e>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	60da      	str	r2, [r3, #12]
 800843c:	e005      	b.n	800844a <tcp_abandon+0xaa>
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	61fb      	str	r3, [r7, #28]
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1ef      	bne.n	800842a <tcp_abandon+0x8a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	60da      	str	r2, [r3, #12]
 8008450:	e00b      	b.n	800846a <tcp_abandon+0xca>
      send_rst = reset;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8adb      	ldrh	r3, [r3, #22]
 800845a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	4827      	ldr	r0, [pc, #156]	; (80084fc <tcp_abandon+0x15c>)
 8008460:	f000 fe7e 	bl	8009160 <tcp_pcb_remove>
 8008464:	4b26      	ldr	r3, [pc, #152]	; (8008500 <tcp_abandon+0x160>)
 8008466:	2201      	movs	r2, #1
 8008468:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fc88 	bl	8008d8c <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fc7f 	bl	8008d8c <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fc76 	bl	8008d8c <tcp_segs_free>
    if (send_rst) {
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00c      	beq.n	80084c0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	1d19      	adds	r1, r3, #4
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	8b1b      	ldrh	r3, [r3, #24]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	460b      	mov	r3, r1
 80084b8:	6979      	ldr	r1, [r7, #20]
 80084ba:	69b8      	ldr	r0, [r7, #24]
 80084bc:	f003 fea8 	bl	800c210 <tcp_rst>
    last_state = pcb->state;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7d1b      	ldrb	r3, [r3, #20]
 80084c4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	2001      	movs	r0, #1
 80084ca:	f7fe fdbf 	bl	800704c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <tcp_abandon+0x13e>
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f06f 010c 	mvn.w	r1, #12
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	4798      	blx	r3
}
 80084de:	bf00      	nop
 80084e0:	3728      	adds	r7, #40	; 0x28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	08010bfc 	.word	0x08010bfc
 80084ec:	08010c94 	.word	0x08010c94
 80084f0:	08010c38 	.word	0x08010c38
 80084f4:	2000e42c 	.word	0x2000e42c
 80084f8:	2000e428 	.word	0x2000e428
 80084fc:	2000e41c 	.word	0x2000e41c
 8008500:	2000e418 	.word	0x2000e418

08008504 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800850c:	2101      	movs	r1, #1
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7ff ff46 	bl	80083a0 <tcp_abandon>
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800852c:	4413      	add	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008538:	f640 3168 	movw	r1, #2920	; 0xb68
 800853c:	428a      	cmp	r2, r1
 800853e:	bf28      	it	cs
 8008540:	460a      	movcs	r2, r1
 8008542:	b292      	uxth	r2, r2
 8008544:	4413      	add	r3, r2
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	db08      	blt.n	8008560 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	e020      	b.n	80085a2 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	dd03      	ble.n	8008576 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008574:	e014      	b.n	80085a0 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008588:	d306      	bcc.n	8008598 <tcp_update_rcv_ann_wnd+0x7c>
 800858a:	4b08      	ldr	r3, [pc, #32]	; (80085ac <tcp_update_rcv_ann_wnd+0x90>)
 800858c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8008590:	4907      	ldr	r1, [pc, #28]	; (80085b0 <tcp_update_rcv_ann_wnd+0x94>)
 8008592:	4808      	ldr	r0, [pc, #32]	; (80085b4 <tcp_update_rcv_ann_wnd+0x98>)
 8008594:	f006 ff00 	bl	800f398 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	b29a      	uxth	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80085a0:	2300      	movs	r3, #0
  }
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	08010bfc 	.word	0x08010bfc
 80085b0:	08010d14 	.word	0x08010d14
 80085b4:	08010c38 	.word	0x08010c38

080085b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	7d1b      	ldrb	r3, [r3, #20]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d106      	bne.n	80085da <tcp_recved+0x22>
 80085cc:	4b24      	ldr	r3, [pc, #144]	; (8008660 <tcp_recved+0xa8>)
 80085ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80085d2:	4924      	ldr	r1, [pc, #144]	; (8008664 <tcp_recved+0xac>)
 80085d4:	4824      	ldr	r0, [pc, #144]	; (8008668 <tcp_recved+0xb0>)
 80085d6:	f006 fedf 	bl	800f398 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80085de:	887b      	ldrh	r3, [r7, #2]
 80085e0:	4413      	add	r3, r2
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ec:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d904      	bls.n	80085fe <tcp_recved+0x46>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80085fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80085fc:	e017      	b.n	800862e <tcp_recved+0x76>
  } else if (pcb->rcv_wnd == 0) {
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	d113      	bne.n	800862e <tcp_recved+0x76>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	7d1b      	ldrb	r3, [r3, #20]
 800860a:	2b07      	cmp	r3, #7
 800860c:	d003      	beq.n	8008616 <tcp_recved+0x5e>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7d1b      	ldrb	r3, [r3, #20]
 8008612:	2b09      	cmp	r3, #9
 8008614:	d104      	bne.n	8008620 <tcp_recved+0x68>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800861c:	851a      	strh	r2, [r3, #40]	; 0x28
 800861e:	e006      	b.n	800862e <tcp_recved+0x76>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8008620:	4b0f      	ldr	r3, [pc, #60]	; (8008660 <tcp_recved+0xa8>)
 8008622:	f240 322d 	movw	r2, #813	; 0x32d
 8008626:	4911      	ldr	r1, [pc, #68]	; (800866c <tcp_recved+0xb4>)
 8008628:	480f      	ldr	r0, [pc, #60]	; (8008668 <tcp_recved+0xb0>)
 800862a:	f006 feb5 	bl	800f398 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff ff74 	bl	800851c <tcp_update_rcv_ann_wnd>
 8008634:	4603      	mov	r3, r0
 8008636:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800863e:	4293      	cmp	r3, r2
 8008640:	dd09      	ble.n	8008656 <tcp_recved+0x9e>
    tcp_ack_now(pcb);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	7e9b      	ldrb	r3, [r3, #26]
 8008646:	f043 0302 	orr.w	r3, r3, #2
 800864a:	b2da      	uxtb	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f003 fb53 	bl	800bcfc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	08010bfc 	.word	0x08010bfc
 8008664:	08010d30 	.word	0x08010d30
 8008668:	08010c38 	.word	0x08010c38
 800866c:	08010d58 	.word	0x08010d58

08008670 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008670:	b5b0      	push	{r4, r5, r7, lr}
 8008672:	b08c      	sub	sp, #48	; 0x30
 8008674:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800867a:	4b97      	ldr	r3, [pc, #604]	; (80088d8 <tcp_slowtmr+0x268>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	4a95      	ldr	r2, [pc, #596]	; (80088d8 <tcp_slowtmr+0x268>)
 8008682:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008684:	4b95      	ldr	r3, [pc, #596]	; (80088dc <tcp_slowtmr+0x26c>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	3301      	adds	r3, #1
 800868a:	b2da      	uxtb	r2, r3
 800868c:	4b93      	ldr	r3, [pc, #588]	; (80088dc <tcp_slowtmr+0x26c>)
 800868e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008690:	2300      	movs	r3, #0
 8008692:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8008694:	4b92      	ldr	r3, [pc, #584]	; (80088e0 <tcp_slowtmr+0x270>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800869a:	e227      	b.n	8008aec <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	7d1b      	ldrb	r3, [r3, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d106      	bne.n	80086b2 <tcp_slowtmr+0x42>
 80086a4:	4b8f      	ldr	r3, [pc, #572]	; (80088e4 <tcp_slowtmr+0x274>)
 80086a6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80086aa:	498f      	ldr	r1, [pc, #572]	; (80088e8 <tcp_slowtmr+0x278>)
 80086ac:	488f      	ldr	r0, [pc, #572]	; (80088ec <tcp_slowtmr+0x27c>)
 80086ae:	f006 fe73 	bl	800f398 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	7d1b      	ldrb	r3, [r3, #20]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d106      	bne.n	80086c8 <tcp_slowtmr+0x58>
 80086ba:	4b8a      	ldr	r3, [pc, #552]	; (80088e4 <tcp_slowtmr+0x274>)
 80086bc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80086c0:	498b      	ldr	r1, [pc, #556]	; (80088f0 <tcp_slowtmr+0x280>)
 80086c2:	488a      	ldr	r0, [pc, #552]	; (80088ec <tcp_slowtmr+0x27c>)
 80086c4:	f006 fe68 	bl	800f398 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	7d1b      	ldrb	r3, [r3, #20]
 80086cc:	2b0a      	cmp	r3, #10
 80086ce:	d106      	bne.n	80086de <tcp_slowtmr+0x6e>
 80086d0:	4b84      	ldr	r3, [pc, #528]	; (80088e4 <tcp_slowtmr+0x274>)
 80086d2:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80086d6:	4987      	ldr	r1, [pc, #540]	; (80088f4 <tcp_slowtmr+0x284>)
 80086d8:	4884      	ldr	r0, [pc, #528]	; (80088ec <tcp_slowtmr+0x27c>)
 80086da:	f006 fe5d 	bl	800f398 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	7f5a      	ldrb	r2, [r3, #29]
 80086e2:	4b7e      	ldr	r3, [pc, #504]	; (80088dc <tcp_slowtmr+0x26c>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d103      	bne.n	80086f2 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80086f0:	e1fc      	b.n	8008aec <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80086f2:	4b7a      	ldr	r3, [pc, #488]	; (80088dc <tcp_slowtmr+0x26c>)
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	7d1b      	ldrb	r3, [r3, #20]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d108      	bne.n	800871c <tcp_slowtmr+0xac>
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008710:	2b05      	cmp	r3, #5
 8008712:	d903      	bls.n	800871c <tcp_slowtmr+0xac>
      ++pcb_remove;
 8008714:	7ffb      	ldrb	r3, [r7, #31]
 8008716:	3301      	adds	r3, #1
 8008718:	77fb      	strb	r3, [r7, #31]
 800871a:	e0a2      	b.n	8008862 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008722:	2b0b      	cmp	r3, #11
 8008724:	d903      	bls.n	800872e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008726:	7ffb      	ldrb	r3, [r7, #31]
 8008728:	3301      	adds	r3, #1
 800872a:	77fb      	strb	r3, [r7, #31]
 800872c:	e099      	b.n	8008862 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008734:	2b00      	cmp	r3, #0
 8008736:	d032      	beq.n	800879e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800873e:	3b01      	subs	r3, #1
 8008740:	4a6d      	ldr	r2, [pc, #436]	; (80088f8 <tcp_slowtmr+0x288>)
 8008742:	5cd3      	ldrb	r3, [r2, r3]
 8008744:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800874c:	7cfa      	ldrb	r2, [r7, #19]
 800874e:	429a      	cmp	r2, r3
 8008750:	d907      	bls.n	8008762 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008758:	3301      	adds	r3, #1
 800875a:	b2da      	uxtb	r2, r3
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008768:	7cfa      	ldrb	r2, [r7, #19]
 800876a:	429a      	cmp	r2, r3
 800876c:	d879      	bhi.n	8008862 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800876e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008770:	f003 fede 	bl	800c530 <tcp_zero_window_probe>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d173      	bne.n	8008862 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008788:	2b06      	cmp	r3, #6
 800878a:	d86a      	bhi.n	8008862 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008792:	3301      	adds	r3, #1
 8008794:	b2da      	uxtb	r2, r3
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800879c:	e061      	b.n	8008862 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	db08      	blt.n	80087ba <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	3301      	adds	r3, #1
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	b21a      	sxth	r2, r3
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d04f      	beq.n	8008862 <tcp_slowtmr+0x1f2>
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80087ce:	429a      	cmp	r2, r3
 80087d0:	db47      	blt.n	8008862 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	7d1b      	ldrb	r3, [r3, #20]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d018      	beq.n	800880c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087e0:	2b0c      	cmp	r3, #12
 80087e2:	bf28      	it	cs
 80087e4:	230c      	movcs	r3, #12
 80087e6:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80087ee:	10db      	asrs	r3, r3, #3
 80087f0:	b21b      	sxth	r3, r3
 80087f2:	461a      	mov	r2, r3
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80087fa:	4413      	add	r3, r2
 80087fc:	7dfa      	ldrb	r2, [r7, #23]
 80087fe:	493f      	ldr	r1, [pc, #252]	; (80088fc <tcp_slowtmr+0x28c>)
 8008800:	5c8a      	ldrb	r2, [r1, r2]
 8008802:	4093      	lsls	r3, r2
 8008804:	b21a      	sxth	r2, r3
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	2200      	movs	r2, #0
 8008810:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800881e:	4293      	cmp	r3, r2
 8008820:	bf28      	it	cs
 8008822:	4613      	movcs	r3, r2
 8008824:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8008826:	8abb      	ldrh	r3, [r7, #20]
 8008828:	085b      	lsrs	r3, r3, #1
 800882a:	b29a      	uxth	r2, r3
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	b29b      	uxth	r3, r3
 8008840:	429a      	cmp	r2, r3
 8008842:	d206      	bcs.n	8008852 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800885c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800885e:	f003 fd4d 	bl	800c2fc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	7d1b      	ldrb	r3, [r3, #20]
 8008866:	2b06      	cmp	r3, #6
 8008868:	d10f      	bne.n	800888a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	7e9b      	ldrb	r3, [r3, #26]
 800886e:	f003 0310 	and.w	r3, r3, #16
 8008872:	2b00      	cmp	r3, #0
 8008874:	d009      	beq.n	800888a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008876:	4b18      	ldr	r3, [pc, #96]	; (80088d8 <tcp_slowtmr+0x268>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b28      	cmp	r3, #40	; 0x28
 8008882:	d902      	bls.n	800888a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008884:	7ffb      	ldrb	r3, [r7, #31]
 8008886:	3301      	adds	r3, #1
 8008888:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	7a1b      	ldrb	r3, [r3, #8]
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d05d      	beq.n	8008952 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800889a:	2b04      	cmp	r3, #4
 800889c:	d003      	beq.n	80088a6 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80088a2:	2b07      	cmp	r3, #7
 80088a4:	d155      	bne.n	8008952 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <tcp_slowtmr+0x268>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b6:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80088ba:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80088be:	4910      	ldr	r1, [pc, #64]	; (8008900 <tcp_slowtmr+0x290>)
 80088c0:	fba1 1303 	umull	r1, r3, r1, r3
 80088c4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d91c      	bls.n	8008904 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80088ca:	7ffb      	ldrb	r3, [r7, #31]
 80088cc:	3301      	adds	r3, #1
 80088ce:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 80088d0:	7fbb      	ldrb	r3, [r7, #30]
 80088d2:	3301      	adds	r3, #1
 80088d4:	77bb      	strb	r3, [r7, #30]
 80088d6:	e03c      	b.n	8008952 <tcp_slowtmr+0x2e2>
 80088d8:	2000e420 	.word	0x2000e420
 80088dc:	2000408a 	.word	0x2000408a
 80088e0:	2000e41c 	.word	0x2000e41c
 80088e4:	08010bfc 	.word	0x08010bfc
 80088e8:	08010dac 	.word	0x08010dac
 80088ec:	08010c38 	.word	0x08010c38
 80088f0:	08010dd8 	.word	0x08010dd8
 80088f4:	08010e04 	.word	0x08010e04
 80088f8:	08012078 	.word	0x08012078
 80088fc:	08012068 	.word	0x08012068
 8008900:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008904:	4b97      	ldr	r3, [pc, #604]	; (8008b64 <tcp_slowtmr+0x4f4>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800891a:	4618      	mov	r0, r3
 800891c:	4b92      	ldr	r3, [pc, #584]	; (8008b68 <tcp_slowtmr+0x4f8>)
 800891e:	fb03 f300 	mul.w	r3, r3, r0
 8008922:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8008924:	4991      	ldr	r1, [pc, #580]	; (8008b6c <tcp_slowtmr+0x4fc>)
 8008926:	fba1 1303 	umull	r1, r3, r1, r3
 800892a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800892c:	429a      	cmp	r2, r3
 800892e:	d910      	bls.n	8008952 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8008930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008932:	f003 fdc0 	bl	800c4b6 <tcp_keepalive>
 8008936:	4603      	mov	r3, r0
 8008938:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800893a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d107      	bne.n	8008952 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008948:	3301      	adds	r3, #1
 800894a:	b2da      	uxtb	r2, r3
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008956:	2b00      	cmp	r3, #0
 8008958:	d016      	beq.n	8008988 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800895a:	4b82      	ldr	r3, [pc, #520]	; (8008b64 <tcp_slowtmr+0x4f4>)
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	1ad2      	subs	r2, r2, r3
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800896a:	4619      	mov	r1, r3
 800896c:	460b      	mov	r3, r1
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	440b      	add	r3, r1
 8008972:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008974:	429a      	cmp	r2, r3
 8008976:	d307      	bcc.n	8008988 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897c:	4618      	mov	r0, r3
 800897e:	f000 fa05 	bl	8008d8c <tcp_segs_free>
      pcb->ooseq = NULL;
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	2200      	movs	r2, #0
 8008986:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	7d1b      	ldrb	r3, [r3, #20]
 800898c:	2b03      	cmp	r3, #3
 800898e:	d109      	bne.n	80089a4 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008990:	4b74      	ldr	r3, [pc, #464]	; (8008b64 <tcp_slowtmr+0x4f4>)
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b28      	cmp	r3, #40	; 0x28
 800899c:	d902      	bls.n	80089a4 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800899e:	7ffb      	ldrb	r3, [r7, #31]
 80089a0:	3301      	adds	r3, #1
 80089a2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	7d1b      	ldrb	r3, [r3, #20]
 80089a8:	2b09      	cmp	r3, #9
 80089aa:	d109      	bne.n	80089c0 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80089ac:	4b6d      	ldr	r3, [pc, #436]	; (8008b64 <tcp_slowtmr+0x4f4>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2bf0      	cmp	r3, #240	; 0xf0
 80089b8:	d902      	bls.n	80089c0 <tcp_slowtmr+0x350>
        ++pcb_remove;
 80089ba:	7ffb      	ldrb	r3, [r7, #31]
 80089bc:	3301      	adds	r3, #1
 80089be:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80089c0:	7ffb      	ldrb	r3, [r7, #31]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d05d      	beq.n	8008a82 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80089ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d0:	f000 fb84 	bl	80090dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d010      	beq.n	80089fc <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80089da:	4b65      	ldr	r3, [pc, #404]	; (8008b70 <tcp_slowtmr+0x500>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d106      	bne.n	80089f2 <tcp_slowtmr+0x382>
 80089e4:	4b63      	ldr	r3, [pc, #396]	; (8008b74 <tcp_slowtmr+0x504>)
 80089e6:	f240 4289 	movw	r2, #1161	; 0x489
 80089ea:	4963      	ldr	r1, [pc, #396]	; (8008b78 <tcp_slowtmr+0x508>)
 80089ec:	4863      	ldr	r0, [pc, #396]	; (8008b7c <tcp_slowtmr+0x50c>)
 80089ee:	f006 fcd3 	bl	800f398 <iprintf>
        prev->next = pcb->next;
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	60da      	str	r2, [r3, #12]
 80089fa:	e00f      	b.n	8008a1c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80089fc:	4b5c      	ldr	r3, [pc, #368]	; (8008b70 <tcp_slowtmr+0x500>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d006      	beq.n	8008a14 <tcp_slowtmr+0x3a4>
 8008a06:	4b5b      	ldr	r3, [pc, #364]	; (8008b74 <tcp_slowtmr+0x504>)
 8008a08:	f240 428d 	movw	r2, #1165	; 0x48d
 8008a0c:	495c      	ldr	r1, [pc, #368]	; (8008b80 <tcp_slowtmr+0x510>)
 8008a0e:	485b      	ldr	r0, [pc, #364]	; (8008b7c <tcp_slowtmr+0x50c>)
 8008a10:	f006 fcc2 	bl	800f398 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	4a55      	ldr	r2, [pc, #340]	; (8008b70 <tcp_slowtmr+0x500>)
 8008a1a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008a1c:	7fbb      	ldrb	r3, [r7, #30]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d010      	beq.n	8008a44 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008a2a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	1d1d      	adds	r5, r3, #4
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	8adb      	ldrh	r3, [r3, #22]
 8008a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a36:	8b12      	ldrh	r2, [r2, #24]
 8008a38:	9201      	str	r2, [sp, #4]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	462b      	mov	r3, r5
 8008a3e:	4622      	mov	r2, r4
 8008a40:	f003 fbe6 	bl	800c210 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	7d1b      	ldrb	r3, [r3, #20]
 8008a4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	2001      	movs	r0, #1
 8008a5e:	f7fe faf5 	bl	800704c <memp_free>

      tcp_active_pcbs_changed = 0;
 8008a62:	4b48      	ldr	r3, [pc, #288]	; (8008b84 <tcp_slowtmr+0x514>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <tcp_slowtmr+0x408>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f06f 010c 	mvn.w	r1, #12
 8008a74:	68b8      	ldr	r0, [r7, #8]
 8008a76:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008a78:	4b42      	ldr	r3, [pc, #264]	; (8008b84 <tcp_slowtmr+0x514>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d035      	beq.n	8008aec <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8008a80:	e606      	b.n	8008690 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	7edb      	ldrb	r3, [r3, #27]
 8008a90:	3301      	adds	r3, #1
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	7eda      	ldrb	r2, [r3, #27]
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	7f1b      	ldrb	r3, [r3, #28]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d323      	bcc.n	8008aec <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008aaa:	4b36      	ldr	r3, [pc, #216]	; (8008b84 <tcp_slowtmr+0x514>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <tcp_slowtmr+0x460>
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac0:	6a3a      	ldr	r2, [r7, #32]
 8008ac2:	6912      	ldr	r2, [r2, #16]
 8008ac4:	6a39      	ldr	r1, [r7, #32]
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4798      	blx	r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	777b      	strb	r3, [r7, #29]
 8008ace:	e001      	b.n	8008ad4 <tcp_slowtmr+0x464>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8008ad4:	4b2b      	ldr	r3, [pc, #172]	; (8008b84 <tcp_slowtmr+0x514>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d000      	beq.n	8008ade <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8008adc:	e5d8      	b.n	8008690 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008ade:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8008ae6:	6a38      	ldr	r0, [r7, #32]
 8008ae8:	f003 f908 	bl	800bcfc <tcp_output>
  while (pcb != NULL) {
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f47f add4 	bne.w	800869c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8008af8:	4b23      	ldr	r3, [pc, #140]	; (8008b88 <tcp_slowtmr+0x518>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8008afe:	e068      	b.n	8008bd2 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	7d1b      	ldrb	r3, [r3, #20]
 8008b04:	2b0a      	cmp	r3, #10
 8008b06:	d006      	beq.n	8008b16 <tcp_slowtmr+0x4a6>
 8008b08:	4b1a      	ldr	r3, [pc, #104]	; (8008b74 <tcp_slowtmr+0x504>)
 8008b0a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008b0e:	491f      	ldr	r1, [pc, #124]	; (8008b8c <tcp_slowtmr+0x51c>)
 8008b10:	481a      	ldr	r0, [pc, #104]	; (8008b7c <tcp_slowtmr+0x50c>)
 8008b12:	f006 fc41 	bl	800f398 <iprintf>
    pcb_remove = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008b1a:	4b12      	ldr	r3, [pc, #72]	; (8008b64 <tcp_slowtmr+0x4f4>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2bf0      	cmp	r3, #240	; 0xf0
 8008b26:	d902      	bls.n	8008b2e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8008b28:	7ffb      	ldrb	r3, [r7, #31]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008b2e:	7ffb      	ldrb	r3, [r7, #31]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d049      	beq.n	8008bc8 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b36:	f000 fad1 	bl	80090dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d029      	beq.n	8008b94 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008b40:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <tcp_slowtmr+0x518>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d106      	bne.n	8008b58 <tcp_slowtmr+0x4e8>
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <tcp_slowtmr+0x504>)
 8008b4c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008b50:	490f      	ldr	r1, [pc, #60]	; (8008b90 <tcp_slowtmr+0x520>)
 8008b52:	480a      	ldr	r0, [pc, #40]	; (8008b7c <tcp_slowtmr+0x50c>)
 8008b54:	f006 fc20 	bl	800f398 <iprintf>
        prev->next = pcb->next;
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	60da      	str	r2, [r3, #12]
 8008b60:	e028      	b.n	8008bb4 <tcp_slowtmr+0x544>
 8008b62:	bf00      	nop
 8008b64:	2000e420 	.word	0x2000e420
 8008b68:	000124f8 	.word	0x000124f8
 8008b6c:	10624dd3 	.word	0x10624dd3
 8008b70:	2000e41c 	.word	0x2000e41c
 8008b74:	08010bfc 	.word	0x08010bfc
 8008b78:	08010e34 	.word	0x08010e34
 8008b7c:	08010c38 	.word	0x08010c38
 8008b80:	08010e60 	.word	0x08010e60
 8008b84:	2000e418 	.word	0x2000e418
 8008b88:	2000e42c 	.word	0x2000e42c
 8008b8c:	08010e8c 	.word	0x08010e8c
 8008b90:	08010ebc 	.word	0x08010ebc
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008b94:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <tcp_slowtmr+0x570>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d006      	beq.n	8008bac <tcp_slowtmr+0x53c>
 8008b9e:	4b11      	ldr	r3, [pc, #68]	; (8008be4 <tcp_slowtmr+0x574>)
 8008ba0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8008ba4:	4910      	ldr	r1, [pc, #64]	; (8008be8 <tcp_slowtmr+0x578>)
 8008ba6:	4811      	ldr	r0, [pc, #68]	; (8008bec <tcp_slowtmr+0x57c>)
 8008ba8:	f006 fbf6 	bl	800f398 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	4a0b      	ldr	r2, [pc, #44]	; (8008be0 <tcp_slowtmr+0x570>)
 8008bb2:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8008bbe:	69b9      	ldr	r1, [r7, #24]
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	f7fe fa43 	bl	800704c <memp_free>
 8008bc6:	e004      	b.n	8008bd2 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d193      	bne.n	8008b00 <tcp_slowtmr+0x490>
    }
  }
}
 8008bd8:	bf00      	nop
 8008bda:	3728      	adds	r7, #40	; 0x28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bdb0      	pop	{r4, r5, r7, pc}
 8008be0:	2000e42c 	.word	0x2000e42c
 8008be4:	08010bfc 	.word	0x08010bfc
 8008be8:	08010ee4 	.word	0x08010ee4
 8008bec:	08010c38 	.word	0x08010c38

08008bf0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008bf6:	4b2d      	ldr	r3, [pc, #180]	; (8008cac <tcp_fasttmr+0xbc>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	4b2b      	ldr	r3, [pc, #172]	; (8008cac <tcp_fasttmr+0xbc>)
 8008c00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008c02:	4b2b      	ldr	r3, [pc, #172]	; (8008cb0 <tcp_fasttmr+0xc0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008c08:	e048      	b.n	8008c9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	7f5a      	ldrb	r2, [r3, #29]
 8008c0e:	4b27      	ldr	r3, [pc, #156]	; (8008cac <tcp_fasttmr+0xbc>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d03f      	beq.n	8008c96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008c16:	4b25      	ldr	r3, [pc, #148]	; (8008cac <tcp_fasttmr+0xbc>)
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7e9b      	ldrb	r3, [r3, #26]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d010      	beq.n	8008c4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7e9b      	ldrb	r3, [r3, #26]
 8008c2e:	f043 0302 	orr.w	r3, r3, #2
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f003 f85f 	bl	800bcfc <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	7e9b      	ldrb	r3, [r3, #26]
 8008c42:	f023 0303 	bic.w	r3, r3, #3
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	7e9b      	ldrb	r3, [r3, #26]
 8008c50:	f003 0308 	and.w	r3, r3, #8
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	7e9b      	ldrb	r3, [r3, #26]
 8008c5c:	f023 0308 	bic.w	r3, r3, #8
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff fb1c 	bl	80082a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00a      	beq.n	8008c90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008c7a:	4b0e      	ldr	r3, [pc, #56]	; (8008cb4 <tcp_fasttmr+0xc4>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f819 	bl	8008cb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008c86:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <tcp_fasttmr+0xc4>)
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d000      	beq.n	8008c90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008c8e:	e7b8      	b.n	8008c02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	e002      	b.n	8008c9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1b3      	bne.n	8008c0a <tcp_fasttmr+0x1a>
    }
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	2000408a 	.word	0x2000408a
 8008cb0:	2000e41c 	.word	0x2000e41c
 8008cb4:	2000e418 	.word	0x2000e418

08008cb8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008cb8:	b590      	push	{r4, r7, lr}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc4:	7b5b      	ldrb	r3, [r3, #13]
 8008cc6:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ccc:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00b      	beq.n	8008cf6 <tcp_process_refused_data+0x3e>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6918      	ldr	r0, [r3, #16]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	47a0      	blx	r4
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
 8008cf4:	e007      	b.n	8008d06 <tcp_process_refused_data+0x4e>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	f000 f88d 	bl	8008e1c <tcp_recv_null>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d12b      	bne.n	8008d66 <tcp_process_refused_data+0xae>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8008d0e:	7bbb      	ldrb	r3, [r7, #14]
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d034      	beq.n	8008d82 <tcp_process_refused_data+0xca>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d1c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d005      	beq.n	8008d30 <tcp_process_refused_data+0x78>
          pcb->rcv_wnd++;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d28:	3301      	adds	r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00b      	beq.n	8008d52 <tcp_process_refused_data+0x9a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6918      	ldr	r0, [r3, #16]
 8008d44:	2300      	movs	r3, #0
 8008d46:	2200      	movs	r2, #0
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	47a0      	blx	r4
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]
 8008d50:	e001      	b.n	8008d56 <tcp_process_refused_data+0x9e>
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d5a:	f113 0f0d 	cmn.w	r3, #13
 8008d5e:	d110      	bne.n	8008d82 <tcp_process_refused_data+0xca>
          return ERR_ABRT;
 8008d60:	f06f 030c 	mvn.w	r3, #12
 8008d64:	e00e      	b.n	8008d84 <tcp_process_refused_data+0xcc>
        }
      }
    } else if (err == ERR_ABRT) {
 8008d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6a:	f113 0f0d 	cmn.w	r3, #13
 8008d6e:	d102      	bne.n	8008d76 <tcp_process_refused_data+0xbe>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008d70:	f06f 030c 	mvn.w	r3, #12
 8008d74:	e006      	b.n	8008d84 <tcp_process_refused_data+0xcc>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8008d7c:	f06f 0304 	mvn.w	r3, #4
 8008d80:	e000      	b.n	8008d84 <tcp_process_refused_data+0xcc>
    }
  }
  return ERR_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd90      	pop	{r4, r7, pc}

08008d8c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008d94:	e007      	b.n	8008da6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f809 	bl	8008db4 <tcp_seg_free>
    seg = next;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1f4      	bne.n	8008d96 <tcp_segs_free+0xa>
  }
}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00c      	beq.n	8008ddc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d004      	beq.n	8008dd4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fe98 	bl	8007b04 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	2003      	movs	r0, #3
 8008dd8:	f7fe f938 	bl	800704c <memp_free>
  }
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008dec:	2003      	movs	r0, #3
 8008dee:	f7fe f8db 	bl	8006fa8 <memp_malloc>
 8008df2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <tcp_seg_copy+0x1a>
    return NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e00a      	b.n	8008e14 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008dfe:	2210      	movs	r2, #16
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f006 fab5 	bl	800f372 <memcpy>
  pbuf_ref(cseg->p);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fe ff2b 	bl	8007c68 <pbuf_ref>
  return cseg;
 8008e12:	68fb      	ldr	r3, [r7, #12]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d009      	beq.n	8008e44 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	891b      	ldrh	r3, [r3, #8]
 8008e34:	4619      	mov	r1, r3
 8008e36:	68b8      	ldr	r0, [r7, #8]
 8008e38:	f7ff fbbe 	bl	80085b8 <tcp_recved>
    pbuf_free(p);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7fe fe61 	bl	8007b04 <pbuf_free>
 8008e42:	e008      	b.n	8008e56 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8008e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8008e4c:	68b8      	ldr	r0, [r7, #8]
 8008e4e:	f7ff fa8f 	bl	8008370 <tcp_close>
 8008e52:	4603      	mov	r3, r0
 8008e54:	e000      	b.n	8008e58 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	db01      	blt.n	8008e76 <tcp_kill_prio+0x16>
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	e000      	b.n	8008e78 <tcp_kill_prio+0x18>
 8008e76:	237f      	movs	r3, #127	; 0x7f
 8008e78:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e82:	4b16      	ldr	r3, [pc, #88]	; (8008edc <tcp_kill_prio+0x7c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	e01a      	b.n	8008ec0 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	7d5b      	ldrb	r3, [r3, #21]
 8008e8e:	7afa      	ldrb	r2, [r7, #11]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d312      	bcc.n	8008eba <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e94:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <tcp_kill_prio+0x80>)
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d80a      	bhi.n	8008eba <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8008ea4:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <tcp_kill_prio+0x80>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	7d5b      	ldrb	r3, [r3, #21]
 8008eb8:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e1      	bne.n	8008e8a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008ecc:	6938      	ldr	r0, [r7, #16]
 8008ece:	f7ff fb19 	bl	8008504 <tcp_abort>
  }
}
 8008ed2:	bf00      	nop
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	2000e41c 	.word	0x2000e41c
 8008ee0:	2000e420 	.word	0x2000e420

08008ee4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	d009      	beq.n	8008f08 <tcp_kill_state+0x24>
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b09      	cmp	r3, #9
 8008ef8:	d006      	beq.n	8008f08 <tcp_kill_state+0x24>
 8008efa:	4b1a      	ldr	r3, [pc, #104]	; (8008f64 <tcp_kill_state+0x80>)
 8008efc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008f00:	4919      	ldr	r1, [pc, #100]	; (8008f68 <tcp_kill_state+0x84>)
 8008f02:	481a      	ldr	r0, [pc, #104]	; (8008f6c <tcp_kill_state+0x88>)
 8008f04:	f006 fa48 	bl	800f398 <iprintf>

  inactivity = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f10:	4b17      	ldr	r3, [pc, #92]	; (8008f70 <tcp_kill_state+0x8c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	e017      	b.n	8008f48 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	7d1b      	ldrb	r3, [r3, #20]
 8008f1c:	79fa      	ldrb	r2, [r7, #7]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d10f      	bne.n	8008f42 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f22:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <tcp_kill_state+0x90>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d807      	bhi.n	8008f42 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008f32:	4b10      	ldr	r3, [pc, #64]	; (8008f74 <tcp_kill_state+0x90>)
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e4      	bne.n	8008f18 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008f54:	2100      	movs	r1, #0
 8008f56:	6938      	ldr	r0, [r7, #16]
 8008f58:	f7ff fa22 	bl	80083a0 <tcp_abandon>
  }
}
 8008f5c:	bf00      	nop
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	08010bfc 	.word	0x08010bfc
 8008f68:	08010f0c 	.word	0x08010f0c
 8008f6c:	08010c38 	.word	0x08010c38
 8008f70:	2000e41c 	.word	0x2000e41c
 8008f74:	2000e420 	.word	0x2000e420

08008f78 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f86:	4b12      	ldr	r3, [pc, #72]	; (8008fd0 <tcp_kill_timewait+0x58>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	e012      	b.n	8008fb4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f8e:	4b11      	ldr	r3, [pc, #68]	; (8008fd4 <tcp_kill_timewait+0x5c>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d807      	bhi.n	8008fae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <tcp_kill_timewait+0x5c>)
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e9      	bne.n	8008f8e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008fc0:	68b8      	ldr	r0, [r7, #8]
 8008fc2:	f7ff fa9f 	bl	8008504 <tcp_abort>
  }
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	2000e42c 	.word	0x2000e42c
 8008fd4:	2000e420 	.word	0x2000e420

08008fd8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	f7fd ffe0 	bl	8006fa8 <memp_malloc>
 8008fe8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d124      	bne.n	800903a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008ff0:	f7ff ffc2 	bl	8008f78 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ff4:	2001      	movs	r0, #1
 8008ff6:	f7fd ffd7 	bl	8006fa8 <memp_malloc>
 8008ffa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d11b      	bne.n	800903a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009002:	2009      	movs	r0, #9
 8009004:	f7ff ff6e 	bl	8008ee4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009008:	2001      	movs	r0, #1
 800900a:	f7fd ffcd 	bl	8006fa8 <memp_malloc>
 800900e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d111      	bne.n	800903a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009016:	2008      	movs	r0, #8
 8009018:	f7ff ff64 	bl	8008ee4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800901c:	2001      	movs	r0, #1
 800901e:	f7fd ffc3 	bl	8006fa8 <memp_malloc>
 8009022:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d107      	bne.n	800903a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff ff17 	bl	8008e60 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009032:	2001      	movs	r0, #1
 8009034:	f7fd ffb8 	bl	8006fa8 <memp_malloc>
 8009038:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d03f      	beq.n	80090c0 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009040:	2298      	movs	r2, #152	; 0x98
 8009042:	2100      	movs	r1, #0
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f006 f99f 	bl	800f388 <memset>
    pcb->prio = prio;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	79fa      	ldrb	r2, [r7, #7]
 800904e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f640 3268 	movw	r2, #2920	; 0xb68
 8009056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8009060:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	22ff      	movs	r2, #255	; 0xff
 800906e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009076:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2206      	movs	r2, #6
 800907c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2206      	movs	r2, #6
 8009084:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800908c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009096:	4b0d      	ldr	r3, [pc, #52]	; (80090cc <tcp_alloc+0xf4>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800909e:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <tcp_alloc+0xf8>)
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f640 3268 	movw	r2, #2920	; 0xb68
 80090ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <tcp_alloc+0xfc>)
 80090b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4a07      	ldr	r2, [pc, #28]	; (80090d8 <tcp_alloc+0x100>)
 80090bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80090c0:	68fb      	ldr	r3, [r7, #12]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	2000e420 	.word	0x2000e420
 80090d0:	2000408a 	.word	0x2000408a
 80090d4:	08008e1d 	.word	0x08008e1d
 80090d8:	006ddd00 	.word	0x006ddd00

080090dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	7d1b      	ldrb	r3, [r3, #20]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d034      	beq.n	8009156 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80090f0:	2b0a      	cmp	r3, #10
 80090f2:	d030      	beq.n	8009156 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d02c      	beq.n	8009156 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009100:	2b00      	cmp	r3, #0
 8009102:	d007      	beq.n	8009114 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009108:	4618      	mov	r0, r3
 800910a:	f7fe fcfb 	bl	8007b04 <pbuf_free>
      pcb->refused_data = NULL;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fe37 	bl	8008d8c <tcp_segs_free>
    pcb->ooseq = NULL;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800912a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff fe2b 	bl	8008d8c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff fe26 	bl	8008d8c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	669a      	str	r2, [r3, #104]	; 0x68
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8009156:	bf00      	nop
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d105      	bne.n	8009180 <tcp_pcb_remove+0x20>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	e013      	b.n	80091a8 <tcp_pcb_remove+0x48>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	e00c      	b.n	80091a2 <tcp_pcb_remove+0x42>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	429a      	cmp	r2, r3
 8009190:	d104      	bne.n	800919c <tcp_pcb_remove+0x3c>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	60da      	str	r2, [r3, #12]
 800919a:	e005      	b.n	80091a8 <tcp_pcb_remove+0x48>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	60fb      	str	r3, [r7, #12]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1ef      	bne.n	8009188 <tcp_pcb_remove+0x28>
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	2200      	movs	r2, #0
 80091ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80091ae:	6838      	ldr	r0, [r7, #0]
 80091b0:	f7ff ff94 	bl	80090dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	7d1b      	ldrb	r3, [r3, #20]
 80091b8:	2b0a      	cmp	r3, #10
 80091ba:	d013      	beq.n	80091e4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d00f      	beq.n	80091e4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	7e9b      	ldrb	r3, [r3, #26]
 80091c8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d009      	beq.n	80091e4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	7e9b      	ldrb	r3, [r3, #26]
 80091d4:	f043 0302 	orr.w	r3, r3, #2
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80091de:	6838      	ldr	r0, [r7, #0]
 80091e0:	f002 fd8c 	bl	800bcfc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	7d1b      	ldrb	r3, [r3, #20]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d020      	beq.n	800922e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d006      	beq.n	8009202 <tcp_pcb_remove+0xa2>
 80091f4:	4b13      	ldr	r3, [pc, #76]	; (8009244 <tcp_pcb_remove+0xe4>)
 80091f6:	f240 7253 	movw	r2, #1875	; 0x753
 80091fa:	4913      	ldr	r1, [pc, #76]	; (8009248 <tcp_pcb_remove+0xe8>)
 80091fc:	4813      	ldr	r0, [pc, #76]	; (800924c <tcp_pcb_remove+0xec>)
 80091fe:	f006 f8cb 	bl	800f398 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d006      	beq.n	8009218 <tcp_pcb_remove+0xb8>
 800920a:	4b0e      	ldr	r3, [pc, #56]	; (8009244 <tcp_pcb_remove+0xe4>)
 800920c:	f240 7254 	movw	r2, #1876	; 0x754
 8009210:	490f      	ldr	r1, [pc, #60]	; (8009250 <tcp_pcb_remove+0xf0>)
 8009212:	480e      	ldr	r0, [pc, #56]	; (800924c <tcp_pcb_remove+0xec>)
 8009214:	f006 f8c0 	bl	800f398 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921c:	2b00      	cmp	r3, #0
 800921e:	d006      	beq.n	800922e <tcp_pcb_remove+0xce>
 8009220:	4b08      	ldr	r3, [pc, #32]	; (8009244 <tcp_pcb_remove+0xe4>)
 8009222:	f240 7256 	movw	r2, #1878	; 0x756
 8009226:	490b      	ldr	r1, [pc, #44]	; (8009254 <tcp_pcb_remove+0xf4>)
 8009228:	4808      	ldr	r0, [pc, #32]	; (800924c <tcp_pcb_remove+0xec>)
 800922a:	f006 f8b5 	bl	800f398 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2200      	movs	r2, #0
 8009232:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	08010bfc 	.word	0x08010bfc
 8009248:	08010fb4 	.word	0x08010fb4
 800924c:	08010c38 	.word	0x08010c38
 8009250:	08010fcc 	.word	0x08010fcc
 8009254:	08010fe8 	.word	0x08010fe8

08009258 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009260:	4b07      	ldr	r3, [pc, #28]	; (8009280 <tcp_next_iss+0x28>)
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	4b07      	ldr	r3, [pc, #28]	; (8009284 <tcp_next_iss+0x2c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4413      	add	r3, r2
 800926a:	4a05      	ldr	r2, [pc, #20]	; (8009280 <tcp_next_iss+0x28>)
 800926c:	6013      	str	r3, [r2, #0]
  return iss;
 800926e:	4b04      	ldr	r3, [pc, #16]	; (8009280 <tcp_next_iss+0x28>)
 8009270:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	2000000c 	.word	0x2000000c
 8009284:	2000e420 	.word	0x2000e420

08009288 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8009294:	6838      	ldr	r0, [r7, #0]
 8009296:	f004 fda9 	bl	800ddec <ip4_route>
 800929a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	e010      	b.n	80092c8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80092aa:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80092ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d008      	beq.n	80092c6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80092b4:	897b      	ldrh	r3, [r7, #10]
 80092b6:	3b28      	subs	r3, #40	; 0x28
 80092b8:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80092ba:	893a      	ldrh	r2, [r7, #8]
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	4293      	cmp	r3, r2
 80092c0:	bf28      	it	cs
 80092c2:	4613      	movcs	r3, r2
 80092c4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80092c6:	88fb      	ldrh	r3, [r7, #6]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80092de:	e011      	b.n	8009304 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d108      	bne.n	80092fe <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f7ff f906 	bl	8008504 <tcp_abort>
      pcb = next;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	e002      	b.n	8009304 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1ea      	bne.n	80092e0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d02c      	beq.n	800937e <tcp_netif_ip_addr_changed+0x6a>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d028      	beq.n	800937e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800932c:	4b16      	ldr	r3, [pc, #88]	; (8009388 <tcp_netif_ip_addr_changed+0x74>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7ff ffcc 	bl	80092d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009338:	4b14      	ldr	r3, [pc, #80]	; (800938c <tcp_netif_ip_addr_changed+0x78>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff ffc6 	bl	80092d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d019      	beq.n	800937e <tcp_netif_ip_addr_changed+0x6a>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d015      	beq.n	800937e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009352:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <tcp_netif_ip_addr_changed+0x7c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	e00e      	b.n	8009378 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	429a      	cmp	r2, r3
 800936a:	d103      	bne.n	8009374 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1ed      	bne.n	800935a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800937e:	bf00      	nop
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	2000e41c 	.word	0x2000e41c
 800938c:	2000e428 	.word	0x2000e428
 8009390:	2000e424 	.word	0x2000e424

08009394 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b08b      	sub	sp, #44	; 0x2c
 8009398:	af02      	add	r7, sp, #8
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4a82      	ldr	r2, [pc, #520]	; (80095ac <tcp_input+0x218>)
 80093a4:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	895b      	ldrh	r3, [r3, #10]
 80093aa:	2b13      	cmp	r3, #19
 80093ac:	f240 838b 	bls.w	8009ac6 <tcp_input+0x732>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80093b0:	4b7f      	ldr	r3, [pc, #508]	; (80095b0 <tcp_input+0x21c>)
 80093b2:	695a      	ldr	r2, [r3, #20]
 80093b4:	4b7e      	ldr	r3, [pc, #504]	; (80095b0 <tcp_input+0x21c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4619      	mov	r1, r3
 80093ba:	4610      	mov	r0, r2
 80093bc:	f004 ff90 	bl	800e2e0 <ip4_addr_isbroadcast_u32>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f040 8381 	bne.w	8009aca <tcp_input+0x736>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80093c8:	4b79      	ldr	r3, [pc, #484]	; (80095b0 <tcp_input+0x21c>)
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80093d0:	2be0      	cmp	r3, #224	; 0xe0
 80093d2:	f000 837a 	beq.w	8009aca <tcp_input+0x736>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80093d6:	4b75      	ldr	r3, [pc, #468]	; (80095ac <tcp_input+0x218>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	899b      	ldrh	r3, [r3, #12]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fd f9f4 	bl	80067cc <lwip_htons>
 80093e4:	4603      	mov	r3, r0
 80093e6:	0b1b      	lsrs	r3, r3, #12
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80093f0:	7cbb      	ldrb	r3, [r7, #18]
 80093f2:	2b13      	cmp	r3, #19
 80093f4:	f240 8369 	bls.w	8009aca <tcp_input+0x736>
 80093f8:	7cbb      	ldrb	r3, [r7, #18]
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	891b      	ldrh	r3, [r3, #8]
 8009400:	429a      	cmp	r2, r3
 8009402:	f200 8362 	bhi.w	8009aca <tcp_input+0x736>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009406:	7cbb      	ldrb	r3, [r7, #18]
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b14      	subs	r3, #20
 800940c:	b29a      	uxth	r2, r3
 800940e:	4b69      	ldr	r3, [pc, #420]	; (80095b4 <tcp_input+0x220>)
 8009410:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009412:	4b69      	ldr	r3, [pc, #420]	; (80095b8 <tcp_input+0x224>)
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	895a      	ldrh	r2, [r3, #10]
 800941c:	7cbb      	ldrb	r3, [r7, #18]
 800941e:	b29b      	uxth	r3, r3
 8009420:	429a      	cmp	r2, r3
 8009422:	d30d      	bcc.n	8009440 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009424:	4b63      	ldr	r3, [pc, #396]	; (80095b4 <tcp_input+0x220>)
 8009426:	881a      	ldrh	r2, [r3, #0]
 8009428:	4b64      	ldr	r3, [pc, #400]	; (80095bc <tcp_input+0x228>)
 800942a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800942c:	7cbb      	ldrb	r3, [r7, #18]
 800942e:	b29b      	uxth	r3, r3
 8009430:	425b      	negs	r3, r3
 8009432:	b29b      	uxth	r3, r3
 8009434:	b21b      	sxth	r3, r3
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7fe fb3f 	bl	8007abc <pbuf_header>
 800943e:	e055      	b.n	80094ec <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d105      	bne.n	8009454 <tcp_input+0xc0>
 8009448:	4b5d      	ldr	r3, [pc, #372]	; (80095c0 <tcp_input+0x22c>)
 800944a:	22b2      	movs	r2, #178	; 0xb2
 800944c:	495d      	ldr	r1, [pc, #372]	; (80095c4 <tcp_input+0x230>)
 800944e:	485e      	ldr	r0, [pc, #376]	; (80095c8 <tcp_input+0x234>)
 8009450:	f005 ffa2 	bl	800f398 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8009454:	f06f 0113 	mvn.w	r1, #19
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7fe fb2f 	bl	8007abc <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	895a      	ldrh	r2, [r3, #10]
 8009462:	4b56      	ldr	r3, [pc, #344]	; (80095bc <tcp_input+0x228>)
 8009464:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8009466:	4b53      	ldr	r3, [pc, #332]	; (80095b4 <tcp_input+0x220>)
 8009468:	881a      	ldrh	r2, [r3, #0]
 800946a:	4b54      	ldr	r3, [pc, #336]	; (80095bc <tcp_input+0x228>)
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8009472:	4b52      	ldr	r3, [pc, #328]	; (80095bc <tcp_input+0x228>)
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	425b      	negs	r3, r3
 8009478:	b29b      	uxth	r3, r3
 800947a:	b21b      	sxth	r3, r3
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7fe fb1c 	bl	8007abc <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	895b      	ldrh	r3, [r3, #10]
 800948a:	8a3a      	ldrh	r2, [r7, #16]
 800948c:	429a      	cmp	r2, r3
 800948e:	f200 831e 	bhi.w	8009ace <tcp_input+0x73a>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	4a47      	ldr	r2, [pc, #284]	; (80095b8 <tcp_input+0x224>)
 800949a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	8a3b      	ldrh	r3, [r7, #16]
 80094a2:	425b      	negs	r3, r3
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	b21b      	sxth	r3, r3
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7fe fb06 	bl	8007abc <pbuf_header>
    p->tot_len -= opt2len;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	891a      	ldrh	r2, [r3, #8]
 80094b4:	8a3b      	ldrh	r3, [r7, #16]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	895b      	ldrh	r3, [r3, #10]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <tcp_input+0x13e>
 80094c6:	4b3e      	ldr	r3, [pc, #248]	; (80095c0 <tcp_input+0x22c>)
 80094c8:	22cf      	movs	r2, #207	; 0xcf
 80094ca:	4940      	ldr	r1, [pc, #256]	; (80095cc <tcp_input+0x238>)
 80094cc:	483e      	ldr	r0, [pc, #248]	; (80095c8 <tcp_input+0x234>)
 80094ce:	f005 ff63 	bl	800f398 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	891a      	ldrh	r2, [r3, #8]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	891b      	ldrh	r3, [r3, #8]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d005      	beq.n	80094ec <tcp_input+0x158>
 80094e0:	4b37      	ldr	r3, [pc, #220]	; (80095c0 <tcp_input+0x22c>)
 80094e2:	22d0      	movs	r2, #208	; 0xd0
 80094e4:	493a      	ldr	r1, [pc, #232]	; (80095d0 <tcp_input+0x23c>)
 80094e6:	4838      	ldr	r0, [pc, #224]	; (80095c8 <tcp_input+0x234>)
 80094e8:	f005 ff56 	bl	800f398 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80094ec:	4b2f      	ldr	r3, [pc, #188]	; (80095ac <tcp_input+0x218>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	4b2d      	ldr	r3, [pc, #180]	; (80095ac <tcp_input+0x218>)
 80094f6:	681c      	ldr	r4, [r3, #0]
 80094f8:	4610      	mov	r0, r2
 80094fa:	f7fd f967 	bl	80067cc <lwip_htons>
 80094fe:	4603      	mov	r3, r0
 8009500:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009502:	4b2a      	ldr	r3, [pc, #168]	; (80095ac <tcp_input+0x218>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	885b      	ldrh	r3, [r3, #2]
 8009508:	b29a      	uxth	r2, r3
 800950a:	4b28      	ldr	r3, [pc, #160]	; (80095ac <tcp_input+0x218>)
 800950c:	681c      	ldr	r4, [r3, #0]
 800950e:	4610      	mov	r0, r2
 8009510:	f7fd f95c 	bl	80067cc <lwip_htons>
 8009514:	4603      	mov	r3, r0
 8009516:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009518:	4b24      	ldr	r3, [pc, #144]	; (80095ac <tcp_input+0x218>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	4b23      	ldr	r3, [pc, #140]	; (80095ac <tcp_input+0x218>)
 8009520:	681c      	ldr	r4, [r3, #0]
 8009522:	4610      	mov	r0, r2
 8009524:	f7fd f960 	bl	80067e8 <lwip_htonl>
 8009528:	4603      	mov	r3, r0
 800952a:	6063      	str	r3, [r4, #4]
 800952c:	6863      	ldr	r3, [r4, #4]
 800952e:	4a29      	ldr	r2, [pc, #164]	; (80095d4 <tcp_input+0x240>)
 8009530:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009532:	4b1e      	ldr	r3, [pc, #120]	; (80095ac <tcp_input+0x218>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	4b1c      	ldr	r3, [pc, #112]	; (80095ac <tcp_input+0x218>)
 800953a:	681c      	ldr	r4, [r3, #0]
 800953c:	4610      	mov	r0, r2
 800953e:	f7fd f953 	bl	80067e8 <lwip_htonl>
 8009542:	4603      	mov	r3, r0
 8009544:	60a3      	str	r3, [r4, #8]
 8009546:	68a3      	ldr	r3, [r4, #8]
 8009548:	4a23      	ldr	r2, [pc, #140]	; (80095d8 <tcp_input+0x244>)
 800954a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800954c:	4b17      	ldr	r3, [pc, #92]	; (80095ac <tcp_input+0x218>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	89db      	ldrh	r3, [r3, #14]
 8009552:	b29a      	uxth	r2, r3
 8009554:	4b15      	ldr	r3, [pc, #84]	; (80095ac <tcp_input+0x218>)
 8009556:	681c      	ldr	r4, [r3, #0]
 8009558:	4610      	mov	r0, r2
 800955a:	f7fd f937 	bl	80067cc <lwip_htons>
 800955e:	4603      	mov	r3, r0
 8009560:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009562:	4b12      	ldr	r3, [pc, #72]	; (80095ac <tcp_input+0x218>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	899b      	ldrh	r3, [r3, #12]
 8009568:	b29b      	uxth	r3, r3
 800956a:	4618      	mov	r0, r3
 800956c:	f7fd f92e 	bl	80067cc <lwip_htons>
 8009570:	4603      	mov	r3, r0
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009578:	b2da      	uxtb	r2, r3
 800957a:	4b18      	ldr	r3, [pc, #96]	; (80095dc <tcp_input+0x248>)
 800957c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	891a      	ldrh	r2, [r3, #8]
 8009582:	4b16      	ldr	r3, [pc, #88]	; (80095dc <tcp_input+0x248>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf14      	ite	ne
 800958e:	2301      	movne	r3, #1
 8009590:	2300      	moveq	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	b29b      	uxth	r3, r3
 8009596:	4413      	add	r3, r2
 8009598:	b29a      	uxth	r2, r3
 800959a:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <tcp_input+0x24c>)
 800959c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095a2:	4b10      	ldr	r3, [pc, #64]	; (80095e4 <tcp_input+0x250>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	61fb      	str	r3, [r7, #28]
 80095a8:	e082      	b.n	80096b0 <tcp_input+0x31c>
 80095aa:	bf00      	nop
 80095ac:	2000409c 	.word	0x2000409c
 80095b0:	2000734c 	.word	0x2000734c
 80095b4:	200040a0 	.word	0x200040a0
 80095b8:	200040a4 	.word	0x200040a4
 80095bc:	200040a2 	.word	0x200040a2
 80095c0:	08011000 	.word	0x08011000
 80095c4:	08011034 	.word	0x08011034
 80095c8:	08011044 	.word	0x08011044
 80095cc:	0801106c 	.word	0x0801106c
 80095d0:	08011078 	.word	0x08011078
 80095d4:	200040ac 	.word	0x200040ac
 80095d8:	200040b0 	.word	0x200040b0
 80095dc:	200040b8 	.word	0x200040b8
 80095e0:	200040b6 	.word	0x200040b6
 80095e4:	2000e41c 	.word	0x2000e41c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	7d1b      	ldrb	r3, [r3, #20]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d105      	bne.n	80095fc <tcp_input+0x268>
 80095f0:	4b8f      	ldr	r3, [pc, #572]	; (8009830 <tcp_input+0x49c>)
 80095f2:	22e2      	movs	r2, #226	; 0xe2
 80095f4:	498f      	ldr	r1, [pc, #572]	; (8009834 <tcp_input+0x4a0>)
 80095f6:	4890      	ldr	r0, [pc, #576]	; (8009838 <tcp_input+0x4a4>)
 80095f8:	f005 fece 	bl	800f398 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	7d1b      	ldrb	r3, [r3, #20]
 8009600:	2b0a      	cmp	r3, #10
 8009602:	d105      	bne.n	8009610 <tcp_input+0x27c>
 8009604:	4b8a      	ldr	r3, [pc, #552]	; (8009830 <tcp_input+0x49c>)
 8009606:	22e3      	movs	r2, #227	; 0xe3
 8009608:	498c      	ldr	r1, [pc, #560]	; (800983c <tcp_input+0x4a8>)
 800960a:	488b      	ldr	r0, [pc, #556]	; (8009838 <tcp_input+0x4a4>)
 800960c:	f005 fec4 	bl	800f398 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	7d1b      	ldrb	r3, [r3, #20]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d105      	bne.n	8009624 <tcp_input+0x290>
 8009618:	4b85      	ldr	r3, [pc, #532]	; (8009830 <tcp_input+0x49c>)
 800961a:	22e4      	movs	r2, #228	; 0xe4
 800961c:	4988      	ldr	r1, [pc, #544]	; (8009840 <tcp_input+0x4ac>)
 800961e:	4886      	ldr	r0, [pc, #536]	; (8009838 <tcp_input+0x4a4>)
 8009620:	f005 feba 	bl	800f398 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	8b1a      	ldrh	r2, [r3, #24]
 8009628:	4b86      	ldr	r3, [pc, #536]	; (8009844 <tcp_input+0x4b0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	b29b      	uxth	r3, r3
 8009630:	429a      	cmp	r2, r3
 8009632:	d138      	bne.n	80096a6 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	8ada      	ldrh	r2, [r3, #22]
 8009638:	4b82      	ldr	r3, [pc, #520]	; (8009844 <tcp_input+0x4b0>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	885b      	ldrh	r3, [r3, #2]
 800963e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009640:	429a      	cmp	r2, r3
 8009642:	d130      	bne.n	80096a6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	4b7f      	ldr	r3, [pc, #508]	; (8009848 <tcp_input+0x4b4>)
 800964a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800964c:	429a      	cmp	r2, r3
 800964e:	d12a      	bne.n	80096a6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	4b7c      	ldr	r3, [pc, #496]	; (8009848 <tcp_input+0x4b4>)
 8009656:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009658:	429a      	cmp	r2, r3
 800965a:	d124      	bne.n	80096a6 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	69fa      	ldr	r2, [r7, #28]
 8009662:	429a      	cmp	r2, r3
 8009664:	d105      	bne.n	8009672 <tcp_input+0x2de>
 8009666:	4b72      	ldr	r3, [pc, #456]	; (8009830 <tcp_input+0x49c>)
 8009668:	22ec      	movs	r2, #236	; 0xec
 800966a:	4978      	ldr	r1, [pc, #480]	; (800984c <tcp_input+0x4b8>)
 800966c:	4872      	ldr	r0, [pc, #456]	; (8009838 <tcp_input+0x4a4>)
 800966e:	f005 fe93 	bl	800f398 <iprintf>
      if (prev != NULL) {
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00a      	beq.n	800968e <tcp_input+0x2fa>
        prev->next = pcb->next;
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009680:	4b73      	ldr	r3, [pc, #460]	; (8009850 <tcp_input+0x4bc>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009688:	4a71      	ldr	r2, [pc, #452]	; (8009850 <tcp_input+0x4bc>)
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	69fa      	ldr	r2, [r7, #28]
 8009694:	429a      	cmp	r2, r3
 8009696:	d10f      	bne.n	80096b8 <tcp_input+0x324>
 8009698:	4b65      	ldr	r3, [pc, #404]	; (8009830 <tcp_input+0x49c>)
 800969a:	22f4      	movs	r2, #244	; 0xf4
 800969c:	496d      	ldr	r1, [pc, #436]	; (8009854 <tcp_input+0x4c0>)
 800969e:	4866      	ldr	r0, [pc, #408]	; (8009838 <tcp_input+0x4a4>)
 80096a0:	f005 fe7a 	bl	800f398 <iprintf>
      break;
 80096a4:	e008      	b.n	80096b8 <tcp_input+0x324>
    }
    prev = pcb;
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	61fb      	str	r3, [r7, #28]
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d198      	bne.n	80095e8 <tcp_input+0x254>
 80096b6:	e000      	b.n	80096ba <tcp_input+0x326>
      break;
 80096b8:	bf00      	nop
  }

  if (pcb == NULL) {
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d173      	bne.n	80097a8 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80096c0:	4b65      	ldr	r3, [pc, #404]	; (8009858 <tcp_input+0x4c4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	61fb      	str	r3, [r7, #28]
 80096c6:	e02f      	b.n	8009728 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	7d1b      	ldrb	r3, [r3, #20]
 80096cc:	2b0a      	cmp	r3, #10
 80096ce:	d005      	beq.n	80096dc <tcp_input+0x348>
 80096d0:	4b57      	ldr	r3, [pc, #348]	; (8009830 <tcp_input+0x49c>)
 80096d2:	22fe      	movs	r2, #254	; 0xfe
 80096d4:	4961      	ldr	r1, [pc, #388]	; (800985c <tcp_input+0x4c8>)
 80096d6:	4858      	ldr	r0, [pc, #352]	; (8009838 <tcp_input+0x4a4>)
 80096d8:	f005 fe5e 	bl	800f398 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	8b1a      	ldrh	r2, [r3, #24]
 80096e0:	4b58      	ldr	r3, [pc, #352]	; (8009844 <tcp_input+0x4b0>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d11a      	bne.n	8009722 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	8ada      	ldrh	r2, [r3, #22]
 80096f0:	4b54      	ldr	r3, [pc, #336]	; (8009844 <tcp_input+0x4b0>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	885b      	ldrh	r3, [r3, #2]
 80096f6:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d112      	bne.n	8009722 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	4b51      	ldr	r3, [pc, #324]	; (8009848 <tcp_input+0x4b4>)
 8009702:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009704:	429a      	cmp	r2, r3
 8009706:	d10c      	bne.n	8009722 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	4b4e      	ldr	r3, [pc, #312]	; (8009848 <tcp_input+0x4b4>)
 800970e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009710:	429a      	cmp	r2, r3
 8009712:	d106      	bne.n	8009722 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8009714:	69f8      	ldr	r0, [r7, #28]
 8009716:	f000 fb15 	bl	8009d44 <tcp_timewait_input>
        pbuf_free(p);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7fe f9f2 	bl	8007b04 <pbuf_free>
        return;
 8009720:	e1db      	b.n	8009ada <tcp_input+0x746>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	61fb      	str	r3, [r7, #28]
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1cc      	bne.n	80096c8 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800972e:	2300      	movs	r3, #0
 8009730:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009732:	4b4b      	ldr	r3, [pc, #300]	; (8009860 <tcp_input+0x4cc>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	e019      	b.n	800976e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	8ada      	ldrh	r2, [r3, #22]
 800973e:	4b41      	ldr	r3, [pc, #260]	; (8009844 <tcp_input+0x4b0>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	885b      	ldrh	r3, [r3, #2]
 8009744:	b29b      	uxth	r3, r3
 8009746:	429a      	cmp	r2, r3
 8009748:	d10c      	bne.n	8009764 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	4b3e      	ldr	r3, [pc, #248]	; (8009848 <tcp_input+0x4b4>)
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	429a      	cmp	r2, r3
 8009754:	d00f      	beq.n	8009776 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00d      	beq.n	8009778 <tcp_input+0x3e4>
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d009      	beq.n	8009778 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e2      	bne.n	800973a <tcp_input+0x3a6>
 8009774:	e000      	b.n	8009778 <tcp_input+0x3e4>
            break;
 8009776:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d014      	beq.n	80097a8 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00a      	beq.n	800979a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800978c:	4b34      	ldr	r3, [pc, #208]	; (8009860 <tcp_input+0x4cc>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009794:	4a32      	ldr	r2, [pc, #200]	; (8009860 <tcp_input+0x4cc>)
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800979a:	6978      	ldr	r0, [r7, #20]
 800979c:	f000 f9f0 	bl	8009b80 <tcp_listen_input>
      pbuf_free(p);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7fe f9af 	bl	8007b04 <pbuf_free>
      return;
 80097a6:	e198      	b.n	8009ada <tcp_input+0x746>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 8165 	beq.w	8009a7a <tcp_input+0x6e6>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80097b0:	4b2c      	ldr	r3, [pc, #176]	; (8009864 <tcp_input+0x4d0>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	891a      	ldrh	r2, [r3, #8]
 80097ba:	4b2a      	ldr	r3, [pc, #168]	; (8009864 <tcp_input+0x4d0>)
 80097bc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80097be:	4a29      	ldr	r2, [pc, #164]	; (8009864 <tcp_input+0x4d0>)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80097c4:	4b1f      	ldr	r3, [pc, #124]	; (8009844 <tcp_input+0x4b0>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a26      	ldr	r2, [pc, #152]	; (8009864 <tcp_input+0x4d0>)
 80097ca:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80097cc:	4b26      	ldr	r3, [pc, #152]	; (8009868 <tcp_input+0x4d4>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80097d2:	4b26      	ldr	r3, [pc, #152]	; (800986c <tcp_input+0x4d8>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80097d8:	4b25      	ldr	r3, [pc, #148]	; (8009870 <tcp_input+0x4dc>)
 80097da:	2200      	movs	r2, #0
 80097dc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80097de:	4b25      	ldr	r3, [pc, #148]	; (8009874 <tcp_input+0x4e0>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	f003 0308 	and.w	r3, r3, #8
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d006      	beq.n	80097f8 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7b5b      	ldrb	r3, [r3, #13]
 80097ee:	f043 0301 	orr.w	r3, r3, #1
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d03d      	beq.n	800987c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009800:	69f8      	ldr	r0, [r7, #28]
 8009802:	f7ff fa59 	bl	8008cb8 <tcp_process_refused_data>
 8009806:	4603      	mov	r3, r0
 8009808:	f113 0f0d 	cmn.w	r3, #13
 800980c:	d007      	beq.n	800981e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009812:	2b00      	cmp	r3, #0
 8009814:	d032      	beq.n	800987c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009816:	4b18      	ldr	r3, [pc, #96]	; (8009878 <tcp_input+0x4e4>)
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d02e      	beq.n	800987c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009822:	2b00      	cmp	r3, #0
 8009824:	f040 8109 	bne.w	8009a3a <tcp_input+0x6a6>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009828:	69f8      	ldr	r0, [r7, #28]
 800982a:	f002 fa0b 	bl	800bc44 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800982e:	e104      	b.n	8009a3a <tcp_input+0x6a6>
 8009830:	08011000 	.word	0x08011000
 8009834:	08011098 	.word	0x08011098
 8009838:	08011044 	.word	0x08011044
 800983c:	080110c0 	.word	0x080110c0
 8009840:	080110ec 	.word	0x080110ec
 8009844:	2000409c 	.word	0x2000409c
 8009848:	2000734c 	.word	0x2000734c
 800984c:	08011114 	.word	0x08011114
 8009850:	2000e41c 	.word	0x2000e41c
 8009854:	08011140 	.word	0x08011140
 8009858:	2000e42c 	.word	0x2000e42c
 800985c:	0801116c 	.word	0x0801116c
 8009860:	2000e424 	.word	0x2000e424
 8009864:	2000408c 	.word	0x2000408c
 8009868:	200040bc 	.word	0x200040bc
 800986c:	200040b9 	.word	0x200040b9
 8009870:	200040b4 	.word	0x200040b4
 8009874:	200040b8 	.word	0x200040b8
 8009878:	200040b6 	.word	0x200040b6
      }
    }
    tcp_input_pcb = pcb;
 800987c:	4a98      	ldr	r2, [pc, #608]	; (8009ae0 <tcp_input+0x74c>)
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009882:	69f8      	ldr	r0, [r7, #28]
 8009884:	f000 fac6 	bl	8009e14 <tcp_process>
 8009888:	4603      	mov	r3, r0
 800988a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800988c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009890:	f113 0f0d 	cmn.w	r3, #13
 8009894:	f000 80d3 	beq.w	8009a3e <tcp_input+0x6aa>
      if (recv_flags & TF_RESET) {
 8009898:	4b92      	ldr	r3, [pc, #584]	; (8009ae4 <tcp_input+0x750>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d016      	beq.n	80098d2 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d008      	beq.n	80098c0 <tcp_input+0x52c>
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b4:	69fa      	ldr	r2, [r7, #28]
 80098b6:	6912      	ldr	r2, [r2, #16]
 80098b8:	f06f 010d 	mvn.w	r1, #13
 80098bc:	4610      	mov	r0, r2
 80098be:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80098c0:	69f9      	ldr	r1, [r7, #28]
 80098c2:	4889      	ldr	r0, [pc, #548]	; (8009ae8 <tcp_input+0x754>)
 80098c4:	f7ff fc4c 	bl	8009160 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80098c8:	69f9      	ldr	r1, [r7, #28]
 80098ca:	2001      	movs	r0, #1
 80098cc:	f7fd fbbe 	bl	800704c <memp_free>
 80098d0:	e0c0      	b.n	8009a54 <tcp_input+0x6c0>
      } else {
        err = ERR_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80098d6:	4b85      	ldr	r3, [pc, #532]	; (8009aec <tcp_input+0x758>)
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d01b      	beq.n	8009916 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80098de:	4b83      	ldr	r3, [pc, #524]	; (8009aec <tcp_input+0x758>)
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d009      	beq.n	8009900 <tcp_input+0x56c>
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	6910      	ldr	r0, [r2, #16]
 80098f4:	89fa      	ldrh	r2, [r7, #14]
 80098f6:	69f9      	ldr	r1, [r7, #28]
 80098f8:	4798      	blx	r3
 80098fa:	4603      	mov	r3, r0
 80098fc:	74fb      	strb	r3, [r7, #19]
 80098fe:	e001      	b.n	8009904 <tcp_input+0x570>
 8009900:	2300      	movs	r3, #0
 8009902:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009904:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009908:	f113 0f0d 	cmn.w	r3, #13
 800990c:	f000 8099 	beq.w	8009a42 <tcp_input+0x6ae>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009910:	4b76      	ldr	r3, [pc, #472]	; (8009aec <tcp_input+0x758>)
 8009912:	2200      	movs	r2, #0
 8009914:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009916:	69f8      	ldr	r0, [r7, #28]
 8009918:	f000 f900 	bl	8009b1c <tcp_input_delayed_close>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	f040 8091 	bne.w	8009a46 <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009924:	4b72      	ldr	r3, [pc, #456]	; (8009af0 <tcp_input+0x75c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d041      	beq.n	80099b0 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <tcp_input+0x5ae>
 8009934:	4b6f      	ldr	r3, [pc, #444]	; (8009af4 <tcp_input+0x760>)
 8009936:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800993a:	496f      	ldr	r1, [pc, #444]	; (8009af8 <tcp_input+0x764>)
 800993c:	486f      	ldr	r0, [pc, #444]	; (8009afc <tcp_input+0x768>)
 800993e:	f005 fd2b 	bl	800f398 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	7e9b      	ldrb	r3, [r3, #26]
 8009946:	f003 0310 	and.w	r3, r3, #16
 800994a:	2b00      	cmp	r3, #0
 800994c:	d008      	beq.n	8009960 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800994e:	4b68      	ldr	r3, [pc, #416]	; (8009af0 <tcp_input+0x75c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe f8d6 	bl	8007b04 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009958:	69f8      	ldr	r0, [r7, #28]
 800995a:	f7fe fdd3 	bl	8008504 <tcp_abort>
            goto aborted;
 800995e:	e079      	b.n	8009a54 <tcp_input+0x6c0>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00c      	beq.n	8009984 <tcp_input+0x5f0>
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	6918      	ldr	r0, [r3, #16]
 8009974:	4b5e      	ldr	r3, [pc, #376]	; (8009af0 <tcp_input+0x75c>)
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	2300      	movs	r3, #0
 800997a:	69f9      	ldr	r1, [r7, #28]
 800997c:	47a0      	blx	r4
 800997e:	4603      	mov	r3, r0
 8009980:	74fb      	strb	r3, [r7, #19]
 8009982:	e008      	b.n	8009996 <tcp_input+0x602>
 8009984:	4b5a      	ldr	r3, [pc, #360]	; (8009af0 <tcp_input+0x75c>)
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	2300      	movs	r3, #0
 800998a:	69f9      	ldr	r1, [r7, #28]
 800998c:	2000      	movs	r0, #0
 800998e:	f7ff fa45 	bl	8008e1c <tcp_recv_null>
 8009992:	4603      	mov	r3, r0
 8009994:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009996:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800999a:	f113 0f0d 	cmn.w	r3, #13
 800999e:	d054      	beq.n	8009a4a <tcp_input+0x6b6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80099a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80099a8:	4b51      	ldr	r3, [pc, #324]	; (8009af0 <tcp_input+0x75c>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80099b0:	4b4c      	ldr	r3, [pc, #304]	; (8009ae4 <tcp_input+0x750>)
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	f003 0320 	and.w	r3, r3, #32
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d031      	beq.n	8009a20 <tcp_input+0x68c>
          if (pcb->refused_data != NULL) {
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c8:	7b5a      	ldrb	r2, [r3, #13]
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ce:	f042 0220 	orr.w	r2, r2, #32
 80099d2:	b2d2      	uxtb	r2, r2
 80099d4:	735a      	strb	r2, [r3, #13]
 80099d6:	e023      	b.n	8009a20 <tcp_input+0x68c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099dc:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d005      	beq.n	80099f0 <tcp_input+0x65c>
              pcb->rcv_wnd++;
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e8:	3301      	adds	r3, #1
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00b      	beq.n	8009a12 <tcp_input+0x67e>
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	6918      	ldr	r0, [r3, #16]
 8009a04:	2300      	movs	r3, #0
 8009a06:	2200      	movs	r2, #0
 8009a08:	69f9      	ldr	r1, [r7, #28]
 8009a0a:	47a0      	blx	r4
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	74fb      	strb	r3, [r7, #19]
 8009a10:	e001      	b.n	8009a16 <tcp_input+0x682>
 8009a12:	2300      	movs	r3, #0
 8009a14:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009a16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a1a:	f113 0f0d 	cmn.w	r3, #13
 8009a1e:	d016      	beq.n	8009a4e <tcp_input+0x6ba>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009a20:	4b2f      	ldr	r3, [pc, #188]	; (8009ae0 <tcp_input+0x74c>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009a26:	69f8      	ldr	r0, [r7, #28]
 8009a28:	f000 f878 	bl	8009b1c <tcp_input_delayed_close>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10f      	bne.n	8009a52 <tcp_input+0x6be>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009a32:	69f8      	ldr	r0, [r7, #28]
 8009a34:	f002 f962 	bl	800bcfc <tcp_output>
 8009a38:	e00c      	b.n	8009a54 <tcp_input+0x6c0>
        goto aborted;
 8009a3a:	bf00      	nop
 8009a3c:	e00a      	b.n	8009a54 <tcp_input+0x6c0>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009a3e:	bf00      	nop
 8009a40:	e008      	b.n	8009a54 <tcp_input+0x6c0>
              goto aborted;
 8009a42:	bf00      	nop
 8009a44:	e006      	b.n	8009a54 <tcp_input+0x6c0>
          goto aborted;
 8009a46:	bf00      	nop
 8009a48:	e004      	b.n	8009a54 <tcp_input+0x6c0>
            goto aborted;
 8009a4a:	bf00      	nop
 8009a4c:	e002      	b.n	8009a54 <tcp_input+0x6c0>
              goto aborted;
 8009a4e:	bf00      	nop
 8009a50:	e000      	b.n	8009a54 <tcp_input+0x6c0>
          goto aborted;
 8009a52:	bf00      	nop
    tcp_input_pcb = NULL;
 8009a54:	4b22      	ldr	r3, [pc, #136]	; (8009ae0 <tcp_input+0x74c>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009a5a:	4b25      	ldr	r3, [pc, #148]	; (8009af0 <tcp_input+0x75c>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8009a60:	4b27      	ldr	r3, [pc, #156]	; (8009b00 <tcp_input+0x76c>)
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d037      	beq.n	8009ad8 <tcp_input+0x744>
    {
      pbuf_free(inseg.p);
 8009a68:	4b25      	ldr	r3, [pc, #148]	; (8009b00 <tcp_input+0x76c>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe f849 	bl	8007b04 <pbuf_free>
      inseg.p = NULL;
 8009a72:	4b23      	ldr	r3, [pc, #140]	; (8009b00 <tcp_input+0x76c>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009a78:	e02e      	b.n	8009ad8 <tcp_input+0x744>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009a7a:	4b22      	ldr	r3, [pc, #136]	; (8009b04 <tcp_input+0x770>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	899b      	ldrh	r3, [r3, #12]
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fc fea2 	bl	80067cc <lwip_htons>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d115      	bne.n	8009abe <tcp_input+0x72a>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a92:	4b1d      	ldr	r3, [pc, #116]	; (8009b08 <tcp_input+0x774>)
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <tcp_input+0x778>)
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	4b1c      	ldr	r3, [pc, #112]	; (8009b10 <tcp_input+0x77c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009aa2:	4b18      	ldr	r3, [pc, #96]	; (8009b04 <tcp_input+0x770>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009aa6:	885b      	ldrh	r3, [r3, #2]
 8009aa8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009aaa:	4a16      	ldr	r2, [pc, #88]	; (8009b04 <tcp_input+0x770>)
 8009aac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009aae:	8812      	ldrh	r2, [r2, #0]
 8009ab0:	b292      	uxth	r2, r2
 8009ab2:	9201      	str	r2, [sp, #4]
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	4b17      	ldr	r3, [pc, #92]	; (8009b14 <tcp_input+0x780>)
 8009ab8:	4a17      	ldr	r2, [pc, #92]	; (8009b18 <tcp_input+0x784>)
 8009aba:	f002 fba9 	bl	800c210 <tcp_rst>
    pbuf_free(p);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7fe f820 	bl	8007b04 <pbuf_free>
  return;
 8009ac4:	e008      	b.n	8009ad8 <tcp_input+0x744>
    goto dropped;
 8009ac6:	bf00      	nop
 8009ac8:	e002      	b.n	8009ad0 <tcp_input+0x73c>
dropped:
 8009aca:	bf00      	nop
 8009acc:	e000      	b.n	8009ad0 <tcp_input+0x73c>
      goto dropped;
 8009ace:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7fe f817 	bl	8007b04 <pbuf_free>
 8009ad6:	e000      	b.n	8009ada <tcp_input+0x746>
  return;
 8009ad8:	bf00      	nop
}
 8009ada:	3724      	adds	r7, #36	; 0x24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd90      	pop	{r4, r7, pc}
 8009ae0:	2000e430 	.word	0x2000e430
 8009ae4:	200040b9 	.word	0x200040b9
 8009ae8:	2000e41c 	.word	0x2000e41c
 8009aec:	200040b4 	.word	0x200040b4
 8009af0:	200040bc 	.word	0x200040bc
 8009af4:	08011000 	.word	0x08011000
 8009af8:	0801119c 	.word	0x0801119c
 8009afc:	08011044 	.word	0x08011044
 8009b00:	2000408c 	.word	0x2000408c
 8009b04:	2000409c 	.word	0x2000409c
 8009b08:	200040b0 	.word	0x200040b0
 8009b0c:	200040b6 	.word	0x200040b6
 8009b10:	200040ac 	.word	0x200040ac
 8009b14:	2000735c 	.word	0x2000735c
 8009b18:	20007360 	.word	0x20007360

08009b1c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8009b24:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <tcp_input_delayed_close+0x5c>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	f003 0310 	and.w	r3, r3, #16
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01d      	beq.n	8009b6c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	7e9b      	ldrb	r3, [r3, #26]
 8009b34:	f003 0310 	and.w	r3, r3, #16
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10d      	bne.n	8009b58 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d008      	beq.n	8009b58 <tcp_input_delayed_close+0x3c>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6912      	ldr	r2, [r2, #16]
 8009b50:	f06f 010e 	mvn.w	r1, #14
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	4808      	ldr	r0, [pc, #32]	; (8009b7c <tcp_input_delayed_close+0x60>)
 8009b5c:	f7ff fb00 	bl	8009160 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	2001      	movs	r0, #1
 8009b64:	f7fd fa72 	bl	800704c <memp_free>
    return 1;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e000      	b.n	8009b6e <tcp_input_delayed_close+0x52>
  }
  return 0;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200040b9 	.word	0x200040b9
 8009b7c:	2000e41c 	.word	0x2000e41c

08009b80 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009b88:	4b64      	ldr	r3, [pc, #400]	; (8009d1c <tcp_listen_input+0x19c>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f040 80bc 	bne.w	8009d0e <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009b96:	4b61      	ldr	r3, [pc, #388]	; (8009d1c <tcp_listen_input+0x19c>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	f003 0310 	and.w	r3, r3, #16
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d016      	beq.n	8009bd0 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ba2:	4b5f      	ldr	r3, [pc, #380]	; (8009d20 <tcp_listen_input+0x1a0>)
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	4b5f      	ldr	r3, [pc, #380]	; (8009d24 <tcp_listen_input+0x1a4>)
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	4b5e      	ldr	r3, [pc, #376]	; (8009d28 <tcp_listen_input+0x1a8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bb2:	4b5e      	ldr	r3, [pc, #376]	; (8009d2c <tcp_listen_input+0x1ac>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bb6:	885b      	ldrh	r3, [r3, #2]
 8009bb8:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bba:	4a5c      	ldr	r2, [pc, #368]	; (8009d2c <tcp_listen_input+0x1ac>)
 8009bbc:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bbe:	8812      	ldrh	r2, [r2, #0]
 8009bc0:	b292      	uxth	r2, r2
 8009bc2:	9201      	str	r2, [sp, #4]
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	4b5a      	ldr	r3, [pc, #360]	; (8009d30 <tcp_listen_input+0x1b0>)
 8009bc8:	4a5a      	ldr	r2, [pc, #360]	; (8009d34 <tcp_listen_input+0x1b4>)
 8009bca:	f002 fb21 	bl	800c210 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009bce:	e0a0      	b.n	8009d12 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8009bd0:	4b52      	ldr	r3, [pc, #328]	; (8009d1c <tcp_listen_input+0x19c>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 809a 	beq.w	8009d12 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	7d5b      	ldrb	r3, [r3, #21]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff f9f8 	bl	8008fd8 <tcp_alloc>
 8009be8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d111      	bne.n	8009c14 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00a      	beq.n	8009c0e <tcp_listen_input+0x8e>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	6910      	ldr	r0, [r2, #16]
 8009c00:	f04f 32ff 	mov.w	r2, #4294967295
 8009c04:	2100      	movs	r1, #0
 8009c06:	4798      	blx	r3
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73bb      	strb	r3, [r7, #14]
      return;
 8009c0c:	e082      	b.n	8009d14 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009c0e:	23f0      	movs	r3, #240	; 0xf0
 8009c10:	73bb      	strb	r3, [r7, #14]
      return;
 8009c12:	e07f      	b.n	8009d14 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009c14:	4b48      	ldr	r3, [pc, #288]	; (8009d38 <tcp_listen_input+0x1b8>)
 8009c16:	695a      	ldr	r2, [r3, #20]
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009c1c:	4b46      	ldr	r3, [pc, #280]	; (8009d38 <tcp_listen_input+0x1b8>)
 8009c1e:	691a      	ldr	r2, [r3, #16]
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	8ada      	ldrh	r2, [r3, #22]
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009c2c:	4b3f      	ldr	r3, [pc, #252]	; (8009d2c <tcp_listen_input+0x1ac>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2203      	movs	r2, #3
 8009c3c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009c3e:	4b3a      	ldr	r3, [pc, #232]	; (8009d28 <tcp_listen_input+0x1a8>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009c50:	6978      	ldr	r0, [r7, #20]
 8009c52:	f7ff fb01 	bl	8009258 <tcp_next_iss>
 8009c56:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009c70:	4b2d      	ldr	r3, [pc, #180]	; (8009d28 <tcp_listen_input+0x1a8>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	1e5a      	subs	r2, r3, #1
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691a      	ldr	r2, [r3, #16]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	7a1b      	ldrb	r3, [r3, #8]
 8009c8c:	f003 030c 	and.w	r3, r3, #12
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009c96:	4b29      	ldr	r3, [pc, #164]	; (8009d3c <tcp_listen_input+0x1bc>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	60da      	str	r2, [r3, #12]
 8009c9e:	4a27      	ldr	r2, [pc, #156]	; (8009d3c <tcp_listen_input+0x1bc>)
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	f002 fd04 	bl	800c6b0 <tcp_timer_needed>
 8009ca8:	4b25      	ldr	r3, [pc, #148]	; (8009d40 <tcp_listen_input+0x1c0>)
 8009caa:	2201      	movs	r2, #1
 8009cac:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009cae:	6978      	ldr	r0, [r7, #20]
 8009cb0:	f001 fd14 	bl	800b6dc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009cb4:	4b1d      	ldr	r3, [pc, #116]	; (8009d2c <tcp_listen_input+0x1ac>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	89db      	ldrh	r3, [r3, #14]
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	4610      	mov	r0, r2
 8009cda:	f7ff fad5 	bl	8009288 <tcp_eff_send_mss_impl>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009ce6:	2112      	movs	r1, #18
 8009ce8:	6978      	ldr	r0, [r7, #20]
 8009cea:	f001 feaf 	bl	800ba4c <tcp_enqueue_flags>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d004      	beq.n	8009d04 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	6978      	ldr	r0, [r7, #20]
 8009cfe:	f7fe fb4f 	bl	80083a0 <tcp_abandon>
      return;
 8009d02:	e007      	b.n	8009d14 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8009d04:	6978      	ldr	r0, [r7, #20]
 8009d06:	f001 fff9 	bl	800bcfc <tcp_output>
  return;
 8009d0a:	bf00      	nop
 8009d0c:	e001      	b.n	8009d12 <tcp_listen_input+0x192>
    return;
 8009d0e:	bf00      	nop
 8009d10:	e000      	b.n	8009d14 <tcp_listen_input+0x194>
  return;
 8009d12:	bf00      	nop
}
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	200040b8 	.word	0x200040b8
 8009d20:	200040b0 	.word	0x200040b0
 8009d24:	200040b6 	.word	0x200040b6
 8009d28:	200040ac 	.word	0x200040ac
 8009d2c:	2000409c 	.word	0x2000409c
 8009d30:	2000735c 	.word	0x2000735c
 8009d34:	20007360 	.word	0x20007360
 8009d38:	2000734c 	.word	0x2000734c
 8009d3c:	2000e41c 	.word	0x2000e41c
 8009d40:	2000e418 	.word	0x2000e418

08009d44 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009d4c:	4b29      	ldr	r3, [pc, #164]	; (8009df4 <tcp_timewait_input+0xb0>)
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d147      	bne.n	8009de8 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009d58:	4b26      	ldr	r3, [pc, #152]	; (8009df4 <tcp_timewait_input+0xb0>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	f003 0302 	and.w	r3, r3, #2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d027      	beq.n	8009db4 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009d64:	4b24      	ldr	r3, [pc, #144]	; (8009df8 <tcp_timewait_input+0xb4>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	db2a      	blt.n	8009dc8 <tcp_timewait_input+0x84>
 8009d72:	4b21      	ldr	r3, [pc, #132]	; (8009df8 <tcp_timewait_input+0xb4>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d7e:	440b      	add	r3, r1
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dc20      	bgt.n	8009dc8 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d86:	4b1d      	ldr	r3, [pc, #116]	; (8009dfc <tcp_timewait_input+0xb8>)
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <tcp_timewait_input+0xbc>)
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	4b19      	ldr	r3, [pc, #100]	; (8009df8 <tcp_timewait_input+0xb4>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d96:	4b1b      	ldr	r3, [pc, #108]	; (8009e04 <tcp_timewait_input+0xc0>)
 8009d98:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d9a:	885b      	ldrh	r3, [r3, #2]
 8009d9c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d9e:	4a19      	ldr	r2, [pc, #100]	; (8009e04 <tcp_timewait_input+0xc0>)
 8009da0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009da2:	8812      	ldrh	r2, [r2, #0]
 8009da4:	b292      	uxth	r2, r2
 8009da6:	9201      	str	r2, [sp, #4]
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	4b17      	ldr	r3, [pc, #92]	; (8009e08 <tcp_timewait_input+0xc4>)
 8009dac:	4a17      	ldr	r2, [pc, #92]	; (8009e0c <tcp_timewait_input+0xc8>)
 8009dae:	f002 fa2f 	bl	800c210 <tcp_rst>
      return;
 8009db2:	e01c      	b.n	8009dee <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8009db4:	4b0f      	ldr	r3, [pc, #60]	; (8009df4 <tcp_timewait_input+0xb0>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009dc0:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <tcp_timewait_input+0xcc>)
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009dc8:	4b0d      	ldr	r3, [pc, #52]	; (8009e00 <tcp_timewait_input+0xbc>)
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00d      	beq.n	8009dec <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	7e9b      	ldrb	r3, [r3, #26]
 8009dd4:	f043 0302 	orr.w	r3, r3, #2
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 ff8c 	bl	800bcfc <tcp_output>
  }
  return;
 8009de4:	bf00      	nop
 8009de6:	e001      	b.n	8009dec <tcp_timewait_input+0xa8>
    return;
 8009de8:	bf00      	nop
 8009dea:	e000      	b.n	8009dee <tcp_timewait_input+0xaa>
  return;
 8009dec:	bf00      	nop
}
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	200040b8 	.word	0x200040b8
 8009df8:	200040ac 	.word	0x200040ac
 8009dfc:	200040b0 	.word	0x200040b0
 8009e00:	200040b6 	.word	0x200040b6
 8009e04:	2000409c 	.word	0x2000409c
 8009e08:	2000735c 	.word	0x2000735c
 8009e0c:	20007360 	.word	0x20007360
 8009e10:	2000e420 	.word	0x2000e420

08009e14 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08a      	sub	sp, #40	; 0x28
 8009e18:	af02      	add	r7, sp, #8
 8009e1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009e24:	4ba4      	ldr	r3, [pc, #656]	; (800a0b8 <tcp_process+0x2a4>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d04e      	beq.n	8009ece <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	7d1b      	ldrb	r3, [r3, #20]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d108      	bne.n	8009e4a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e3c:	4b9f      	ldr	r3, [pc, #636]	; (800a0bc <tcp_process+0x2a8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d123      	bne.n	8009e8c <tcp_process+0x78>
        acceptable = 1;
 8009e44:	2301      	movs	r3, #1
 8009e46:	76fb      	strb	r3, [r7, #27]
 8009e48:	e020      	b.n	8009e8c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e4e:	4b9c      	ldr	r3, [pc, #624]	; (800a0c0 <tcp_process+0x2ac>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d102      	bne.n	8009e5c <tcp_process+0x48>
        acceptable = 1;
 8009e56:	2301      	movs	r3, #1
 8009e58:	76fb      	strb	r3, [r7, #27]
 8009e5a:	e017      	b.n	8009e8c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e5c:	4b98      	ldr	r3, [pc, #608]	; (800a0c0 <tcp_process+0x2ac>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	db10      	blt.n	8009e8c <tcp_process+0x78>
 8009e6a:	4b95      	ldr	r3, [pc, #596]	; (800a0c0 <tcp_process+0x2ac>)
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	6879      	ldr	r1, [r7, #4]
 8009e74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e76:	440b      	add	r3, r1
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dc06      	bgt.n	8009e8c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	7e9b      	ldrb	r3, [r3, #26]
 8009e82:	f043 0302 	orr.w	r3, r3, #2
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009e8c:	7efb      	ldrb	r3, [r7, #27]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01b      	beq.n	8009eca <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	7d1b      	ldrb	r3, [r3, #20]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d106      	bne.n	8009ea8 <tcp_process+0x94>
 8009e9a:	4b8a      	ldr	r3, [pc, #552]	; (800a0c4 <tcp_process+0x2b0>)
 8009e9c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009ea0:	4989      	ldr	r1, [pc, #548]	; (800a0c8 <tcp_process+0x2b4>)
 8009ea2:	488a      	ldr	r0, [pc, #552]	; (800a0cc <tcp_process+0x2b8>)
 8009ea4:	f005 fa78 	bl	800f398 <iprintf>
      recv_flags |= TF_RESET;
 8009ea8:	4b89      	ldr	r3, [pc, #548]	; (800a0d0 <tcp_process+0x2bc>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	f043 0308 	orr.w	r3, r3, #8
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	4b87      	ldr	r3, [pc, #540]	; (800a0d0 <tcp_process+0x2bc>)
 8009eb4:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	7e9b      	ldrb	r3, [r3, #26]
 8009eba:	f023 0301 	bic.w	r3, r3, #1
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8009ec4:	f06f 030d 	mvn.w	r3, #13
 8009ec8:	e34d      	b.n	800a566 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e34b      	b.n	800a566 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009ece:	4b7a      	ldr	r3, [pc, #488]	; (800a0b8 <tcp_process+0x2a4>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	f003 0302 	and.w	r3, r3, #2
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d010      	beq.n	8009efc <tcp_process+0xe8>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	7d1b      	ldrb	r3, [r3, #20]
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d00c      	beq.n	8009efc <tcp_process+0xe8>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	7d1b      	ldrb	r3, [r3, #20]
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d008      	beq.n	8009efc <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7e9b      	ldrb	r3, [r3, #26]
 8009eee:	f043 0302 	orr.w	r3, r3, #2
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e334      	b.n	800a566 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	7e9b      	ldrb	r3, [r3, #26]
 8009f00:	f003 0310 	and.w	r3, r3, #16
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d103      	bne.n	8009f10 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009f08:	4b72      	ldr	r3, [pc, #456]	; (800a0d4 <tcp_process+0x2c0>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f001 fbdf 	bl	800b6dc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	7d1b      	ldrb	r3, [r3, #20]
 8009f22:	3b02      	subs	r3, #2
 8009f24:	2b07      	cmp	r3, #7
 8009f26:	f200 830e 	bhi.w	800a546 <tcp_process+0x732>
 8009f2a:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <tcp_process+0x11c>)
 8009f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f30:	08009f51 	.word	0x08009f51
 8009f34:	0800a149 	.word	0x0800a149
 8009f38:	0800a2a1 	.word	0x0800a2a1
 8009f3c:	0800a2cb 	.word	0x0800a2cb
 8009f40:	0800a3f5 	.word	0x0800a3f5
 8009f44:	0800a2a1 	.word	0x0800a2a1
 8009f48:	0800a481 	.word	0x0800a481
 8009f4c:	0800a511 	.word	0x0800a511
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009f50:	4b59      	ldr	r3, [pc, #356]	; (800a0b8 <tcp_process+0x2a4>)
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	f003 0310 	and.w	r3, r3, #16
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 80cb 	beq.w	800a0f4 <tcp_process+0x2e0>
 8009f5e:	4b56      	ldr	r3, [pc, #344]	; (800a0b8 <tcp_process+0x2a4>)
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 80c4 	beq.w	800a0f4 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	4b52      	ldr	r3, [pc, #328]	; (800a0bc <tcp_process+0x2a8>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	f040 80bc 	bne.w	800a0f4 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8009f7c:	4b50      	ldr	r3, [pc, #320]	; (800a0c0 <tcp_process+0x2ac>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	1c5a      	adds	r2, r3, #1
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8009f8e:	4b4b      	ldr	r3, [pc, #300]	; (800a0bc <tcp_process+0x2a8>)
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8009f96:	4b50      	ldr	r3, [pc, #320]	; (800a0d8 <tcp_process+0x2c4>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	89db      	ldrh	r3, [r3, #14]
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009fb0:	4b43      	ldr	r3, [pc, #268]	; (800a0c0 <tcp_process+0x2ac>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	1e5a      	subs	r2, r3, #1
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2204      	movs	r2, #4
 8009fbe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4610      	mov	r0, r2
 8009fcc:	f7ff f95c 	bl	8009288 <tcp_eff_send_mss_impl>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	f241 121c 	movw	r2, #4380	; 0x111c
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	bf38      	it	cc
 8009fe6:	461a      	movcc	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bf28      	it	cs
 8009ff2:	4613      	movcs	r3, r2
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <tcp_process+0x200>
 800a006:	4b2f      	ldr	r3, [pc, #188]	; (800a0c4 <tcp_process+0x2b0>)
 800a008:	f240 321a 	movw	r2, #794	; 0x31a
 800a00c:	4933      	ldr	r1, [pc, #204]	; (800a0dc <tcp_process+0x2c8>)
 800a00e:	482f      	ldr	r0, [pc, #188]	; (800a0cc <tcp_process+0x2b8>)
 800a010:	f005 f9c2 	bl	800f398 <iprintf>
      --pcb->snd_queuelen;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a01a:	3b01      	subs	r3, #1
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a028:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d111      	bne.n	800a054 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a034:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d106      	bne.n	800a04a <tcp_process+0x236>
 800a03c:	4b21      	ldr	r3, [pc, #132]	; (800a0c4 <tcp_process+0x2b0>)
 800a03e:	f240 3222 	movw	r2, #802	; 0x322
 800a042:	4927      	ldr	r1, [pc, #156]	; (800a0e0 <tcp_process+0x2cc>)
 800a044:	4821      	ldr	r0, [pc, #132]	; (800a0cc <tcp_process+0x2b8>)
 800a046:	f005 f9a7 	bl	800f398 <iprintf>
        pcb->unsent = rseg->next;
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	669a      	str	r2, [r3, #104]	; 0x68
 800a052:	e003      	b.n	800a05c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800a05c:	69f8      	ldr	r0, [r7, #28]
 800a05e:	f7fe fea9 	bl	8008db4 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d104      	bne.n	800a074 <tcp_process+0x260>
        pcb->rtime = -1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a070:	861a      	strh	r2, [r3, #48]	; 0x30
 800a072:	e006      	b.n	800a082 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00a      	beq.n	800a0a2 <tcp_process+0x28e>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	6910      	ldr	r0, [r2, #16]
 800a096:	2200      	movs	r2, #0
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	4798      	blx	r3
 800a09c:	4603      	mov	r3, r0
 800a09e:	76bb      	strb	r3, [r7, #26]
 800a0a0:	e001      	b.n	800a0a6 <tcp_process+0x292>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800a0a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a0aa:	f113 0f0d 	cmn.w	r3, #13
 800a0ae:	d119      	bne.n	800a0e4 <tcp_process+0x2d0>
        return ERR_ABRT;
 800a0b0:	f06f 030c 	mvn.w	r3, #12
 800a0b4:	e257      	b.n	800a566 <tcp_process+0x752>
 800a0b6:	bf00      	nop
 800a0b8:	200040b8 	.word	0x200040b8
 800a0bc:	200040b0 	.word	0x200040b0
 800a0c0:	200040ac 	.word	0x200040ac
 800a0c4:	08011000 	.word	0x08011000
 800a0c8:	080111b8 	.word	0x080111b8
 800a0cc:	08011044 	.word	0x08011044
 800a0d0:	200040b9 	.word	0x200040b9
 800a0d4:	2000e420 	.word	0x2000e420
 800a0d8:	2000409c 	.word	0x2000409c
 800a0dc:	080111d8 	.word	0x080111d8
 800a0e0:	080111f0 	.word	0x080111f0
      }
      tcp_ack_now(pcb);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7e9b      	ldrb	r3, [r3, #26]
 800a0e8:	f043 0302 	orr.w	r3, r3, #2
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800a0f2:	e22a      	b.n	800a54a <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800a0f4:	4b9f      	ldr	r3, [pc, #636]	; (800a374 <tcp_process+0x560>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 0310 	and.w	r3, r3, #16
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8224 	beq.w	800a54a <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a102:	4b9d      	ldr	r3, [pc, #628]	; (800a378 <tcp_process+0x564>)
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	4b9d      	ldr	r3, [pc, #628]	; (800a37c <tcp_process+0x568>)
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	4b9c      	ldr	r3, [pc, #624]	; (800a380 <tcp_process+0x56c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a112:	4b9c      	ldr	r3, [pc, #624]	; (800a384 <tcp_process+0x570>)
 800a114:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a116:	885b      	ldrh	r3, [r3, #2]
 800a118:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a11a:	4a9a      	ldr	r2, [pc, #616]	; (800a384 <tcp_process+0x570>)
 800a11c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a11e:	8812      	ldrh	r2, [r2, #0]
 800a120:	b292      	uxth	r2, r2
 800a122:	9201      	str	r2, [sp, #4]
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	4b98      	ldr	r3, [pc, #608]	; (800a388 <tcp_process+0x574>)
 800a128:	4a98      	ldr	r2, [pc, #608]	; (800a38c <tcp_process+0x578>)
 800a12a:	f002 f871 	bl	800c210 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a134:	2b05      	cmp	r3, #5
 800a136:	f200 8208 	bhi.w	800a54a <tcp_process+0x736>
        pcb->rtime = 0;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f002 f8db 	bl	800c2fc <tcp_rexmit_rto>
    break;
 800a146:	e200      	b.n	800a54a <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800a148:	4b8a      	ldr	r3, [pc, #552]	; (800a374 <tcp_process+0x560>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f003 0310 	and.w	r3, r3, #16
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 8091 	beq.w	800a278 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a156:	4b88      	ldr	r3, [pc, #544]	; (800a378 <tcp_process+0x564>)
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	3b01      	subs	r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	db71      	blt.n	800a24a <tcp_process+0x436>
 800a166:	4b84      	ldr	r3, [pc, #528]	; (800a378 <tcp_process+0x564>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	dc6a      	bgt.n	800a24a <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2204      	movs	r2, #4
 800a178:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00b      	beq.n	800a19a <tcp_process+0x386>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d106      	bne.n	800a19a <tcp_process+0x386>
 800a18c:	4b80      	ldr	r3, [pc, #512]	; (800a390 <tcp_process+0x57c>)
 800a18e:	f240 3251 	movw	r2, #849	; 0x351
 800a192:	4980      	ldr	r1, [pc, #512]	; (800a394 <tcp_process+0x580>)
 800a194:	4880      	ldr	r0, [pc, #512]	; (800a398 <tcp_process+0x584>)
 800a196:	f005 f8ff 	bl	800f398 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d102      	bne.n	800a1a8 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800a1a2:	23fa      	movs	r3, #250	; 0xfa
 800a1a4:	76bb      	strb	r3, [r7, #26]
 800a1a6:	e011      	b.n	800a1cc <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00a      	beq.n	800a1c8 <tcp_process+0x3b4>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	6910      	ldr	r0, [r2, #16]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	4798      	blx	r3
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	76bb      	strb	r3, [r7, #26]
 800a1c6:	e001      	b.n	800a1cc <tcp_process+0x3b8>
 800a1c8:	23f0      	movs	r3, #240	; 0xf0
 800a1ca:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800a1cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00a      	beq.n	800a1ea <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800a1d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a1d8:	f113 0f0d 	cmn.w	r3, #13
 800a1dc:	d002      	beq.n	800a1e4 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7fe f990 	bl	8008504 <tcp_abort>
          }
          return ERR_ABRT;
 800a1e4:	f06f 030c 	mvn.w	r3, #12
 800a1e8:	e1bd      	b.n	800a566 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fa42 	bl	800a674 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800a1f0:	4b6a      	ldr	r3, [pc, #424]	; (800a39c <tcp_process+0x588>)
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d005      	beq.n	800a204 <tcp_process+0x3f0>
          recv_acked--;
 800a1f8:	4b68      	ldr	r3, [pc, #416]	; (800a39c <tcp_process+0x588>)
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	4b66      	ldr	r3, [pc, #408]	; (800a39c <tcp_process+0x588>)
 800a202:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	f241 121c 	movw	r2, #4380	; 0x111c
 800a20e:	429a      	cmp	r2, r3
 800a210:	bf38      	it	cc
 800a212:	461a      	movcc	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4293      	cmp	r3, r2
 800a21c:	bf28      	it	cs
 800a21e:	4613      	movcs	r3, r2
 800a220:	b29a      	uxth	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800a228:	4b5d      	ldr	r3, [pc, #372]	; (800a3a0 <tcp_process+0x58c>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f003 0320 	and.w	r3, r3, #32
 800a230:	2b00      	cmp	r3, #0
 800a232:	d034      	beq.n	800a29e <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	7e9b      	ldrb	r3, [r3, #26]
 800a238:	f043 0302 	orr.w	r3, r3, #2
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2207      	movs	r2, #7
 800a246:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800a248:	e029      	b.n	800a29e <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a24a:	4b4b      	ldr	r3, [pc, #300]	; (800a378 <tcp_process+0x564>)
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	4b4b      	ldr	r3, [pc, #300]	; (800a37c <tcp_process+0x568>)
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	4b4a      	ldr	r3, [pc, #296]	; (800a380 <tcp_process+0x56c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a25a:	4b4a      	ldr	r3, [pc, #296]	; (800a384 <tcp_process+0x570>)
 800a25c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a25e:	885b      	ldrh	r3, [r3, #2]
 800a260:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a262:	4a48      	ldr	r2, [pc, #288]	; (800a384 <tcp_process+0x570>)
 800a264:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a266:	8812      	ldrh	r2, [r2, #0]
 800a268:	b292      	uxth	r2, r2
 800a26a:	9201      	str	r2, [sp, #4]
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4b46      	ldr	r3, [pc, #280]	; (800a388 <tcp_process+0x574>)
 800a270:	4a46      	ldr	r2, [pc, #280]	; (800a38c <tcp_process+0x578>)
 800a272:	f001 ffcd 	bl	800c210 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800a276:	e16a      	b.n	800a54e <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a278:	4b3e      	ldr	r3, [pc, #248]	; (800a374 <tcp_process+0x560>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	f003 0302 	and.w	r3, r3, #2
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 8164 	beq.w	800a54e <tcp_process+0x73a>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	1e5a      	subs	r2, r3, #1
 800a28c:	4b3c      	ldr	r3, [pc, #240]	; (800a380 <tcp_process+0x56c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	429a      	cmp	r2, r3
 800a292:	f040 815c 	bne.w	800a54e <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f002 f866 	bl	800c368 <tcp_rexmit>
    break;
 800a29c:	e157      	b.n	800a54e <tcp_process+0x73a>
 800a29e:	e156      	b.n	800a54e <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f9e7 	bl	800a674 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a2a6:	4b3e      	ldr	r3, [pc, #248]	; (800a3a0 <tcp_process+0x58c>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f000 814f 	beq.w	800a552 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	7e9b      	ldrb	r3, [r3, #26]
 800a2b8:	f043 0302 	orr.w	r3, r3, #2
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2207      	movs	r2, #7
 800a2c6:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a2c8:	e143      	b.n	800a552 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f9d2 	bl	800a674 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a2d0:	4b33      	ldr	r3, [pc, #204]	; (800a3a0 <tcp_process+0x58c>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	f003 0320 	and.w	r3, r3, #32
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d074      	beq.n	800a3c6 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2dc:	4b25      	ldr	r3, [pc, #148]	; (800a374 <tcp_process+0x560>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	f003 0310 	and.w	r3, r3, #16
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d063      	beq.n	800a3b0 <tcp_process+0x59c>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2ec:	4b22      	ldr	r3, [pc, #136]	; (800a378 <tcp_process+0x564>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d15d      	bne.n	800a3b0 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d159      	bne.n	800a3b0 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	7e9b      	ldrb	r3, [r3, #26]
 800a300:	f043 0302 	orr.w	r3, r3, #2
 800a304:	b2da      	uxtb	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7fe fee6 	bl	80090dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a310:	4b24      	ldr	r3, [pc, #144]	; (800a3a4 <tcp_process+0x590>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	429a      	cmp	r2, r3
 800a318:	d105      	bne.n	800a326 <tcp_process+0x512>
 800a31a:	4b22      	ldr	r3, [pc, #136]	; (800a3a4 <tcp_process+0x590>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	4a20      	ldr	r2, [pc, #128]	; (800a3a4 <tcp_process+0x590>)
 800a322:	6013      	str	r3, [r2, #0]
 800a324:	e013      	b.n	800a34e <tcp_process+0x53a>
 800a326:	4b1f      	ldr	r3, [pc, #124]	; (800a3a4 <tcp_process+0x590>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	e00c      	b.n	800a348 <tcp_process+0x534>
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	429a      	cmp	r2, r3
 800a336:	d104      	bne.n	800a342 <tcp_process+0x52e>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	60da      	str	r2, [r3, #12]
 800a340:	e005      	b.n	800a34e <tcp_process+0x53a>
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	617b      	str	r3, [r7, #20]
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1ef      	bne.n	800a32e <tcp_process+0x51a>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	60da      	str	r2, [r3, #12]
 800a354:	4b14      	ldr	r3, [pc, #80]	; (800a3a8 <tcp_process+0x594>)
 800a356:	2201      	movs	r2, #1
 800a358:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	220a      	movs	r2, #10
 800a35e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a360:	4b12      	ldr	r3, [pc, #72]	; (800a3ac <tcp_process+0x598>)
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	60da      	str	r2, [r3, #12]
 800a368:	4a10      	ldr	r2, [pc, #64]	; (800a3ac <tcp_process+0x598>)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	f002 f99f 	bl	800c6b0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800a372:	e0f0      	b.n	800a556 <tcp_process+0x742>
 800a374:	200040b8 	.word	0x200040b8
 800a378:	200040b0 	.word	0x200040b0
 800a37c:	200040b6 	.word	0x200040b6
 800a380:	200040ac 	.word	0x200040ac
 800a384:	2000409c 	.word	0x2000409c
 800a388:	2000735c 	.word	0x2000735c
 800a38c:	20007360 	.word	0x20007360
 800a390:	08011000 	.word	0x08011000
 800a394:	08011204 	.word	0x08011204
 800a398:	08011044 	.word	0x08011044
 800a39c:	200040b4 	.word	0x200040b4
 800a3a0:	200040b9 	.word	0x200040b9
 800a3a4:	2000e41c 	.word	0x2000e41c
 800a3a8:	2000e418 	.word	0x2000e418
 800a3ac:	2000e42c 	.word	0x2000e42c
        tcp_ack_now(pcb);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	7e9b      	ldrb	r3, [r3, #26]
 800a3b4:	f043 0302 	orr.w	r3, r3, #2
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	751a      	strb	r2, [r3, #20]
    break;
 800a3c4:	e0c7      	b.n	800a556 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a3c6:	4b6a      	ldr	r3, [pc, #424]	; (800a570 <tcp_process+0x75c>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	f003 0310 	and.w	r3, r3, #16
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 80c1 	beq.w	800a556 <tcp_process+0x742>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3d8:	4b66      	ldr	r3, [pc, #408]	; (800a574 <tcp_process+0x760>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	f040 80ba 	bne.w	800a556 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f040 80b5 	bne.w	800a556 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2206      	movs	r2, #6
 800a3f0:	751a      	strb	r2, [r3, #20]
    break;
 800a3f2:	e0b0      	b.n	800a556 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f93d 	bl	800a674 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a3fa:	4b5f      	ldr	r3, [pc, #380]	; (800a578 <tcp_process+0x764>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	f003 0320 	and.w	r3, r3, #32
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 80a9 	beq.w	800a55a <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	7e9b      	ldrb	r3, [r3, #26]
 800a40c:	f043 0302 	orr.w	r3, r3, #2
 800a410:	b2da      	uxtb	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7fe fe60 	bl	80090dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a41c:	4b57      	ldr	r3, [pc, #348]	; (800a57c <tcp_process+0x768>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	429a      	cmp	r2, r3
 800a424:	d105      	bne.n	800a432 <tcp_process+0x61e>
 800a426:	4b55      	ldr	r3, [pc, #340]	; (800a57c <tcp_process+0x768>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	4a53      	ldr	r2, [pc, #332]	; (800a57c <tcp_process+0x768>)
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	e013      	b.n	800a45a <tcp_process+0x646>
 800a432:	4b52      	ldr	r3, [pc, #328]	; (800a57c <tcp_process+0x768>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	613b      	str	r3, [r7, #16]
 800a438:	e00c      	b.n	800a454 <tcp_process+0x640>
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d104      	bne.n	800a44e <tcp_process+0x63a>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	68da      	ldr	r2, [r3, #12]
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	60da      	str	r2, [r3, #12]
 800a44c:	e005      	b.n	800a45a <tcp_process+0x646>
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	613b      	str	r3, [r7, #16]
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1ef      	bne.n	800a43a <tcp_process+0x626>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	60da      	str	r2, [r3, #12]
 800a460:	4b47      	ldr	r3, [pc, #284]	; (800a580 <tcp_process+0x76c>)
 800a462:	2201      	movs	r2, #1
 800a464:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	220a      	movs	r2, #10
 800a46a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a46c:	4b45      	ldr	r3, [pc, #276]	; (800a584 <tcp_process+0x770>)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	60da      	str	r2, [r3, #12]
 800a474:	4a43      	ldr	r2, [pc, #268]	; (800a584 <tcp_process+0x770>)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	f002 f919 	bl	800c6b0 <tcp_timer_needed>
    }
    break;
 800a47e:	e06c      	b.n	800a55a <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f8f7 	bl	800a674 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a486:	4b3a      	ldr	r3, [pc, #232]	; (800a570 <tcp_process+0x75c>)
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	f003 0310 	and.w	r3, r3, #16
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d065      	beq.n	800a55e <tcp_process+0x74a>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a496:	4b37      	ldr	r3, [pc, #220]	; (800a574 <tcp_process+0x760>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d15f      	bne.n	800a55e <tcp_process+0x74a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d15b      	bne.n	800a55e <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7fe fe18 	bl	80090dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a4ac:	4b33      	ldr	r3, [pc, #204]	; (800a57c <tcp_process+0x768>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d105      	bne.n	800a4c2 <tcp_process+0x6ae>
 800a4b6:	4b31      	ldr	r3, [pc, #196]	; (800a57c <tcp_process+0x768>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	4a2f      	ldr	r2, [pc, #188]	; (800a57c <tcp_process+0x768>)
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	e013      	b.n	800a4ea <tcp_process+0x6d6>
 800a4c2:	4b2e      	ldr	r3, [pc, #184]	; (800a57c <tcp_process+0x768>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	e00c      	b.n	800a4e4 <tcp_process+0x6d0>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d104      	bne.n	800a4de <tcp_process+0x6ca>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68da      	ldr	r2, [r3, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	60da      	str	r2, [r3, #12]
 800a4dc:	e005      	b.n	800a4ea <tcp_process+0x6d6>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1ef      	bne.n	800a4ca <tcp_process+0x6b6>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	60da      	str	r2, [r3, #12]
 800a4f0:	4b23      	ldr	r3, [pc, #140]	; (800a580 <tcp_process+0x76c>)
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	220a      	movs	r2, #10
 800a4fa:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a4fc:	4b21      	ldr	r3, [pc, #132]	; (800a584 <tcp_process+0x770>)
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	60da      	str	r2, [r3, #12]
 800a504:	4a1f      	ldr	r2, [pc, #124]	; (800a584 <tcp_process+0x770>)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6013      	str	r3, [r2, #0]
 800a50a:	f002 f8d1 	bl	800c6b0 <tcp_timer_needed>
    }
    break;
 800a50e:	e026      	b.n	800a55e <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f8af 	bl	800a674 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a516:	4b16      	ldr	r3, [pc, #88]	; (800a570 <tcp_process+0x75c>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	f003 0310 	and.w	r3, r3, #16
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d01f      	beq.n	800a562 <tcp_process+0x74e>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a526:	4b13      	ldr	r3, [pc, #76]	; (800a574 <tcp_process+0x760>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d119      	bne.n	800a562 <tcp_process+0x74e>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a532:	2b00      	cmp	r3, #0
 800a534:	d115      	bne.n	800a562 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800a536:	4b10      	ldr	r3, [pc, #64]	; (800a578 <tcp_process+0x764>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	f043 0310 	orr.w	r3, r3, #16
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	4b0d      	ldr	r3, [pc, #52]	; (800a578 <tcp_process+0x764>)
 800a542:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a544:	e00d      	b.n	800a562 <tcp_process+0x74e>
  default:
    break;
 800a546:	bf00      	nop
 800a548:	e00c      	b.n	800a564 <tcp_process+0x750>
    break;
 800a54a:	bf00      	nop
 800a54c:	e00a      	b.n	800a564 <tcp_process+0x750>
    break;
 800a54e:	bf00      	nop
 800a550:	e008      	b.n	800a564 <tcp_process+0x750>
    break;
 800a552:	bf00      	nop
 800a554:	e006      	b.n	800a564 <tcp_process+0x750>
    break;
 800a556:	bf00      	nop
 800a558:	e004      	b.n	800a564 <tcp_process+0x750>
    break;
 800a55a:	bf00      	nop
 800a55c:	e002      	b.n	800a564 <tcp_process+0x750>
    break;
 800a55e:	bf00      	nop
 800a560:	e000      	b.n	800a564 <tcp_process+0x750>
    break;
 800a562:	bf00      	nop
  }
  return ERR_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3720      	adds	r7, #32
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	200040b8 	.word	0x200040b8
 800a574:	200040b0 	.word	0x200040b0
 800a578:	200040b9 	.word	0x200040b9
 800a57c:	2000e41c 	.word	0x2000e41c
 800a580:	2000e418 	.word	0x2000e418
 800a584:	2000e42c 	.word	0x2000e42c

0800a588 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a588:	b590      	push	{r4, r7, lr}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	899b      	ldrh	r3, [r3, #12]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fc f916 	bl	80067cc <lwip_htons>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d027      	beq.n	800a5fa <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a5aa:	6838      	ldr	r0, [r7, #0]
 800a5ac:	f7fe fbee 	bl	8008d8c <tcp_segs_free>
    next = NULL;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	e055      	b.n	800a662 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	899b      	ldrh	r3, [r3, #12]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fc f904 	bl	80067cc <lwip_htons>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00d      	beq.n	800a5ea <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	899b      	ldrh	r3, [r3, #12]
 800a5d4:	b29c      	uxth	r4, r3
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	f7fc f8f8 	bl	80067cc <lwip_htons>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	461a      	mov	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	4322      	orrs	r2, r4
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f7fe fbdd 	bl	8008db4 <tcp_seg_free>
    while (next &&
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00e      	beq.n	800a61e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	891b      	ldrh	r3, [r3, #8]
 800a604:	461a      	mov	r2, r3
 800a606:	4b1a      	ldr	r3, [pc, #104]	; (800a670 <tcp_oos_insert_segment+0xe8>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	441a      	add	r2, r3
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	8909      	ldrh	r1, [r1, #8]
 800a616:	440b      	add	r3, r1
 800a618:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dacb      	bge.n	800a5b6 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d01e      	beq.n	800a662 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	891b      	ldrh	r3, [r3, #8]
 800a628:	461a      	mov	r2, r3
 800a62a:	4b11      	ldr	r3, [pc, #68]	; (800a670 <tcp_oos_insert_segment+0xe8>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	441a      	add	r2, r3
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a638:	2b00      	cmp	r3, #0
 800a63a:	dd12      	ble.n	800a662 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	b29a      	uxth	r2, r3
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <tcp_oos_insert_segment+0xe8>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	b29b      	uxth	r3, r3
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	891b      	ldrh	r3, [r3, #8]
 800a65a:	4619      	mov	r1, r3
 800a65c:	4610      	mov	r0, r2
 800a65e:	f7fd f8dd 	bl	800781c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	601a      	str	r2, [r3, #0]
}
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd90      	pop	{r4, r7, pc}
 800a670:	200040ac 	.word	0x200040ac

0800a674 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a676:	b08d      	sub	sp, #52	; 0x34
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	7d1b      	ldrb	r3, [r3, #20]
 800a684:	2b03      	cmp	r3, #3
 800a686:	d806      	bhi.n	800a696 <tcp_receive+0x22>
 800a688:	4ba6      	ldr	r3, [pc, #664]	; (800a924 <tcp_receive+0x2b0>)
 800a68a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800a68e:	49a6      	ldr	r1, [pc, #664]	; (800a928 <tcp_receive+0x2b4>)
 800a690:	48a6      	ldr	r0, [pc, #664]	; (800a92c <tcp_receive+0x2b8>)
 800a692:	f004 fe81 	bl	800f398 <iprintf>

  if (flags & TCP_ACK) {
 800a696:	4ba6      	ldr	r3, [pc, #664]	; (800a930 <tcp_receive+0x2bc>)
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	f003 0310 	and.w	r3, r3, #16
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 82bf 	beq.w	800ac22 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b0:	4413      	add	r3, r2
 800a6b2:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6b8:	4b9e      	ldr	r3, [pc, #632]	; (800a934 <tcp_receive+0x2c0>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	db1b      	blt.n	800a6fa <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6c6:	4b9b      	ldr	r3, [pc, #620]	; (800a934 <tcp_receive+0x2c0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d106      	bne.n	800a6dc <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6d2:	4b99      	ldr	r3, [pc, #612]	; (800a938 <tcp_receive+0x2c4>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	db0e      	blt.n	800a6fa <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6e0:	4b95      	ldr	r3, [pc, #596]	; (800a938 <tcp_receive+0x2c4>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d141      	bne.n	800a76c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a6e8:	4b94      	ldr	r3, [pc, #592]	; (800a93c <tcp_receive+0x2c8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	89db      	ldrh	r3, [r3, #14]
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d938      	bls.n	800a76c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a6fa:	4b90      	ldr	r3, [pc, #576]	; (800a93c <tcp_receive+0x2c8>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	89db      	ldrh	r3, [r3, #14]
 800a700:	b29a      	uxth	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a714:	429a      	cmp	r2, r3
 800a716:	d205      	bcs.n	800a724 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800a724:	4b83      	ldr	r3, [pc, #524]	; (800a934 <tcp_receive+0x2c0>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800a72c:	4b82      	ldr	r3, [pc, #520]	; (800a938 <tcp_receive+0x2c4>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10d      	bne.n	800a75a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a744:	2b00      	cmp	r3, #0
 800a746:	d111      	bne.n	800a76c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a758:	e008      	b.n	800a76c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a76c:	4b72      	ldr	r3, [pc, #456]	; (800a938 <tcp_receive+0x2c4>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	2b00      	cmp	r3, #0
 800a778:	dc53      	bgt.n	800a822 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800a77a:	4b71      	ldr	r3, [pc, #452]	; (800a940 <tcp_receive+0x2cc>)
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d146      	bne.n	800a810 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a78c:	4413      	add	r3, r2
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	429a      	cmp	r2, r3
 800a792:	d13d      	bne.n	800a810 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	db38      	blt.n	800a810 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7a2:	4b65      	ldr	r3, [pc, #404]	; (800a938 <tcp_receive+0x2c4>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d132      	bne.n	800a810 <tcp_receive+0x19c>
              found_dupack = 1;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7b4:	2bff      	cmp	r3, #255	; 0xff
 800a7b6:	d007      	beq.n	800a7c8 <tcp_receive+0x154>
                ++pcb->dupacks;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7be:	3301      	adds	r3, #1
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d916      	bls.n	800a800 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7dc:	4413      	add	r3, r2
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d912      	bls.n	800a810 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7f4:	4413      	add	r3, r2
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a7fe:	e007      	b.n	800a810 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a806:	2b03      	cmp	r3, #3
 800a808:	d102      	bne.n	800a810 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 fdfc 	bl	800c408 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f040 8169 	bne.w	800aaea <tcp_receive+0x476>
        pcb->dupacks = 0;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a820:	e163      	b.n	800aaea <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a822:	4b45      	ldr	r3, [pc, #276]	; (800a938 <tcp_receive+0x2c4>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	3b01      	subs	r3, #1
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f2c0 8107 	blt.w	800aa42 <tcp_receive+0x3ce>
 800a834:	4b40      	ldr	r3, [pc, #256]	; (800a938 <tcp_receive+0x2c4>)
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f300 80ff 	bgt.w	800aa42 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	7e9b      	ldrb	r3, [r3, #26]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00c      	beq.n	800a86a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7e9b      	ldrb	r3, [r3, #26]
 800a854:	f023 0304 	bic.w	r3, r3, #4
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a878:	10db      	asrs	r3, r3, #3
 800a87a:	b21b      	sxth	r3, r3
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a884:	b29b      	uxth	r3, r3
 800a886:	4413      	add	r3, r2
 800a888:	b29b      	uxth	r3, r3
 800a88a:	b21a      	sxth	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a89a:	4b27      	ldr	r3, [pc, #156]	; (800a938 <tcp_receive+0x2c4>)
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	7d1b      	ldrb	r3, [r3, #20]
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	f240 8094 	bls.w	800a9d4 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d216      	bcs.n	800a8ea <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8c6:	4413      	add	r3, r2
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d97f      	bls.n	800a9d4 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8de:	4413      	add	r3, r2
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a8e8:	e074      	b.n	800a9d4 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8fa:	fb03 f301 	mul.w	r3, r3, r1
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800a904:	fb93 f3f1 	sdiv	r3, r3, r1
 800a908:	b29b      	uxth	r3, r3
 800a90a:	4413      	add	r3, r2
 800a90c:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a914:	8a7a      	ldrh	r2, [r7, #18]
 800a916:	429a      	cmp	r2, r3
 800a918:	d95c      	bls.n	800a9d4 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	8a7a      	ldrh	r2, [r7, #18]
 800a91e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800a922:	e057      	b.n	800a9d4 <tcp_receive+0x360>
 800a924:	08011000 	.word	0x08011000
 800a928:	08011224 	.word	0x08011224
 800a92c:	08011044 	.word	0x08011044
 800a930:	200040b8 	.word	0x200040b8
 800a934:	200040ac 	.word	0x200040ac
 800a938:	200040b0 	.word	0x200040b0
 800a93c:	2000409c 	.word	0x2000409c
 800a940:	200040b6 	.word	0x200040b6
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a948:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fd f96a 	bl	8007c38 <pbuf_clen>
 800a964:	4603      	mov	r3, r0
 800a966:	429c      	cmp	r4, r3
 800a968:	d206      	bcs.n	800a978 <tcp_receive+0x304>
 800a96a:	4b70      	ldr	r3, [pc, #448]	; (800ab2c <tcp_receive+0x4b8>)
 800a96c:	f240 429e 	movw	r2, #1182	; 0x49e
 800a970:	496f      	ldr	r1, [pc, #444]	; (800ab30 <tcp_receive+0x4bc>)
 800a972:	4870      	ldr	r0, [pc, #448]	; (800ab34 <tcp_receive+0x4c0>)
 800a974:	f004 fd10 	bl	800f398 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fd f95b 	bl	8007c38 <pbuf_clen>
 800a982:	4603      	mov	r3, r0
 800a984:	461a      	mov	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	b29a      	uxth	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800a996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a998:	891a      	ldrh	r2, [r3, #8]
 800a99a:	4b67      	ldr	r3, [pc, #412]	; (800ab38 <tcp_receive+0x4c4>)
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	4413      	add	r3, r2
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	4b65      	ldr	r3, [pc, #404]	; (800ab38 <tcp_receive+0x4c4>)
 800a9a4:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800a9a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9a8:	f7fe fa04 	bl	8008db4 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00e      	beq.n	800a9d4 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10a      	bne.n	800a9d4 <tcp_receive+0x360>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d106      	bne.n	800a9d4 <tcp_receive+0x360>
 800a9c6:	4b59      	ldr	r3, [pc, #356]	; (800ab2c <tcp_receive+0x4b8>)
 800a9c8:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800a9cc:	495b      	ldr	r1, [pc, #364]	; (800ab3c <tcp_receive+0x4c8>)
 800a9ce:	4859      	ldr	r0, [pc, #356]	; (800ab34 <tcp_receive+0x4c0>)
 800a9d0:	f004 fce2 	bl	800f398 <iprintf>
      while (pcb->unacked != NULL &&
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d022      	beq.n	800aa22 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fb feff 	bl	80067e8 <lwip_htonl>
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f0:	891b      	ldrh	r3, [r3, #8]
 800a9f2:	461d      	mov	r5, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	899b      	ldrh	r3, [r3, #12]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fb fee4 	bl	80067cc <lwip_htons>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f003 0303 	and.w	r3, r3, #3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <tcp_receive+0x39e>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <tcp_receive+0x3a0>
 800aa12:	2300      	movs	r3, #0
 800aa14:	442b      	add	r3, r5
 800aa16:	18e2      	adds	r2, r4, r3
 800aa18:	4b49      	ldr	r3, [pc, #292]	; (800ab40 <tcp_receive+0x4cc>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	dd90      	ble.n	800a944 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d104      	bne.n	800aa34 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa30:	861a      	strh	r2, [r3, #48]	; 0x30
 800aa32:	e002      	b.n	800aa3a <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	76da      	strb	r2, [r3, #27]
 800aa40:	e002      	b.n	800aa48 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f001 f8fe 	bl	800bc44 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800aa48:	e04f      	b.n	800aaea <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d103      	bne.n	800aa6a <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800aa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fd f8df 	bl	8007c38 <pbuf_clen>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	429c      	cmp	r4, r3
 800aa7e:	d206      	bcs.n	800aa8e <tcp_receive+0x41a>
 800aa80:	4b2a      	ldr	r3, [pc, #168]	; (800ab2c <tcp_receive+0x4b8>)
 800aa82:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800aa86:	492a      	ldr	r1, [pc, #168]	; (800ab30 <tcp_receive+0x4bc>)
 800aa88:	482a      	ldr	r0, [pc, #168]	; (800ab34 <tcp_receive+0x4c0>)
 800aa8a:	f004 fc85 	bl	800f398 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fd f8d0 	bl	8007c38 <pbuf_clen>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800aaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaae:	891a      	ldrh	r2, [r3, #8]
 800aab0:	4b21      	ldr	r3, [pc, #132]	; (800ab38 <tcp_receive+0x4c4>)
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	4413      	add	r3, r2
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	4b1f      	ldr	r3, [pc, #124]	; (800ab38 <tcp_receive+0x4c4>)
 800aaba:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800aabc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aabe:	f7fe f979 	bl	8008db4 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00e      	beq.n	800aaea <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <tcp_receive+0x476>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d106      	bne.n	800aaea <tcp_receive+0x476>
 800aadc:	4b13      	ldr	r3, [pc, #76]	; (800ab2c <tcp_receive+0x4b8>)
 800aade:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800aae2:	4916      	ldr	r1, [pc, #88]	; (800ab3c <tcp_receive+0x4c8>)
 800aae4:	4813      	ldr	r0, [pc, #76]	; (800ab34 <tcp_receive+0x4c0>)
 800aae6:	f004 fc57 	bl	800f398 <iprintf>
    while (pcb->unsent != NULL &&
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d036      	beq.n	800ab60 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800aaf2:	4b13      	ldr	r3, [pc, #76]	; (800ab40 <tcp_receive+0x4cc>)
 800aaf4:	681c      	ldr	r4, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fb fe72 	bl	80067e8 <lwip_htonl>
 800ab04:	4605      	mov	r5, r0
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab0a:	891b      	ldrh	r3, [r3, #8]
 800ab0c:	461e      	mov	r6, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	899b      	ldrh	r3, [r3, #12]
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fb fe57 	bl	80067cc <lwip_htons>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f003 0303 	and.w	r3, r3, #3
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00d      	beq.n	800ab44 <tcp_receive+0x4d0>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e00c      	b.n	800ab46 <tcp_receive+0x4d2>
 800ab2c:	08011000 	.word	0x08011000
 800ab30:	08011240 	.word	0x08011240
 800ab34:	08011044 	.word	0x08011044
 800ab38:	200040b4 	.word	0x200040b4
 800ab3c:	08011268 	.word	0x08011268
 800ab40:	200040b0 	.word	0x200040b0
 800ab44:	2300      	movs	r3, #0
 800ab46:	4433      	add	r3, r6
 800ab48:	442b      	add	r3, r5
 800ab4a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	db07      	blt.n	800ab60 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800ab50:	4b8d      	ldr	r3, [pc, #564]	; (800ad88 <tcp_receive+0x714>)
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f77f af75 	ble.w	800aa4a <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ab66:	4b89      	ldr	r3, [pc, #548]	; (800ad8c <tcp_receive+0x718>)
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d052      	beq.n	800ac22 <tcp_receive+0x5ae>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab80:	4b81      	ldr	r3, [pc, #516]	; (800ad88 <tcp_receive+0x714>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	da4b      	bge.n	800ac22 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ab8a:	4b81      	ldr	r3, [pc, #516]	; (800ad90 <tcp_receive+0x71c>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800ab9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aba4:	10db      	asrs	r3, r3, #3
 800aba6:	b21b      	sxth	r3, r3
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	b29b      	uxth	r3, r3
 800abae:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abba:	4413      	add	r3, r2
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	b21a      	sxth	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800abc4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800abc8:	2b00      	cmp	r3, #0
 800abca:	da03      	bge.n	800abd4 <tcp_receive+0x560>
        m = -m;
 800abcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abce:	425b      	negs	r3, r3
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800abd4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800abdc:	109b      	asrs	r3, r3, #2
 800abde:	b21b      	sxth	r3, r3
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800abee:	b29a      	uxth	r2, r3
 800abf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abf2:	4413      	add	r3, r2
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	b21a      	sxth	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac02:	10db      	asrs	r3, r3, #3
 800ac04:	b21b      	sxth	r3, r3
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	4413      	add	r3, r2
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	b21a      	sxth	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ac22:	4b5c      	ldr	r3, [pc, #368]	; (800ad94 <tcp_receive+0x720>)
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 84f1 	beq.w	800b60e <tcp_receive+0xf9a>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	7d1b      	ldrb	r3, [r3, #20]
 800ac30:	2b06      	cmp	r3, #6
 800ac32:	f200 84ec 	bhi.w	800b60e <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac3a:	4b57      	ldr	r3, [pc, #348]	; (800ad98 <tcp_receive+0x724>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	3b01      	subs	r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f2c0 80b8 	blt.w	800adb8 <tcp_receive+0x744>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac4c:	4b51      	ldr	r3, [pc, #324]	; (800ad94 <tcp_receive+0x720>)
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	4619      	mov	r1, r3
 800ac52:	4b51      	ldr	r3, [pc, #324]	; (800ad98 <tcp_receive+0x724>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	440b      	add	r3, r1
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f300 80ab 	bgt.w	800adb8 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ac62:	4b4e      	ldr	r3, [pc, #312]	; (800ad9c <tcp_receive+0x728>)
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac6c:	4b4a      	ldr	r3, [pc, #296]	; (800ad98 <tcp_receive+0x724>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ac74:	4b49      	ldr	r3, [pc, #292]	; (800ad9c <tcp_receive+0x728>)
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d106      	bne.n	800ac8a <tcp_receive+0x616>
 800ac7c:	4b48      	ldr	r3, [pc, #288]	; (800ada0 <tcp_receive+0x72c>)
 800ac7e:	f240 523c 	movw	r2, #1340	; 0x53c
 800ac82:	4948      	ldr	r1, [pc, #288]	; (800ada4 <tcp_receive+0x730>)
 800ac84:	4848      	ldr	r0, [pc, #288]	; (800ada8 <tcp_receive+0x734>)
 800ac86:	f004 fb87 	bl	800f398 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ac90:	4293      	cmp	r3, r2
 800ac92:	dd06      	ble.n	800aca2 <tcp_receive+0x62e>
 800ac94:	4b42      	ldr	r3, [pc, #264]	; (800ada0 <tcp_receive+0x72c>)
 800ac96:	f240 523d 	movw	r2, #1341	; 0x53d
 800ac9a:	4944      	ldr	r1, [pc, #272]	; (800adac <tcp_receive+0x738>)
 800ac9c:	4842      	ldr	r0, [pc, #264]	; (800ada8 <tcp_receive+0x734>)
 800ac9e:	f004 fb7b 	bl	800f398 <iprintf>
      if (inseg.p->len < off) {
 800aca2:	4b3e      	ldr	r3, [pc, #248]	; (800ad9c <tcp_receive+0x728>)
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	895b      	ldrh	r3, [r3, #10]
 800aca8:	461a      	mov	r2, r3
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	4293      	cmp	r3, r2
 800acae:	dd3e      	ble.n	800ad2e <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800acb0:	4b3a      	ldr	r3, [pc, #232]	; (800ad9c <tcp_receive+0x728>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	891b      	ldrh	r3, [r3, #8]
 800acb6:	461a      	mov	r2, r3
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	4293      	cmp	r3, r2
 800acbc:	dd06      	ble.n	800accc <tcp_receive+0x658>
 800acbe:	4b38      	ldr	r3, [pc, #224]	; (800ada0 <tcp_receive+0x72c>)
 800acc0:	f240 523f 	movw	r2, #1343	; 0x53f
 800acc4:	493a      	ldr	r1, [pc, #232]	; (800adb0 <tcp_receive+0x73c>)
 800acc6:	4838      	ldr	r0, [pc, #224]	; (800ada8 <tcp_receive+0x734>)
 800acc8:	f004 fb66 	bl	800f398 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800accc:	4b33      	ldr	r3, [pc, #204]	; (800ad9c <tcp_receive+0x728>)
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	891a      	ldrh	r2, [r3, #8]
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800acda:	e00e      	b.n	800acfa <tcp_receive+0x686>
          off -= p->len;
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	895b      	ldrh	r3, [r3, #10]
 800ace0:	461a      	mov	r2, r3
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	8a3a      	ldrh	r2, [r7, #16]
 800acec:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2200      	movs	r2, #0
 800acf2:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	895b      	ldrh	r3, [r3, #10]
 800acfe:	461a      	mov	r2, r3
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	4293      	cmp	r3, r2
 800ad04:	dcea      	bgt.n	800acdc <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	425b      	negs	r3, r3
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	b21b      	sxth	r3, r3
 800ad10:	4619      	mov	r1, r3
 800ad12:	69b8      	ldr	r0, [r7, #24]
 800ad14:	f7fc fed2 	bl	8007abc <pbuf_header>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d01c      	beq.n	800ad58 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ad1e:	4b20      	ldr	r3, [pc, #128]	; (800ada0 <tcp_receive+0x72c>)
 800ad20:	f240 524c 	movw	r2, #1356	; 0x54c
 800ad24:	4923      	ldr	r1, [pc, #140]	; (800adb4 <tcp_receive+0x740>)
 800ad26:	4820      	ldr	r0, [pc, #128]	; (800ada8 <tcp_receive+0x734>)
 800ad28:	f004 fb36 	bl	800f398 <iprintf>
 800ad2c:	e014      	b.n	800ad58 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800ad2e:	4b1b      	ldr	r3, [pc, #108]	; (800ad9c <tcp_receive+0x728>)
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad34:	b292      	uxth	r2, r2
 800ad36:	4252      	negs	r2, r2
 800ad38:	b292      	uxth	r2, r2
 800ad3a:	b212      	sxth	r2, r2
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fc febc 	bl	8007abc <pbuf_header>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d006      	beq.n	800ad58 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ad4a:	4b15      	ldr	r3, [pc, #84]	; (800ada0 <tcp_receive+0x72c>)
 800ad4c:	f240 5251 	movw	r2, #1361	; 0x551
 800ad50:	4918      	ldr	r1, [pc, #96]	; (800adb4 <tcp_receive+0x740>)
 800ad52:	4815      	ldr	r0, [pc, #84]	; (800ada8 <tcp_receive+0x734>)
 800ad54:	f004 fb20 	bl	800f398 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800ad58:	4b10      	ldr	r3, [pc, #64]	; (800ad9c <tcp_receive+0x728>)
 800ad5a:	891a      	ldrh	r2, [r3, #8]
 800ad5c:	4b0e      	ldr	r3, [pc, #56]	; (800ad98 <tcp_receive+0x724>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	b299      	uxth	r1, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	1acb      	subs	r3, r1, r3
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	4413      	add	r3, r2
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <tcp_receive+0x728>)
 800ad72:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad78:	4a07      	ldr	r2, [pc, #28]	; (800ad98 <tcp_receive+0x724>)
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	4b07      	ldr	r3, [pc, #28]	; (800ad9c <tcp_receive+0x728>)
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	4a05      	ldr	r2, [pc, #20]	; (800ad98 <tcp_receive+0x724>)
 800ad82:	6812      	ldr	r2, [r2, #0]
 800ad84:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ad86:	e025      	b.n	800add4 <tcp_receive+0x760>
 800ad88:	200040b0 	.word	0x200040b0
 800ad8c:	200040b4 	.word	0x200040b4
 800ad90:	2000e420 	.word	0x2000e420
 800ad94:	200040b6 	.word	0x200040b6
 800ad98:	200040ac 	.word	0x200040ac
 800ad9c:	2000408c 	.word	0x2000408c
 800ada0:	08011000 	.word	0x08011000
 800ada4:	08011288 	.word	0x08011288
 800ada8:	08011044 	.word	0x08011044
 800adac:	08011298 	.word	0x08011298
 800adb0:	080112a8 	.word	0x080112a8
 800adb4:	080112b8 	.word	0x080112b8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800adb8:	4b87      	ldr	r3, [pc, #540]	; (800afd8 <tcp_receive+0x964>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	da06      	bge.n	800add4 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	7e9b      	ldrb	r3, [r3, #26]
 800adca:	f043 0302 	orr.w	r3, r3, #2
 800adce:	b2da      	uxtb	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800add4:	4b80      	ldr	r3, [pc, #512]	; (800afd8 <tcp_receive+0x964>)
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f2c0 8410 	blt.w	800b604 <tcp_receive+0xf90>
 800ade4:	4b7c      	ldr	r3, [pc, #496]	; (800afd8 <tcp_receive+0x964>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	6879      	ldr	r1, [r7, #4]
 800adee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800adf0:	440b      	add	r3, r1
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	3301      	adds	r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f300 8404 	bgt.w	800b604 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae00:	4b75      	ldr	r3, [pc, #468]	; (800afd8 <tcp_receive+0x964>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	f040 8287 	bne.w	800b318 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ae0a:	4b74      	ldr	r3, [pc, #464]	; (800afdc <tcp_receive+0x968>)
 800ae0c:	891c      	ldrh	r4, [r3, #8]
 800ae0e:	4b73      	ldr	r3, [pc, #460]	; (800afdc <tcp_receive+0x968>)
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	899b      	ldrh	r3, [r3, #12]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fb fcd8 	bl	80067cc <lwip_htons>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f003 0303 	and.w	r3, r3, #3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <tcp_receive+0x7b6>
 800ae26:	2301      	movs	r3, #1
 800ae28:	e000      	b.n	800ae2c <tcp_receive+0x7b8>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	4423      	add	r3, r4
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	4b6b      	ldr	r3, [pc, #428]	; (800afe0 <tcp_receive+0x96c>)
 800ae32:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ae38:	4b69      	ldr	r3, [pc, #420]	; (800afe0 <tcp_receive+0x96c>)
 800ae3a:	881b      	ldrh	r3, [r3, #0]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d26e      	bcs.n	800af1e <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ae40:	4b66      	ldr	r3, [pc, #408]	; (800afdc <tcp_receive+0x968>)
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	899b      	ldrh	r3, [r3, #12]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fb fcbf 	bl	80067cc <lwip_htons>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	f003 0301 	and.w	r3, r3, #1
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d01b      	beq.n	800ae90 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ae58:	4b60      	ldr	r3, [pc, #384]	; (800afdc <tcp_receive+0x968>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	899b      	ldrh	r3, [r3, #12]
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae64:	b29c      	uxth	r4, r3
 800ae66:	4b5d      	ldr	r3, [pc, #372]	; (800afdc <tcp_receive+0x968>)
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	899b      	ldrh	r3, [r3, #12]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fb fcac 	bl	80067cc <lwip_htons>
 800ae74:	4603      	mov	r3, r0
 800ae76:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fb fca5 	bl	80067cc <lwip_htons>
 800ae82:	4603      	mov	r3, r0
 800ae84:	461a      	mov	r2, r3
 800ae86:	4b55      	ldr	r3, [pc, #340]	; (800afdc <tcp_receive+0x968>)
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	4322      	orrs	r2, r4
 800ae8c:	b292      	uxth	r2, r2
 800ae8e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ae94:	4b51      	ldr	r3, [pc, #324]	; (800afdc <tcp_receive+0x968>)
 800ae96:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ae98:	4b50      	ldr	r3, [pc, #320]	; (800afdc <tcp_receive+0x968>)
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	899b      	ldrh	r3, [r3, #12]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fb fc93 	bl	80067cc <lwip_htons>
 800aea6:	4603      	mov	r3, r0
 800aea8:	f003 0302 	and.w	r3, r3, #2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d005      	beq.n	800aebc <tcp_receive+0x848>
            inseg.len -= 1;
 800aeb0:	4b4a      	ldr	r3, [pc, #296]	; (800afdc <tcp_receive+0x968>)
 800aeb2:	891b      	ldrh	r3, [r3, #8]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	4b48      	ldr	r3, [pc, #288]	; (800afdc <tcp_receive+0x968>)
 800aeba:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800aebc:	4b47      	ldr	r3, [pc, #284]	; (800afdc <tcp_receive+0x968>)
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	4b46      	ldr	r3, [pc, #280]	; (800afdc <tcp_receive+0x968>)
 800aec2:	891b      	ldrh	r3, [r3, #8]
 800aec4:	4619      	mov	r1, r3
 800aec6:	4610      	mov	r0, r2
 800aec8:	f7fc fca8 	bl	800781c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aecc:	4b43      	ldr	r3, [pc, #268]	; (800afdc <tcp_receive+0x968>)
 800aece:	891c      	ldrh	r4, [r3, #8]
 800aed0:	4b42      	ldr	r3, [pc, #264]	; (800afdc <tcp_receive+0x968>)
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	899b      	ldrh	r3, [r3, #12]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fb fc77 	bl	80067cc <lwip_htons>
 800aede:	4603      	mov	r3, r0
 800aee0:	f003 0303 	and.w	r3, r3, #3
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <tcp_receive+0x878>
 800aee8:	2301      	movs	r3, #1
 800aeea:	e000      	b.n	800aeee <tcp_receive+0x87a>
 800aeec:	2300      	movs	r3, #0
 800aeee:	4423      	add	r3, r4
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	4b3b      	ldr	r3, [pc, #236]	; (800afe0 <tcp_receive+0x96c>)
 800aef4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aef6:	4b3a      	ldr	r3, [pc, #232]	; (800afe0 <tcp_receive+0x96c>)
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	461a      	mov	r2, r3
 800aefc:	4b36      	ldr	r3, [pc, #216]	; (800afd8 <tcp_receive+0x964>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	441a      	add	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af0a:	440b      	add	r3, r1
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d006      	beq.n	800af1e <tcp_receive+0x8aa>
 800af10:	4b34      	ldr	r3, [pc, #208]	; (800afe4 <tcp_receive+0x970>)
 800af12:	f240 527f 	movw	r2, #1407	; 0x57f
 800af16:	4934      	ldr	r1, [pc, #208]	; (800afe8 <tcp_receive+0x974>)
 800af18:	4834      	ldr	r0, [pc, #208]	; (800afec <tcp_receive+0x978>)
 800af1a:	f004 fa3d 	bl	800f398 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 80e1 	beq.w	800b0ea <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800af28:	4b2c      	ldr	r3, [pc, #176]	; (800afdc <tcp_receive+0x968>)
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	899b      	ldrh	r3, [r3, #12]
 800af2e:	b29b      	uxth	r3, r3
 800af30:	4618      	mov	r0, r3
 800af32:	f7fb fc4b 	bl	80067cc <lwip_htons>
 800af36:	4603      	mov	r3, r0
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d010      	beq.n	800af62 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800af40:	e00a      	b.n	800af58 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af46:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800af52:	68b8      	ldr	r0, [r7, #8]
 800af54:	f7fd ff2e 	bl	8008db4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1f0      	bne.n	800af42 <tcp_receive+0x8ce>
 800af60:	e0c3      	b.n	800b0ea <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af66:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800af68:	e04f      	b.n	800b00a <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800af6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	899b      	ldrh	r3, [r3, #12]
 800af70:	b29b      	uxth	r3, r3
 800af72:	4618      	mov	r0, r3
 800af74:	f7fb fc2a 	bl	80067cc <lwip_htons>
 800af78:	4603      	mov	r3, r0
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d03b      	beq.n	800affa <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800af82:	4b16      	ldr	r3, [pc, #88]	; (800afdc <tcp_receive+0x968>)
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	899b      	ldrh	r3, [r3, #12]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fb fc1e 	bl	80067cc <lwip_htons>
 800af90:	4603      	mov	r3, r0
 800af92:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800af96:	2b00      	cmp	r3, #0
 800af98:	d12f      	bne.n	800affa <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800af9a:	4b10      	ldr	r3, [pc, #64]	; (800afdc <tcp_receive+0x968>)
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	899b      	ldrh	r3, [r3, #12]
 800afa0:	b29c      	uxth	r4, r3
 800afa2:	2001      	movs	r0, #1
 800afa4:	f7fb fc12 	bl	80067cc <lwip_htons>
 800afa8:	4603      	mov	r3, r0
 800afaa:	461a      	mov	r2, r3
 800afac:	4b0b      	ldr	r3, [pc, #44]	; (800afdc <tcp_receive+0x968>)
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	4322      	orrs	r2, r4
 800afb2:	b292      	uxth	r2, r2
 800afb4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800afb6:	4b09      	ldr	r3, [pc, #36]	; (800afdc <tcp_receive+0x968>)
 800afb8:	891c      	ldrh	r4, [r3, #8]
 800afba:	4b08      	ldr	r3, [pc, #32]	; (800afdc <tcp_receive+0x968>)
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	899b      	ldrh	r3, [r3, #12]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fb fc02 	bl	80067cc <lwip_htons>
 800afc8:	4603      	mov	r3, r0
 800afca:	f003 0303 	and.w	r3, r3, #3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00e      	beq.n	800aff0 <tcp_receive+0x97c>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e00d      	b.n	800aff2 <tcp_receive+0x97e>
 800afd6:	bf00      	nop
 800afd8:	200040ac 	.word	0x200040ac
 800afdc:	2000408c 	.word	0x2000408c
 800afe0:	200040b6 	.word	0x200040b6
 800afe4:	08011000 	.word	0x08011000
 800afe8:	080112cc 	.word	0x080112cc
 800afec:	08011044 	.word	0x08011044
 800aff0:	2300      	movs	r3, #0
 800aff2:	4423      	add	r3, r4
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	4b95      	ldr	r3, [pc, #596]	; (800b24c <tcp_receive+0xbd8>)
 800aff8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affc:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800b004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b006:	f7fd fed5 	bl	8008db4 <tcp_seg_free>
            while (next &&
 800b00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00e      	beq.n	800b02e <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b010:	4b8e      	ldr	r3, [pc, #568]	; (800b24c <tcp_receive+0xbd8>)
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	461a      	mov	r2, r3
 800b016:	4b8e      	ldr	r3, [pc, #568]	; (800b250 <tcp_receive+0xbdc>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	441a      	add	r2, r3
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b024:	8909      	ldrh	r1, [r1, #8]
 800b026:	440b      	add	r3, r1
 800b028:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	da9d      	bge.n	800af6a <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b030:	2b00      	cmp	r3, #0
 800b032:	d057      	beq.n	800b0e4 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800b034:	4b85      	ldr	r3, [pc, #532]	; (800b24c <tcp_receive+0xbd8>)
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	461a      	mov	r2, r3
 800b03a:	4b85      	ldr	r3, [pc, #532]	; (800b250 <tcp_receive+0xbdc>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	441a      	add	r2, r3
 800b040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b048:	2b00      	cmp	r3, #0
 800b04a:	dd4b      	ble.n	800b0e4 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	b29a      	uxth	r2, r3
 800b054:	4b7e      	ldr	r3, [pc, #504]	; (800b250 <tcp_receive+0xbdc>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	4b7d      	ldr	r3, [pc, #500]	; (800b254 <tcp_receive+0xbe0>)
 800b060:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b062:	4b7c      	ldr	r3, [pc, #496]	; (800b254 <tcp_receive+0xbe0>)
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	899b      	ldrh	r3, [r3, #12]
 800b068:	b29b      	uxth	r3, r3
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fb fbae 	bl	80067cc <lwip_htons>
 800b070:	4603      	mov	r3, r0
 800b072:	f003 0302 	and.w	r3, r3, #2
 800b076:	2b00      	cmp	r3, #0
 800b078:	d005      	beq.n	800b086 <tcp_receive+0xa12>
                inseg.len -= 1;
 800b07a:	4b76      	ldr	r3, [pc, #472]	; (800b254 <tcp_receive+0xbe0>)
 800b07c:	891b      	ldrh	r3, [r3, #8]
 800b07e:	3b01      	subs	r3, #1
 800b080:	b29a      	uxth	r2, r3
 800b082:	4b74      	ldr	r3, [pc, #464]	; (800b254 <tcp_receive+0xbe0>)
 800b084:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b086:	4b73      	ldr	r3, [pc, #460]	; (800b254 <tcp_receive+0xbe0>)
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	4b72      	ldr	r3, [pc, #456]	; (800b254 <tcp_receive+0xbe0>)
 800b08c:	891b      	ldrh	r3, [r3, #8]
 800b08e:	4619      	mov	r1, r3
 800b090:	4610      	mov	r0, r2
 800b092:	f7fc fbc3 	bl	800781c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b096:	4b6f      	ldr	r3, [pc, #444]	; (800b254 <tcp_receive+0xbe0>)
 800b098:	891c      	ldrh	r4, [r3, #8]
 800b09a:	4b6e      	ldr	r3, [pc, #440]	; (800b254 <tcp_receive+0xbe0>)
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	899b      	ldrh	r3, [r3, #12]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fb fb92 	bl	80067cc <lwip_htons>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	f003 0303 	and.w	r3, r3, #3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <tcp_receive+0xa42>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e000      	b.n	800b0b8 <tcp_receive+0xa44>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	4423      	add	r3, r4
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	4b63      	ldr	r3, [pc, #396]	; (800b24c <tcp_receive+0xbd8>)
 800b0be:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b0c0:	4b62      	ldr	r3, [pc, #392]	; (800b24c <tcp_receive+0xbd8>)
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	4b62      	ldr	r3, [pc, #392]	; (800b250 <tcp_receive+0xbdc>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	441a      	add	r2, r3
 800b0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d006      	beq.n	800b0e4 <tcp_receive+0xa70>
 800b0d6:	4b60      	ldr	r3, [pc, #384]	; (800b258 <tcp_receive+0xbe4>)
 800b0d8:	f240 52af 	movw	r2, #1455	; 0x5af
 800b0dc:	495f      	ldr	r1, [pc, #380]	; (800b25c <tcp_receive+0xbe8>)
 800b0de:	4860      	ldr	r0, [pc, #384]	; (800b260 <tcp_receive+0xbec>)
 800b0e0:	f004 f95a 	bl	800f398 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e8:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b0ea:	4b58      	ldr	r3, [pc, #352]	; (800b24c <tcp_receive+0xbd8>)
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	4b57      	ldr	r3, [pc, #348]	; (800b250 <tcp_receive+0xbdc>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	441a      	add	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b0fe:	4b53      	ldr	r3, [pc, #332]	; (800b24c <tcp_receive+0xbd8>)
 800b100:	881b      	ldrh	r3, [r3, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	d206      	bcs.n	800b114 <tcp_receive+0xaa0>
 800b106:	4b54      	ldr	r3, [pc, #336]	; (800b258 <tcp_receive+0xbe4>)
 800b108:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b10c:	4955      	ldr	r1, [pc, #340]	; (800b264 <tcp_receive+0xbf0>)
 800b10e:	4854      	ldr	r0, [pc, #336]	; (800b260 <tcp_receive+0xbec>)
 800b110:	f004 f942 	bl	800f398 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b118:	4b4c      	ldr	r3, [pc, #304]	; (800b24c <tcp_receive+0xbd8>)
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	b29a      	uxth	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7fd f9f9 	bl	800851c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b12a:	4b4a      	ldr	r3, [pc, #296]	; (800b254 <tcp_receive+0xbe0>)
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	891b      	ldrh	r3, [r3, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d006      	beq.n	800b142 <tcp_receive+0xace>
          recv_data = inseg.p;
 800b134:	4b47      	ldr	r3, [pc, #284]	; (800b254 <tcp_receive+0xbe0>)
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	4a4b      	ldr	r2, [pc, #300]	; (800b268 <tcp_receive+0xbf4>)
 800b13a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b13c:	4b45      	ldr	r3, [pc, #276]	; (800b254 <tcp_receive+0xbe0>)
 800b13e:	2200      	movs	r2, #0
 800b140:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b142:	4b44      	ldr	r3, [pc, #272]	; (800b254 <tcp_receive+0xbe0>)
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	899b      	ldrh	r3, [r3, #12]
 800b148:	b29b      	uxth	r3, r3
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fb fb3e 	bl	80067cc <lwip_htons>
 800b150:	4603      	mov	r3, r0
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 80b4 	beq.w	800b2c4 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b15c:	4b43      	ldr	r3, [pc, #268]	; (800b26c <tcp_receive+0xbf8>)
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	f043 0320 	orr.w	r3, r3, #32
 800b164:	b2da      	uxtb	r2, r3
 800b166:	4b41      	ldr	r3, [pc, #260]	; (800b26c <tcp_receive+0xbf8>)
 800b168:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b16a:	e0ab      	b.n	800b2c4 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b170:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	4a35      	ldr	r2, [pc, #212]	; (800b250 <tcp_receive+0xbdc>)
 800b17c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	891b      	ldrh	r3, [r3, #8]
 800b182:	461c      	mov	r4, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	899b      	ldrh	r3, [r3, #12]
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fb fb1d 	bl	80067cc <lwip_htons>
 800b192:	4603      	mov	r3, r0
 800b194:	f003 0303 	and.w	r3, r3, #3
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <tcp_receive+0xb2c>
 800b19c:	2301      	movs	r3, #1
 800b19e:	e000      	b.n	800b1a2 <tcp_receive+0xb2e>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	191a      	adds	r2, r3, r4
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	441a      	add	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b2:	461c      	mov	r4, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	891b      	ldrh	r3, [r3, #8]
 800b1b8:	461d      	mov	r5, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	899b      	ldrh	r3, [r3, #12]
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fb fb02 	bl	80067cc <lwip_htons>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	f003 0303 	and.w	r3, r3, #3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <tcp_receive+0xb62>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e000      	b.n	800b1d8 <tcp_receive+0xb64>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	442b      	add	r3, r5
 800b1da:	429c      	cmp	r4, r3
 800b1dc:	d206      	bcs.n	800b1ec <tcp_receive+0xb78>
 800b1de:	4b1e      	ldr	r3, [pc, #120]	; (800b258 <tcp_receive+0xbe4>)
 800b1e0:	f240 52de 	movw	r2, #1502	; 0x5de
 800b1e4:	4922      	ldr	r1, [pc, #136]	; (800b270 <tcp_receive+0xbfc>)
 800b1e6:	481e      	ldr	r0, [pc, #120]	; (800b260 <tcp_receive+0xbec>)
 800b1e8:	f004 f8d6 	bl	800f398 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	891b      	ldrh	r3, [r3, #8]
 800b1f0:	461c      	mov	r4, r3
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	899b      	ldrh	r3, [r3, #12]
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fb fae6 	bl	80067cc <lwip_htons>
 800b200:	4603      	mov	r3, r0
 800b202:	f003 0303 	and.w	r3, r3, #3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <tcp_receive+0xb9a>
 800b20a:	2301      	movs	r3, #1
 800b20c:	e000      	b.n	800b210 <tcp_receive+0xb9c>
 800b20e:	2300      	movs	r3, #0
 800b210:	1919      	adds	r1, r3, r4
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b216:	b28b      	uxth	r3, r1
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7fd f97b 	bl	800851c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	891b      	ldrh	r3, [r3, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d028      	beq.n	800b282 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b230:	4b0d      	ldr	r3, [pc, #52]	; (800b268 <tcp_receive+0xbf4>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d01d      	beq.n	800b274 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800b238:	4b0b      	ldr	r3, [pc, #44]	; (800b268 <tcp_receive+0xbf4>)
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	4619      	mov	r1, r3
 800b242:	4610      	mov	r0, r2
 800b244:	f7fc fd38 	bl	8007cb8 <pbuf_cat>
 800b248:	e018      	b.n	800b27c <tcp_receive+0xc08>
 800b24a:	bf00      	nop
 800b24c:	200040b6 	.word	0x200040b6
 800b250:	200040ac 	.word	0x200040ac
 800b254:	2000408c 	.word	0x2000408c
 800b258:	08011000 	.word	0x08011000
 800b25c:	08011304 	.word	0x08011304
 800b260:	08011044 	.word	0x08011044
 800b264:	08011340 	.word	0x08011340
 800b268:	200040bc 	.word	0x200040bc
 800b26c:	200040b9 	.word	0x200040b9
 800b270:	08011360 	.word	0x08011360
            } else {
              recv_data = cseg->p;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	4a71      	ldr	r2, [pc, #452]	; (800b440 <tcp_receive+0xdcc>)
 800b27a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	899b      	ldrh	r3, [r3, #12]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fb fa9e 	bl	80067cc <lwip_htons>
 800b290:	4603      	mov	r3, r0
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00d      	beq.n	800b2b6 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b29a:	4b6a      	ldr	r3, [pc, #424]	; (800b444 <tcp_receive+0xdd0>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	f043 0320 	orr.w	r3, r3, #32
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	4b67      	ldr	r3, [pc, #412]	; (800b444 <tcp_receive+0xdd0>)
 800b2a6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	7d1b      	ldrb	r3, [r3, #20]
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d102      	bne.n	800b2b6 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2207      	movs	r2, #7
 800b2b4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f7fd fd78 	bl	8008db4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d008      	beq.n	800b2de <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	f43f af47 	beq.w	800b16c <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	7e9b      	ldrb	r3, [r3, #26]
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00e      	beq.n	800b308 <tcp_receive+0xc94>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	7e9b      	ldrb	r3, [r3, #26]
 800b2ee:	f023 0301 	bic.w	r3, r3, #1
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	769a      	strb	r2, [r3, #26]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	7e9b      	ldrb	r3, [r3, #26]
 800b2fc:	f043 0302 	orr.w	r3, r3, #2
 800b300:	b2da      	uxtb	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b306:	e181      	b.n	800b60c <tcp_receive+0xf98>
        tcp_ack(pcb);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	7e9b      	ldrb	r3, [r3, #26]
 800b30c:	f043 0301 	orr.w	r3, r3, #1
 800b310:	b2da      	uxtb	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b316:	e179      	b.n	800b60c <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fc93 	bl	800bc44 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b326:	4848      	ldr	r0, [pc, #288]	; (800b448 <tcp_receive+0xdd4>)
 800b328:	f7fd fd5c 	bl	8008de4 <tcp_seg_copy>
 800b32c:	4602      	mov	r2, r0
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800b332:	e16b      	b.n	800b60c <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800b334:	2300      	movs	r3, #0
 800b336:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b33c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b33e:	e150      	b.n	800b5e2 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	4b41      	ldr	r3, [pc, #260]	; (800b44c <tcp_receive+0xdd8>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d11d      	bne.n	800b38a <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b34e:	4b3e      	ldr	r3, [pc, #248]	; (800b448 <tcp_receive+0xdd4>)
 800b350:	891a      	ldrh	r2, [r3, #8]
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	891b      	ldrh	r3, [r3, #8]
 800b356:	429a      	cmp	r2, r3
 800b358:	f240 8148 	bls.w	800b5ec <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800b35c:	483a      	ldr	r0, [pc, #232]	; (800b448 <tcp_receive+0xdd4>)
 800b35e:	f7fd fd41 	bl	8008de4 <tcp_seg_copy>
 800b362:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 8142 	beq.w	800b5f0 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800b36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <tcp_receive+0xd06>
                    prev->next = cseg;
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	e002      	b.n	800b380 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b380:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7ff f900 	bl	800a588 <tcp_oos_insert_segment>
                }
                break;
 800b388:	e132      	b.n	800b5f0 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d117      	bne.n	800b3c0 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b390:	4b2e      	ldr	r3, [pc, #184]	; (800b44c <tcp_receive+0xdd8>)
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	da57      	bge.n	800b450 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800b3a0:	4829      	ldr	r0, [pc, #164]	; (800b448 <tcp_receive+0xdd4>)
 800b3a2:	f7fd fd1f 	bl	8008de4 <tcp_seg_copy>
 800b3a6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 8122 	beq.w	800b5f4 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800b3b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f7ff f8e5 	bl	800a588 <tcp_oos_insert_segment>
                  }
                  break;
 800b3be:	e119      	b.n	800b5f4 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800b3c0:	4b22      	ldr	r3, [pc, #136]	; (800b44c <tcp_receive+0xdd8>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	db3e      	blt.n	800b450 <tcp_receive+0xddc>
 800b3d2:	4b1e      	ldr	r3, [pc, #120]	; (800b44c <tcp_receive+0xdd8>)
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	3301      	adds	r3, #1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	dc35      	bgt.n	800b450 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800b3e4:	4818      	ldr	r0, [pc, #96]	; (800b448 <tcp_receive+0xdd4>)
 800b3e6:	f7fd fcfd 	bl	8008de4 <tcp_seg_copy>
 800b3ea:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 8102 	beq.w	800b5f8 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3fc:	8912      	ldrh	r2, [r2, #8]
 800b3fe:	441a      	add	r2, r3
 800b400:	4b12      	ldr	r3, [pc, #72]	; (800b44c <tcp_receive+0xdd8>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b00      	cmp	r3, #0
 800b408:	dd12      	ble.n	800b430 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b40a:	4b10      	ldr	r3, [pc, #64]	; (800b44c <tcp_receive+0xdd8>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	b29a      	uxth	r2, r3
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	b29b      	uxth	r3, r3
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b426:	891b      	ldrh	r3, [r3, #8]
 800b428:	4619      	mov	r1, r3
 800b42a:	4610      	mov	r0, r2
 800b42c:	f7fc f9f6 	bl	800781c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f7ff f8a5 	bl	800a588 <tcp_oos_insert_segment>
                  }
                  break;
 800b43e:	e0db      	b.n	800b5f8 <tcp_receive+0xf84>
 800b440:	200040bc 	.word	0x200040bc
 800b444:	200040b9 	.word	0x200040b9
 800b448:	2000408c 	.word	0x2000408c
 800b44c:	200040ac 	.word	0x200040ac
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f040 80bf 	bne.w	800b5d8 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b45a:	4b7c      	ldr	r3, [pc, #496]	; (800b64c <tcp_receive+0xfd8>)
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b466:	2b00      	cmp	r3, #0
 800b468:	f340 80b6 	ble.w	800b5d8 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	899b      	ldrh	r3, [r3, #12]
 800b472:	b29b      	uxth	r3, r3
 800b474:	4618      	mov	r0, r3
 800b476:	f7fb f9a9 	bl	80067cc <lwip_htons>
 800b47a:	4603      	mov	r3, r0
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	f040 80bb 	bne.w	800b5fc <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b486:	4872      	ldr	r0, [pc, #456]	; (800b650 <tcp_receive+0xfdc>)
 800b488:	f7fd fcac 	bl	8008de4 <tcp_seg_copy>
 800b48c:	4602      	mov	r2, r0
 800b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b490:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 80b2 	beq.w	800b600 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a4:	8912      	ldrh	r2, [r2, #8]
 800b4a6:	441a      	add	r2, r3
 800b4a8:	4b68      	ldr	r3, [pc, #416]	; (800b64c <tcp_receive+0xfd8>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	dd12      	ble.n	800b4d8 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b4b2:	4b66      	ldr	r3, [pc, #408]	; (800b64c <tcp_receive+0xfd8>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ce:	891b      	ldrh	r3, [r3, #8]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	f7fc f9a2 	bl	800781c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b4d8:	4b5e      	ldr	r3, [pc, #376]	; (800b654 <tcp_receive+0xfe0>)
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4b5b      	ldr	r3, [pc, #364]	; (800b64c <tcp_receive+0xfd8>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	441a      	add	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b4ec:	440b      	add	r3, r1
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f340 8085 	ble.w	800b600 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	899b      	ldrh	r3, [r3, #12]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	4618      	mov	r0, r3
 800b502:	f7fb f963 	bl	80067cc <lwip_htons>
 800b506:	4603      	mov	r3, r0
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d01e      	beq.n	800b54e <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	899b      	ldrh	r3, [r3, #12]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b51e:	b29c      	uxth	r4, r3
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	899b      	ldrh	r3, [r3, #12]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fb f94e 	bl	80067cc <lwip_htons>
 800b530:	4603      	mov	r3, r0
 800b532:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b536:	b29b      	uxth	r3, r3
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fb f947 	bl	80067cc <lwip_htons>
 800b53e:	4603      	mov	r3, r0
 800b540:	461a      	mov	r2, r3
 800b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	4322      	orrs	r2, r4
 800b54a:	b292      	uxth	r2, r2
 800b54c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b552:	b29a      	uxth	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b558:	4413      	add	r3, r2
 800b55a:	b299      	uxth	r1, r3
 800b55c:	4b3b      	ldr	r3, [pc, #236]	; (800b64c <tcp_receive+0xfd8>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	b29a      	uxth	r2, r3
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	1a8a      	subs	r2, r1, r2
 800b568:	b292      	uxth	r2, r2
 800b56a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	891b      	ldrh	r3, [r3, #8]
 800b578:	4619      	mov	r1, r3
 800b57a:	4610      	mov	r0, r2
 800b57c:	f7fc f94e 	bl	800781c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	891c      	ldrh	r4, [r3, #8]
 800b586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	899b      	ldrh	r3, [r3, #12]
 800b58e:	b29b      	uxth	r3, r3
 800b590:	4618      	mov	r0, r3
 800b592:	f7fb f91b 	bl	80067cc <lwip_htons>
 800b596:	4603      	mov	r3, r0
 800b598:	f003 0303 	and.w	r3, r3, #3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d001      	beq.n	800b5a4 <tcp_receive+0xf30>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e000      	b.n	800b5a6 <tcp_receive+0xf32>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	4423      	add	r3, r4
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	4b2a      	ldr	r3, [pc, #168]	; (800b654 <tcp_receive+0xfe0>)
 800b5ac:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b5ae:	4b29      	ldr	r3, [pc, #164]	; (800b654 <tcp_receive+0xfe0>)
 800b5b0:	881b      	ldrh	r3, [r3, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	4b25      	ldr	r3, [pc, #148]	; (800b64c <tcp_receive+0xfd8>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	441a      	add	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5be:	6879      	ldr	r1, [r7, #4]
 800b5c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b5c2:	440b      	add	r3, r1
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d01b      	beq.n	800b600 <tcp_receive+0xf8c>
 800b5c8:	4b23      	ldr	r3, [pc, #140]	; (800b658 <tcp_receive+0xfe4>)
 800b5ca:	f240 627b 	movw	r2, #1659	; 0x67b
 800b5ce:	4923      	ldr	r1, [pc, #140]	; (800b65c <tcp_receive+0xfe8>)
 800b5d0:	4823      	ldr	r0, [pc, #140]	; (800b660 <tcp_receive+0xfec>)
 800b5d2:	f003 fee1 	bl	800f398 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b5d6:	e013      	b.n	800b600 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5da:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f47f aeab 	bne.w	800b340 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800b5ea:	e00f      	b.n	800b60c <tcp_receive+0xf98>
                break;
 800b5ec:	bf00      	nop
 800b5ee:	e00d      	b.n	800b60c <tcp_receive+0xf98>
                break;
 800b5f0:	bf00      	nop
 800b5f2:	e00b      	b.n	800b60c <tcp_receive+0xf98>
                  break;
 800b5f4:	bf00      	nop
 800b5f6:	e009      	b.n	800b60c <tcp_receive+0xf98>
                  break;
 800b5f8:	bf00      	nop
 800b5fa:	e007      	b.n	800b60c <tcp_receive+0xf98>
                  break;
 800b5fc:	bf00      	nop
 800b5fe:	e005      	b.n	800b60c <tcp_receive+0xf98>
                break;
 800b600:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800b602:	e003      	b.n	800b60c <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fb1d 	bl	800bc44 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b60a:	e01a      	b.n	800b642 <tcp_receive+0xfce>
 800b60c:	e019      	b.n	800b642 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b60e:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <tcp_receive+0xfd8>)
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	db0a      	blt.n	800b632 <tcp_receive+0xfbe>
 800b61c:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <tcp_receive+0xfd8>)
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b628:	440b      	add	r3, r1
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	3301      	adds	r3, #1
 800b62e:	2b00      	cmp	r3, #0
 800b630:	dd07      	ble.n	800b642 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	7e9b      	ldrb	r3, [r3, #26]
 800b636:	f043 0302 	orr.w	r3, r3, #2
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800b640:	e7ff      	b.n	800b642 <tcp_receive+0xfce>
 800b642:	bf00      	nop
 800b644:	3734      	adds	r7, #52	; 0x34
 800b646:	46bd      	mov	sp, r7
 800b648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b64a:	bf00      	nop
 800b64c:	200040ac 	.word	0x200040ac
 800b650:	2000408c 	.word	0x2000408c
 800b654:	200040b6 	.word	0x200040b6
 800b658:	08011000 	.word	0x08011000
 800b65c:	080112cc 	.word	0x080112cc
 800b660:	08011044 	.word	0x08011044

0800b664 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800b66a:	4b18      	ldr	r3, [pc, #96]	; (800b6cc <tcp_getoptbyte+0x68>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d005      	beq.n	800b67e <tcp_getoptbyte+0x1a>
 800b672:	4b17      	ldr	r3, [pc, #92]	; (800b6d0 <tcp_getoptbyte+0x6c>)
 800b674:	881a      	ldrh	r2, [r3, #0]
 800b676:	4b17      	ldr	r3, [pc, #92]	; (800b6d4 <tcp_getoptbyte+0x70>)
 800b678:	881b      	ldrh	r3, [r3, #0]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d20e      	bcs.n	800b69c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800b67e:	4b16      	ldr	r3, [pc, #88]	; (800b6d8 <tcp_getoptbyte+0x74>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3314      	adds	r3, #20
 800b684:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800b686:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <tcp_getoptbyte+0x6c>)
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	1c5a      	adds	r2, r3, #1
 800b68c:	b291      	uxth	r1, r2
 800b68e:	4a10      	ldr	r2, [pc, #64]	; (800b6d0 <tcp_getoptbyte+0x6c>)
 800b690:	8011      	strh	r1, [r2, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	4413      	add	r3, r2
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	e010      	b.n	800b6be <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800b69c:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <tcp_getoptbyte+0x6c>)
 800b69e:	881b      	ldrh	r3, [r3, #0]
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	b291      	uxth	r1, r2
 800b6a4:	4a0a      	ldr	r2, [pc, #40]	; (800b6d0 <tcp_getoptbyte+0x6c>)
 800b6a6:	8011      	strh	r1, [r2, #0]
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <tcp_getoptbyte+0x70>)
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800b6b4:	4b05      	ldr	r3, [pc, #20]	; (800b6cc <tcp_getoptbyte+0x68>)
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	79fb      	ldrb	r3, [r7, #7]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	200040a4 	.word	0x200040a4
 800b6d0:	200040a8 	.word	0x200040a8
 800b6d4:	200040a2 	.word	0x200040a2
 800b6d8:	2000409c 	.word	0x2000409c

0800b6dc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b6e4:	4b2d      	ldr	r3, [pc, #180]	; (800b79c <tcp_parseopt+0xc0>)
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d054      	beq.n	800b796 <tcp_parseopt+0xba>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b6ec:	4b2c      	ldr	r3, [pc, #176]	; (800b7a0 <tcp_parseopt+0xc4>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	801a      	strh	r2, [r3, #0]
 800b6f2:	e044      	b.n	800b77e <tcp_parseopt+0xa2>
      u8_t opt = tcp_getoptbyte();
 800b6f4:	f7ff ffb6 	bl	800b664 <tcp_getoptbyte>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d03d      	beq.n	800b77e <tcp_parseopt+0xa2>
 800b702:	2b02      	cmp	r3, #2
 800b704:	d002      	beq.n	800b70c <tcp_parseopt+0x30>
 800b706:	2b00      	cmp	r3, #0
 800b708:	d040      	beq.n	800b78c <tcp_parseopt+0xb0>
 800b70a:	e027      	b.n	800b75c <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b70c:	f7ff ffaa 	bl	800b664 <tcp_getoptbyte>
 800b710:	4603      	mov	r3, r0
 800b712:	2b04      	cmp	r3, #4
 800b714:	d13c      	bne.n	800b790 <tcp_parseopt+0xb4>
 800b716:	4b22      	ldr	r3, [pc, #136]	; (800b7a0 <tcp_parseopt+0xc4>)
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	3302      	adds	r3, #2
 800b71c:	4a1f      	ldr	r2, [pc, #124]	; (800b79c <tcp_parseopt+0xc0>)
 800b71e:	8812      	ldrh	r2, [r2, #0]
 800b720:	4293      	cmp	r3, r2
 800b722:	dc35      	bgt.n	800b790 <tcp_parseopt+0xb4>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800b724:	f7ff ff9e 	bl	800b664 <tcp_getoptbyte>
 800b728:	4603      	mov	r3, r0
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	021b      	lsls	r3, r3, #8
 800b72e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800b730:	f7ff ff98 	bl	800b664 <tcp_getoptbyte>
 800b734:	4603      	mov	r3, r0
 800b736:	b29a      	uxth	r2, r3
 800b738:	89bb      	ldrh	r3, [r7, #12]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b73e:	89bb      	ldrh	r3, [r7, #12]
 800b740:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800b744:	4293      	cmp	r3, r2
 800b746:	d804      	bhi.n	800b752 <tcp_parseopt+0x76>
 800b748:	89bb      	ldrh	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <tcp_parseopt+0x76>
 800b74e:	89ba      	ldrh	r2, [r7, #12]
 800b750:	e001      	b.n	800b756 <tcp_parseopt+0x7a>
 800b752:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800b75a:	e010      	b.n	800b77e <tcp_parseopt+0xa2>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800b75c:	f7ff ff82 	bl	800b664 <tcp_getoptbyte>
 800b760:	4603      	mov	r3, r0
 800b762:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800b764:	7afb      	ldrb	r3, [r7, #11]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d914      	bls.n	800b794 <tcp_parseopt+0xb8>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800b76a:	7afb      	ldrb	r3, [r7, #11]
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	4b0c      	ldr	r3, [pc, #48]	; (800b7a0 <tcp_parseopt+0xc4>)
 800b770:	881b      	ldrh	r3, [r3, #0]
 800b772:	4413      	add	r3, r2
 800b774:	b29b      	uxth	r3, r3
 800b776:	3b02      	subs	r3, #2
 800b778:	b29a      	uxth	r2, r3
 800b77a:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <tcp_parseopt+0xc4>)
 800b77c:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b77e:	4b08      	ldr	r3, [pc, #32]	; (800b7a0 <tcp_parseopt+0xc4>)
 800b780:	881a      	ldrh	r2, [r3, #0]
 800b782:	4b06      	ldr	r3, [pc, #24]	; (800b79c <tcp_parseopt+0xc0>)
 800b784:	881b      	ldrh	r3, [r3, #0]
 800b786:	429a      	cmp	r2, r3
 800b788:	d3b4      	bcc.n	800b6f4 <tcp_parseopt+0x18>
 800b78a:	e004      	b.n	800b796 <tcp_parseopt+0xba>
        return;
 800b78c:	bf00      	nop
 800b78e:	e002      	b.n	800b796 <tcp_parseopt+0xba>
          return;
 800b790:	bf00      	nop
 800b792:	e000      	b.n	800b796 <tcp_parseopt+0xba>
          return;
 800b794:	bf00      	nop
      }
    }
  }
}
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	200040a0 	.word	0x200040a0
 800b7a0:	200040a8 	.word	0x200040a8

0800b7a4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b7a8:	4b05      	ldr	r3, [pc, #20]	; (800b7c0 <tcp_trigger_input_pcb_close+0x1c>)
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	f043 0310 	orr.w	r3, r3, #16
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	4b03      	ldr	r3, [pc, #12]	; (800b7c0 <tcp_trigger_input_pcb_close+0x1c>)
 800b7b4:	701a      	strb	r2, [r3, #0]
}
 800b7b6:	bf00      	nop
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	200040b9 	.word	0x200040b9

0800b7c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	607b      	str	r3, [r7, #4]
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	817b      	strh	r3, [r7, #10]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b7d6:	897a      	ldrh	r2, [r7, #10]
 800b7d8:	893b      	ldrh	r3, [r7, #8]
 800b7da:	4413      	add	r3, r2
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	3314      	adds	r3, #20
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	f7fb fe18 	bl	800741c <pbuf_alloc>
 800b7ec:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d057      	beq.n	800b8a4 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	895b      	ldrh	r3, [r3, #10]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	897b      	ldrh	r3, [r7, #10]
 800b7fc:	3314      	adds	r3, #20
 800b7fe:	429a      	cmp	r2, r3
 800b800:	da05      	bge.n	800b80e <tcp_output_alloc_header+0x4a>
 800b802:	4b2b      	ldr	r3, [pc, #172]	; (800b8b0 <tcp_output_alloc_header+0xec>)
 800b804:	2273      	movs	r2, #115	; 0x73
 800b806:	492b      	ldr	r1, [pc, #172]	; (800b8b4 <tcp_output_alloc_header+0xf0>)
 800b808:	482b      	ldr	r0, [pc, #172]	; (800b8b8 <tcp_output_alloc_header+0xf4>)
 800b80a:	f003 fdc5 	bl	800f398 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	8adb      	ldrh	r3, [r3, #22]
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fa ffd7 	bl	80067cc <lwip_htons>
 800b81e:	4603      	mov	r3, r0
 800b820:	461a      	mov	r2, r3
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	8b1b      	ldrh	r3, [r3, #24]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fa ffce 	bl	80067cc <lwip_htons>
 800b830:	4603      	mov	r3, r0
 800b832:	461a      	mov	r2, r3
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	4618      	mov	r0, r3
 800b844:	f7fa ffd0 	bl	80067e8 <lwip_htonl>
 800b848:	4602      	mov	r2, r0
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800b84e:	897b      	ldrh	r3, [r7, #10]
 800b850:	089b      	lsrs	r3, r3, #2
 800b852:	b29b      	uxth	r3, r3
 800b854:	3305      	adds	r3, #5
 800b856:	b29b      	uxth	r3, r3
 800b858:	031b      	lsls	r3, r3, #12
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	f043 0310 	orr.w	r3, r3, #16
 800b860:	b29b      	uxth	r3, r3
 800b862:	4618      	mov	r0, r3
 800b864:	f7fa ffb2 	bl	80067cc <lwip_htons>
 800b868:	4603      	mov	r3, r0
 800b86a:	461a      	mov	r2, r3
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b874:	4618      	mov	r0, r3
 800b876:	f7fa ffa9 	bl	80067cc <lwip_htons>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	2200      	movs	r2, #0
 800b886:	741a      	strb	r2, [r3, #16]
 800b888:	2200      	movs	r2, #0
 800b88a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	2200      	movs	r2, #0
 800b890:	749a      	strb	r2, [r3, #18]
 800b892:	2200      	movs	r2, #0
 800b894:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b89e:	441a      	add	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b8a4:	697b      	ldr	r3, [r7, #20]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	08011388 	.word	0x08011388
 800b8b4:	080113bc 	.word	0x080113bc
 800b8b8:	080113ec 	.word	0x080113ec

0800b8bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b8bc:	b590      	push	{r4, r7, lr}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d02d      	beq.n	800b928 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	e002      	b.n	800b8da <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1f8      	bne.n	800b8d4 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	899b      	ldrh	r3, [r3, #12]
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fa ff6e 	bl	80067cc <lwip_htons>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d116      	bne.n	800b928 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	899b      	ldrh	r3, [r3, #12]
 800b900:	b29c      	uxth	r4, r3
 800b902:	2001      	movs	r0, #1
 800b904:	f7fa ff62 	bl	80067cc <lwip_htons>
 800b908:	4603      	mov	r3, r0
 800b90a:	461a      	mov	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	4322      	orrs	r2, r4
 800b912:	b292      	uxth	r2, r2
 800b914:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	7e9b      	ldrb	r3, [r3, #26]
 800b91a:	f043 0320 	orr.w	r3, r3, #32
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	e004      	b.n	800b932 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b928:	2101      	movs	r1, #1
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f88e 	bl	800ba4c <tcp_enqueue_flags>
 800b930:	4603      	mov	r3, r0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	bd90      	pop	{r4, r7, pc}
	...

0800b93c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800b93c:	b590      	push	{r4, r7, lr}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	603b      	str	r3, [r7, #0]
 800b948:	4613      	mov	r3, r2
 800b94a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b94c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	b2db      	uxtb	r3, r3
 800b954:	f003 0304 	and.w	r3, r3, #4
 800b958:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b95a:	2003      	movs	r0, #3
 800b95c:	f7fb fb24 	bl	8006fa8 <memp_malloc>
 800b960:	6138      	str	r0, [r7, #16]
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d104      	bne.n	800b972 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b968:	68b8      	ldr	r0, [r7, #8]
 800b96a:	f7fc f8cb 	bl	8007b04 <pbuf_free>
    return NULL;
 800b96e:	2300      	movs	r3, #0
 800b970:	e061      	b.n	800ba36 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b978:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	891a      	ldrh	r2, [r3, #8]
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	429a      	cmp	r2, r3
 800b990:	d205      	bcs.n	800b99e <tcp_create_segment+0x62>
 800b992:	4b2b      	ldr	r3, [pc, #172]	; (800ba40 <tcp_create_segment+0x104>)
 800b994:	22ba      	movs	r2, #186	; 0xba
 800b996:	492b      	ldr	r1, [pc, #172]	; (800ba44 <tcp_create_segment+0x108>)
 800b998:	482b      	ldr	r0, [pc, #172]	; (800ba48 <tcp_create_segment+0x10c>)
 800b99a:	f003 fcfd 	bl	800f398 <iprintf>
  seg->len = p->tot_len - optlen;
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	891a      	ldrh	r2, [r3, #8]
 800b9a2:	7dfb      	ldrb	r3, [r7, #23]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800b9ae:	2114      	movs	r1, #20
 800b9b0:	68b8      	ldr	r0, [r7, #8]
 800b9b2:	f7fc f883 	bl	8007abc <pbuf_header>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b9bc:	6938      	ldr	r0, [r7, #16]
 800b9be:	f7fd f9f9 	bl	8008db4 <tcp_seg_free>
    return NULL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	e037      	b.n	800ba36 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	8ada      	ldrh	r2, [r3, #22]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	68dc      	ldr	r4, [r3, #12]
 800b9d8:	4610      	mov	r0, r2
 800b9da:	f7fa fef7 	bl	80067cc <lwip_htons>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	8b1a      	ldrh	r2, [r3, #24]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	68dc      	ldr	r4, [r3, #12]
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	f7fa feee 	bl	80067cc <lwip_htons>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	68dc      	ldr	r4, [r3, #12]
 800b9f8:	6838      	ldr	r0, [r7, #0]
 800b9fa:	f7fa fef5 	bl	80067e8 <lwip_htonl>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
 800ba04:	089b      	lsrs	r3, r3, #2
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	3305      	adds	r3, #5
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	031b      	lsls	r3, r3, #12
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	79fb      	ldrb	r3, [r7, #7]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	4313      	orrs	r3, r2
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	68dc      	ldr	r4, [r3, #12]
 800ba1e:	4610      	mov	r0, r2
 800ba20:	f7fa fed4 	bl	80067cc <lwip_htons>
 800ba24:	4603      	mov	r3, r0
 800ba26:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	749a      	strb	r2, [r3, #18]
 800ba30:	2200      	movs	r2, #0
 800ba32:	74da      	strb	r2, [r3, #19]
  return seg;
 800ba34:	693b      	ldr	r3, [r7, #16]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	371c      	adds	r7, #28
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd90      	pop	{r4, r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	08011388 	.word	0x08011388
 800ba44:	08011414 	.word	0x08011414
 800ba48:	080113ec 	.word	0x080113ec

0800ba4c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b08a      	sub	sp, #40	; 0x28
 800ba50:	af02      	add	r7, sp, #8
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	f003 0303 	and.w	r3, r3, #3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d106      	bne.n	800ba78 <tcp_enqueue_flags+0x2c>
 800ba6a:	4b6f      	ldr	r3, [pc, #444]	; (800bc28 <tcp_enqueue_flags+0x1dc>)
 800ba6c:	f240 321b 	movw	r2, #795	; 0x31b
 800ba70:	496e      	ldr	r1, [pc, #440]	; (800bc2c <tcp_enqueue_flags+0x1e0>)
 800ba72:	486f      	ldr	r0, [pc, #444]	; (800bc30 <tcp_enqueue_flags+0x1e4>)
 800ba74:	f003 fc90 	bl	800f398 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba7e:	2b08      	cmp	r3, #8
 800ba80:	d806      	bhi.n	800ba90 <tcp_enqueue_flags+0x44>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba88:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d90e      	bls.n	800baae <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d109      	bne.n	800baae <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	7e9b      	ldrb	r3, [r3, #26]
 800ba9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800baa8:	f04f 33ff 	mov.w	r3, #4294967295
 800baac:	e0b7      	b.n	800bc1e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	f003 0302 	and.w	r3, r3, #2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800bab8:	2301      	movs	r3, #1
 800baba:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800babc:	7ffb      	ldrb	r3, [r7, #31]
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	f003 0304 	and.w	r3, r3, #4
 800bac6:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	2200      	movs	r2, #0
 800bace:	4619      	mov	r1, r3
 800bad0:	2000      	movs	r0, #0
 800bad2:	f7fb fca3 	bl	800741c <pbuf_alloc>
 800bad6:	6138      	str	r0, [r7, #16]
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d109      	bne.n	800baf2 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	7e9b      	ldrb	r3, [r3, #26]
 800bae2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800baec:	f04f 33ff 	mov.w	r3, #4294967295
 800baf0:	e095      	b.n	800bc1e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	895a      	ldrh	r2, [r3, #10]
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d206      	bcs.n	800bb0c <tcp_enqueue_flags+0xc0>
 800bafe:	4b4a      	ldr	r3, [pc, #296]	; (800bc28 <tcp_enqueue_flags+0x1dc>)
 800bb00:	f240 3241 	movw	r2, #833	; 0x341
 800bb04:	494b      	ldr	r1, [pc, #300]	; (800bc34 <tcp_enqueue_flags+0x1e8>)
 800bb06:	484a      	ldr	r0, [pc, #296]	; (800bc30 <tcp_enqueue_flags+0x1e4>)
 800bb08:	f003 fc46 	bl	800f398 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800bb10:	78fa      	ldrb	r2, [r7, #3]
 800bb12:	7ffb      	ldrb	r3, [r7, #31]
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	460b      	mov	r3, r1
 800bb18:	6939      	ldr	r1, [r7, #16]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff ff0e 	bl	800b93c <tcp_create_segment>
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d109      	bne.n	800bb3c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	7e9b      	ldrb	r3, [r3, #26]
 800bb2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bb36:	f04f 33ff 	mov.w	r3, #4294967295
 800bb3a:	e070      	b.n	800bc1e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f003 0303 	and.w	r3, r3, #3
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d006      	beq.n	800bb56 <tcp_enqueue_flags+0x10a>
 800bb48:	4b37      	ldr	r3, [pc, #220]	; (800bc28 <tcp_enqueue_flags+0x1dc>)
 800bb4a:	f240 3249 	movw	r2, #841	; 0x349
 800bb4e:	493a      	ldr	r1, [pc, #232]	; (800bc38 <tcp_enqueue_flags+0x1ec>)
 800bb50:	4837      	ldr	r0, [pc, #220]	; (800bc30 <tcp_enqueue_flags+0x1e4>)
 800bb52:	f003 fc21 	bl	800f398 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	891b      	ldrh	r3, [r3, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d006      	beq.n	800bb6c <tcp_enqueue_flags+0x120>
 800bb5e:	4b32      	ldr	r3, [pc, #200]	; (800bc28 <tcp_enqueue_flags+0x1dc>)
 800bb60:	f240 324a 	movw	r2, #842	; 0x34a
 800bb64:	4935      	ldr	r1, [pc, #212]	; (800bc3c <tcp_enqueue_flags+0x1f0>)
 800bb66:	4832      	ldr	r0, [pc, #200]	; (800bc30 <tcp_enqueue_flags+0x1e4>)
 800bb68:	f003 fc16 	bl	800f398 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d103      	bne.n	800bb7c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	669a      	str	r2, [r3, #104]	; 0x68
 800bb7a:	e00d      	b.n	800bb98 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb80:	61bb      	str	r3, [r7, #24]
 800bb82:	e002      	b.n	800bb8a <tcp_enqueue_flags+0x13e>
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	61bb      	str	r3, [r7, #24]
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1f8      	bne.n	800bb84 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	f003 0302 	and.w	r3, r3, #2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d104      	bne.n	800bbb4 <tcp_enqueue_flags+0x168>
 800bbaa:	78fb      	ldrb	r3, [r7, #3]
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bbbe:	78fb      	ldrb	r3, [r7, #3]
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d006      	beq.n	800bbd6 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	7e9b      	ldrb	r3, [r3, #26]
 800bbcc:	f043 0320 	orr.w	r3, r3, #32
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fc f82c 	bl	8007c38 <pbuf_clen>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbea:	4413      	add	r3, r2
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00e      	beq.n	800bc1c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10a      	bne.n	800bc1c <tcp_enqueue_flags+0x1d0>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <tcp_enqueue_flags+0x1d0>
 800bc0e:	4b06      	ldr	r3, [pc, #24]	; (800bc28 <tcp_enqueue_flags+0x1dc>)
 800bc10:	f240 326d 	movw	r2, #877	; 0x36d
 800bc14:	490a      	ldr	r1, [pc, #40]	; (800bc40 <tcp_enqueue_flags+0x1f4>)
 800bc16:	4806      	ldr	r0, [pc, #24]	; (800bc30 <tcp_enqueue_flags+0x1e4>)
 800bc18:	f003 fbbe 	bl	800f398 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3720      	adds	r7, #32
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	08011388 	.word	0x08011388
 800bc2c:	0801168c 	.word	0x0801168c
 800bc30:	080113ec 	.word	0x080113ec
 800bc34:	080116e4 	.word	0x080116e4
 800bc38:	08011720 	.word	0x08011720
 800bc3c:	08011738 	.word	0x08011738
 800bc40:	08011764 	.word	0x08011764

0800bc44 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bc44:	b590      	push	{r4, r7, lr}
 800bc46:	b08b      	sub	sp, #44	; 0x2c
 800bc48:	af04      	add	r7, sp, #16
 800bc4a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bc50:	7dbb      	ldrb	r3, [r7, #22]
 800bc52:	b29c      	uxth	r4, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fa fdc5 	bl	80067e8 <lwip_htonl>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2200      	movs	r2, #0
 800bc62:	4621      	mov	r1, r4
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff fdad 	bl	800b7c4 <tcp_output_alloc_header>
 800bc6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d109      	bne.n	800bc86 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7e9b      	ldrb	r3, [r3, #26]
 800bc76:	f043 0303 	orr.w	r3, r3, #3
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bc80:	f06f 0301 	mvn.w	r3, #1
 800bc84:	e036      	b.n	800bcf4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	3304      	adds	r3, #4
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f002 f8ae 	bl	800ddec <ip4_route>
 800bc90:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d102      	bne.n	800bc9e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800bc98:	23fc      	movs	r3, #252	; 0xfc
 800bc9a:	75fb      	strb	r3, [r7, #23]
 800bc9c:	e012      	b.n	800bcc4 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	1d18      	adds	r0, r3, #4
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	7a9c      	ldrb	r4, [r3, #10]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	7a5b      	ldrb	r3, [r3, #9]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	9202      	str	r2, [sp, #8]
 800bcb0:	2206      	movs	r2, #6
 800bcb2:	9201      	str	r2, [sp, #4]
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	4623      	mov	r3, r4
 800bcb8:	4602      	mov	r2, r0
 800bcba:	6938      	ldr	r0, [r7, #16]
 800bcbc:	f002 fa3e 	bl	800e13c <ip4_output_if>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800bcc4:	6938      	ldr	r0, [r7, #16]
 800bcc6:	f7fb ff1d 	bl	8007b04 <pbuf_free>

  if (err != ERR_OK) {
 800bcca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d007      	beq.n	800bce2 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	7e9b      	ldrb	r3, [r3, #26]
 800bcd6:	f043 0303 	orr.w	r3, r3, #3
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	769a      	strb	r2, [r3, #26]
 800bce0:	e006      	b.n	800bcf0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7e9b      	ldrb	r3, [r3, #26]
 800bce6:	f023 0303 	bic.w	r3, r3, #3
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800bcf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	371c      	adds	r7, #28
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd90      	pop	{r4, r7, pc}

0800bcfc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bcfc:	b5b0      	push	{r4, r5, r7, lr}
 800bcfe:	b08a      	sub	sp, #40	; 0x28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	7d1b      	ldrb	r3, [r3, #20]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d106      	bne.n	800bd1a <tcp_output+0x1e>
 800bd0c:	4b9b      	ldr	r3, [pc, #620]	; (800bf7c <tcp_output+0x280>)
 800bd0e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800bd12:	499b      	ldr	r1, [pc, #620]	; (800bf80 <tcp_output+0x284>)
 800bd14:	489b      	ldr	r0, [pc, #620]	; (800bf84 <tcp_output+0x288>)
 800bd16:	f003 fb3f 	bl	800f398 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bd1a:	4b9b      	ldr	r3, [pc, #620]	; (800bf88 <tcp_output+0x28c>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d101      	bne.n	800bd28 <tcp_output+0x2c>
    return ERR_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	e1cf      	b.n	800c0c8 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d203      	bcs.n	800bd40 <tcp_output+0x44>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd3e:	e002      	b.n	800bd46 <tcp_output+0x4a>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd46:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	7e9b      	ldrb	r3, [r3, #26]
 800bd52:	f003 0302 	and.w	r3, r3, #2
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d017      	beq.n	800bd8a <tcp_output+0x8e>
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00f      	beq.n	800bd80 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fa fd3e 	bl	80067e8 <lwip_htonl>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd76:	8912      	ldrh	r2, [r2, #8]
 800bd78:	4413      	add	r3, r2
     (seg == NULL ||
 800bd7a:	69ba      	ldr	r2, [r7, #24]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d204      	bcs.n	800bd8a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7ff ff5f 	bl	800bc44 <tcp_send_empty_ack>
 800bd86:	4603      	mov	r3, r0
 800bd88:	e19e      	b.n	800c0c8 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd8e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d007      	beq.n	800bda6 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800bd96:	e002      	b.n	800bd9e <tcp_output+0xa2>
 800bd98:	6a3b      	ldr	r3, [r7, #32]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	623b      	str	r3, [r7, #32]
 800bd9e:	6a3b      	ldr	r3, [r7, #32]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1f8      	bne.n	800bd98 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	3304      	adds	r3, #4
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f002 f81e 	bl	800ddec <ip4_route>
 800bdb0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d102      	bne.n	800bdbe <tcp_output+0xc2>
    return ERR_RTE;
 800bdb8:	f06f 0303 	mvn.w	r3, #3
 800bdbc:	e184      	b.n	800c0c8 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d003      	beq.n	800bdcc <tcp_output+0xd0>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d111      	bne.n	800bdf0 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <tcp_output+0xdc>
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	e000      	b.n	800bdda <tcp_output+0xde>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d102      	bne.n	800bde8 <tcp_output+0xec>
      return ERR_RTE;
 800bde2:	f06f 0303 	mvn.w	r3, #3
 800bde6:	e16f      	b.n	800c0c8 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f000 813e 	beq.w	800c074 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fa fcf2 	bl	80067e8 <lwip_htonl>
 800be04:	4602      	mov	r2, r0
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be0e:	8912      	ldrh	r2, [r2, #8]
 800be10:	4413      	add	r3, r2
  if (seg != NULL &&
 800be12:	69ba      	ldr	r2, [r7, #24]
 800be14:	429a      	cmp	r2, r3
 800be16:	f080 812d 	bcs.w	800c074 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 8129 	beq.w	800c074 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be28:	461a      	mov	r2, r3
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	4293      	cmp	r3, r2
 800be2e:	f040 8121 	bne.w	800c074 <tcp_output+0x378>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be36:	2b00      	cmp	r3, #0
 800be38:	f040 811c 	bne.w	800c074 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800be42:	2b00      	cmp	r3, #0
 800be44:	f040 812b 	bne.w	800c09e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800be58:	e121      	b.n	800c09e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	899b      	ldrh	r3, [r3, #12]
 800be60:	b29b      	uxth	r3, r3
 800be62:	4618      	mov	r0, r3
 800be64:	f7fa fcb2 	bl	80067cc <lwip_htons>
 800be68:	4603      	mov	r3, r0
 800be6a:	f003 0304 	and.w	r3, r3, #4
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d006      	beq.n	800be80 <tcp_output+0x184>
 800be72:	4b42      	ldr	r3, [pc, #264]	; (800bf7c <tcp_output+0x280>)
 800be74:	f240 4246 	movw	r2, #1094	; 0x446
 800be78:	4944      	ldr	r1, [pc, #272]	; (800bf8c <tcp_output+0x290>)
 800be7a:	4842      	ldr	r0, [pc, #264]	; (800bf84 <tcp_output+0x288>)
 800be7c:	f003 fa8c 	bl	800f398 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be84:	2b00      	cmp	r3, #0
 800be86:	d01f      	beq.n	800bec8 <tcp_output+0x1cc>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	7e9b      	ldrb	r3, [r3, #26]
 800be8c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800be90:	2b00      	cmp	r3, #0
 800be92:	d119      	bne.n	800bec8 <tcp_output+0x1cc>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00b      	beq.n	800beb4 <tcp_output+0x1b8>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d110      	bne.n	800bec8 <tcp_output+0x1cc>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800beaa:	891a      	ldrh	r2, [r3, #8]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d209      	bcs.n	800bec8 <tcp_output+0x1cc>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d004      	beq.n	800bec8 <tcp_output+0x1cc>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bec4:	2b08      	cmp	r3, #8
 800bec6:	d901      	bls.n	800becc <tcp_output+0x1d0>
 800bec8:	2301      	movs	r3, #1
 800beca:	e000      	b.n	800bece <tcp_output+0x1d2>
 800becc:	2300      	movs	r3, #0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7e9b      	ldrb	r3, [r3, #26]
 800bed6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 80e1 	beq.w	800c0a2 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	7d1b      	ldrb	r3, [r3, #20]
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d00d      	beq.n	800bf04 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	899b      	ldrh	r3, [r3, #12]
 800beee:	b29c      	uxth	r4, r3
 800bef0:	2010      	movs	r0, #16
 800bef2:	f7fa fc6b 	bl	80067cc <lwip_htons>
 800bef6:	4603      	mov	r3, r0
 800bef8:	461a      	mov	r2, r3
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	4322      	orrs	r2, r4
 800bf00:	b292      	uxth	r2, r2
 800bf02:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800bf04:	697a      	ldr	r2, [r7, #20]
 800bf06:	6879      	ldr	r1, [r7, #4]
 800bf08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf0a:	f000 f8e1 	bl	800c0d0 <tcp_output_segment>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bf12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d009      	beq.n	800bf2e <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	7e9b      	ldrb	r3, [r3, #26]
 800bf1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	769a      	strb	r2, [r3, #26]
      return err;
 800bf28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2c:	e0cc      	b.n	800c0c8 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	7d1b      	ldrb	r3, [r3, #20]
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d006      	beq.n	800bf4c <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	7e9b      	ldrb	r3, [r3, #26]
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fa fc48 	bl	80067e8 <lwip_htonl>
 800bf58:	4604      	mov	r4, r0
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	891b      	ldrh	r3, [r3, #8]
 800bf5e:	461d      	mov	r5, r3
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	899b      	ldrh	r3, [r3, #12]
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fa fc2f 	bl	80067cc <lwip_htons>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f003 0303 	and.w	r3, r3, #3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00b      	beq.n	800bf90 <tcp_output+0x294>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e00a      	b.n	800bf92 <tcp_output+0x296>
 800bf7c:	08011388 	.word	0x08011388
 800bf80:	0801178c 	.word	0x0801178c
 800bf84:	080113ec 	.word	0x080113ec
 800bf88:	2000e430 	.word	0x2000e430
 800bf8c:	080117b4 	.word	0x080117b4
 800bf90:	2300      	movs	r3, #0
 800bf92:	442b      	add	r3, r5
 800bf94:	4423      	add	r3, r4
 800bf96:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	da02      	bge.n	800bfaa <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	891b      	ldrh	r3, [r3, #8]
 800bfae:	461c      	mov	r4, r3
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	899b      	ldrh	r3, [r3, #12]
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fa fc07 	bl	80067cc <lwip_htons>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	f003 0303 	and.w	r3, r3, #3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <tcp_output+0x2d0>
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e000      	b.n	800bfce <tcp_output+0x2d2>
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4423      	add	r3, r4
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d049      	beq.n	800c068 <tcp_output+0x36c>
      seg->next = NULL;
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d105      	bne.n	800bfee <tcp_output+0x2f2>
        pcb->unacked = seg;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe6:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	623b      	str	r3, [r7, #32]
 800bfec:	e03f      	b.n	800c06e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fa fbf7 	bl	80067e8 <lwip_htonl>
 800bffa:	4604      	mov	r4, r0
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	4618      	mov	r0, r3
 800c004:	f7fa fbf0 	bl	80067e8 <lwip_htonl>
 800c008:	4603      	mov	r3, r0
 800c00a:	1ae3      	subs	r3, r4, r3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	da24      	bge.n	800c05a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	336c      	adds	r3, #108	; 0x6c
 800c014:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c016:	e002      	b.n	800c01e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d011      	beq.n	800c04a <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fa fbda 	bl	80067e8 <lwip_htonl>
 800c034:	4604      	mov	r4, r0
 800c036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fa fbd3 	bl	80067e8 <lwip_htonl>
 800c042:	4603      	mov	r3, r0
 800c044:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c046:	2b00      	cmp	r3, #0
 800c048:	dbe6      	blt.n	800c018 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	e009      	b.n	800c06e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c05e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	623b      	str	r3, [r7, #32]
 800c066:	e002      	b.n	800c06e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c06a:	f7fc fea3 	bl	8008db4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c072:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	2b00      	cmp	r3, #0
 800c078:	d015      	beq.n	800c0a6 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	4618      	mov	r0, r3
 800c082:	f7fa fbb1 	bl	80067e8 <lwip_htonl>
 800c086:	4602      	mov	r2, r0
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c090:	8912      	ldrh	r2, [r2, #8]
 800c092:	4413      	add	r3, r2
  while (seg != NULL &&
 800c094:	69ba      	ldr	r2, [r7, #24]
 800c096:	429a      	cmp	r2, r3
 800c098:	f4bf aedf 	bcs.w	800be5a <tcp_output+0x15e>
  }
output_done:
 800c09c:	e003      	b.n	800c0a6 <tcp_output+0x3aa>
    goto output_done;
 800c09e:	bf00      	nop
 800c0a0:	e002      	b.n	800c0a8 <tcp_output+0x3ac>
      break;
 800c0a2:	bf00      	nop
 800c0a4:	e000      	b.n	800c0a8 <tcp_output+0x3ac>
output_done:
 800c0a6:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d103      	bne.n	800c0b8 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	7e9b      	ldrb	r3, [r3, #26]
 800c0bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3728      	adds	r7, #40	; 0x28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bdb0      	pop	{r4, r5, r7, pc}

0800c0d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c0d0:	b5b0      	push	{r4, r5, r7, lr}
 800c0d2:	b08c      	sub	sp, #48	; 0x30
 800c0d4:	af04      	add	r7, sp, #16
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	89db      	ldrh	r3, [r3, #14]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d001      	beq.n	800c0ea <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e08b      	b.n	800c202 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	68dc      	ldr	r4, [r3, #12]
 800c0f2:	4610      	mov	r0, r2
 800c0f4:	f7fa fb78 	bl	80067e8 <lwip_htonl>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	68dc      	ldr	r4, [r3, #12]
 800c104:	4610      	mov	r0, r2
 800c106:	f7fa fb61 	bl	80067cc <lwip_htons>
 800c10a:	4603      	mov	r3, r0
 800c10c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c116:	441a      	add	r2, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	3314      	adds	r3, #20
 800c122:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	7a9b      	ldrb	r3, [r3, #10]
 800c128:	f003 0301 	and.w	r3, r3, #1
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d014      	beq.n	800c15a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	3304      	adds	r3, #4
 800c134:	4619      	mov	r1, r3
 800c136:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800c13a:	f7fd f8a5 	bl	8009288 <tcp_eff_send_mss_impl>
 800c13e:	4603      	mov	r3, r0
 800c140:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c142:	8b7b      	ldrh	r3, [r7, #26]
 800c144:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fa fb4d 	bl	80067e8 <lwip_htonl>
 800c14e:	4602      	mov	r2, r0
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	3304      	adds	r3, #4
 800c158:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c160:	2b00      	cmp	r3, #0
 800c162:	da02      	bge.n	800c16a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	2200      	movs	r2, #0
 800c168:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10c      	bne.n	800c18c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800c172:	4b26      	ldr	r3, [pc, #152]	; (800c20c <tcp_output_segment+0x13c>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	4618      	mov	r0, r3
 800c182:	f7fa fb31 	bl	80067e8 <lwip_htonl>
 800c186:	4602      	mov	r2, r0
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	461a      	mov	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	8959      	ldrh	r1, [r3, #10]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	8b3a      	ldrh	r2, [r7, #24]
 800c1a8:	1a8a      	subs	r2, r1, r2
 800c1aa:	b292      	uxth	r2, r2
 800c1ac:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	8919      	ldrh	r1, [r3, #8]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	8b3a      	ldrh	r2, [r7, #24]
 800c1ba:	1a8a      	subs	r2, r1, r2
 800c1bc:	b292      	uxth	r2, r2
 800c1be:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	68d2      	ldr	r2, [r2, #12]
 800c1c8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	741a      	strb	r2, [r3, #16]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6858      	ldr	r0, [r3, #4]
 800c1da:	68b9      	ldr	r1, [r7, #8]
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	1d1c      	adds	r4, r3, #4
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	7a9d      	ldrb	r5, [r3, #10]
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	7a5b      	ldrb	r3, [r3, #9]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	9202      	str	r2, [sp, #8]
 800c1ec:	2206      	movs	r2, #6
 800c1ee:	9201      	str	r2, [sp, #4]
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	462b      	mov	r3, r5
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	f001 ffa1 	bl	800e13c <ip4_output_if>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800c1fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3720      	adds	r7, #32
 800c206:	46bd      	mov	sp, r7
 800c208:	bdb0      	pop	{r4, r5, r7, pc}
 800c20a:	bf00      	nop
 800c20c:	2000e420 	.word	0x2000e420

0800c210 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b08c      	sub	sp, #48	; 0x30
 800c214:	af04      	add	r7, sp, #16
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
 800c21c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c21e:	2200      	movs	r2, #0
 800c220:	2114      	movs	r1, #20
 800c222:	2001      	movs	r0, #1
 800c224:	f7fb f8fa 	bl	800741c <pbuf_alloc>
 800c228:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d05b      	beq.n	800c2e8 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	895b      	ldrh	r3, [r3, #10]
 800c234:	2b13      	cmp	r3, #19
 800c236:	d806      	bhi.n	800c246 <tcp_rst+0x36>
 800c238:	4b2d      	ldr	r3, [pc, #180]	; (800c2f0 <tcp_rst+0xe0>)
 800c23a:	f240 524d 	movw	r2, #1357	; 0x54d
 800c23e:	492d      	ldr	r1, [pc, #180]	; (800c2f4 <tcp_rst+0xe4>)
 800c240:	482d      	ldr	r0, [pc, #180]	; (800c2f8 <tcp_rst+0xe8>)
 800c242:	f003 f8a9 	bl	800f398 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800c24c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fa fabc 	bl	80067cc <lwip_htons>
 800c254:	4603      	mov	r3, r0
 800c256:	461a      	mov	r2, r3
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800c25c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fa fab4 	bl	80067cc <lwip_htons>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7fa fabb 	bl	80067e8 <lwip_htonl>
 800c272:	4602      	mov	r2, r0
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800c278:	68b8      	ldr	r0, [r7, #8]
 800c27a:	f7fa fab5 	bl	80067e8 <lwip_htonl>
 800c27e:	4602      	mov	r2, r0
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c284:	f245 0014 	movw	r0, #20500	; 0x5014
 800c288:	f7fa faa0 	bl	80067cc <lwip_htons>
 800c28c:	4603      	mov	r3, r0
 800c28e:	461a      	mov	r2, r3
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	2200      	movs	r2, #0
 800c298:	f042 0216 	orr.w	r2, r2, #22
 800c29c:	739a      	strb	r2, [r3, #14]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f062 022f 	orn	r2, r2, #47	; 0x2f
 800c2a4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	741a      	strb	r2, [r3, #16]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	749a      	strb	r2, [r3, #18]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800c2ba:	6838      	ldr	r0, [r7, #0]
 800c2bc:	f001 fd96 	bl	800ddec <ip4_route>
 800c2c0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00b      	beq.n	800c2e0 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	9302      	str	r3, [sp, #8]
 800c2cc:	2306      	movs	r3, #6
 800c2ce:	9301      	str	r3, [sp, #4]
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	23ff      	movs	r3, #255	; 0xff
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	6879      	ldr	r1, [r7, #4]
 800c2da:	69f8      	ldr	r0, [r7, #28]
 800c2dc:	f001 ff2e 	bl	800e13c <ip4_output_if>
  }
  pbuf_free(p);
 800c2e0:	69f8      	ldr	r0, [r7, #28]
 800c2e2:	f7fb fc0f 	bl	8007b04 <pbuf_free>
 800c2e6:	e000      	b.n	800c2ea <tcp_rst+0xda>
    return;
 800c2e8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c2ea:	3720      	adds	r7, #32
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	08011388 	.word	0x08011388
 800c2f4:	080113bc 	.word	0x080113bc
 800c2f8:	080113ec 	.word	0x080113ec

0800c2fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d029      	beq.n	800c360 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c310:	60fb      	str	r3, [r7, #12]
 800c312:	e002      	b.n	800c31a <tcp_rexmit_rto+0x1e>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	60fb      	str	r3, [r7, #12]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1f8      	bne.n	800c314 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c33e:	2bff      	cmp	r3, #255	; 0xff
 800c340:	d007      	beq.n	800c352 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c348:	3301      	adds	r3, #1
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff fccf 	bl	800bcfc <tcp_output>
 800c35e:	e000      	b.n	800c362 <tcp_rexmit_rto+0x66>
    return;
 800c360:	bf00      	nop
}
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c374:	2b00      	cmp	r3, #0
 800c376:	d043      	beq.n	800c400 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3368      	adds	r3, #104	; 0x68
 800c38a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c38c:	e002      	b.n	800c394 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d011      	beq.n	800c3c0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fa fa1f 	bl	80067e8 <lwip_htonl>
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fa fa18 	bl	80067e8 <lwip_htonl>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	dbe6      	blt.n	800c38e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d103      	bne.n	800c3de <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c3e4:	2bff      	cmp	r3, #255	; 0xff
 800c3e6:	d007      	beq.n	800c3f8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	635a      	str	r2, [r3, #52]	; 0x34
 800c3fe:	e000      	b.n	800c402 <tcp_rexmit+0x9a>
    return;
 800c400:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800c402:	3714      	adds	r7, #20
 800c404:	46bd      	mov	sp, r7
 800c406:	bd90      	pop	{r4, r7, pc}

0800c408 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c414:	2b00      	cmp	r3, #0
 800c416:	d04a      	beq.n	800c4ae <tcp_rexmit_fast+0xa6>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	7e9b      	ldrb	r3, [r3, #26]
 800c41c:	f003 0304 	and.w	r3, r3, #4
 800c420:	2b00      	cmp	r3, #0
 800c422:	d144      	bne.n	800c4ae <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff ff9f 	bl	800c368 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c436:	429a      	cmp	r2, r3
 800c438:	d207      	bcs.n	800c44a <tcp_rexmit_fast+0x42>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c440:	0fda      	lsrs	r2, r3, #31
 800c442:	4413      	add	r3, r2
 800c444:	105b      	asrs	r3, r3, #1
 800c446:	b29b      	uxth	r3, r3
 800c448:	e006      	b.n	800c458 <tcp_rexmit_fast+0x50>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c450:	0fda      	lsrs	r2, r3, #31
 800c452:	4413      	add	r3, r2
 800c454:	105b      	asrs	r3, r3, #1
 800c456:	b29b      	uxth	r3, r3
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c464:	461a      	mov	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d206      	bcs.n	800c47e <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c474:	005b      	lsls	r3, r3, #1
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c488:	4619      	mov	r1, r3
 800c48a:	0049      	lsls	r1, r1, #1
 800c48c:	440b      	add	r3, r1
 800c48e:	b29b      	uxth	r3, r3
 800c490:	4413      	add	r3, r2
 800c492:	b29a      	uxth	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	7e9b      	ldrb	r3, [r3, #26]
 800c49e:	f043 0304 	orr.w	r3, r3, #4
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b08a      	sub	sp, #40	; 0x28
 800c4ba:	af04      	add	r7, sp, #16
 800c4bc:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fa f98f 	bl	80067e8 <lwip_htonl>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7ff f977 	bl	800b7c4 <tcp_output_alloc_header>
 800c4d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d102      	bne.n	800c4e4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c4de:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e2:	e021      	b.n	800c528 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	3304      	adds	r3, #4
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f001 fc7f 	bl	800ddec <ip4_route>
 800c4ee:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d102      	bne.n	800c4fc <tcp_keepalive+0x46>
    err = ERR_RTE;
 800c4f6:	23fc      	movs	r3, #252	; 0xfc
 800c4f8:	75fb      	strb	r3, [r7, #23]
 800c4fa:	e010      	b.n	800c51e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800c4fc:	6879      	ldr	r1, [r7, #4]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	1d1a      	adds	r2, r3, #4
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	7a98      	ldrb	r0, [r3, #10]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	9302      	str	r3, [sp, #8]
 800c50a:	2306      	movs	r3, #6
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	2300      	movs	r3, #0
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	4603      	mov	r3, r0
 800c514:	6938      	ldr	r0, [r7, #16]
 800c516:	f001 fe11 	bl	800e13c <ip4_output_if>
 800c51a:	4603      	mov	r3, r0
 800c51c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c51e:	6938      	ldr	r0, [r7, #16]
 800c520:	f7fb faf0 	bl	8007b04 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c524:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3718      	adds	r7, #24
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c530:	b590      	push	{r4, r7, lr}
 800c532:	b08f      	sub	sp, #60	; 0x3c
 800c534:	af04      	add	r7, sp, #16
 800c536:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c53c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800c53e:	6a3b      	ldr	r3, [r7, #32]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d102      	bne.n	800c54a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c548:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	e085      	b.n	800c660 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	899b      	ldrh	r3, [r3, #12]
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fa f935 	bl	80067cc <lwip_htons>
 800c562:	4603      	mov	r3, r0
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d005      	beq.n	800c578 <tcp_zero_window_probe+0x48>
 800c56c:	6a3b      	ldr	r3, [r7, #32]
 800c56e:	891b      	ldrh	r3, [r3, #8]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <tcp_zero_window_probe+0x48>
 800c574:	2301      	movs	r3, #1
 800c576:	e000      	b.n	800c57a <tcp_zero_window_probe+0x4a>
 800c578:	2300      	movs	r3, #0
 800c57a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c57c:	7ffb      	ldrb	r3, [r7, #31]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	bf0c      	ite	eq
 800c582:	2301      	moveq	r3, #1
 800c584:	2300      	movne	r3, #0
 800c586:	b2db      	uxtb	r3, r3
 800c588:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	8bba      	ldrh	r2, [r7, #28]
 800c592:	2100      	movs	r1, #0
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff f915 	bl	800b7c4 <tcp_output_alloc_header>
 800c59a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d102      	bne.n	800c5a8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a6:	e05b      	b.n	800c660 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c5ae:	7ffb      	ldrb	r3, [r7, #31]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00e      	beq.n	800c5d2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	899b      	ldrh	r3, [r3, #12]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c5be:	b29c      	uxth	r4, r3
 800c5c0:	2011      	movs	r0, #17
 800c5c2:	f7fa f903 	bl	80067cc <lwip_htons>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4323      	orrs	r3, r4
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	819a      	strh	r2, [r3, #12]
 800c5d0:	e010      	b.n	800c5f4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	3314      	adds	r3, #20
 800c5d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	6858      	ldr	r0, [r3, #4]
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	891a      	ldrh	r2, [r3, #8]
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	891b      	ldrh	r3, [r3, #8]
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	6939      	ldr	r1, [r7, #16]
 800c5f0:	f7fb fc84 	bl	8007efc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fa f8f4 	bl	80067e8 <lwip_htonl>
 800c600:	4603      	mov	r3, r0
 800c602:	3301      	adds	r3, #1
 800c604:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	da02      	bge.n	800c618 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	3304      	adds	r3, #4
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 fbe5 	bl	800ddec <ip4_route>
 800c622:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d103      	bne.n	800c632 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800c62a:	23fc      	movs	r3, #252	; 0xfc
 800c62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c630:	e011      	b.n	800c656 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c632:	6879      	ldr	r1, [r7, #4]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	1d1a      	adds	r2, r3, #4
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	7a98      	ldrb	r0, [r3, #10]
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	9302      	str	r3, [sp, #8]
 800c640:	2306      	movs	r3, #6
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	2300      	movs	r3, #0
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	4603      	mov	r3, r0
 800c64a:	69b8      	ldr	r0, [r7, #24]
 800c64c:	f001 fd76 	bl	800e13c <ip4_output_if>
 800c650:	4603      	mov	r3, r0
 800c652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800c656:	69b8      	ldr	r0, [r7, #24]
 800c658:	f7fb fa54 	bl	8007b04 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c65c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c660:	4618      	mov	r0, r3
 800c662:	372c      	adds	r7, #44	; 0x2c
 800c664:	46bd      	mov	sp, r7
 800c666:	bd90      	pop	{r4, r7, pc}

0800c668 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c670:	f7fb fcc6 	bl	8008000 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c674:	4b0a      	ldr	r3, [pc, #40]	; (800c6a0 <tcpip_tcp_timer+0x38>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d103      	bne.n	800c684 <tcpip_tcp_timer+0x1c>
 800c67c:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <tcpip_tcp_timer+0x3c>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d005      	beq.n	800c690 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c684:	2200      	movs	r2, #0
 800c686:	4908      	ldr	r1, [pc, #32]	; (800c6a8 <tcpip_tcp_timer+0x40>)
 800c688:	20fa      	movs	r0, #250	; 0xfa
 800c68a:	f000 f86f 	bl	800c76c <sys_timeout>
 800c68e:	e002      	b.n	800c696 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c690:	4b06      	ldr	r3, [pc, #24]	; (800c6ac <tcpip_tcp_timer+0x44>)
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
  }
}
 800c696:	bf00      	nop
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	2000e41c 	.word	0x2000e41c
 800c6a4:	2000e42c 	.word	0x2000e42c
 800c6a8:	0800c669 	.word	0x0800c669
 800c6ac:	200040c8 	.word	0x200040c8

0800c6b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c6b4:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <tcp_timer_needed+0x30>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10f      	bne.n	800c6dc <tcp_timer_needed+0x2c>
 800c6bc:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <tcp_timer_needed+0x34>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d103      	bne.n	800c6cc <tcp_timer_needed+0x1c>
 800c6c4:	4b08      	ldr	r3, [pc, #32]	; (800c6e8 <tcp_timer_needed+0x38>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d007      	beq.n	800c6dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c6cc:	4b04      	ldr	r3, [pc, #16]	; (800c6e0 <tcp_timer_needed+0x30>)
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	4905      	ldr	r1, [pc, #20]	; (800c6ec <tcp_timer_needed+0x3c>)
 800c6d6:	20fa      	movs	r0, #250	; 0xfa
 800c6d8:	f000 f848 	bl	800c76c <sys_timeout>
  }
}
 800c6dc:	bf00      	nop
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	200040c8 	.word	0x200040c8
 800c6e4:	2000e41c 	.word	0x2000e41c
 800c6e8:	2000e42c 	.word	0x2000e42c
 800c6ec:	0800c669 	.word	0x0800c669

0800c6f0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	4903      	ldr	r1, [pc, #12]	; (800c718 <cyclic_timer+0x28>)
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 f82e 	bl	800c76c <sys_timeout>
}
 800c710:	bf00      	nop
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	0800c6f1 	.word	0x0800c6f1

0800c71c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c722:	2301      	movs	r3, #1
 800c724:	607b      	str	r3, [r7, #4]
 800c726:	e00e      	b.n	800c746 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800c728:	4a0d      	ldr	r2, [pc, #52]	; (800c760 <sys_timeouts_init+0x44>)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	00db      	lsls	r3, r3, #3
 800c734:	4a0a      	ldr	r2, [pc, #40]	; (800c760 <sys_timeouts_init+0x44>)
 800c736:	4413      	add	r3, r2
 800c738:	461a      	mov	r2, r3
 800c73a:	490a      	ldr	r1, [pc, #40]	; (800c764 <sys_timeouts_init+0x48>)
 800c73c:	f000 f816 	bl	800c76c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3301      	adds	r3, #1
 800c744:	607b      	str	r3, [r7, #4]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d9ed      	bls.n	800c728 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800c74c:	f7f6 fffa 	bl	8003744 <sys_now>
 800c750:	4602      	mov	r2, r0
 800c752:	4b05      	ldr	r3, [pc, #20]	; (800c768 <sys_timeouts_init+0x4c>)
 800c754:	601a      	str	r2, [r3, #0]
}
 800c756:	bf00      	nop
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	08012090 	.word	0x08012090
 800c764:	0800c6f1 	.word	0x0800c6f1
 800c768:	200040c4 	.word	0x200040c4

0800c76c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b088      	sub	sp, #32
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c778:	200a      	movs	r0, #10
 800c77a:	f7fa fc15 	bl	8006fa8 <memp_malloc>
 800c77e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10a      	bne.n	800c79c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f040 8084 	bne.w	800c896 <sys_timeout+0x12a>
 800c78e:	4b44      	ldr	r3, [pc, #272]	; (800c8a0 <sys_timeout+0x134>)
 800c790:	22d4      	movs	r2, #212	; 0xd4
 800c792:	4944      	ldr	r1, [pc, #272]	; (800c8a4 <sys_timeout+0x138>)
 800c794:	4844      	ldr	r0, [pc, #272]	; (800c8a8 <sys_timeout+0x13c>)
 800c796:	f002 fdff 	bl	800f398 <iprintf>
    return;
 800c79a:	e07c      	b.n	800c896 <sys_timeout+0x12a>
  }

  now = sys_now();
 800c79c:	f7f6 ffd2 	bl	8003744 <sys_now>
 800c7a0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800c7a2:	4b42      	ldr	r3, [pc, #264]	; (800c8ac <sys_timeout+0x140>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d105      	bne.n	800c7b6 <sys_timeout+0x4a>
    diff = 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800c7ae:	4a40      	ldr	r2, [pc, #256]	; (800c8b0 <sys_timeout+0x144>)
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	e004      	b.n	800c7c0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800c7b6:	4b3e      	ldr	r3, [pc, #248]	; (800c8b0 <sys_timeout+0x144>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	441a      	add	r2, r3
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c7dc:	4b33      	ldr	r3, [pc, #204]	; (800c8ac <sys_timeout+0x140>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d103      	bne.n	800c7ec <sys_timeout+0x80>
    next_timeout = timeout;
 800c7e4:	4a31      	ldr	r2, [pc, #196]	; (800c8ac <sys_timeout+0x140>)
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	6013      	str	r3, [r2, #0]
    return;
 800c7ea:	e055      	b.n	800c898 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800c7ec:	4b2f      	ldr	r3, [pc, #188]	; (800c8ac <sys_timeout+0x140>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d20f      	bcs.n	800c818 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800c7f8:	4b2c      	ldr	r3, [pc, #176]	; (800c8ac <sys_timeout+0x140>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6859      	ldr	r1, [r3, #4]
 800c7fe:	4b2b      	ldr	r3, [pc, #172]	; (800c8ac <sys_timeout+0x140>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	1a8a      	subs	r2, r1, r2
 800c806:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800c808:	4b28      	ldr	r3, [pc, #160]	; (800c8ac <sys_timeout+0x140>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c810:	4a26      	ldr	r2, [pc, #152]	; (800c8ac <sys_timeout+0x140>)
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	e03f      	b.n	800c898 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c818:	4b24      	ldr	r3, [pc, #144]	; (800c8ac <sys_timeout+0x140>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	61fb      	str	r3, [r7, #28]
 800c81e:	e036      	b.n	800c88e <sys_timeout+0x122>
      timeout->time -= t->time;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	685a      	ldr	r2, [r3, #4]
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	1ad2      	subs	r2, r2, r3
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d006      	beq.n	800c844 <sys_timeout+0xd8>
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d921      	bls.n	800c888 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d009      	beq.n	800c860 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6859      	ldr	r1, [r3, #4]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	1a8a      	subs	r2, r1, r2
 800c85c:	605a      	str	r2, [r3, #4]
 800c85e:	e00b      	b.n	800c878 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	429a      	cmp	r2, r3
 800c868:	d206      	bcs.n	800c878 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800c86a:	4b10      	ldr	r3, [pc, #64]	; (800c8ac <sys_timeout+0x140>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	685a      	ldr	r2, [r3, #4]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	441a      	add	r2, r3
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	601a      	str	r2, [r3, #0]
        break;
 800c886:	e007      	b.n	800c898 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	61fb      	str	r3, [r7, #28]
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1c5      	bne.n	800c820 <sys_timeout+0xb4>
 800c894:	e000      	b.n	800c898 <sys_timeout+0x12c>
    return;
 800c896:	bf00      	nop
      }
    }
  }
}
 800c898:	3720      	adds	r7, #32
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	080117cc 	.word	0x080117cc
 800c8a4:	08011800 	.word	0x08011800
 800c8a8:	08011840 	.word	0x08011840
 800c8ac:	200040c0 	.word	0x200040c0
 800c8b0:	200040c4 	.word	0x200040c4

0800c8b4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800c8ba:	4b24      	ldr	r3, [pc, #144]	; (800c94c <sys_check_timeouts+0x98>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d03f      	beq.n	800c942 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800c8c2:	f7f6 ff3f 	bl	8003744 <sys_now>
 800c8c6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800c8c8:	4b21      	ldr	r3, [pc, #132]	; (800c950 <sys_check_timeouts+0x9c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800c8d6:	4b1d      	ldr	r3, [pc, #116]	; (800c94c <sys_check_timeouts+0x98>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d02c      	beq.n	800c93c <sys_check_timeouts+0x88>
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d327      	bcc.n	800c93c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	4b16      	ldr	r3, [pc, #88]	; (800c950 <sys_check_timeouts+0x9c>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	4a15      	ldr	r2, [pc, #84]	; (800c950 <sys_check_timeouts+0x9c>)
 800c8fc:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a0f      	ldr	r2, [pc, #60]	; (800c94c <sys_check_timeouts+0x98>)
 800c90e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c91c:	68b9      	ldr	r1, [r7, #8]
 800c91e:	200a      	movs	r0, #10
 800c920:	f7fa fb94 	bl	800704c <memp_free>
        if (handler != NULL) {
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d008      	beq.n	800c93c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 800c92a:	480a      	ldr	r0, [pc, #40]	; (800c954 <sys_check_timeouts+0xa0>)
 800c92c:	f002 fc8e 	bl	800f24c <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6838      	ldr	r0, [r7, #0]
 800c934:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 800c936:	4807      	ldr	r0, [pc, #28]	; (800c954 <sys_check_timeouts+0xa0>)
 800c938:	f002 fc97 	bl	800f26a <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800c93c:	7cfb      	ldrb	r3, [r7, #19]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1c7      	bne.n	800c8d2 <sys_check_timeouts+0x1e>
  }
}
 800c942:	bf00      	nop
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	200040c0 	.word	0x200040c0
 800c950:	200040c4 	.word	0x200040c4
 800c954:	20007348 	.word	0x20007348

0800c958 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 800c95e:	4b0f      	ldr	r3, [pc, #60]	; (800c99c <sys_timeouts_sleeptime+0x44>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d102      	bne.n	800c96c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 800c966:	f04f 33ff 	mov.w	r3, #4294967295
 800c96a:	e013      	b.n	800c994 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 800c96c:	f7f6 feea 	bl	8003744 <sys_now>
 800c970:	4602      	mov	r2, r0
 800c972:	4b0b      	ldr	r3, [pc, #44]	; (800c9a0 <sys_timeouts_sleeptime+0x48>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 800c97a:	4b08      	ldr	r3, [pc, #32]	; (800c99c <sys_timeouts_sleeptime+0x44>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	429a      	cmp	r2, r3
 800c984:	d901      	bls.n	800c98a <sys_timeouts_sleeptime+0x32>
    return 0;
 800c986:	2300      	movs	r3, #0
 800c988:	e004      	b.n	800c994 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 800c98a:	4b04      	ldr	r3, [pc, #16]	; (800c99c <sys_timeouts_sleeptime+0x44>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	1ad3      	subs	r3, r2, r3
  }
}
 800c994:	4618      	mov	r0, r3
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	200040c0 	.word	0x200040c0
 800c9a0:	200040c4 	.word	0x200040c4

0800c9a4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800c9ae:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <sys_timeouts_mbox_fetch+0x48>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d105      	bne.n	800c9c2 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	6839      	ldr	r1, [r7, #0]
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f002 fbcb 	bl	800f156 <sys_arch_mbox_fetch>
    return;
 800c9c0:	e011      	b.n	800c9e6 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 800c9c2:	f7ff ffc9 	bl	800c958 <sys_timeouts_sleeptime>
 800c9c6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d008      	beq.n	800c9e0 <sys_timeouts_mbox_fetch+0x3c>
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f002 fbbf 	bl	800f156 <sys_arch_mbox_fetch>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9de:	d102      	bne.n	800c9e6 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c9e0:	f7ff ff68 	bl	800c8b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c9e4:	e7e3      	b.n	800c9ae <sys_timeouts_mbox_fetch+0xa>
  }
}
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	200040c0 	.word	0x200040c0

0800c9f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800c9f4:	bf00      	nop
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
	...

0800ca00 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d018      	beq.n	800ca46 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d013      	beq.n	800ca42 <udp_input_local_match+0x42>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00f      	beq.n	800ca42 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca22:	4b14      	ldr	r3, [pc, #80]	; (800ca74 <udp_input_local_match+0x74>)
 800ca24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2a:	d00a      	beq.n	800ca42 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	4b10      	ldr	r3, [pc, #64]	; (800ca74 <udp_input_local_match+0x74>)
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	405a      	eors	r2, r3
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	3308      	adds	r3, #8
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d110      	bne.n	800ca64 <udp_input_local_match+0x64>
          return 1;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e00f      	b.n	800ca66 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d009      	beq.n	800ca60 <udp_input_local_match+0x60>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d005      	beq.n	800ca60 <udp_input_local_match+0x60>
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	4b06      	ldr	r3, [pc, #24]	; (800ca74 <udp_input_local_match+0x74>)
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d101      	bne.n	800ca64 <udp_input_local_match+0x64>
      return 1;
 800ca60:	2301      	movs	r3, #1
 800ca62:	e000      	b.n	800ca66 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800ca64:	2300      	movs	r3, #0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3714      	adds	r7, #20
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	2000734c 	.word	0x2000734c

0800ca78 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ca78:	b590      	push	{r4, r7, lr}
 800ca7a:	b08d      	sub	sp, #52	; 0x34
 800ca7c:	af02      	add	r7, sp, #8
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ca82:	2300      	movs	r3, #0
 800ca84:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	895b      	ldrh	r3, [r3, #10]
 800ca8a:	2b07      	cmp	r3, #7
 800ca8c:	d803      	bhi.n	800ca96 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f7fb f838 	bl	8007b04 <pbuf_free>
    goto end;
 800ca94:	e0c6      	b.n	800cc24 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ca9c:	4b63      	ldr	r3, [pc, #396]	; (800cc2c <udp_input+0x1b4>)
 800ca9e:	695a      	ldr	r2, [r3, #20]
 800caa0:	4b62      	ldr	r3, [pc, #392]	; (800cc2c <udp_input+0x1b4>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4619      	mov	r1, r3
 800caa6:	4610      	mov	r0, r2
 800caa8:	f001 fc1a 	bl	800e2e0 <ip4_addr_isbroadcast_u32>
 800caac:	4603      	mov	r3, r0
 800caae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f9 fe88 	bl	80067cc <lwip_htons>
 800cabc:	4603      	mov	r3, r0
 800cabe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	885b      	ldrh	r3, [r3, #2]
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7f9 fe80 	bl	80067cc <lwip_htons>
 800cacc:	4603      	mov	r3, r0
 800cace:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cad0:	2300      	movs	r3, #0
 800cad2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cad4:	2300      	movs	r3, #0
 800cad6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cad8:	2300      	movs	r3, #0
 800cada:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cadc:	4b54      	ldr	r3, [pc, #336]	; (800cc30 <udp_input+0x1b8>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	627b      	str	r3, [r7, #36]	; 0x24
 800cae2:	e03b      	b.n	800cb5c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae6:	8a5b      	ldrh	r3, [r3, #18]
 800cae8:	89fa      	ldrh	r2, [r7, #14]
 800caea:	429a      	cmp	r2, r3
 800caec:	d131      	bne.n	800cb52 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800caee:	7cfb      	ldrb	r3, [r7, #19]
 800caf0:	461a      	mov	r2, r3
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caf6:	f7ff ff83 	bl	800ca00 <udp_input_local_match>
 800cafa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d028      	beq.n	800cb52 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	7c1b      	ldrb	r3, [r3, #16]
 800cb04:	f003 0304 	and.w	r3, r3, #4
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d104      	bne.n	800cb16 <udp_input+0x9e>
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	8a9b      	ldrh	r3, [r3, #20]
 800cb1a:	8a3a      	ldrh	r2, [r7, #16]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d118      	bne.n	800cb52 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d005      	beq.n	800cb34 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	4b3f      	ldr	r3, [pc, #252]	; (800cc2c <udp_input+0x1b4>)
 800cb2e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d10e      	bne.n	800cb52 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d014      	beq.n	800cb64 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	68da      	ldr	r2, [r3, #12]
 800cb3e:	6a3b      	ldr	r3, [r7, #32]
 800cb40:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cb42:	4b3b      	ldr	r3, [pc, #236]	; (800cc30 <udp_input+0x1b8>)
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cb4a:	4a39      	ldr	r2, [pc, #228]	; (800cc30 <udp_input+0x1b8>)
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cb50:	e008      	b.n	800cb64 <udp_input+0xec>
      }
    }

    prev = pcb;
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	627b      	str	r3, [r7, #36]	; 0x24
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1c0      	bne.n	800cae4 <udp_input+0x6c>
 800cb62:	e000      	b.n	800cb66 <udp_input+0xee>
        break;
 800cb64:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <udp_input+0xf8>
    pcb = uncon_pcb;
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d002      	beq.n	800cb7c <udp_input+0x104>
    for_us = 1;
 800cb76:	2301      	movs	r3, #1
 800cb78:	76fb      	strb	r3, [r7, #27]
 800cb7a:	e00a      	b.n	800cb92 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	3304      	adds	r3, #4
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	4b2a      	ldr	r3, [pc, #168]	; (800cc2c <udp_input+0x1b4>)
 800cb84:	695b      	ldr	r3, [r3, #20]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	bf0c      	ite	eq
 800cb8a:	2301      	moveq	r3, #1
 800cb8c:	2300      	movne	r3, #0
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cb92:	7efb      	ldrb	r3, [r7, #27]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d042      	beq.n	800cc1e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800cb98:	f06f 0107 	mvn.w	r1, #7
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7fa ff8d 	bl	8007abc <pbuf_header>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00a      	beq.n	800cbbe <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800cba8:	4b22      	ldr	r3, [pc, #136]	; (800cc34 <udp_input+0x1bc>)
 800cbaa:	f240 1255 	movw	r2, #341	; 0x155
 800cbae:	4922      	ldr	r1, [pc, #136]	; (800cc38 <udp_input+0x1c0>)
 800cbb0:	4822      	ldr	r0, [pc, #136]	; (800cc3c <udp_input+0x1c4>)
 800cbb2:	f002 fbf1 	bl	800f398 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7fa ffa4 	bl	8007b04 <pbuf_free>
      goto end;
 800cbbc:	e032      	b.n	800cc24 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d012      	beq.n	800cbea <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00a      	beq.n	800cbe2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	699c      	ldr	r4, [r3, #24]
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd2:	69d8      	ldr	r0, [r3, #28]
 800cbd4:	8a3b      	ldrh	r3, [r7, #16]
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	4b19      	ldr	r3, [pc, #100]	; (800cc40 <udp_input+0x1c8>)
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbde:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cbe0:	e021      	b.n	800cc26 <udp_input+0x1ae>
        pbuf_free(p);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f7fa ff8e 	bl	8007b04 <pbuf_free>
        goto end;
 800cbe8:	e01c      	b.n	800cc24 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cbea:	7cfb      	ldrb	r3, [r7, #19]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d112      	bne.n	800cc16 <udp_input+0x19e>
 800cbf0:	4b0e      	ldr	r3, [pc, #56]	; (800cc2c <udp_input+0x1b4>)
 800cbf2:	695b      	ldr	r3, [r3, #20]
 800cbf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbf8:	2be0      	cmp	r3, #224	; 0xe0
 800cbfa:	d00c      	beq.n	800cc16 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cbfc:	4b0b      	ldr	r3, [pc, #44]	; (800cc2c <udp_input+0x1b4>)
 800cbfe:	899b      	ldrh	r3, [r3, #12]
 800cc00:	3308      	adds	r3, #8
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	b21b      	sxth	r3, r3
 800cc06:	4619      	mov	r1, r3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7fa ff69 	bl	8007ae0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cc0e:	2103      	movs	r1, #3
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f001 f863 	bl	800dcdc <icmp_dest_unreach>
      pbuf_free(p);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7fa ff74 	bl	8007b04 <pbuf_free>
  return;
 800cc1c:	e003      	b.n	800cc26 <udp_input+0x1ae>
    pbuf_free(p);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7fa ff70 	bl	8007b04 <pbuf_free>
  return;
 800cc24:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cc26:	372c      	adds	r7, #44	; 0x2c
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd90      	pop	{r4, r7, pc}
 800cc2c:	2000734c 	.word	0x2000734c
 800cc30:	2000e434 	.word	0x2000e434
 800cc34:	08011868 	.word	0x08011868
 800cc38:	08011898 	.word	0x08011898
 800cc3c:	080118ac 	.word	0x080118ac
 800cc40:	2000735c 	.word	0x2000735c

0800cc44 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d01e      	beq.n	800cc92 <udp_netif_ip_addr_changed+0x4e>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d01a      	beq.n	800cc92 <udp_netif_ip_addr_changed+0x4e>
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d017      	beq.n	800cc92 <udp_netif_ip_addr_changed+0x4e>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d013      	beq.n	800cc92 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <udp_netif_ip_addr_changed+0x5c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	e00c      	b.n	800cc8c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d103      	bne.n	800cc86 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1ef      	bne.n	800cc72 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cc92:	bf00      	nop
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	2000e434 	.word	0x2000e434

0800cca4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ccac:	4915      	ldr	r1, [pc, #84]	; (800cd04 <etharp_free_entry+0x60>)
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	4413      	add	r3, r2
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	440b      	add	r3, r1
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d013      	beq.n	800cce8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ccc0:	4910      	ldr	r1, [pc, #64]	; (800cd04 <etharp_free_entry+0x60>)
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	4413      	add	r3, r2
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	440b      	add	r3, r1
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7fa ff17 	bl	8007b04 <pbuf_free>
    arp_table[i].q = NULL;
 800ccd6:	490b      	ldr	r1, [pc, #44]	; (800cd04 <etharp_free_entry+0x60>)
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	005b      	lsls	r3, r3, #1
 800ccde:	4413      	add	r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	440b      	add	r3, r1
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cce8:	4906      	ldr	r1, [pc, #24]	; (800cd04 <etharp_free_entry+0x60>)
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	4613      	mov	r3, r2
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	4413      	add	r3, r2
 800ccf2:	00db      	lsls	r3, r3, #3
 800ccf4:	440b      	add	r3, r1
 800ccf6:	3314      	adds	r3, #20
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	200040cc 	.word	0x200040cc

0800cd08 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd0e:	2300      	movs	r3, #0
 800cd10:	71fb      	strb	r3, [r7, #7]
 800cd12:	e096      	b.n	800ce42 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cd14:	79fa      	ldrb	r2, [r7, #7]
 800cd16:	494f      	ldr	r1, [pc, #316]	; (800ce54 <etharp_tmr+0x14c>)
 800cd18:	4613      	mov	r3, r2
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	440b      	add	r3, r1
 800cd22:	3314      	adds	r3, #20
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800cd28:	79bb      	ldrb	r3, [r7, #6]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 8086 	beq.w	800ce3c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800cd30:	79fa      	ldrb	r2, [r7, #7]
 800cd32:	4948      	ldr	r1, [pc, #288]	; (800ce54 <etharp_tmr+0x14c>)
 800cd34:	4613      	mov	r3, r2
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	4413      	add	r3, r2
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	440b      	add	r3, r1
 800cd3e:	3312      	adds	r3, #18
 800cd40:	881b      	ldrh	r3, [r3, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	b298      	uxth	r0, r3
 800cd46:	4943      	ldr	r1, [pc, #268]	; (800ce54 <etharp_tmr+0x14c>)
 800cd48:	4613      	mov	r3, r2
 800cd4a:	005b      	lsls	r3, r3, #1
 800cd4c:	4413      	add	r3, r2
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	440b      	add	r3, r1
 800cd52:	3312      	adds	r3, #18
 800cd54:	4602      	mov	r2, r0
 800cd56:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd58:	79fa      	ldrb	r2, [r7, #7]
 800cd5a:	493e      	ldr	r1, [pc, #248]	; (800ce54 <etharp_tmr+0x14c>)
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	4413      	add	r3, r2
 800cd62:	00db      	lsls	r3, r3, #3
 800cd64:	440b      	add	r3, r1
 800cd66:	3312      	adds	r3, #18
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cd6e:	d215      	bcs.n	800cd9c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd70:	79fa      	ldrb	r2, [r7, #7]
 800cd72:	4938      	ldr	r1, [pc, #224]	; (800ce54 <etharp_tmr+0x14c>)
 800cd74:	4613      	mov	r3, r2
 800cd76:	005b      	lsls	r3, r3, #1
 800cd78:	4413      	add	r3, r2
 800cd7a:	00db      	lsls	r3, r3, #3
 800cd7c:	440b      	add	r3, r1
 800cd7e:	3314      	adds	r3, #20
 800cd80:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d10f      	bne.n	800cda6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cd86:	79fa      	ldrb	r2, [r7, #7]
 800cd88:	4932      	ldr	r1, [pc, #200]	; (800ce54 <etharp_tmr+0x14c>)
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	4413      	add	r3, r2
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	440b      	add	r3, r1
 800cd94:	3312      	adds	r3, #18
 800cd96:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	d904      	bls.n	800cda6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7ff ff80 	bl	800cca4 <etharp_free_entry>
 800cda4:	e04a      	b.n	800ce3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cda6:	79fa      	ldrb	r2, [r7, #7]
 800cda8:	492a      	ldr	r1, [pc, #168]	; (800ce54 <etharp_tmr+0x14c>)
 800cdaa:	4613      	mov	r3, r2
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	4413      	add	r3, r2
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	440b      	add	r3, r1
 800cdb4:	3314      	adds	r3, #20
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2b03      	cmp	r3, #3
 800cdba:	d10a      	bne.n	800cdd2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cdbc:	79fa      	ldrb	r2, [r7, #7]
 800cdbe:	4925      	ldr	r1, [pc, #148]	; (800ce54 <etharp_tmr+0x14c>)
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	4413      	add	r3, r2
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	440b      	add	r3, r1
 800cdca:	3314      	adds	r3, #20
 800cdcc:	2204      	movs	r2, #4
 800cdce:	701a      	strb	r2, [r3, #0]
 800cdd0:	e034      	b.n	800ce3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cdd2:	79fa      	ldrb	r2, [r7, #7]
 800cdd4:	491f      	ldr	r1, [pc, #124]	; (800ce54 <etharp_tmr+0x14c>)
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	3314      	adds	r3, #20
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	d10a      	bne.n	800cdfe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cde8:	79fa      	ldrb	r2, [r7, #7]
 800cdea:	491a      	ldr	r1, [pc, #104]	; (800ce54 <etharp_tmr+0x14c>)
 800cdec:	4613      	mov	r3, r2
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	4413      	add	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	440b      	add	r3, r1
 800cdf6:	3314      	adds	r3, #20
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	701a      	strb	r2, [r3, #0]
 800cdfc:	e01e      	b.n	800ce3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cdfe:	79fa      	ldrb	r2, [r7, #7]
 800ce00:	4914      	ldr	r1, [pc, #80]	; (800ce54 <etharp_tmr+0x14c>)
 800ce02:	4613      	mov	r3, r2
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	4413      	add	r3, r2
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	440b      	add	r3, r1
 800ce0c:	3314      	adds	r3, #20
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d113      	bne.n	800ce3c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ce14:	79fa      	ldrb	r2, [r7, #7]
 800ce16:	490f      	ldr	r1, [pc, #60]	; (800ce54 <etharp_tmr+0x14c>)
 800ce18:	4613      	mov	r3, r2
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	4413      	add	r3, r2
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	440b      	add	r3, r1
 800ce22:	3308      	adds	r3, #8
 800ce24:	6818      	ldr	r0, [r3, #0]
 800ce26:	79fa      	ldrb	r2, [r7, #7]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	4a08      	ldr	r2, [pc, #32]	; (800ce54 <etharp_tmr+0x14c>)
 800ce32:	4413      	add	r3, r2
 800ce34:	3304      	adds	r3, #4
 800ce36:	4619      	mov	r1, r3
 800ce38:	f000 fe38 	bl	800daac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce3c:	79fb      	ldrb	r3, [r7, #7]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	71fb      	strb	r3, [r7, #7]
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	2b09      	cmp	r3, #9
 800ce46:	f67f af65 	bls.w	800cd14 <etharp_tmr+0xc>
      }
    }
  }
}
 800ce4a:	bf00      	nop
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	200040cc 	.word	0x200040cc

0800ce58 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b088      	sub	sp, #32
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	460b      	mov	r3, r1
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ce66:	230a      	movs	r3, #10
 800ce68:	77fb      	strb	r3, [r7, #31]
 800ce6a:	230a      	movs	r3, #10
 800ce6c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800ce6e:	230a      	movs	r3, #10
 800ce70:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800ce76:	230a      	movs	r3, #10
 800ce78:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	833b      	strh	r3, [r7, #24]
 800ce7e:	2300      	movs	r3, #0
 800ce80:	82fb      	strh	r3, [r7, #22]
 800ce82:	2300      	movs	r3, #0
 800ce84:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce86:	2300      	movs	r3, #0
 800ce88:	773b      	strb	r3, [r7, #28]
 800ce8a:	e093      	b.n	800cfb4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800ce8c:	7f3a      	ldrb	r2, [r7, #28]
 800ce8e:	4990      	ldr	r1, [pc, #576]	; (800d0d0 <etharp_find_entry+0x278>)
 800ce90:	4613      	mov	r3, r2
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	4413      	add	r3, r2
 800ce96:	00db      	lsls	r3, r3, #3
 800ce98:	440b      	add	r3, r1
 800ce9a:	3314      	adds	r3, #20
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cea0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cea4:	2b0a      	cmp	r3, #10
 800cea6:	d105      	bne.n	800ceb4 <etharp_find_entry+0x5c>
 800cea8:	7cfb      	ldrb	r3, [r7, #19]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d102      	bne.n	800ceb4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800ceae:	7f3b      	ldrb	r3, [r7, #28]
 800ceb0:	777b      	strb	r3, [r7, #29]
 800ceb2:	e07c      	b.n	800cfae <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ceb4:	7cfb      	ldrb	r3, [r7, #19]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d079      	beq.n	800cfae <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ceba:	7cfb      	ldrb	r3, [r7, #19]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d009      	beq.n	800ced4 <etharp_find_entry+0x7c>
 800cec0:	7cfb      	ldrb	r3, [r7, #19]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d806      	bhi.n	800ced4 <etharp_find_entry+0x7c>
 800cec6:	4b83      	ldr	r3, [pc, #524]	; (800d0d4 <etharp_find_entry+0x27c>)
 800cec8:	f44f 7293 	mov.w	r2, #294	; 0x126
 800cecc:	4982      	ldr	r1, [pc, #520]	; (800d0d8 <etharp_find_entry+0x280>)
 800cece:	4883      	ldr	r0, [pc, #524]	; (800d0dc <etharp_find_entry+0x284>)
 800ced0:	f002 fa62 	bl	800f398 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00f      	beq.n	800cefa <etharp_find_entry+0xa2>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6819      	ldr	r1, [r3, #0]
 800cede:	7f3a      	ldrb	r2, [r7, #28]
 800cee0:	487b      	ldr	r0, [pc, #492]	; (800d0d0 <etharp_find_entry+0x278>)
 800cee2:	4613      	mov	r3, r2
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	4413      	add	r3, r2
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	4403      	add	r3, r0
 800ceec:	3304      	adds	r3, #4
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4299      	cmp	r1, r3
 800cef2:	d102      	bne.n	800cefa <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cef4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cef8:	e0e5      	b.n	800d0c6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cefa:	7cfb      	ldrb	r3, [r7, #19]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d13b      	bne.n	800cf78 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cf00:	7f3a      	ldrb	r2, [r7, #28]
 800cf02:	4973      	ldr	r1, [pc, #460]	; (800d0d0 <etharp_find_entry+0x278>)
 800cf04:	4613      	mov	r3, r2
 800cf06:	005b      	lsls	r3, r3, #1
 800cf08:	4413      	add	r3, r2
 800cf0a:	00db      	lsls	r3, r3, #3
 800cf0c:	440b      	add	r3, r1
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d018      	beq.n	800cf46 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800cf14:	7f3a      	ldrb	r2, [r7, #28]
 800cf16:	496e      	ldr	r1, [pc, #440]	; (800d0d0 <etharp_find_entry+0x278>)
 800cf18:	4613      	mov	r3, r2
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	4413      	add	r3, r2
 800cf1e:	00db      	lsls	r3, r3, #3
 800cf20:	440b      	add	r3, r1
 800cf22:	3312      	adds	r3, #18
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	8b3a      	ldrh	r2, [r7, #24]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d840      	bhi.n	800cfae <etharp_find_entry+0x156>
            old_queue = i;
 800cf2c:	7f3b      	ldrb	r3, [r7, #28]
 800cf2e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800cf30:	7f3a      	ldrb	r2, [r7, #28]
 800cf32:	4967      	ldr	r1, [pc, #412]	; (800d0d0 <etharp_find_entry+0x278>)
 800cf34:	4613      	mov	r3, r2
 800cf36:	005b      	lsls	r3, r3, #1
 800cf38:	4413      	add	r3, r2
 800cf3a:	00db      	lsls	r3, r3, #3
 800cf3c:	440b      	add	r3, r1
 800cf3e:	3312      	adds	r3, #18
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	833b      	strh	r3, [r7, #24]
 800cf44:	e033      	b.n	800cfae <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cf46:	7f3a      	ldrb	r2, [r7, #28]
 800cf48:	4961      	ldr	r1, [pc, #388]	; (800d0d0 <etharp_find_entry+0x278>)
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	4413      	add	r3, r2
 800cf50:	00db      	lsls	r3, r3, #3
 800cf52:	440b      	add	r3, r1
 800cf54:	3312      	adds	r3, #18
 800cf56:	881b      	ldrh	r3, [r3, #0]
 800cf58:	8afa      	ldrh	r2, [r7, #22]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d827      	bhi.n	800cfae <etharp_find_entry+0x156>
            old_pending = i;
 800cf5e:	7f3b      	ldrb	r3, [r7, #28]
 800cf60:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800cf62:	7f3a      	ldrb	r2, [r7, #28]
 800cf64:	495a      	ldr	r1, [pc, #360]	; (800d0d0 <etharp_find_entry+0x278>)
 800cf66:	4613      	mov	r3, r2
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	4413      	add	r3, r2
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	440b      	add	r3, r1
 800cf70:	3312      	adds	r3, #18
 800cf72:	881b      	ldrh	r3, [r3, #0]
 800cf74:	82fb      	strh	r3, [r7, #22]
 800cf76:	e01a      	b.n	800cfae <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cf78:	7cfb      	ldrb	r3, [r7, #19]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d917      	bls.n	800cfae <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cf7e:	7f3a      	ldrb	r2, [r7, #28]
 800cf80:	4953      	ldr	r1, [pc, #332]	; (800d0d0 <etharp_find_entry+0x278>)
 800cf82:	4613      	mov	r3, r2
 800cf84:	005b      	lsls	r3, r3, #1
 800cf86:	4413      	add	r3, r2
 800cf88:	00db      	lsls	r3, r3, #3
 800cf8a:	440b      	add	r3, r1
 800cf8c:	3312      	adds	r3, #18
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	8aba      	ldrh	r2, [r7, #20]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d80b      	bhi.n	800cfae <etharp_find_entry+0x156>
            old_stable = i;
 800cf96:	7f3b      	ldrb	r3, [r7, #28]
 800cf98:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800cf9a:	7f3a      	ldrb	r2, [r7, #28]
 800cf9c:	494c      	ldr	r1, [pc, #304]	; (800d0d0 <etharp_find_entry+0x278>)
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	005b      	lsls	r3, r3, #1
 800cfa2:	4413      	add	r3, r2
 800cfa4:	00db      	lsls	r3, r3, #3
 800cfa6:	440b      	add	r3, r1
 800cfa8:	3312      	adds	r3, #18
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cfae:	7f3b      	ldrb	r3, [r7, #28]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	773b      	strb	r3, [r7, #28]
 800cfb4:	7f3b      	ldrb	r3, [r7, #28]
 800cfb6:	2b09      	cmp	r3, #9
 800cfb8:	f67f af68 	bls.w	800ce8c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cfbc:	7afb      	ldrb	r3, [r7, #11]
 800cfbe:	f003 0302 	and.w	r3, r3, #2
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d108      	bne.n	800cfd8 <etharp_find_entry+0x180>
 800cfc6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cfca:	2b0a      	cmp	r3, #10
 800cfcc:	d107      	bne.n	800cfde <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cfce:	7afb      	ldrb	r3, [r7, #11]
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d102      	bne.n	800cfde <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800cfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfdc:	e073      	b.n	800d0c6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cfde:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cfe2:	2b09      	cmp	r3, #9
 800cfe4:	dc02      	bgt.n	800cfec <etharp_find_entry+0x194>
    i = empty;
 800cfe6:	7f7b      	ldrb	r3, [r7, #29]
 800cfe8:	773b      	strb	r3, [r7, #28]
 800cfea:	e036      	b.n	800d05a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cfec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cff0:	2b09      	cmp	r3, #9
 800cff2:	dc13      	bgt.n	800d01c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800cff4:	7fbb      	ldrb	r3, [r7, #30]
 800cff6:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cff8:	7f3a      	ldrb	r2, [r7, #28]
 800cffa:	4935      	ldr	r1, [pc, #212]	; (800d0d0 <etharp_find_entry+0x278>)
 800cffc:	4613      	mov	r3, r2
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	4413      	add	r3, r2
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	440b      	add	r3, r1
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d018      	beq.n	800d03e <etharp_find_entry+0x1e6>
 800d00c:	4b31      	ldr	r3, [pc, #196]	; (800d0d4 <etharp_find_entry+0x27c>)
 800d00e:	f240 126f 	movw	r2, #367	; 0x16f
 800d012:	4933      	ldr	r1, [pc, #204]	; (800d0e0 <etharp_find_entry+0x288>)
 800d014:	4831      	ldr	r0, [pc, #196]	; (800d0dc <etharp_find_entry+0x284>)
 800d016:	f002 f9bf 	bl	800f398 <iprintf>
 800d01a:	e010      	b.n	800d03e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d01c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d020:	2b09      	cmp	r3, #9
 800d022:	dc02      	bgt.n	800d02a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800d024:	7ffb      	ldrb	r3, [r7, #31]
 800d026:	773b      	strb	r3, [r7, #28]
 800d028:	e009      	b.n	800d03e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d02a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d02e:	2b09      	cmp	r3, #9
 800d030:	dc02      	bgt.n	800d038 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d032:	7efb      	ldrb	r3, [r7, #27]
 800d034:	773b      	strb	r3, [r7, #28]
 800d036:	e002      	b.n	800d03e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800d038:	f04f 33ff 	mov.w	r3, #4294967295
 800d03c:	e043      	b.n	800d0c6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d03e:	7f3b      	ldrb	r3, [r7, #28]
 800d040:	2b09      	cmp	r3, #9
 800d042:	d906      	bls.n	800d052 <etharp_find_entry+0x1fa>
 800d044:	4b23      	ldr	r3, [pc, #140]	; (800d0d4 <etharp_find_entry+0x27c>)
 800d046:	f240 1281 	movw	r2, #385	; 0x181
 800d04a:	4926      	ldr	r1, [pc, #152]	; (800d0e4 <etharp_find_entry+0x28c>)
 800d04c:	4823      	ldr	r0, [pc, #140]	; (800d0dc <etharp_find_entry+0x284>)
 800d04e:	f002 f9a3 	bl	800f398 <iprintf>
    etharp_free_entry(i);
 800d052:	7f3b      	ldrb	r3, [r7, #28]
 800d054:	4618      	mov	r0, r3
 800d056:	f7ff fe25 	bl	800cca4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d05a:	7f3b      	ldrb	r3, [r7, #28]
 800d05c:	2b09      	cmp	r3, #9
 800d05e:	d906      	bls.n	800d06e <etharp_find_entry+0x216>
 800d060:	4b1c      	ldr	r3, [pc, #112]	; (800d0d4 <etharp_find_entry+0x27c>)
 800d062:	f240 1285 	movw	r2, #389	; 0x185
 800d066:	491f      	ldr	r1, [pc, #124]	; (800d0e4 <etharp_find_entry+0x28c>)
 800d068:	481c      	ldr	r0, [pc, #112]	; (800d0dc <etharp_find_entry+0x284>)
 800d06a:	f002 f995 	bl	800f398 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d06e:	7f3a      	ldrb	r2, [r7, #28]
 800d070:	4917      	ldr	r1, [pc, #92]	; (800d0d0 <etharp_find_entry+0x278>)
 800d072:	4613      	mov	r3, r2
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	4413      	add	r3, r2
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	440b      	add	r3, r1
 800d07c:	3314      	adds	r3, #20
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d006      	beq.n	800d092 <etharp_find_entry+0x23a>
 800d084:	4b13      	ldr	r3, [pc, #76]	; (800d0d4 <etharp_find_entry+0x27c>)
 800d086:	f240 1287 	movw	r2, #391	; 0x187
 800d08a:	4917      	ldr	r1, [pc, #92]	; (800d0e8 <etharp_find_entry+0x290>)
 800d08c:	4813      	ldr	r0, [pc, #76]	; (800d0dc <etharp_find_entry+0x284>)
 800d08e:	f002 f983 	bl	800f398 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00a      	beq.n	800d0ae <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d098:	7f3a      	ldrb	r2, [r7, #28]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6819      	ldr	r1, [r3, #0]
 800d09e:	480c      	ldr	r0, [pc, #48]	; (800d0d0 <etharp_find_entry+0x278>)
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	4413      	add	r3, r2
 800d0a6:	00db      	lsls	r3, r3, #3
 800d0a8:	4403      	add	r3, r0
 800d0aa:	3304      	adds	r3, #4
 800d0ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d0ae:	7f3a      	ldrb	r2, [r7, #28]
 800d0b0:	4907      	ldr	r1, [pc, #28]	; (800d0d0 <etharp_find_entry+0x278>)
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3312      	adds	r3, #18
 800d0be:	2200      	movs	r2, #0
 800d0c0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800d0c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3720      	adds	r7, #32
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	200040cc 	.word	0x200040cc
 800d0d4:	08011904 	.word	0x08011904
 800d0d8:	0801193c 	.word	0x0801193c
 800d0dc:	0801197c 	.word	0x0801197c
 800d0e0:	080119a4 	.word	0x080119a4
 800d0e4:	080119bc 	.word	0x080119bc
 800d0e8:	080119d0 	.word	0x080119d0

0800d0ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b088      	sub	sp, #32
 800d0f0:	af02      	add	r7, sp, #8
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
 800d0f8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d100:	2b06      	cmp	r3, #6
 800d102:	d006      	beq.n	800d112 <etharp_update_arp_entry+0x26>
 800d104:	4b48      	ldr	r3, [pc, #288]	; (800d228 <etharp_update_arp_entry+0x13c>)
 800d106:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d10a:	4948      	ldr	r1, [pc, #288]	; (800d22c <etharp_update_arp_entry+0x140>)
 800d10c:	4848      	ldr	r0, [pc, #288]	; (800d230 <etharp_update_arp_entry+0x144>)
 800d10e:	f002 f943 	bl	800f398 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d012      	beq.n	800d13e <etharp_update_arp_entry+0x52>
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00e      	beq.n	800d13e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	68f9      	ldr	r1, [r7, #12]
 800d126:	4618      	mov	r0, r3
 800d128:	f001 f8da 	bl	800e2e0 <ip4_addr_isbroadcast_u32>
 800d12c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d105      	bne.n	800d13e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d13a:	2be0      	cmp	r3, #224	; 0xe0
 800d13c:	d102      	bne.n	800d144 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d13e:	f06f 030f 	mvn.w	r3, #15
 800d142:	e06c      	b.n	800d21e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d144:	78fb      	ldrb	r3, [r7, #3]
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	4619      	mov	r1, r3
 800d14a:	68b8      	ldr	r0, [r7, #8]
 800d14c:	f7ff fe84 	bl	800ce58 <etharp_find_entry>
 800d150:	4603      	mov	r3, r0
 800d152:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d154:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	da02      	bge.n	800d162 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d160:	e05d      	b.n	800d21e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d162:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d166:	4933      	ldr	r1, [pc, #204]	; (800d234 <etharp_update_arp_entry+0x148>)
 800d168:	4613      	mov	r3, r2
 800d16a:	005b      	lsls	r3, r3, #1
 800d16c:	4413      	add	r3, r2
 800d16e:	00db      	lsls	r3, r3, #3
 800d170:	440b      	add	r3, r1
 800d172:	3314      	adds	r3, #20
 800d174:	2202      	movs	r2, #2
 800d176:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d178:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d17c:	492d      	ldr	r1, [pc, #180]	; (800d234 <etharp_update_arp_entry+0x148>)
 800d17e:	4613      	mov	r3, r2
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	4413      	add	r3, r2
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	440b      	add	r3, r1
 800d188:	3308      	adds	r3, #8
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800d18e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d192:	4613      	mov	r3, r2
 800d194:	005b      	lsls	r3, r3, #1
 800d196:	4413      	add	r3, r2
 800d198:	00db      	lsls	r3, r3, #3
 800d19a:	3308      	adds	r3, #8
 800d19c:	4a25      	ldr	r2, [pc, #148]	; (800d234 <etharp_update_arp_entry+0x148>)
 800d19e:	4413      	add	r3, r2
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	2206      	movs	r2, #6
 800d1a4:	6879      	ldr	r1, [r7, #4]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f002 f8e3 	bl	800f372 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d1ac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d1b0:	4920      	ldr	r1, [pc, #128]	; (800d234 <etharp_update_arp_entry+0x148>)
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	00db      	lsls	r3, r3, #3
 800d1ba:	440b      	add	r3, r1
 800d1bc:	3312      	adds	r3, #18
 800d1be:	2200      	movs	r2, #0
 800d1c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d1c2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d1c6:	491b      	ldr	r1, [pc, #108]	; (800d234 <etharp_update_arp_entry+0x148>)
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	005b      	lsls	r3, r3, #1
 800d1cc:	4413      	add	r3, r2
 800d1ce:	00db      	lsls	r3, r3, #3
 800d1d0:	440b      	add	r3, r1
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d021      	beq.n	800d21c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d1d8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d1dc:	4915      	ldr	r1, [pc, #84]	; (800d234 <etharp_update_arp_entry+0x148>)
 800d1de:	4613      	mov	r3, r2
 800d1e0:	005b      	lsls	r3, r3, #1
 800d1e2:	4413      	add	r3, r2
 800d1e4:	00db      	lsls	r3, r3, #3
 800d1e6:	440b      	add	r3, r1
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d1ec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d1f0:	4910      	ldr	r1, [pc, #64]	; (800d234 <etharp_update_arp_entry+0x148>)
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	005b      	lsls	r3, r3, #1
 800d1f6:	4413      	add	r3, r2
 800d1f8:	00db      	lsls	r3, r3, #3
 800d1fa:	440b      	add	r3, r1
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800d206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d20a:	9300      	str	r3, [sp, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6939      	ldr	r1, [r7, #16]
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f001 ff07 	bl	800f024 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d216:	6938      	ldr	r0, [r7, #16]
 800d218:	f7fa fc74 	bl	8007b04 <pbuf_free>
  }
  return ERR_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3718      	adds	r7, #24
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	08011904 	.word	0x08011904
 800d22c:	080119fc 	.word	0x080119fc
 800d230:	0801197c 	.word	0x0801197c
 800d234:	200040cc 	.word	0x200040cc

0800d238 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d240:	2300      	movs	r3, #0
 800d242:	73fb      	strb	r3, [r7, #15]
 800d244:	e01f      	b.n	800d286 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800d246:	7bfa      	ldrb	r2, [r7, #15]
 800d248:	4912      	ldr	r1, [pc, #72]	; (800d294 <etharp_cleanup_netif+0x5c>)
 800d24a:	4613      	mov	r3, r2
 800d24c:	005b      	lsls	r3, r3, #1
 800d24e:	4413      	add	r3, r2
 800d250:	00db      	lsls	r3, r3, #3
 800d252:	440b      	add	r3, r1
 800d254:	3314      	adds	r3, #20
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d25a:	7bbb      	ldrb	r3, [r7, #14]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00f      	beq.n	800d280 <etharp_cleanup_netif+0x48>
 800d260:	7bfa      	ldrb	r2, [r7, #15]
 800d262:	490c      	ldr	r1, [pc, #48]	; (800d294 <etharp_cleanup_netif+0x5c>)
 800d264:	4613      	mov	r3, r2
 800d266:	005b      	lsls	r3, r3, #1
 800d268:	4413      	add	r3, r2
 800d26a:	00db      	lsls	r3, r3, #3
 800d26c:	440b      	add	r3, r1
 800d26e:	3308      	adds	r3, #8
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	429a      	cmp	r2, r3
 800d276:	d103      	bne.n	800d280 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800d278:	7bfb      	ldrb	r3, [r7, #15]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7ff fd12 	bl	800cca4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	3301      	adds	r3, #1
 800d284:	73fb      	strb	r3, [r7, #15]
 800d286:	7bfb      	ldrb	r3, [r7, #15]
 800d288:	2b09      	cmp	r3, #9
 800d28a:	d9dc      	bls.n	800d246 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d28c:	bf00      	nop
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	200040cc 	.word	0x200040cc

0800d298 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d298:	b5b0      	push	{r4, r5, r7, lr}
 800d29a:	b08a      	sub	sp, #40	; 0x28
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d107      	bne.n	800d2b8 <etharp_input+0x20>
 800d2a8:	4b3d      	ldr	r3, [pc, #244]	; (800d3a0 <etharp_input+0x108>)
 800d2aa:	f44f 7222 	mov.w	r2, #648	; 0x288
 800d2ae:	493d      	ldr	r1, [pc, #244]	; (800d3a4 <etharp_input+0x10c>)
 800d2b0:	483d      	ldr	r0, [pc, #244]	; (800d3a8 <etharp_input+0x110>)
 800d2b2:	f002 f871 	bl	800f398 <iprintf>
 800d2b6:	e06f      	b.n	800d398 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	881b      	ldrh	r3, [r3, #0]
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2c8:	d10c      	bne.n	800d2e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d2ce:	2b06      	cmp	r3, #6
 800d2d0:	d108      	bne.n	800d2e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d2d6:	2b04      	cmp	r3, #4
 800d2d8:	d104      	bne.n	800d2e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	885b      	ldrh	r3, [r3, #2]
 800d2de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d2e0:	2b08      	cmp	r3, #8
 800d2e2:	d003      	beq.n	800d2ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7fa fc0d 	bl	8007b04 <pbuf_free>
    return;
 800d2ea:	e055      	b.n	800d398 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	330e      	adds	r3, #14
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	3318      	adds	r3, #24
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	3304      	adds	r3, #4
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d102      	bne.n	800d30c <etharp_input+0x74>
    for_us = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	75fb      	strb	r3, [r7, #23]
 800d30a:	e009      	b.n	800d320 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	3304      	adds	r3, #4
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	429a      	cmp	r2, r3
 800d316:	bf0c      	ite	eq
 800d318:	2301      	moveq	r3, #1
 800d31a:	2300      	movne	r3, #0
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	f103 0208 	add.w	r2, r3, #8
 800d326:	7dfb      	ldrb	r3, [r7, #23]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d001      	beq.n	800d330 <etharp_input+0x98>
 800d32c:	2301      	movs	r3, #1
 800d32e:	e000      	b.n	800d332 <etharp_input+0x9a>
 800d330:	2302      	movs	r3, #2
 800d332:	f107 010c 	add.w	r1, r7, #12
 800d336:	6838      	ldr	r0, [r7, #0]
 800d338:	f7ff fed8 	bl	800d0ec <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	88db      	ldrh	r3, [r3, #6]
 800d340:	b29b      	uxth	r3, r3
 800d342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d346:	d003      	beq.n	800d350 <etharp_input+0xb8>
 800d348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d34c:	d01e      	beq.n	800d38c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800d34e:	e020      	b.n	800d392 <etharp_input+0xfa>
    if (for_us) {
 800d350:	7dfb      	ldrb	r3, [r7, #23]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d01c      	beq.n	800d390 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800d370:	2102      	movs	r1, #2
 800d372:	9103      	str	r1, [sp, #12]
 800d374:	f107 010c 	add.w	r1, r7, #12
 800d378:	9102      	str	r1, [sp, #8]
 800d37a:	9201      	str	r2, [sp, #4]
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	462b      	mov	r3, r5
 800d380:	4622      	mov	r2, r4
 800d382:	4601      	mov	r1, r0
 800d384:	6838      	ldr	r0, [r7, #0]
 800d386:	f000 fae3 	bl	800d950 <etharp_raw>
    break;
 800d38a:	e001      	b.n	800d390 <etharp_input+0xf8>
    break;
 800d38c:	bf00      	nop
 800d38e:	e000      	b.n	800d392 <etharp_input+0xfa>
    break;
 800d390:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7fa fbb6 	bl	8007b04 <pbuf_free>
}
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bdb0      	pop	{r4, r5, r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	08011904 	.word	0x08011904
 800d3a4:	08011a54 	.word	0x08011a54
 800d3a8:	0801197c 	.word	0x0801197c

0800d3ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b086      	sub	sp, #24
 800d3b0:	af02      	add	r7, sp, #8
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d3ba:	79fa      	ldrb	r2, [r7, #7]
 800d3bc:	4944      	ldr	r1, [pc, #272]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d3be:	4613      	mov	r3, r2
 800d3c0:	005b      	lsls	r3, r3, #1
 800d3c2:	4413      	add	r3, r2
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	440b      	add	r3, r1
 800d3c8:	3314      	adds	r3, #20
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d806      	bhi.n	800d3de <etharp_output_to_arp_index+0x32>
 800d3d0:	4b40      	ldr	r3, [pc, #256]	; (800d4d4 <etharp_output_to_arp_index+0x128>)
 800d3d2:	f240 22ed 	movw	r2, #749	; 0x2ed
 800d3d6:	4940      	ldr	r1, [pc, #256]	; (800d4d8 <etharp_output_to_arp_index+0x12c>)
 800d3d8:	4840      	ldr	r0, [pc, #256]	; (800d4dc <etharp_output_to_arp_index+0x130>)
 800d3da:	f001 ffdd 	bl	800f398 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d3de:	79fa      	ldrb	r2, [r7, #7]
 800d3e0:	493b      	ldr	r1, [pc, #236]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	005b      	lsls	r3, r3, #1
 800d3e6:	4413      	add	r3, r2
 800d3e8:	00db      	lsls	r3, r3, #3
 800d3ea:	440b      	add	r3, r1
 800d3ec:	3314      	adds	r3, #20
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d153      	bne.n	800d49c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d3f4:	79fa      	ldrb	r2, [r7, #7]
 800d3f6:	4936      	ldr	r1, [pc, #216]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	4413      	add	r3, r2
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	440b      	add	r3, r1
 800d402:	3312      	adds	r3, #18
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d40a:	d919      	bls.n	800d440 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d40c:	79fa      	ldrb	r2, [r7, #7]
 800d40e:	4613      	mov	r3, r2
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	4413      	add	r3, r2
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	4a2e      	ldr	r2, [pc, #184]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d418:	4413      	add	r3, r2
 800d41a:	3304      	adds	r3, #4
 800d41c:	4619      	mov	r1, r3
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f000 fb44 	bl	800daac <etharp_request>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d138      	bne.n	800d49c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d42a:	79fa      	ldrb	r2, [r7, #7]
 800d42c:	4928      	ldr	r1, [pc, #160]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d42e:	4613      	mov	r3, r2
 800d430:	005b      	lsls	r3, r3, #1
 800d432:	4413      	add	r3, r2
 800d434:	00db      	lsls	r3, r3, #3
 800d436:	440b      	add	r3, r1
 800d438:	3314      	adds	r3, #20
 800d43a:	2203      	movs	r2, #3
 800d43c:	701a      	strb	r2, [r3, #0]
 800d43e:	e02d      	b.n	800d49c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d440:	79fa      	ldrb	r2, [r7, #7]
 800d442:	4923      	ldr	r1, [pc, #140]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d444:	4613      	mov	r3, r2
 800d446:	005b      	lsls	r3, r3, #1
 800d448:	4413      	add	r3, r2
 800d44a:	00db      	lsls	r3, r3, #3
 800d44c:	440b      	add	r3, r1
 800d44e:	3312      	adds	r3, #18
 800d450:	881b      	ldrh	r3, [r3, #0]
 800d452:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d456:	d321      	bcc.n	800d49c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d458:	79fa      	ldrb	r2, [r7, #7]
 800d45a:	4613      	mov	r3, r2
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	4413      	add	r3, r2
 800d460:	00db      	lsls	r3, r3, #3
 800d462:	4a1b      	ldr	r2, [pc, #108]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d464:	4413      	add	r3, r2
 800d466:	1d19      	adds	r1, r3, #4
 800d468:	79fa      	ldrb	r2, [r7, #7]
 800d46a:	4613      	mov	r3, r2
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	4413      	add	r3, r2
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	3308      	adds	r3, #8
 800d474:	4a16      	ldr	r2, [pc, #88]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d476:	4413      	add	r3, r2
 800d478:	3304      	adds	r3, #4
 800d47a:	461a      	mov	r2, r3
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f000 faf3 	bl	800da68 <etharp_request_dst>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d109      	bne.n	800d49c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d488:	79fa      	ldrb	r2, [r7, #7]
 800d48a:	4911      	ldr	r1, [pc, #68]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d48c:	4613      	mov	r3, r2
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	4413      	add	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	440b      	add	r3, r1
 800d496:	3314      	adds	r3, #20
 800d498:	2203      	movs	r2, #3
 800d49a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800d4a2:	79fa      	ldrb	r2, [r7, #7]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	005b      	lsls	r3, r3, #1
 800d4a8:	4413      	add	r3, r2
 800d4aa:	00db      	lsls	r3, r3, #3
 800d4ac:	3308      	adds	r3, #8
 800d4ae:	4a08      	ldr	r2, [pc, #32]	; (800d4d0 <etharp_output_to_arp_index+0x124>)
 800d4b0:	4413      	add	r3, r2
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	460a      	mov	r2, r1
 800d4be:	68b9      	ldr	r1, [r7, #8]
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f001 fdaf 	bl	800f024 <ethernet_output>
 800d4c6:	4603      	mov	r3, r0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	200040cc 	.word	0x200040cc
 800d4d4:	08011904 	.word	0x08011904
 800d4d8:	08011a74 	.word	0x08011a74
 800d4dc:	0801197c 	.word	0x0801197c

0800d4e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08a      	sub	sp, #40	; 0x28
 800d4e4:	af02      	add	r7, sp, #8
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d106      	bne.n	800d504 <etharp_output+0x24>
 800d4f6:	4b69      	ldr	r3, [pc, #420]	; (800d69c <etharp_output+0x1bc>)
 800d4f8:	f240 321b 	movw	r2, #795	; 0x31b
 800d4fc:	4968      	ldr	r1, [pc, #416]	; (800d6a0 <etharp_output+0x1c0>)
 800d4fe:	4869      	ldr	r0, [pc, #420]	; (800d6a4 <etharp_output+0x1c4>)
 800d500:	f001 ff4a 	bl	800f398 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <etharp_output+0x38>
 800d50a:	4b64      	ldr	r3, [pc, #400]	; (800d69c <etharp_output+0x1bc>)
 800d50c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d510:	4965      	ldr	r1, [pc, #404]	; (800d6a8 <etharp_output+0x1c8>)
 800d512:	4864      	ldr	r0, [pc, #400]	; (800d6a4 <etharp_output+0x1c4>)
 800d514:	f001 ff40 	bl	800f398 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d106      	bne.n	800d52c <etharp_output+0x4c>
 800d51e:	4b5f      	ldr	r3, [pc, #380]	; (800d69c <etharp_output+0x1bc>)
 800d520:	f240 321d 	movw	r2, #797	; 0x31d
 800d524:	4961      	ldr	r1, [pc, #388]	; (800d6ac <etharp_output+0x1cc>)
 800d526:	485f      	ldr	r0, [pc, #380]	; (800d6a4 <etharp_output+0x1c4>)
 800d528:	f001 ff36 	bl	800f398 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68f9      	ldr	r1, [r7, #12]
 800d532:	4618      	mov	r0, r3
 800d534:	f000 fed4 	bl	800e2e0 <ip4_addr_isbroadcast_u32>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d002      	beq.n	800d544 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d53e:	4b5c      	ldr	r3, [pc, #368]	; (800d6b0 <etharp_output+0x1d0>)
 800d540:	61fb      	str	r3, [r7, #28]
 800d542:	e09b      	b.n	800d67c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d54c:	2be0      	cmp	r3, #224	; 0xe0
 800d54e:	d118      	bne.n	800d582 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d550:	2301      	movs	r3, #1
 800d552:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d554:	2300      	movs	r3, #0
 800d556:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d558:	235e      	movs	r3, #94	; 0x5e
 800d55a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	3301      	adds	r3, #1
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d566:	b2db      	uxtb	r3, r3
 800d568:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	3302      	adds	r3, #2
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3303      	adds	r3, #3
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d57a:	f107 0310 	add.w	r3, r7, #16
 800d57e:	61fb      	str	r3, [r7, #28]
 800d580:	e07c      	b.n	800d67c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	3304      	adds	r3, #4
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	405a      	eors	r2, r3
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	3308      	adds	r3, #8
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4013      	ands	r3, r2
 800d596:	2b00      	cmp	r3, #0
 800d598:	d012      	beq.n	800d5c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d00b      	beq.n	800d5c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	330c      	adds	r3, #12
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d003      	beq.n	800d5ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	330c      	adds	r3, #12
 800d5b6:	61bb      	str	r3, [r7, #24]
 800d5b8:	e002      	b.n	800d5c0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d5ba:	f06f 0303 	mvn.w	r3, #3
 800d5be:	e069      	b.n	800d694 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d5c0:	4b3c      	ldr	r3, [pc, #240]	; (800d6b4 <etharp_output+0x1d4>)
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4a3c      	ldr	r2, [pc, #240]	; (800d6b8 <etharp_output+0x1d8>)
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	005b      	lsls	r3, r3, #1
 800d5cc:	440b      	add	r3, r1
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	4413      	add	r3, r2
 800d5d2:	3314      	adds	r3, #20
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d917      	bls.n	800d60a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	4b35      	ldr	r3, [pc, #212]	; (800d6b4 <etharp_output+0x1d4>)
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	4934      	ldr	r1, [pc, #208]	; (800d6b8 <etharp_output+0x1d8>)
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	4403      	add	r3, r0
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	440b      	add	r3, r1
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d108      	bne.n	800d60a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d5f8:	4b2e      	ldr	r3, [pc, #184]	; (800d6b4 <etharp_output+0x1d4>)
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	68b9      	ldr	r1, [r7, #8]
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f7ff fed3 	bl	800d3ac <etharp_output_to_arp_index>
 800d606:	4603      	mov	r3, r0
 800d608:	e044      	b.n	800d694 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d60a:	2300      	movs	r3, #0
 800d60c:	75fb      	strb	r3, [r7, #23]
 800d60e:	e02a      	b.n	800d666 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d610:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d614:	4928      	ldr	r1, [pc, #160]	; (800d6b8 <etharp_output+0x1d8>)
 800d616:	4613      	mov	r3, r2
 800d618:	005b      	lsls	r3, r3, #1
 800d61a:	4413      	add	r3, r2
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	440b      	add	r3, r1
 800d620:	3314      	adds	r3, #20
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	2b01      	cmp	r3, #1
 800d626:	d918      	bls.n	800d65a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d628:	69bb      	ldr	r3, [r7, #24]
 800d62a:	6819      	ldr	r1, [r3, #0]
 800d62c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d630:	4821      	ldr	r0, [pc, #132]	; (800d6b8 <etharp_output+0x1d8>)
 800d632:	4613      	mov	r3, r2
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	4413      	add	r3, r2
 800d638:	00db      	lsls	r3, r3, #3
 800d63a:	4403      	add	r3, r0
 800d63c:	3304      	adds	r3, #4
 800d63e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d640:	4299      	cmp	r1, r3
 800d642:	d10a      	bne.n	800d65a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800d644:	7dfa      	ldrb	r2, [r7, #23]
 800d646:	4b1b      	ldr	r3, [pc, #108]	; (800d6b4 <etharp_output+0x1d4>)
 800d648:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	461a      	mov	r2, r3
 800d64e:	68b9      	ldr	r1, [r7, #8]
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7ff feab 	bl	800d3ac <etharp_output_to_arp_index>
 800d656:	4603      	mov	r3, r0
 800d658:	e01c      	b.n	800d694 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d65a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	3301      	adds	r3, #1
 800d662:	b2db      	uxtb	r3, r3
 800d664:	75fb      	strb	r3, [r7, #23]
 800d666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d66a:	2b09      	cmp	r3, #9
 800d66c:	ddd0      	ble.n	800d610 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	69b9      	ldr	r1, [r7, #24]
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 f822 	bl	800d6bc <etharp_query>
 800d678:	4603      	mov	r3, r0
 800d67a:	e00b      	b.n	800d694 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800d682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	68b9      	ldr	r1, [r7, #8]
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f001 fcc9 	bl	800f024 <ethernet_output>
 800d692:	4603      	mov	r3, r0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3720      	adds	r7, #32
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	08011904 	.word	0x08011904
 800d6a0:	08011a54 	.word	0x08011a54
 800d6a4:	0801197c 	.word	0x0801197c
 800d6a8:	08011aa4 	.word	0x08011aa4
 800d6ac:	08011a44 	.word	0x08011a44
 800d6b0:	080120ac 	.word	0x080120ac
 800d6b4:	200041bc 	.word	0x200041bc
 800d6b8:	200040cc 	.word	0x200040cc

0800d6bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08c      	sub	sp, #48	; 0x30
 800d6c0:	af02      	add	r7, sp, #8
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	3325      	adds	r3, #37	; 0x25
 800d6cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d6ce:	23ff      	movs	r3, #255	; 0xff
 800d6d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	68f9      	ldr	r1, [r7, #12]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 fdfe 	bl	800e2e0 <ip4_addr_isbroadcast_u32>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10c      	bne.n	800d704 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d6f2:	2be0      	cmp	r3, #224	; 0xe0
 800d6f4:	d006      	beq.n	800d704 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d003      	beq.n	800d704 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d102      	bne.n	800d70a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d704:	f06f 030f 	mvn.w	r3, #15
 800d708:	e10f      	b.n	800d92a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	2101      	movs	r1, #1
 800d70e:	68b8      	ldr	r0, [r7, #8]
 800d710:	f7ff fba2 	bl	800ce58 <etharp_find_entry>
 800d714:	4603      	mov	r3, r0
 800d716:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800d718:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	da02      	bge.n	800d726 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800d720:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d724:	e101      	b.n	800d92a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d726:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d72a:	4982      	ldr	r1, [pc, #520]	; (800d934 <etharp_query+0x278>)
 800d72c:	4613      	mov	r3, r2
 800d72e:	005b      	lsls	r3, r3, #1
 800d730:	4413      	add	r3, r2
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	440b      	add	r3, r1
 800d736:	3314      	adds	r3, #20
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d117      	bne.n	800d76e <etharp_query+0xb2>
    is_new_entry = 1;
 800d73e:	2301      	movs	r3, #1
 800d740:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d742:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d746:	497b      	ldr	r1, [pc, #492]	; (800d934 <etharp_query+0x278>)
 800d748:	4613      	mov	r3, r2
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	4413      	add	r3, r2
 800d74e:	00db      	lsls	r3, r3, #3
 800d750:	440b      	add	r3, r1
 800d752:	3314      	adds	r3, #20
 800d754:	2201      	movs	r2, #1
 800d756:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d758:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d75c:	4975      	ldr	r1, [pc, #468]	; (800d934 <etharp_query+0x278>)
 800d75e:	4613      	mov	r3, r2
 800d760:	005b      	lsls	r3, r3, #1
 800d762:	4413      	add	r3, r2
 800d764:	00db      	lsls	r3, r3, #3
 800d766:	440b      	add	r3, r1
 800d768:	3308      	adds	r3, #8
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d76e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d772:	4970      	ldr	r1, [pc, #448]	; (800d934 <etharp_query+0x278>)
 800d774:	4613      	mov	r3, r2
 800d776:	005b      	lsls	r3, r3, #1
 800d778:	4413      	add	r3, r2
 800d77a:	00db      	lsls	r3, r3, #3
 800d77c:	440b      	add	r3, r1
 800d77e:	3314      	adds	r3, #20
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d012      	beq.n	800d7ac <etharp_query+0xf0>
 800d786:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d78a:	496a      	ldr	r1, [pc, #424]	; (800d934 <etharp_query+0x278>)
 800d78c:	4613      	mov	r3, r2
 800d78e:	005b      	lsls	r3, r3, #1
 800d790:	4413      	add	r3, r2
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	440b      	add	r3, r1
 800d796:	3314      	adds	r3, #20
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d806      	bhi.n	800d7ac <etharp_query+0xf0>
 800d79e:	4b66      	ldr	r3, [pc, #408]	; (800d938 <etharp_query+0x27c>)
 800d7a0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d7a4:	4965      	ldr	r1, [pc, #404]	; (800d93c <etharp_query+0x280>)
 800d7a6:	4866      	ldr	r0, [pc, #408]	; (800d940 <etharp_query+0x284>)
 800d7a8:	f001 fdf6 	bl	800f398 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d7ac:	6a3b      	ldr	r3, [r7, #32]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d102      	bne.n	800d7b8 <etharp_query+0xfc>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10c      	bne.n	800d7d2 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d7b8:	68b9      	ldr	r1, [r7, #8]
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f000 f976 	bl	800daac <etharp_request>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d102      	bne.n	800d7d2 <etharp_query+0x116>
      return result;
 800d7cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d7d0:	e0ab      	b.n	800d92a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d106      	bne.n	800d7e6 <etharp_query+0x12a>
 800d7d8:	4b57      	ldr	r3, [pc, #348]	; (800d938 <etharp_query+0x27c>)
 800d7da:	f240 32db 	movw	r2, #987	; 0x3db
 800d7de:	4959      	ldr	r1, [pc, #356]	; (800d944 <etharp_query+0x288>)
 800d7e0:	4857      	ldr	r0, [pc, #348]	; (800d940 <etharp_query+0x284>)
 800d7e2:	f001 fdd9 	bl	800f398 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d7e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d7ea:	4952      	ldr	r1, [pc, #328]	; (800d934 <etharp_query+0x278>)
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	005b      	lsls	r3, r3, #1
 800d7f0:	4413      	add	r3, r2
 800d7f2:	00db      	lsls	r3, r3, #3
 800d7f4:	440b      	add	r3, r1
 800d7f6:	3314      	adds	r3, #20
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d919      	bls.n	800d832 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800d7fe:	7cfa      	ldrb	r2, [r7, #19]
 800d800:	4b51      	ldr	r3, [pc, #324]	; (800d948 <etharp_query+0x28c>)
 800d802:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d804:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d808:	4613      	mov	r3, r2
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	4413      	add	r3, r2
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	3308      	adds	r3, #8
 800d812:	4a48      	ldr	r2, [pc, #288]	; (800d934 <etharp_query+0x278>)
 800d814:	4413      	add	r3, r2
 800d816:	1d1a      	adds	r2, r3, #4
 800d818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	4613      	mov	r3, r2
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	6879      	ldr	r1, [r7, #4]
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f001 fbfd 	bl	800f024 <ethernet_output>
 800d82a:	4603      	mov	r3, r0
 800d82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d830:	e079      	b.n	800d926 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d832:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d836:	493f      	ldr	r1, [pc, #252]	; (800d934 <etharp_query+0x278>)
 800d838:	4613      	mov	r3, r2
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	4413      	add	r3, r2
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	440b      	add	r3, r1
 800d842:	3314      	adds	r3, #20
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2b01      	cmp	r3, #1
 800d848:	d16d      	bne.n	800d926 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d852:	e01a      	b.n	800d88a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	895a      	ldrh	r2, [r3, #10]
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	891b      	ldrh	r3, [r3, #8]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d10a      	bne.n	800d876 <etharp_query+0x1ba>
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d006      	beq.n	800d876 <etharp_query+0x1ba>
 800d868:	4b33      	ldr	r3, [pc, #204]	; (800d938 <etharp_query+0x27c>)
 800d86a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800d86e:	4937      	ldr	r1, [pc, #220]	; (800d94c <etharp_query+0x290>)
 800d870:	4833      	ldr	r0, [pc, #204]	; (800d940 <etharp_query+0x284>)
 800d872:	f001 fd91 	bl	800f398 <iprintf>
      if (p->type != PBUF_ROM) {
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	7b1b      	ldrb	r3, [r3, #12]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d002      	beq.n	800d884 <etharp_query+0x1c8>
        copy_needed = 1;
 800d87e:	2301      	movs	r3, #1
 800d880:	61bb      	str	r3, [r7, #24]
        break;
 800d882:	e005      	b.n	800d890 <etharp_query+0x1d4>
      }
      p = p->next;
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1e1      	bne.n	800d854 <etharp_query+0x198>
    }
    if (copy_needed) {
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d017      	beq.n	800d8c6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	891b      	ldrh	r3, [r3, #8]
 800d89a:	2200      	movs	r2, #0
 800d89c:	4619      	mov	r1, r3
 800d89e:	2002      	movs	r0, #2
 800d8a0:	f7f9 fdbc 	bl	800741c <pbuf_alloc>
 800d8a4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d011      	beq.n	800d8d0 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800d8ac:	6879      	ldr	r1, [r7, #4]
 800d8ae:	69f8      	ldr	r0, [r7, #28]
 800d8b0:	f7fa fa58 	bl	8007d64 <pbuf_copy>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00a      	beq.n	800d8d0 <etharp_query+0x214>
          pbuf_free(p);
 800d8ba:	69f8      	ldr	r0, [r7, #28]
 800d8bc:	f7fa f922 	bl	8007b04 <pbuf_free>
          p = NULL;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	61fb      	str	r3, [r7, #28]
 800d8c4:	e004      	b.n	800d8d0 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d8ca:	69f8      	ldr	r0, [r7, #28]
 800d8cc:	f7fa f9cc 	bl	8007c68 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d024      	beq.n	800d920 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d8d6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d8da:	4916      	ldr	r1, [pc, #88]	; (800d934 <etharp_query+0x278>)
 800d8dc:	4613      	mov	r3, r2
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	4413      	add	r3, r2
 800d8e2:	00db      	lsls	r3, r3, #3
 800d8e4:	440b      	add	r3, r1
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00b      	beq.n	800d904 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800d8ec:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d8f0:	4910      	ldr	r1, [pc, #64]	; (800d934 <etharp_query+0x278>)
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	005b      	lsls	r3, r3, #1
 800d8f6:	4413      	add	r3, r2
 800d8f8:	00db      	lsls	r3, r3, #3
 800d8fa:	440b      	add	r3, r1
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fa f900 	bl	8007b04 <pbuf_free>
      }
      arp_table[i].q = p;
 800d904:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d908:	490a      	ldr	r1, [pc, #40]	; (800d934 <etharp_query+0x278>)
 800d90a:	4613      	mov	r3, r2
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	4413      	add	r3, r2
 800d910:	00db      	lsls	r3, r3, #3
 800d912:	440b      	add	r3, r1
 800d914:	69fa      	ldr	r2, [r7, #28]
 800d916:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d918:	2300      	movs	r3, #0
 800d91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d91e:	e002      	b.n	800d926 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d920:	23ff      	movs	r3, #255	; 0xff
 800d922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d926:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3728      	adds	r7, #40	; 0x28
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	200040cc 	.word	0x200040cc
 800d938:	08011904 	.word	0x08011904
 800d93c:	08011ab0 	.word	0x08011ab0
 800d940:	0801197c 	.word	0x0801197c
 800d944:	08011aa4 	.word	0x08011aa4
 800d948:	200041bc 	.word	0x200041bc
 800d94c:	08011ad8 	.word	0x08011ad8

0800d950 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b08a      	sub	sp, #40	; 0x28
 800d954:	af02      	add	r7, sp, #8
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
 800d95c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d95e:	2300      	movs	r3, #0
 800d960:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d106      	bne.n	800d976 <etharp_raw+0x26>
 800d968:	4b3a      	ldr	r3, [pc, #232]	; (800da54 <etharp_raw+0x104>)
 800d96a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800d96e:	493a      	ldr	r1, [pc, #232]	; (800da58 <etharp_raw+0x108>)
 800d970:	483a      	ldr	r0, [pc, #232]	; (800da5c <etharp_raw+0x10c>)
 800d972:	f001 fd11 	bl	800f398 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d976:	2200      	movs	r2, #0
 800d978:	211c      	movs	r1, #28
 800d97a:	2002      	movs	r0, #2
 800d97c:	f7f9 fd4e 	bl	800741c <pbuf_alloc>
 800d980:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d102      	bne.n	800d98e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d988:	f04f 33ff 	mov.w	r3, #4294967295
 800d98c:	e05d      	b.n	800da4a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	895b      	ldrh	r3, [r3, #10]
 800d992:	2b1b      	cmp	r3, #27
 800d994:	d806      	bhi.n	800d9a4 <etharp_raw+0x54>
 800d996:	4b2f      	ldr	r3, [pc, #188]	; (800da54 <etharp_raw+0x104>)
 800d998:	f240 4264 	movw	r2, #1124	; 0x464
 800d99c:	4930      	ldr	r1, [pc, #192]	; (800da60 <etharp_raw+0x110>)
 800d99e:	482f      	ldr	r0, [pc, #188]	; (800da5c <etharp_raw+0x10c>)
 800d9a0:	f001 fcfa 	bl	800f398 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d9aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7f8 ff0d 	bl	80067cc <lwip_htons>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d9c0:	2b06      	cmp	r3, #6
 800d9c2:	d006      	beq.n	800d9d2 <etharp_raw+0x82>
 800d9c4:	4b23      	ldr	r3, [pc, #140]	; (800da54 <etharp_raw+0x104>)
 800d9c6:	f240 426b 	movw	r2, #1131	; 0x46b
 800d9ca:	4926      	ldr	r1, [pc, #152]	; (800da64 <etharp_raw+0x114>)
 800d9cc:	4823      	ldr	r0, [pc, #140]	; (800da5c <etharp_raw+0x10c>)
 800d9ce:	f001 fce3 	bl	800f398 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	3308      	adds	r3, #8
 800d9d6:	2206      	movs	r2, #6
 800d9d8:	6839      	ldr	r1, [r7, #0]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f001 fcc9 	bl	800f372 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	3312      	adds	r3, #18
 800d9e4:	2206      	movs	r2, #6
 800d9e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f001 fcc2 	bl	800f372 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	330e      	adds	r3, #14
 800d9f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9f4:	6812      	ldr	r2, [r2, #0]
 800d9f6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	3318      	adds	r3, #24
 800d9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9fe:	6812      	ldr	r2, [r2, #0]
 800da00:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	2200      	movs	r2, #0
 800da06:	701a      	strb	r2, [r3, #0]
 800da08:	2200      	movs	r2, #0
 800da0a:	f042 0201 	orr.w	r2, r2, #1
 800da0e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	2200      	movs	r2, #0
 800da14:	f042 0208 	orr.w	r2, r2, #8
 800da18:	709a      	strb	r2, [r3, #2]
 800da1a:	2200      	movs	r2, #0
 800da1c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	2206      	movs	r2, #6
 800da22:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	2204      	movs	r2, #4
 800da28:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800da2a:	f640 0306 	movw	r3, #2054	; 0x806
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	69b9      	ldr	r1, [r7, #24]
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f001 faf4 	bl	800f024 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800da3c:	69b8      	ldr	r0, [r7, #24]
 800da3e:	f7fa f861 	bl	8007b04 <pbuf_free>
  p = NULL;
 800da42:	2300      	movs	r3, #0
 800da44:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800da46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3720      	adds	r7, #32
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	08011904 	.word	0x08011904
 800da58:	08011a54 	.word	0x08011a54
 800da5c:	0801197c 	.word	0x0801197c
 800da60:	08011af4 	.word	0x08011af4
 800da64:	08011b28 	.word	0x08011b28

0800da68 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b088      	sub	sp, #32
 800da6c:	af04      	add	r7, sp, #16
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800da84:	2201      	movs	r2, #1
 800da86:	9203      	str	r2, [sp, #12]
 800da88:	68ba      	ldr	r2, [r7, #8]
 800da8a:	9202      	str	r2, [sp, #8]
 800da8c:	4a06      	ldr	r2, [pc, #24]	; (800daa8 <etharp_request_dst+0x40>)
 800da8e:	9201      	str	r2, [sp, #4]
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	4603      	mov	r3, r0
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f7ff ff5a 	bl	800d950 <etharp_raw>
 800da9c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	080120b4 	.word	0x080120b4

0800daac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800dab6:	4a05      	ldr	r2, [pc, #20]	; (800dacc <etharp_request+0x20>)
 800dab8:	6839      	ldr	r1, [r7, #0]
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff ffd4 	bl	800da68 <etharp_request_dst>
 800dac0:	4603      	mov	r3, r0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	080120ac 	.word	0x080120ac

0800dad0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b08e      	sub	sp, #56	; 0x38
 800dad4:	af04      	add	r7, sp, #16
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800dada:	4b7a      	ldr	r3, [pc, #488]	; (800dcc4 <icmp_input+0x1f4>)
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	f003 030f 	and.w	r3, r3, #15
 800daea:	b29b      	uxth	r3, r3
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800daf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daf2:	2b13      	cmp	r3, #19
 800daf4:	f240 80d1 	bls.w	800dc9a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	895b      	ldrh	r3, [r3, #10]
 800dafc:	2b03      	cmp	r3, #3
 800dafe:	f240 80ce 	bls.w	800dc9e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800db0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800db10:	2b00      	cmp	r3, #0
 800db12:	f000 80bb 	beq.w	800dc8c <icmp_input+0x1bc>
 800db16:	2b08      	cmp	r3, #8
 800db18:	f040 80bb 	bne.w	800dc92 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800db1c:	4b6a      	ldr	r3, [pc, #424]	; (800dcc8 <icmp_input+0x1f8>)
 800db1e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db20:	4b68      	ldr	r3, [pc, #416]	; (800dcc4 <icmp_input+0x1f4>)
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db28:	2be0      	cmp	r3, #224	; 0xe0
 800db2a:	f000 80bf 	beq.w	800dcac <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800db2e:	4b65      	ldr	r3, [pc, #404]	; (800dcc4 <icmp_input+0x1f4>)
 800db30:	695a      	ldr	r2, [r3, #20]
 800db32:	4b64      	ldr	r3, [pc, #400]	; (800dcc4 <icmp_input+0x1f4>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4619      	mov	r1, r3
 800db38:	4610      	mov	r0, r2
 800db3a:	f000 fbd1 	bl	800e2e0 <ip4_addr_isbroadcast_u32>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	f040 80b5 	bne.w	800dcb0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	891b      	ldrh	r3, [r3, #8]
 800db4a:	2b07      	cmp	r3, #7
 800db4c:	f240 80a9 	bls.w	800dca2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800db50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db52:	330e      	adds	r3, #14
 800db54:	b29b      	uxth	r3, r3
 800db56:	b21b      	sxth	r3, r3
 800db58:	4619      	mov	r1, r3
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f7f9 ffae 	bl	8007abc <pbuf_header>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d046      	beq.n	800dbf4 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	891a      	ldrh	r2, [r3, #8]
 800db6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db6c:	4413      	add	r3, r2
 800db6e:	b29b      	uxth	r3, r3
 800db70:	2200      	movs	r2, #0
 800db72:	4619      	mov	r1, r3
 800db74:	2002      	movs	r0, #2
 800db76:	f7f9 fc51 	bl	800741c <pbuf_alloc>
 800db7a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 8098 	beq.w	800dcb4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	895b      	ldrh	r3, [r3, #10]
 800db88:	461a      	mov	r2, r3
 800db8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db8c:	3308      	adds	r3, #8
 800db8e:	429a      	cmp	r2, r3
 800db90:	d203      	bcs.n	800db9a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800db92:	69b8      	ldr	r0, [r7, #24]
 800db94:	f7f9 ffb6 	bl	8007b04 <pbuf_free>
        goto icmperr;
 800db98:	e08d      	b.n	800dcb6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dba2:	4618      	mov	r0, r3
 800dba4:	f001 fbe5 	bl	800f372 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800dba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbaa:	425b      	negs	r3, r3
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	b21b      	sxth	r3, r3
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	69b8      	ldr	r0, [r7, #24]
 800dbb4:	f7f9 ff82 	bl	8007abc <pbuf_header>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d009      	beq.n	800dbd2 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dbbe:	4b43      	ldr	r3, [pc, #268]	; (800dccc <icmp_input+0x1fc>)
 800dbc0:	22af      	movs	r2, #175	; 0xaf
 800dbc2:	4943      	ldr	r1, [pc, #268]	; (800dcd0 <icmp_input+0x200>)
 800dbc4:	4843      	ldr	r0, [pc, #268]	; (800dcd4 <icmp_input+0x204>)
 800dbc6:	f001 fbe7 	bl	800f398 <iprintf>
        pbuf_free(r);
 800dbca:	69b8      	ldr	r0, [r7, #24]
 800dbcc:	f7f9 ff9a 	bl	8007b04 <pbuf_free>
        goto icmperr;
 800dbd0:	e071      	b.n	800dcb6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	69b8      	ldr	r0, [r7, #24]
 800dbd6:	f7fa f8c5 	bl	8007d64 <pbuf_copy>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d003      	beq.n	800dbe8 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800dbe0:	69b8      	ldr	r0, [r7, #24]
 800dbe2:	f7f9 ff8f 	bl	8007b04 <pbuf_free>
        goto icmperr;
 800dbe6:	e066      	b.n	800dcb6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7f9 ff8b 	bl	8007b04 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	607b      	str	r3, [r7, #4]
 800dbf2:	e015      	b.n	800dc20 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800dbf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbf6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800dbfa:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800dbfe:	33f2      	adds	r3, #242	; 0xf2
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	b21b      	sxth	r3, r3
 800dc04:	4619      	mov	r1, r3
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7f9 ff58 	bl	8007abc <pbuf_header>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d006      	beq.n	800dc20 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dc12:	4b2e      	ldr	r3, [pc, #184]	; (800dccc <icmp_input+0x1fc>)
 800dc14:	22c0      	movs	r2, #192	; 0xc0
 800dc16:	4930      	ldr	r1, [pc, #192]	; (800dcd8 <icmp_input+0x208>)
 800dc18:	482e      	ldr	r0, [pc, #184]	; (800dcd4 <icmp_input+0x204>)
 800dc1a:	f001 fbbd 	bl	800f398 <iprintf>
        goto icmperr;
 800dc1e:	e04a      	b.n	800dcb6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800dc26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7f9 ff45 	bl	8007abc <pbuf_header>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d12b      	bne.n	800dc90 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dc46:	4b1f      	ldr	r3, [pc, #124]	; (800dcc4 <icmp_input+0x1f4>)
 800dc48:	691a      	ldr	r2, [r3, #16]
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2200      	movs	r2, #0
 800dc52:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	2200      	movs	r2, #0
 800dc58:	709a      	strb	r2, [r3, #2]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	22ff      	movs	r2, #255	; 0xff
 800dc62:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	2200      	movs	r2, #0
 800dc68:	729a      	strb	r2, [r3, #10]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	9302      	str	r3, [sp, #8]
 800dc72:	2301      	movs	r3, #1
 800dc74:	9301      	str	r3, [sp, #4]
 800dc76:	2300      	movs	r3, #0
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	23ff      	movs	r3, #255	; 0xff
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	69f9      	ldr	r1, [r7, #28]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 fa5b 	bl	800e13c <ip4_output_if>
 800dc86:	4603      	mov	r3, r0
 800dc88:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800dc8a:	e001      	b.n	800dc90 <icmp_input+0x1c0>
    break;
 800dc8c:	bf00      	nop
 800dc8e:	e000      	b.n	800dc92 <icmp_input+0x1c2>
    break;
 800dc90:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7f9 ff36 	bl	8007b04 <pbuf_free>
  return;
 800dc98:	e011      	b.n	800dcbe <icmp_input+0x1ee>
    goto lenerr;
 800dc9a:	bf00      	nop
 800dc9c:	e002      	b.n	800dca4 <icmp_input+0x1d4>
    goto lenerr;
 800dc9e:	bf00      	nop
 800dca0:	e000      	b.n	800dca4 <icmp_input+0x1d4>
      goto lenerr;
 800dca2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7f9 ff2d 	bl	8007b04 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dcaa:	e008      	b.n	800dcbe <icmp_input+0x1ee>
      goto icmperr;
 800dcac:	bf00      	nop
 800dcae:	e002      	b.n	800dcb6 <icmp_input+0x1e6>
      goto icmperr;
 800dcb0:	bf00      	nop
 800dcb2:	e000      	b.n	800dcb6 <icmp_input+0x1e6>
        goto icmperr;
 800dcb4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7f9 ff24 	bl	8007b04 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dcbc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dcbe:	3728      	adds	r7, #40	; 0x28
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	2000734c 	.word	0x2000734c
 800dcc8:	20007360 	.word	0x20007360
 800dccc:	08011b6c 	.word	0x08011b6c
 800dcd0:	08011ba4 	.word	0x08011ba4
 800dcd4:	08011bdc 	.word	0x08011bdc
 800dcd8:	08011c04 	.word	0x08011c04

0800dcdc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	460b      	mov	r3, r1
 800dce6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dce8:	78fb      	ldrb	r3, [r7, #3]
 800dcea:	461a      	mov	r2, r3
 800dcec:	2103      	movs	r1, #3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 f814 	bl	800dd1c <icmp_send_response>
}
 800dcf4:	bf00      	nop
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	460b      	mov	r3, r1
 800dd06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dd08:	78fb      	ldrb	r3, [r7, #3]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	210b      	movs	r1, #11
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 f804 	bl	800dd1c <icmp_send_response>
}
 800dd14:	bf00      	nop
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b08c      	sub	sp, #48	; 0x30
 800dd20:	af04      	add	r7, sp, #16
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	460b      	mov	r3, r1
 800dd26:	70fb      	strb	r3, [r7, #3]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2124      	movs	r1, #36	; 0x24
 800dd30:	2001      	movs	r0, #1
 800dd32:	f7f9 fb73 	bl	800741c <pbuf_alloc>
 800dd36:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d04c      	beq.n	800ddd8 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	895b      	ldrh	r3, [r3, #10]
 800dd42:	2b23      	cmp	r3, #35	; 0x23
 800dd44:	d806      	bhi.n	800dd54 <icmp_send_response+0x38>
 800dd46:	4b26      	ldr	r3, [pc, #152]	; (800dde0 <icmp_send_response+0xc4>)
 800dd48:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800dd4c:	4925      	ldr	r1, [pc, #148]	; (800dde4 <icmp_send_response+0xc8>)
 800dd4e:	4826      	ldr	r0, [pc, #152]	; (800dde8 <icmp_send_response+0xcc>)
 800dd50:	f001 fb22 	bl	800f398 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	78fa      	ldrb	r2, [r7, #3]
 800dd64:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	78ba      	ldrb	r2, [r7, #2]
 800dd6a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	711a      	strb	r2, [r3, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	719a      	strb	r2, [r3, #6]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	f103 0008 	add.w	r0, r3, #8
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	221c      	movs	r2, #28
 800dd8e:	4619      	mov	r1, r3
 800dd90:	f001 faef 	bl	800f372 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dd9a:	f107 030c 	add.w	r3, r7, #12
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 f824 	bl	800ddec <ip4_route>
 800dda4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d011      	beq.n	800ddd0 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	709a      	strb	r2, [r3, #2]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ddb6:	f107 020c 	add.w	r2, r7, #12
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	9302      	str	r3, [sp, #8]
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	23ff      	movs	r3, #255	; 0xff
 800ddc8:	2100      	movs	r1, #0
 800ddca:	69f8      	ldr	r0, [r7, #28]
 800ddcc:	f000 f9b6 	bl	800e13c <ip4_output_if>
  }
  pbuf_free(q);
 800ddd0:	69f8      	ldr	r0, [r7, #28]
 800ddd2:	f7f9 fe97 	bl	8007b04 <pbuf_free>
 800ddd6:	e000      	b.n	800ddda <icmp_send_response+0xbe>
    return;
 800ddd8:	bf00      	nop
}
 800ddda:	3720      	adds	r7, #32
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	08011b6c 	.word	0x08011b6c
 800dde4:	08011c38 	.word	0x08011c38
 800dde8:	08011bdc 	.word	0x08011bdc

0800ddec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ddf4:	4b30      	ldr	r3, [pc, #192]	; (800deb8 <ip4_route+0xcc>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	60fb      	str	r3, [r7, #12]
 800ddfa:	e036      	b.n	800de6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800de02:	f003 0301 	and.w	r3, r3, #1
 800de06:	b2db      	uxtb	r3, r3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d02b      	beq.n	800de64 <ip4_route+0x78>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800de12:	089b      	lsrs	r3, r3, #2
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d022      	beq.n	800de64 <ip4_route+0x78>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3304      	adds	r3, #4
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d01d      	beq.n	800de64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	3304      	adds	r3, #4
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	405a      	eors	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	3308      	adds	r3, #8
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4013      	ands	r3, r2
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d101      	bne.n	800de44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	e033      	b.n	800deac <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800de4a:	f003 0302 	and.w	r3, r3, #2
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d108      	bne.n	800de64 <ip4_route+0x78>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	330c      	adds	r3, #12
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d101      	bne.n	800de64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	e023      	b.n	800deac <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	60fb      	str	r3, [r7, #12]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d1c5      	bne.n	800ddfc <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800de70:	4b12      	ldr	r3, [pc, #72]	; (800debc <ip4_route+0xd0>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d015      	beq.n	800dea4 <ip4_route+0xb8>
 800de78:	4b10      	ldr	r3, [pc, #64]	; (800debc <ip4_route+0xd0>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00d      	beq.n	800dea4 <ip4_route+0xb8>
 800de88:	4b0c      	ldr	r3, [pc, #48]	; (800debc <ip4_route+0xd0>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800de90:	f003 0304 	and.w	r3, r3, #4
 800de94:	2b00      	cmp	r3, #0
 800de96:	d005      	beq.n	800dea4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800de98:	4b08      	ldr	r3, [pc, #32]	; (800debc <ip4_route+0xd0>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	3304      	adds	r3, #4
 800de9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dea4:	2300      	movs	r3, #0
 800dea6:	e001      	b.n	800deac <ip4_route+0xc0>
  }

  return netif_default;
 800dea8:	4b04      	ldr	r3, [pc, #16]	; (800debc <ip4_route+0xd0>)
 800deaa:	681b      	ldr	r3, [r3, #0]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr
 800deb8:	2000e40c 	.word	0x2000e40c
 800debc:	2000e410 	.word	0x2000e410

0800dec0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	091b      	lsrs	r3, r3, #4
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	2b04      	cmp	r3, #4
 800deda:	d004      	beq.n	800dee6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7f9 fe11 	bl	8007b04 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dee2:	2300      	movs	r3, #0
 800dee4:	e122      	b.n	800e12c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	b29b      	uxth	r3, r3
 800deec:	f003 030f 	and.w	r3, r3, #15
 800def0:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800def2:	897b      	ldrh	r3, [r7, #10]
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	885b      	ldrh	r3, [r3, #2]
 800defc:	b29b      	uxth	r3, r3
 800defe:	4618      	mov	r0, r3
 800df00:	f7f8 fc64 	bl	80067cc <lwip_htons>
 800df04:	4603      	mov	r3, r0
 800df06:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	891b      	ldrh	r3, [r3, #8]
 800df0c:	893a      	ldrh	r2, [r7, #8]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d204      	bcs.n	800df1c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800df12:	893b      	ldrh	r3, [r7, #8]
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7f9 fc80 	bl	800781c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	895b      	ldrh	r3, [r3, #10]
 800df20:	897a      	ldrh	r2, [r7, #10]
 800df22:	429a      	cmp	r2, r3
 800df24:	d807      	bhi.n	800df36 <ip4_input+0x76>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	891b      	ldrh	r3, [r3, #8]
 800df2a:	893a      	ldrh	r2, [r7, #8]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d802      	bhi.n	800df36 <ip4_input+0x76>
 800df30:	897b      	ldrh	r3, [r7, #10]
 800df32:	2b13      	cmp	r3, #19
 800df34:	d804      	bhi.n	800df40 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7f9 fde4 	bl	8007b04 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800df3c:	2300      	movs	r3, #0
 800df3e:	e0f5      	b.n	800e12c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	4a7b      	ldr	r2, [pc, #492]	; (800e134 <ip4_input+0x274>)
 800df46:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	4a79      	ldr	r2, [pc, #484]	; (800e134 <ip4_input+0x274>)
 800df4e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df50:	4b78      	ldr	r3, [pc, #480]	; (800e134 <ip4_input+0x274>)
 800df52:	695b      	ldr	r3, [r3, #20]
 800df54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df58:	2be0      	cmp	r3, #224	; 0xe0
 800df5a:	d112      	bne.n	800df82 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	b2db      	uxtb	r3, r3
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d007      	beq.n	800df7c <ip4_input+0xbc>
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	3304      	adds	r3, #4
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d002      	beq.n	800df7c <ip4_input+0xbc>
      netif = inp;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	613b      	str	r3, [r7, #16]
 800df7a:	e041      	b.n	800e000 <ip4_input+0x140>
    } else {
      netif = NULL;
 800df7c:	2300      	movs	r3, #0
 800df7e:	613b      	str	r3, [r7, #16]
 800df80:	e03e      	b.n	800e000 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800df82:	2301      	movs	r3, #1
 800df84:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	b2db      	uxtb	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d014      	beq.n	800dfc4 <ip4_input+0x104>
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	3304      	adds	r3, #4
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00f      	beq.n	800dfc4 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dfa4:	4b63      	ldr	r3, [pc, #396]	; (800e134 <ip4_input+0x274>)
 800dfa6:	695a      	ldr	r2, [r3, #20]
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d026      	beq.n	800e000 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dfb2:	4b60      	ldr	r3, [pc, #384]	; (800e134 <ip4_input+0x274>)
 800dfb4:	695b      	ldr	r3, [r3, #20]
 800dfb6:	6939      	ldr	r1, [r7, #16]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f000 f991 	bl	800e2e0 <ip4_addr_isbroadcast_u32>
 800dfbe:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d11d      	bne.n	800e000 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00d      	beq.n	800dfe6 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800dfca:	4b5a      	ldr	r3, [pc, #360]	; (800e134 <ip4_input+0x274>)
 800dfcc:	695b      	ldr	r3, [r3, #20]
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	2b7f      	cmp	r3, #127	; 0x7f
 800dfd2:	d102      	bne.n	800dfda <ip4_input+0x11a>
          netif = NULL;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	613b      	str	r3, [r7, #16]
          break;
 800dfd8:	e012      	b.n	800e000 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800dfde:	4b56      	ldr	r3, [pc, #344]	; (800e138 <ip4_input+0x278>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	613b      	str	r3, [r7, #16]
 800dfe4:	e002      	b.n	800dfec <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800dfec:	693a      	ldr	r2, [r7, #16]
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d102      	bne.n	800dffa <ip4_input+0x13a>
        netif = netif->next;
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d1c4      	bne.n	800df8a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e000:	4b4c      	ldr	r3, [pc, #304]	; (800e134 <ip4_input+0x274>)
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	6839      	ldr	r1, [r7, #0]
 800e006:	4618      	mov	r0, r3
 800e008:	f000 f96a 	bl	800e2e0 <ip4_addr_isbroadcast_u32>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d105      	bne.n	800e01e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e012:	4b48      	ldr	r3, [pc, #288]	; (800e134 <ip4_input+0x274>)
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e01a:	2be0      	cmp	r3, #224	; 0xe0
 800e01c:	d104      	bne.n	800e028 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7f9 fd70 	bl	8007b04 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	e081      	b.n	800e12c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d104      	bne.n	800e038 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7f9 fd68 	bl	8007b04 <pbuf_free>
    return ERR_OK;
 800e034:	2300      	movs	r3, #0
 800e036:	e079      	b.n	800e12c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	88db      	ldrh	r3, [r3, #6]
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	461a      	mov	r2, r3
 800e040:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e044:	4013      	ands	r3, r2
 800e046:	2b00      	cmp	r3, #0
 800e048:	d00b      	beq.n	800e062 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 fc8e 	bl	800e96c <ip4_reass>
 800e050:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d101      	bne.n	800e05c <ip4_input+0x19c>
      return ERR_OK;
 800e058:	2300      	movs	r3, #0
 800e05a:	e067      	b.n	800e12c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e062:	4a34      	ldr	r2, [pc, #208]	; (800e134 <ip4_input+0x274>)
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e068:	4a32      	ldr	r2, [pc, #200]	; (800e134 <ip4_input+0x274>)
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e06e:	4a31      	ldr	r2, [pc, #196]	; (800e134 <ip4_input+0x274>)
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	b29b      	uxth	r3, r3
 800e07a:	f003 030f 	and.w	r3, r3, #15
 800e07e:	b29b      	uxth	r3, r3
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	b29a      	uxth	r2, r3
 800e084:	4b2b      	ldr	r3, [pc, #172]	; (800e134 <ip4_input+0x274>)
 800e086:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800e088:	897b      	ldrh	r3, [r7, #10]
 800e08a:	425b      	negs	r3, r3
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	b21b      	sxth	r3, r3
 800e090:	4619      	mov	r1, r3
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7f9 fd12 	bl	8007abc <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	7a5b      	ldrb	r3, [r3, #9]
 800e09c:	2b06      	cmp	r3, #6
 800e09e:	d009      	beq.n	800e0b4 <ip4_input+0x1f4>
 800e0a0:	2b11      	cmp	r3, #17
 800e0a2:	d002      	beq.n	800e0aa <ip4_input+0x1ea>
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d00a      	beq.n	800e0be <ip4_input+0x1fe>
 800e0a8:	e00e      	b.n	800e0c8 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800e0aa:	6839      	ldr	r1, [r7, #0]
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7fe fce3 	bl	800ca78 <udp_input>
      break;
 800e0b2:	e028      	b.n	800e106 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800e0b4:	6839      	ldr	r1, [r7, #0]
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f7fb f96c 	bl	8009394 <tcp_input>
      break;
 800e0bc:	e023      	b.n	800e106 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800e0be:	6839      	ldr	r1, [r7, #0]
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7ff fd05 	bl	800dad0 <icmp_input>
      break;
 800e0c6:	e01e      	b.n	800e106 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e0c8:	4b1a      	ldr	r3, [pc, #104]	; (800e134 <ip4_input+0x274>)
 800e0ca:	695b      	ldr	r3, [r3, #20]
 800e0cc:	6939      	ldr	r1, [r7, #16]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f000 f906 	bl	800e2e0 <ip4_addr_isbroadcast_u32>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d112      	bne.n	800e100 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e0da:	4b16      	ldr	r3, [pc, #88]	; (800e134 <ip4_input+0x274>)
 800e0dc:	695b      	ldr	r3, [r3, #20]
 800e0de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e0e2:	2be0      	cmp	r3, #224	; 0xe0
 800e0e4:	d00c      	beq.n	800e100 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800e0e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7f9 fcf7 	bl	8007ae0 <pbuf_header_force>
        p->payload = iphdr;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e0f8:	2102      	movs	r1, #2
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f7ff fdee 	bl	800dcdc <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7f9 fcff 	bl	8007b04 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e106:	4b0b      	ldr	r3, [pc, #44]	; (800e134 <ip4_input+0x274>)
 800e108:	2200      	movs	r2, #0
 800e10a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e10c:	4b09      	ldr	r3, [pc, #36]	; (800e134 <ip4_input+0x274>)
 800e10e:	2200      	movs	r2, #0
 800e110:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e112:	4b08      	ldr	r3, [pc, #32]	; (800e134 <ip4_input+0x274>)
 800e114:	2200      	movs	r2, #0
 800e116:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e118:	4b06      	ldr	r3, [pc, #24]	; (800e134 <ip4_input+0x274>)
 800e11a:	2200      	movs	r2, #0
 800e11c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e11e:	4b05      	ldr	r3, [pc, #20]	; (800e134 <ip4_input+0x274>)
 800e120:	2200      	movs	r2, #0
 800e122:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e124:	4b03      	ldr	r3, [pc, #12]	; (800e134 <ip4_input+0x274>)
 800e126:	2200      	movs	r2, #0
 800e128:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	2000734c 	.word	0x2000734c
 800e138:	2000e40c 	.word	0x2000e40c

0800e13c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b08a      	sub	sp, #40	; 0x28
 800e140:	af04      	add	r7, sp, #16
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d009      	beq.n	800e168 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d003      	beq.n	800e162 <ip4_output_if+0x26>
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d102      	bne.n	800e168 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e164:	3304      	adds	r3, #4
 800e166:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e168:	78fa      	ldrb	r2, [r7, #3]
 800e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16c:	9302      	str	r3, [sp, #8]
 800e16e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	4613      	mov	r3, r2
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	6979      	ldr	r1, [r7, #20]
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f000 f805 	bl	800e190 <ip4_output_if_src>
 800e186:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3718      	adds	r7, #24
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b088      	sub	sp, #32
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	607a      	str	r2, [r7, #4]
 800e19c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	89db      	ldrh	r3, [r3, #14]
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d006      	beq.n	800e1b4 <ip4_output_if_src+0x24>
 800e1a6:	4b48      	ldr	r3, [pc, #288]	; (800e2c8 <ip4_output_if_src+0x138>)
 800e1a8:	f240 3233 	movw	r2, #819	; 0x333
 800e1ac:	4947      	ldr	r1, [pc, #284]	; (800e2cc <ip4_output_if_src+0x13c>)
 800e1ae:	4848      	ldr	r0, [pc, #288]	; (800e2d0 <ip4_output_if_src+0x140>)
 800e1b0:	f001 f8f2 	bl	800f398 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d060      	beq.n	800e27c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e1ba:	2314      	movs	r3, #20
 800e1bc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800e1be:	2114      	movs	r1, #20
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f7f9 fc7b 	bl	8007abc <pbuf_header>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e1cc:	f06f 0301 	mvn.w	r3, #1
 800e1d0:	e075      	b.n	800e2be <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	895b      	ldrh	r3, [r3, #10]
 800e1dc:	2b13      	cmp	r3, #19
 800e1de:	d806      	bhi.n	800e1ee <ip4_output_if_src+0x5e>
 800e1e0:	4b39      	ldr	r3, [pc, #228]	; (800e2c8 <ip4_output_if_src+0x138>)
 800e1e2:	f240 3261 	movw	r2, #865	; 0x361
 800e1e6:	493b      	ldr	r1, [pc, #236]	; (800e2d4 <ip4_output_if_src+0x144>)
 800e1e8:	4839      	ldr	r0, [pc, #228]	; (800e2d0 <ip4_output_if_src+0x140>)
 800e1ea:	f001 f8d5 	bl	800f398 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	78fa      	ldrb	r2, [r7, #3]
 800e1f2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e1fa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e204:	8b7b      	ldrh	r3, [r7, #26]
 800e206:	089b      	lsrs	r3, r3, #2
 800e208:	b29b      	uxth	r3, r3
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e210:	b2da      	uxtb	r2, r3
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e21c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	891b      	ldrh	r3, [r3, #8]
 800e222:	4618      	mov	r0, r3
 800e224:	f7f8 fad2 	bl	80067cc <lwip_htons>
 800e228:	4603      	mov	r3, r0
 800e22a:	461a      	mov	r2, r3
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	2200      	movs	r2, #0
 800e234:	719a      	strb	r2, [r3, #6]
 800e236:	2200      	movs	r2, #0
 800e238:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e23a:	4b27      	ldr	r3, [pc, #156]	; (800e2d8 <ip4_output_if_src+0x148>)
 800e23c:	881b      	ldrh	r3, [r3, #0]
 800e23e:	4618      	mov	r0, r3
 800e240:	f7f8 fac4 	bl	80067cc <lwip_htons>
 800e244:	4603      	mov	r3, r0
 800e246:	461a      	mov	r2, r3
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e24c:	4b22      	ldr	r3, [pc, #136]	; (800e2d8 <ip4_output_if_src+0x148>)
 800e24e:	881b      	ldrh	r3, [r3, #0]
 800e250:	3301      	adds	r3, #1
 800e252:	b29a      	uxth	r2, r3
 800e254:	4b20      	ldr	r3, [pc, #128]	; (800e2d8 <ip4_output_if_src+0x148>)
 800e256:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d104      	bne.n	800e268 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e25e:	4b1f      	ldr	r3, [pc, #124]	; (800e2dc <ip4_output_if_src+0x14c>)
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	60da      	str	r2, [r3, #12]
 800e266:	e003      	b.n	800e270 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	2200      	movs	r2, #0
 800e274:	729a      	strb	r2, [r3, #10]
 800e276:	2200      	movs	r2, #0
 800e278:	72da      	strb	r2, [r3, #11]
 800e27a:	e008      	b.n	800e28e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e288:	f107 0314 	add.w	r3, r7, #20
 800e28c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e290:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00c      	beq.n	800e2b0 <ip4_output_if_src+0x120>
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	891a      	ldrh	r2, [r3, #8]
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d906      	bls.n	800e2b0 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f000 fd0a 	bl	800ecc0 <ip4_frag>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	e006      	b.n	800e2be <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b2:	695b      	ldr	r3, [r3, #20]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	68f9      	ldr	r1, [r7, #12]
 800e2b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2ba:	4798      	blx	r3
 800e2bc:	4603      	mov	r3, r0
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3720      	adds	r7, #32
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	08011c64 	.word	0x08011c64
 800e2cc:	08011c98 	.word	0x08011c98
 800e2d0:	08011ca4 	.word	0x08011ca4
 800e2d4:	08011ccc 	.word	0x08011ccc
 800e2d8:	200041be 	.word	0x200041be
 800e2dc:	080120a8 	.word	0x080120a8

0800e2e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f4:	d002      	beq.n	800e2fc <ip4_addr_isbroadcast_u32+0x1c>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d101      	bne.n	800e300 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e02a      	b.n	800e356 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e306:	f003 0302 	and.w	r3, r3, #2
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e30e:	2300      	movs	r3, #0
 800e310:	e021      	b.n	800e356 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	3304      	adds	r3, #4
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d101      	bne.n	800e322 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	e019      	b.n	800e356 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e322:	68fa      	ldr	r2, [r7, #12]
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	3304      	adds	r3, #4
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	405a      	eors	r2, r3
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	3308      	adds	r3, #8
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4013      	ands	r3, r2
 800e334:	2b00      	cmp	r3, #0
 800e336:	d10d      	bne.n	800e354 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	3308      	adds	r3, #8
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	43da      	mvns	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	3308      	adds	r3, #8
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d101      	bne.n	800e354 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e350:	2301      	movs	r3, #1
 800e352:	e000      	b.n	800e356 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e354:	2300      	movs	r3, #0
  }
}
 800e356:	4618      	mov	r0, r3
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
	...

0800e364 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e36a:	2300      	movs	r3, #0
 800e36c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e36e:	4b12      	ldr	r3, [pc, #72]	; (800e3b8 <ip_reass_tmr+0x54>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e374:	e018      	b.n	800e3a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	7fdb      	ldrb	r3, [r3, #31]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00b      	beq.n	800e396 <ip_reass_tmr+0x32>
      r->timer--;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	7fdb      	ldrb	r3, [r3, #31]
 800e382:	3b01      	subs	r3, #1
 800e384:	b2da      	uxtb	r2, r3
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	e008      	b.n	800e3a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e3a0:	68b9      	ldr	r1, [r7, #8]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f80a 	bl	800e3bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1e3      	bne.n	800e376 <ip_reass_tmr+0x12>
     }
   }
}
 800e3ae:	bf00      	nop
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	200041c0 	.word	0x200041c0

0800e3bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b088      	sub	sp, #32
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d105      	bne.n	800e3de <ip_reass_free_complete_datagram+0x22>
 800e3d2:	4b45      	ldr	r3, [pc, #276]	; (800e4e8 <ip_reass_free_complete_datagram+0x12c>)
 800e3d4:	22ab      	movs	r2, #171	; 0xab
 800e3d6:	4945      	ldr	r1, [pc, #276]	; (800e4ec <ip_reass_free_complete_datagram+0x130>)
 800e3d8:	4845      	ldr	r0, [pc, #276]	; (800e4f0 <ip_reass_free_complete_datagram+0x134>)
 800e3da:	f000 ffdd 	bl	800f398 <iprintf>
  if (prev != NULL) {
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00a      	beq.n	800e3fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d005      	beq.n	800e3fa <ip_reass_free_complete_datagram+0x3e>
 800e3ee:	4b3e      	ldr	r3, [pc, #248]	; (800e4e8 <ip_reass_free_complete_datagram+0x12c>)
 800e3f0:	22ad      	movs	r2, #173	; 0xad
 800e3f2:	4940      	ldr	r1, [pc, #256]	; (800e4f4 <ip_reass_free_complete_datagram+0x138>)
 800e3f4:	483e      	ldr	r0, [pc, #248]	; (800e4f0 <ip_reass_free_complete_datagram+0x134>)
 800e3f6:	f000 ffcf 	bl	800f398 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	889b      	ldrh	r3, [r3, #4]
 800e406:	b29b      	uxth	r3, r3
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d12a      	bne.n	800e462 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	6858      	ldr	r0, [r3, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	3308      	adds	r3, #8
 800e422:	2214      	movs	r2, #20
 800e424:	4619      	mov	r1, r3
 800e426:	f000 ffa4 	bl	800f372 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e42a:	2101      	movs	r1, #1
 800e42c:	69b8      	ldr	r0, [r7, #24]
 800e42e:	f7ff fc65 	bl	800dcfc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e432:	69b8      	ldr	r0, [r7, #24]
 800e434:	f7f9 fc00 	bl	8007c38 <pbuf_clen>
 800e438:	4603      	mov	r3, r0
 800e43a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e43c:	8bfa      	ldrh	r2, [r7, #30]
 800e43e:	8a7b      	ldrh	r3, [r7, #18]
 800e440:	4413      	add	r3, r2
 800e442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e446:	db05      	blt.n	800e454 <ip_reass_free_complete_datagram+0x98>
 800e448:	4b27      	ldr	r3, [pc, #156]	; (800e4e8 <ip_reass_free_complete_datagram+0x12c>)
 800e44a:	22bc      	movs	r2, #188	; 0xbc
 800e44c:	492a      	ldr	r1, [pc, #168]	; (800e4f8 <ip_reass_free_complete_datagram+0x13c>)
 800e44e:	4828      	ldr	r0, [pc, #160]	; (800e4f0 <ip_reass_free_complete_datagram+0x134>)
 800e450:	f000 ffa2 	bl	800f398 <iprintf>
    pbufs_freed += clen;
 800e454:	8bfa      	ldrh	r2, [r7, #30]
 800e456:	8a7b      	ldrh	r3, [r7, #18]
 800e458:	4413      	add	r3, r2
 800e45a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e45c:	69b8      	ldr	r0, [r7, #24]
 800e45e:	f7f9 fb51 	bl	8007b04 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e468:	e01f      	b.n	800e4aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f7f9 fbdc 	bl	8007c38 <pbuf_clen>
 800e480:	4603      	mov	r3, r0
 800e482:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e484:	8bfa      	ldrh	r2, [r7, #30]
 800e486:	8a7b      	ldrh	r3, [r7, #18]
 800e488:	4413      	add	r3, r2
 800e48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e48e:	db05      	blt.n	800e49c <ip_reass_free_complete_datagram+0xe0>
 800e490:	4b15      	ldr	r3, [pc, #84]	; (800e4e8 <ip_reass_free_complete_datagram+0x12c>)
 800e492:	22cc      	movs	r2, #204	; 0xcc
 800e494:	4918      	ldr	r1, [pc, #96]	; (800e4f8 <ip_reass_free_complete_datagram+0x13c>)
 800e496:	4816      	ldr	r0, [pc, #88]	; (800e4f0 <ip_reass_free_complete_datagram+0x134>)
 800e498:	f000 ff7e 	bl	800f398 <iprintf>
    pbufs_freed += clen;
 800e49c:	8bfa      	ldrh	r2, [r7, #30]
 800e49e:	8a7b      	ldrh	r3, [r7, #18]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f7f9 fb2d 	bl	8007b04 <pbuf_free>
  while (p != NULL) {
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1dc      	bne.n	800e46a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f8c2 	bl	800e63c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800e4b8:	4b10      	ldr	r3, [pc, #64]	; (800e4fc <ip_reass_free_complete_datagram+0x140>)
 800e4ba:	881b      	ldrh	r3, [r3, #0]
 800e4bc:	8bfa      	ldrh	r2, [r7, #30]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d905      	bls.n	800e4ce <ip_reass_free_complete_datagram+0x112>
 800e4c2:	4b09      	ldr	r3, [pc, #36]	; (800e4e8 <ip_reass_free_complete_datagram+0x12c>)
 800e4c4:	22d2      	movs	r2, #210	; 0xd2
 800e4c6:	490e      	ldr	r1, [pc, #56]	; (800e500 <ip_reass_free_complete_datagram+0x144>)
 800e4c8:	4809      	ldr	r0, [pc, #36]	; (800e4f0 <ip_reass_free_complete_datagram+0x134>)
 800e4ca:	f000 ff65 	bl	800f398 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800e4ce:	4b0b      	ldr	r3, [pc, #44]	; (800e4fc <ip_reass_free_complete_datagram+0x140>)
 800e4d0:	881a      	ldrh	r2, [r3, #0]
 800e4d2:	8bfb      	ldrh	r3, [r7, #30]
 800e4d4:	1ad3      	subs	r3, r2, r3
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	4b08      	ldr	r3, [pc, #32]	; (800e4fc <ip_reass_free_complete_datagram+0x140>)
 800e4da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e4dc:	8bfb      	ldrh	r3, [r7, #30]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3720      	adds	r7, #32
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	08011cfc 	.word	0x08011cfc
 800e4ec:	08011d38 	.word	0x08011d38
 800e4f0:	08011d44 	.word	0x08011d44
 800e4f4:	08011d6c 	.word	0x08011d6c
 800e4f8:	08011d80 	.word	0x08011d80
 800e4fc:	200041c4 	.word	0x200041c4
 800e500:	08011da0 	.word	0x08011da0

0800e504 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08a      	sub	sp, #40	; 0x28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e50e:	2300      	movs	r3, #0
 800e510:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e512:	2300      	movs	r3, #0
 800e514:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e516:	2300      	movs	r3, #0
 800e518:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e51a:	2300      	movs	r3, #0
 800e51c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e522:	4b28      	ldr	r3, [pc, #160]	; (800e5c4 <ip_reass_remove_oldest_datagram+0xc0>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e528:	e030      	b.n	800e58c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	695a      	ldr	r2, [r3, #20]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	429a      	cmp	r2, r3
 800e534:	d10c      	bne.n	800e550 <ip_reass_remove_oldest_datagram+0x4c>
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	699a      	ldr	r2, [r3, #24]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	691b      	ldr	r3, [r3, #16]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d106      	bne.n	800e550 <ip_reass_remove_oldest_datagram+0x4c>
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	899a      	ldrh	r2, [r3, #12]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	889b      	ldrh	r3, [r3, #4]
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d014      	beq.n	800e57a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	3301      	adds	r3, #1
 800e554:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d104      	bne.n	800e566 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	61bb      	str	r3, [r7, #24]
 800e564:	e009      	b.n	800e57a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e568:	7fda      	ldrb	r2, [r3, #31]
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	7fdb      	ldrb	r3, [r3, #31]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d803      	bhi.n	800e57a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e584:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d1cb      	bne.n	800e52a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e592:	6a3b      	ldr	r3, [r7, #32]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d008      	beq.n	800e5aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e598:	69b9      	ldr	r1, [r7, #24]
 800e59a:	6a38      	ldr	r0, [r7, #32]
 800e59c:	f7ff ff0e 	bl	800e3bc <ip_reass_free_complete_datagram>
 800e5a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e5a2:	697a      	ldr	r2, [r7, #20]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e5aa:	697a      	ldr	r2, [r7, #20]
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	da02      	bge.n	800e5b8 <ip_reass_remove_oldest_datagram+0xb4>
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	dcac      	bgt.n	800e512 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e5b8:	697b      	ldr	r3, [r7, #20]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3728      	adds	r7, #40	; 0x28
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	200041c0 	.word	0x200041c0

0800e5c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e5d2:	2004      	movs	r0, #4
 800e5d4:	f7f8 fce8 	bl	8006fa8 <memp_malloc>
 800e5d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d110      	bne.n	800e602 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff ff8e 	bl	800e504 <ip_reass_remove_oldest_datagram>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	dc03      	bgt.n	800e5f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e5f0:	2004      	movs	r0, #4
 800e5f2:	f7f8 fcd9 	bl	8006fa8 <memp_malloc>
 800e5f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d101      	bne.n	800e602 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	e016      	b.n	800e630 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e602:	2220      	movs	r2, #32
 800e604:	2100      	movs	r1, #0
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f000 febe 	bl	800f388 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2203      	movs	r2, #3
 800e610:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e612:	4b09      	ldr	r3, [pc, #36]	; (800e638 <ip_reass_enqueue_new_datagram+0x70>)
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e61a:	4a07      	ldr	r2, [pc, #28]	; (800e638 <ip_reass_enqueue_new_datagram+0x70>)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3308      	adds	r3, #8
 800e624:	2214      	movs	r2, #20
 800e626:	6879      	ldr	r1, [r7, #4]
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 fea2 	bl	800f372 <memcpy>
  return ipr;
 800e62e:	68fb      	ldr	r3, [r7, #12]
}
 800e630:	4618      	mov	r0, r3
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	200041c0 	.word	0x200041c0

0800e63c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e646:	4b10      	ldr	r3, [pc, #64]	; (800e688 <ip_reass_dequeue_datagram+0x4c>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d104      	bne.n	800e65a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a0c      	ldr	r2, [pc, #48]	; (800e688 <ip_reass_dequeue_datagram+0x4c>)
 800e656:	6013      	str	r3, [r2, #0]
 800e658:	e00d      	b.n	800e676 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d106      	bne.n	800e66e <ip_reass_dequeue_datagram+0x32>
 800e660:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <ip_reass_dequeue_datagram+0x50>)
 800e662:	f240 1245 	movw	r2, #325	; 0x145
 800e666:	490a      	ldr	r1, [pc, #40]	; (800e690 <ip_reass_dequeue_datagram+0x54>)
 800e668:	480a      	ldr	r0, [pc, #40]	; (800e694 <ip_reass_dequeue_datagram+0x58>)
 800e66a:	f000 fe95 	bl	800f398 <iprintf>
    prev->next = ipr->next;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681a      	ldr	r2, [r3, #0]
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e676:	6879      	ldr	r1, [r7, #4]
 800e678:	2004      	movs	r0, #4
 800e67a:	f7f8 fce7 	bl	800704c <memp_free>
}
 800e67e:	bf00      	nop
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	200041c0 	.word	0x200041c0
 800e68c:	08011cfc 	.word	0x08011cfc
 800e690:	08011dbc 	.word	0x08011dbc
 800e694:	08011d44 	.word	0x08011d44

0800e698 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b08c      	sub	sp, #48	; 0x30
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	885b      	ldrh	r3, [r3, #2]
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7f8 f887 	bl	80067cc <lwip_htons>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	f003 030f 	and.w	r3, r3, #15
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	88db      	ldrh	r3, [r3, #6]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7f8 f875 	bl	80067cc <lwip_htons>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	00db      	lsls	r3, r3, #3
 800e6ec:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	701a      	strb	r2, [r3, #0]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	705a      	strb	r2, [r3, #1]
 800e6fe:	2200      	movs	r2, #0
 800e700:	709a      	strb	r2, [r3, #2]
 800e702:	2200      	movs	r2, #0
 800e704:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	8b3a      	ldrh	r2, [r7, #24]
 800e70a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800e70c:	8b3a      	ldrh	r2, [r7, #24]
 800e70e:	8b7b      	ldrh	r3, [r7, #26]
 800e710:	4413      	add	r3, r2
 800e712:	b29a      	uxth	r2, r3
 800e714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e716:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	627b      	str	r3, [r7, #36]	; 0x24
 800e71e:	e061      	b.n	800e7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800e726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e728:	889b      	ldrh	r3, [r3, #4]
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	889b      	ldrh	r3, [r3, #4]
 800e730:	b29b      	uxth	r3, r3
 800e732:	429a      	cmp	r2, r3
 800e734:	d232      	bcs.n	800e79c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e73a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d01f      	beq.n	800e782 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	889b      	ldrh	r3, [r3, #4]
 800e746:	b29a      	uxth	r2, r3
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	88db      	ldrh	r3, [r3, #6]
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	429a      	cmp	r2, r3
 800e750:	f0c0 80e3 	bcc.w	800e91a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800e754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e756:	88db      	ldrh	r3, [r3, #6]
 800e758:	b29a      	uxth	r2, r3
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	889b      	ldrh	r3, [r3, #4]
 800e75e:	b29b      	uxth	r3, r3
 800e760:	429a      	cmp	r2, r3
 800e762:	f200 80da 	bhi.w	800e91a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76e:	88db      	ldrh	r3, [r3, #6]
 800e770:	b29a      	uxth	r2, r3
 800e772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e774:	889b      	ldrh	r3, [r3, #4]
 800e776:	b29b      	uxth	r3, r3
 800e778:	429a      	cmp	r2, r3
 800e77a:	d037      	beq.n	800e7ec <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e780:	e034      	b.n	800e7ec <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	88db      	ldrh	r3, [r3, #6]
 800e786:	b29a      	uxth	r2, r3
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	889b      	ldrh	r3, [r3, #4]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	429a      	cmp	r2, r3
 800e790:	f200 80c5 	bhi.w	800e91e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	68ba      	ldr	r2, [r7, #8]
 800e798:	605a      	str	r2, [r3, #4]
      break;
 800e79a:	e027      	b.n	800e7ec <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800e79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79e:	889b      	ldrh	r3, [r3, #4]
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	889b      	ldrh	r3, [r3, #4]
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	f000 80ba 	beq.w	800e922 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	889b      	ldrh	r3, [r3, #4]
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	88db      	ldrh	r3, [r3, #6]
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	f0c0 80b3 	bcc.w	800e926 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d009      	beq.n	800e7da <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800e7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c8:	88db      	ldrh	r3, [r3, #6]
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	889b      	ldrh	r3, [r3, #4]
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d001      	beq.n	800e7da <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d19a      	bne.n	800e720 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800e7ea:	e000      	b.n	800e7ee <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800e7ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d12d      	bne.n	800e850 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d01c      	beq.n	800e834 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fc:	88db      	ldrh	r3, [r3, #6]
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	889b      	ldrh	r3, [r3, #4]
 800e804:	b29b      	uxth	r3, r3
 800e806:	429a      	cmp	r2, r3
 800e808:	d906      	bls.n	800e818 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800e80a:	4b51      	ldr	r3, [pc, #324]	; (800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e80c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800e810:	4950      	ldr	r1, [pc, #320]	; (800e954 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e812:	4851      	ldr	r0, [pc, #324]	; (800e958 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e814:	f000 fdc0 	bl	800f398 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	88db      	ldrh	r3, [r3, #6]
 800e822:	b29a      	uxth	r2, r3
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	889b      	ldrh	r3, [r3, #4]
 800e828:	b29b      	uxth	r3, r3
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d010      	beq.n	800e850 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	623b      	str	r3, [r7, #32]
 800e832:	e00d      	b.n	800e850 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d006      	beq.n	800e84a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800e83c:	4b44      	ldr	r3, [pc, #272]	; (800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e83e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800e842:	4946      	ldr	r1, [pc, #280]	; (800e95c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e844:	4844      	ldr	r0, [pc, #272]	; (800e958 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e846:	f000 fda7 	bl	800f398 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d105      	bne.n	800e862 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	7f9b      	ldrb	r3, [r3, #30]
 800e85a:	f003 0301 	and.w	r3, r3, #1
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d059      	beq.n	800e916 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d04f      	beq.n	800e908 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d006      	beq.n	800e87e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	889b      	ldrh	r3, [r3, #4]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d002      	beq.n	800e884 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	623b      	str	r3, [r7, #32]
 800e882:	e041      	b.n	800e908 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e88e:	e012      	b.n	800e8b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e898:	88db      	ldrh	r3, [r3, #6]
 800e89a:	b29a      	uxth	r2, r3
 800e89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89e:	889b      	ldrh	r3, [r3, #4]
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d002      	beq.n	800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	623b      	str	r3, [r7, #32]
            break;
 800e8aa:	e007      	b.n	800e8bc <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1e9      	bne.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e8bc:	6a3b      	ldr	r3, [r7, #32]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d022      	beq.n	800e908 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d106      	bne.n	800e8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800e8ca:	4b21      	ldr	r3, [pc, #132]	; (800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e8cc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800e8d0:	4923      	ldr	r1, [pc, #140]	; (800e960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e8d2:	4821      	ldr	r0, [pc, #132]	; (800e958 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e8d4:	f000 fd60 	bl	800f398 <iprintf>
          LWIP_ASSERT("sanity check",
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d106      	bne.n	800e8f2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800e8e4:	4b1a      	ldr	r3, [pc, #104]	; (800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e8e6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800e8ea:	491d      	ldr	r1, [pc, #116]	; (800e960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e8ec:	481a      	ldr	r0, [pc, #104]	; (800e958 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e8ee:	f000 fd53 	bl	800f398 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d006      	beq.n	800e908 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800e8fa:	4b15      	ldr	r3, [pc, #84]	; (800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e8fc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800e900:	4918      	ldr	r1, [pc, #96]	; (800e964 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e902:	4815      	ldr	r0, [pc, #84]	; (800e958 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e904:	f000 fd48 	bl	800f398 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	bf14      	ite	ne
 800e90e:	2301      	movne	r3, #1
 800e910:	2300      	moveq	r3, #0
 800e912:	b2db      	uxtb	r3, r3
 800e914:	e018      	b.n	800e948 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e916:	2300      	movs	r3, #0
 800e918:	e016      	b.n	800e948 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800e91a:	bf00      	nop
 800e91c:	e004      	b.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800e91e:	bf00      	nop
 800e920:	e002      	b.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800e922:	bf00      	nop
 800e924:	e000      	b.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800e926:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800e928:	68b8      	ldr	r0, [r7, #8]
 800e92a:	f7f9 f985 	bl	8007c38 <pbuf_clen>
 800e92e:	4603      	mov	r3, r0
 800e930:	461a      	mov	r2, r3
 800e932:	4b0d      	ldr	r3, [pc, #52]	; (800e968 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e934:	881b      	ldrh	r3, [r3, #0]
 800e936:	1a9b      	subs	r3, r3, r2
 800e938:	b29a      	uxth	r2, r3
 800e93a:	4b0b      	ldr	r3, [pc, #44]	; (800e968 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e93c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800e93e:	68b8      	ldr	r0, [r7, #8]
 800e940:	f7f9 f8e0 	bl	8007b04 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e944:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3730      	adds	r7, #48	; 0x30
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	08011cfc 	.word	0x08011cfc
 800e954:	08011dd8 	.word	0x08011dd8
 800e958:	08011d44 	.word	0x08011d44
 800e95c:	08011df8 	.word	0x08011df8
 800e960:	08011e30 	.word	0x08011e30
 800e964:	08011e40 	.word	0x08011e40
 800e968:	200041c4 	.word	0x200041c4

0800e96c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b08e      	sub	sp, #56	; 0x38
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800e97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	f003 030f 	and.w	r3, r3, #15
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	2b14      	cmp	r3, #20
 800e986:	f040 8131 	bne.w	800ebec <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	88db      	ldrh	r3, [r3, #6]
 800e98e:	b29b      	uxth	r3, r3
 800e990:	4618      	mov	r0, r3
 800e992:	f7f7 ff1b 	bl	80067cc <lwip_htons>
 800e996:	4603      	mov	r3, r0
 800e998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	885b      	ldrh	r3, [r3, #2]
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7f7 ff0f 	bl	80067cc <lwip_htons>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	f003 030f 	and.w	r3, r3, #15
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f7f9 f936 	bl	8007c38 <pbuf_clen>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e9d0:	4b8d      	ldr	r3, [pc, #564]	; (800ec08 <ip4_reass+0x29c>)
 800e9d2:	881b      	ldrh	r3, [r3, #0]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9d8:	4413      	add	r3, r2
 800e9da:	2b0a      	cmp	r3, #10
 800e9dc:	dd10      	ble.n	800ea00 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e9de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9e4:	f7ff fd8e 	bl	800e504 <ip_reass_remove_oldest_datagram>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f000 8100 	beq.w	800ebf0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e9f0:	4b85      	ldr	r3, [pc, #532]	; (800ec08 <ip4_reass+0x29c>)
 800e9f2:	881b      	ldrh	r3, [r3, #0]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9f8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e9fa:	2b0a      	cmp	r3, #10
 800e9fc:	f300 80f8 	bgt.w	800ebf0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ea00:	4b82      	ldr	r3, [pc, #520]	; (800ec0c <ip4_reass+0x2a0>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	633b      	str	r3, [r7, #48]	; 0x30
 800ea06:	e015      	b.n	800ea34 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ea08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0a:	695a      	ldr	r2, [r3, #20]
 800ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d10c      	bne.n	800ea2e <ip4_reass+0xc2>
 800ea14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea16:	699a      	ldr	r2, [r3, #24]
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d106      	bne.n	800ea2e <ip4_reass+0xc2>
 800ea20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea22:	899a      	ldrh	r2, [r3, #12]
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	889b      	ldrh	r3, [r3, #4]
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d006      	beq.n	800ea3c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ea2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	633b      	str	r3, [r7, #48]	; 0x30
 800ea34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d1e6      	bne.n	800ea08 <ip4_reass+0x9c>
 800ea3a:	e000      	b.n	800ea3e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ea3c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d109      	bne.n	800ea58 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ea44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea46:	4619      	mov	r1, r3
 800ea48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea4a:	f7ff fdbd 	bl	800e5c8 <ip_reass_enqueue_new_datagram>
 800ea4e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ea50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d11c      	bne.n	800ea90 <ip4_reass+0x124>
      goto nullreturn;
 800ea56:	e0ce      	b.n	800ebf6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5a:	88db      	ldrh	r3, [r3, #6]
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7f7 feb4 	bl	80067cc <lwip_htons>
 800ea64:	4603      	mov	r3, r0
 800ea66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d110      	bne.n	800ea90 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea70:	89db      	ldrh	r3, [r3, #14]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7f7 feaa 	bl	80067cc <lwip_htons>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d006      	beq.n	800ea90 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ea82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea84:	3308      	adds	r3, #8
 800ea86:	2214      	movs	r2, #20
 800ea88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f000 fc71 	bl	800f372 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ea90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea92:	88db      	ldrh	r3, [r3, #6]
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	f003 0320 	and.w	r3, r3, #32
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	bf0c      	ite	eq
 800ea9e:	2301      	moveq	r3, #1
 800eaa0:	2300      	movne	r3, #0
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00e      	beq.n	800eaca <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800eaac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eaae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eab0:	4413      	add	r3, r2
 800eab2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800eab4:	8b7a      	ldrh	r2, [r7, #26]
 800eab6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eab8:	429a      	cmp	r2, r3
 800eaba:	f0c0 8099 	bcc.w	800ebf0 <ip4_reass+0x284>
 800eabe:	8b7b      	ldrh	r3, [r7, #26]
 800eac0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800eac4:	4293      	cmp	r3, r2
 800eac6:	f200 8093 	bhi.w	800ebf0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800eaca:	69fa      	ldr	r2, [r7, #28]
 800eacc:	6879      	ldr	r1, [r7, #4]
 800eace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ead0:	f7ff fde2 	bl	800e698 <ip_reass_chain_frag_into_datagram_and_validate>
 800ead4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eadc:	f000 808a 	beq.w	800ebf4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eae0:	4b49      	ldr	r3, [pc, #292]	; (800ec08 <ip4_reass+0x29c>)
 800eae2:	881a      	ldrh	r2, [r3, #0]
 800eae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eae6:	4413      	add	r3, r2
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	4b47      	ldr	r3, [pc, #284]	; (800ec08 <ip4_reass+0x29c>)
 800eaec:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00d      	beq.n	800eb10 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800eaf4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eaf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaf8:	4413      	add	r3, r2
 800eafa:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafe:	8a7a      	ldrh	r2, [r7, #18]
 800eb00:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb04:	7f9b      	ldrb	r3, [r3, #30]
 800eb06:	f043 0301 	orr.w	r3, r3, #1
 800eb0a:	b2da      	uxtb	r2, r3
 800eb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d168      	bne.n	800ebe8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800eb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb18:	8b9b      	ldrh	r3, [r3, #28]
 800eb1a:	3314      	adds	r3, #20
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb20:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800eb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800eb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb36:	3308      	adds	r3, #8
 800eb38:	2214      	movs	r2, #20
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb3e:	f000 fc18 	bl	800f372 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800eb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb44:	8b9b      	ldrh	r3, [r3, #28]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7f7 fe40 	bl	80067cc <lwip_htons>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	461a      	mov	r2, r3
 800eb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb52:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	2200      	movs	r2, #0
 800eb58:	719a      	strb	r2, [r3, #6]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	2200      	movs	r2, #0
 800eb62:	729a      	strb	r2, [r3, #10]
 800eb64:	2200      	movs	r2, #0
 800eb66:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eb6e:	e00e      	b.n	800eb8e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800eb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800eb76:	f06f 0113 	mvn.w	r1, #19
 800eb7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb7c:	f7f8 ff9e 	bl	8007abc <pbuf_header>
      pbuf_cat(p, r);
 800eb80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7f9 f898 	bl	8007cb8 <pbuf_cat>
      r = iprh->next_pbuf;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1ed      	bne.n	800eb70 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eb94:	4b1d      	ldr	r3, [pc, #116]	; (800ec0c <ip4_reass+0x2a0>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d102      	bne.n	800eba4 <ip4_reass+0x238>
      ipr_prev = NULL;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eba2:	e010      	b.n	800ebc6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eba4:	4b19      	ldr	r3, [pc, #100]	; (800ec0c <ip4_reass+0x2a0>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebaa:	e007      	b.n	800ebbc <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800ebac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d006      	beq.n	800ebc4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ebb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1f4      	bne.n	800ebac <ip4_reass+0x240>
 800ebc2:	e000      	b.n	800ebc6 <ip4_reass+0x25a>
          break;
 800ebc4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ebc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebca:	f7ff fd37 	bl	800e63c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7f9 f832 	bl	8007c38 <pbuf_clen>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	4b0b      	ldr	r3, [pc, #44]	; (800ec08 <ip4_reass+0x29c>)
 800ebda:	881b      	ldrh	r3, [r3, #0]
 800ebdc:	1a9b      	subs	r3, r3, r2
 800ebde:	b29a      	uxth	r2, r3
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <ip4_reass+0x29c>)
 800ebe2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	e00a      	b.n	800ebfe <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e008      	b.n	800ebfe <ip4_reass+0x292>
    goto nullreturn;
 800ebec:	bf00      	nop
 800ebee:	e002      	b.n	800ebf6 <ip4_reass+0x28a>

nullreturn:
 800ebf0:	bf00      	nop
 800ebf2:	e000      	b.n	800ebf6 <ip4_reass+0x28a>
    goto nullreturn;
 800ebf4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f7f8 ff84 	bl	8007b04 <pbuf_free>
  return NULL;
 800ebfc:	2300      	movs	r3, #0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3738      	adds	r7, #56	; 0x38
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	200041c4 	.word	0x200041c4
 800ec0c:	200041c0 	.word	0x200041c0

0800ec10 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800ec14:	2005      	movs	r0, #5
 800ec16:	f7f8 f9c7 	bl	8006fa8 <memp_malloc>
 800ec1a:	4603      	mov	r3, r0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d106      	bne.n	800ec3c <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec2e:	4b07      	ldr	r3, [pc, #28]	; (800ec4c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec30:	f240 22ae 	movw	r2, #686	; 0x2ae
 800ec34:	4906      	ldr	r1, [pc, #24]	; (800ec50 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec36:	4807      	ldr	r0, [pc, #28]	; (800ec54 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec38:	f000 fbae 	bl	800f398 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec3c:	6879      	ldr	r1, [r7, #4]
 800ec3e:	2005      	movs	r0, #5
 800ec40:	f7f8 fa04 	bl	800704c <memp_free>
}
 800ec44:	bf00      	nop
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	08011cfc 	.word	0x08011cfc
 800ec50:	08011e64 	.word	0x08011e64
 800ec54:	08011d44 	.word	0x08011d44

0800ec58 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d106      	bne.n	800ec78 <ipfrag_free_pbuf_custom+0x20>
 800ec6a:	4b11      	ldr	r3, [pc, #68]	; (800ecb0 <ipfrag_free_pbuf_custom+0x58>)
 800ec6c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800ec70:	4910      	ldr	r1, [pc, #64]	; (800ecb4 <ipfrag_free_pbuf_custom+0x5c>)
 800ec72:	4811      	ldr	r0, [pc, #68]	; (800ecb8 <ipfrag_free_pbuf_custom+0x60>)
 800ec74:	f000 fb90 	bl	800f398 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d006      	beq.n	800ec8e <ipfrag_free_pbuf_custom+0x36>
 800ec80:	4b0b      	ldr	r3, [pc, #44]	; (800ecb0 <ipfrag_free_pbuf_custom+0x58>)
 800ec82:	f240 22b9 	movw	r2, #697	; 0x2b9
 800ec86:	490d      	ldr	r1, [pc, #52]	; (800ecbc <ipfrag_free_pbuf_custom+0x64>)
 800ec88:	480b      	ldr	r0, [pc, #44]	; (800ecb8 <ipfrag_free_pbuf_custom+0x60>)
 800ec8a:	f000 fb85 	bl	800f398 <iprintf>
  if (pcr->original != NULL) {
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d004      	beq.n	800eca0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	695b      	ldr	r3, [r3, #20]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7f8 ff32 	bl	8007b04 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f7ff ffbd 	bl	800ec20 <ip_frag_free_pbuf_custom_ref>
}
 800eca6:	bf00      	nop
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	08011cfc 	.word	0x08011cfc
 800ecb4:	08011e70 	.word	0x08011e70
 800ecb8:	08011d44 	.word	0x08011d44
 800ecbc:	08011e7c 	.word	0x08011e7c

0800ecc0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b092      	sub	sp, #72	; 0x48
 800ecc4:	af02      	add	r7, sp, #8
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800eccc:	2300      	movs	r3, #0
 800ecce:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ecd4:	3b14      	subs	r3, #20
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	da00      	bge.n	800ecdc <ip4_frag+0x1c>
 800ecda:	3307      	adds	r3, #7
 800ecdc:	10db      	asrs	r3, r3, #3
 800ecde:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ece0:	2314      	movs	r3, #20
 800ece2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecec:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800ecee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	f003 030f 	and.w	r3, r3, #15
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	2b14      	cmp	r3, #20
 800ecfa:	d009      	beq.n	800ed10 <ip4_frag+0x50>
 800ecfc:	4b79      	ldr	r3, [pc, #484]	; (800eee4 <ip4_frag+0x224>)
 800ecfe:	f240 22e1 	movw	r2, #737	; 0x2e1
 800ed02:	4979      	ldr	r1, [pc, #484]	; (800eee8 <ip4_frag+0x228>)
 800ed04:	4879      	ldr	r0, [pc, #484]	; (800eeec <ip4_frag+0x22c>)
 800ed06:	f000 fb47 	bl	800f398 <iprintf>
 800ed0a:	f06f 0305 	mvn.w	r3, #5
 800ed0e:	e0e5      	b.n	800eedc <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed12:	88db      	ldrh	r3, [r3, #6]
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7f7 fd58 	bl	80067cc <lwip_htons>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800ed20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ed22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed26:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800ed28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ed2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d009      	beq.n	800ed46 <ip4_frag+0x86>
 800ed32:	4b6c      	ldr	r3, [pc, #432]	; (800eee4 <ip4_frag+0x224>)
 800ed34:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ed38:	496d      	ldr	r1, [pc, #436]	; (800eef0 <ip4_frag+0x230>)
 800ed3a:	486c      	ldr	r0, [pc, #432]	; (800eeec <ip4_frag+0x22c>)
 800ed3c:	f000 fb2c 	bl	800f398 <iprintf>
 800ed40:	f06f 0305 	mvn.w	r3, #5
 800ed44:	e0ca      	b.n	800eedc <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	3b14      	subs	r3, #20
 800ed4c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800ed4e:	e0bc      	b.n	800eeca <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800ed50:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ed52:	00da      	lsls	r2, r3, #3
 800ed54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed56:	4293      	cmp	r3, r2
 800ed58:	bfa8      	it	ge
 800ed5a:	4613      	movge	r3, r2
 800ed5c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed5e:	2200      	movs	r2, #0
 800ed60:	2114      	movs	r1, #20
 800ed62:	2002      	movs	r0, #2
 800ed64:	f7f8 fb5a 	bl	800741c <pbuf_alloc>
 800ed68:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800ed6a:	6a3b      	ldr	r3, [r7, #32]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 80b2 	beq.w	800eed6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	895b      	ldrh	r3, [r3, #10]
 800ed76:	2b13      	cmp	r3, #19
 800ed78:	d806      	bhi.n	800ed88 <ip4_frag+0xc8>
 800ed7a:	4b5a      	ldr	r3, [pc, #360]	; (800eee4 <ip4_frag+0x224>)
 800ed7c:	f240 3209 	movw	r2, #777	; 0x309
 800ed80:	495c      	ldr	r1, [pc, #368]	; (800eef4 <ip4_frag+0x234>)
 800ed82:	485a      	ldr	r0, [pc, #360]	; (800eeec <ip4_frag+0x22c>)
 800ed84:	f000 fb08 	bl	800f398 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed88:	6a3b      	ldr	r3, [r7, #32]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	2214      	movs	r2, #20
 800ed8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed90:	4618      	mov	r0, r3
 800ed92:	f000 faee 	bl	800f372 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800ed9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800eda0:	e04f      	b.n	800ee42 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	895a      	ldrh	r2, [r3, #10]
 800eda6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edac:	8b7a      	ldrh	r2, [r7, #26]
 800edae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800edb0:	4293      	cmp	r3, r2
 800edb2:	bf28      	it	cs
 800edb4:	4613      	movcs	r3, r2
 800edb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d105      	bne.n	800edca <ip4_frag+0x10a>
        poff = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	60fb      	str	r3, [r7, #12]
        continue;
 800edc8:	e03b      	b.n	800ee42 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800edca:	f7ff ff21 	bl	800ec10 <ip_frag_alloc_pbuf_custom_ref>
 800edce:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d103      	bne.n	800edde <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800edd6:	6a38      	ldr	r0, [r7, #32]
 800edd8:	f7f8 fe94 	bl	8007b04 <pbuf_free>
        goto memerr;
 800eddc:	e07c      	b.n	800eed8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edde:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ede4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ede6:	4413      	add	r3, r2
 800ede8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800edea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800edec:	9201      	str	r2, [sp, #4]
 800edee:	9300      	str	r3, [sp, #0]
 800edf0:	4603      	mov	r3, r0
 800edf2:	2202      	movs	r2, #2
 800edf4:	2004      	movs	r0, #4
 800edf6:	f7f8 fca7 	bl	8007748 <pbuf_alloced_custom>
 800edfa:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d106      	bne.n	800ee10 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee02:	6978      	ldr	r0, [r7, #20]
 800ee04:	f7ff ff0c 	bl	800ec20 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee08:	6a38      	ldr	r0, [r7, #32]
 800ee0a:	f7f8 fe7b 	bl	8007b04 <pbuf_free>
        goto memerr;
 800ee0e:	e063      	b.n	800eed8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f7f8 ff29 	bl	8007c68 <pbuf_ref>
      pcr->original = p;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	4a36      	ldr	r2, [pc, #216]	; (800eef8 <ip4_frag+0x238>)
 800ee20:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee22:	6939      	ldr	r1, [r7, #16]
 800ee24:	6a38      	ldr	r0, [r7, #32]
 800ee26:	f7f8 ff47 	bl	8007cb8 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800ee2a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800ee2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee2e:	1ad3      	subs	r3, r2, r3
 800ee30:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800ee32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d004      	beq.n	800ee42 <ip4_frag+0x182>
        poff = 0;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ee42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1ac      	bne.n	800eda2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800ee48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ee4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee4c:	4413      	add	r3, r2
 800ee4e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee50:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ee56:	3b14      	subs	r3, #20
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	bfd4      	ite	le
 800ee5c:	2301      	movle	r3, #1
 800ee5e:	2300      	movgt	r3, #0
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ee64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ee66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee6a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d103      	bne.n	800ee7a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800ee72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ee74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ee78:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ee7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7f7 fca5 	bl	80067cc <lwip_htons>
 800ee82:	4603      	mov	r3, r0
 800ee84:	461a      	mov	r2, r3
 800ee86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800ee8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee8c:	3314      	adds	r3, #20
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7f7 fc9b 	bl	80067cc <lwip_htons>
 800ee96:	4603      	mov	r3, r0
 800ee98:	461a      	mov	r2, r3
 800ee9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	2200      	movs	r2, #0
 800eea2:	729a      	strb	r2, [r3, #10]
 800eea4:	2200      	movs	r2, #0
 800eea6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	695b      	ldr	r3, [r3, #20]
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	6a39      	ldr	r1, [r7, #32]
 800eeb0:	68b8      	ldr	r0, [r7, #8]
 800eeb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eeb4:	6a38      	ldr	r0, [r7, #32]
 800eeb6:	f7f8 fe25 	bl	8007b04 <pbuf_free>
    left -= fragsize;
 800eeba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eebe:	1ad3      	subs	r3, r2, r3
 800eec0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800eec2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800eec4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800eec6:	4413      	add	r3, r2
 800eec8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800eeca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eecc:	2b00      	cmp	r3, #0
 800eece:	f47f af3f 	bne.w	800ed50 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800eed2:	2300      	movs	r3, #0
 800eed4:	e002      	b.n	800eedc <ip4_frag+0x21c>
      goto memerr;
 800eed6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800eed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3740      	adds	r7, #64	; 0x40
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	08011cfc 	.word	0x08011cfc
 800eee8:	08011e88 	.word	0x08011e88
 800eeec:	08011d44 	.word	0x08011d44
 800eef0:	08011eb0 	.word	0x08011eb0
 800eef4:	08011ecc 	.word	0x08011ecc
 800eef8:	0800ec59 	.word	0x0800ec59

0800eefc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800ef06:	230e      	movs	r3, #14
 800ef08:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	895b      	ldrh	r3, [r3, #10]
 800ef0e:	2b0e      	cmp	r3, #14
 800ef10:	d977      	bls.n	800f002 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	7b1a      	ldrb	r2, [r3, #12]
 800ef1c:	7b5b      	ldrb	r3, [r3, #13]
 800ef1e:	021b      	lsls	r3, r3, #8
 800ef20:	4313      	orrs	r3, r2
 800ef22:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	f003 0301 	and.w	r3, r3, #1
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d023      	beq.n	800ef78 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d10f      	bne.n	800ef58 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	785b      	ldrb	r3, [r3, #1]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d11b      	bne.n	800ef78 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef44:	2b5e      	cmp	r3, #94	; 0x5e
 800ef46:	d117      	bne.n	800ef78 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	7b5b      	ldrb	r3, [r3, #13]
 800ef4c:	f043 0310 	orr.w	r3, r3, #16
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	735a      	strb	r2, [r3, #13]
 800ef56:	e00f      	b.n	800ef78 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	2206      	movs	r2, #6
 800ef5c:	4930      	ldr	r1, [pc, #192]	; (800f020 <ethernet_input+0x124>)
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f000 f9f8 	bl	800f354 <memcmp>
 800ef64:	4603      	mov	r3, r0
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d106      	bne.n	800ef78 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	7b5b      	ldrb	r3, [r3, #13]
 800ef6e:	f043 0308 	orr.w	r3, r3, #8
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ef78:	89fb      	ldrh	r3, [r7, #14]
 800ef7a:	2b08      	cmp	r3, #8
 800ef7c:	d003      	beq.n	800ef86 <ethernet_input+0x8a>
 800ef7e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ef82:	d01e      	beq.n	800efc2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ef84:	e044      	b.n	800f010 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ef8c:	f003 0308 	and.w	r3, r3, #8
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d038      	beq.n	800f006 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	895b      	ldrh	r3, [r3, #10]
 800ef98:	461a      	mov	r2, r3
 800ef9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	db33      	blt.n	800f00a <ethernet_input+0x10e>
 800efa2:	8afb      	ldrh	r3, [r7, #22]
 800efa4:	425b      	negs	r3, r3
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	b21b      	sxth	r3, r3
 800efaa:	4619      	mov	r1, r3
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7f8 fd85 	bl	8007abc <pbuf_header>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d128      	bne.n	800f00a <ethernet_input+0x10e>
        ip4_input(p, netif);
 800efb8:	6839      	ldr	r1, [r7, #0]
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7fe ff80 	bl	800dec0 <ip4_input>
      break;
 800efc0:	e01d      	b.n	800effe <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800efc8:	f003 0308 	and.w	r3, r3, #8
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d01e      	beq.n	800f00e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	895b      	ldrh	r3, [r3, #10]
 800efd4:	461a      	mov	r2, r3
 800efd6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800efda:	429a      	cmp	r2, r3
 800efdc:	db15      	blt.n	800f00a <ethernet_input+0x10e>
 800efde:	8afb      	ldrh	r3, [r7, #22]
 800efe0:	425b      	negs	r3, r3
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	b21b      	sxth	r3, r3
 800efe6:	4619      	mov	r1, r3
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7f8 fd67 	bl	8007abc <pbuf_header>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d10a      	bne.n	800f00a <ethernet_input+0x10e>
        etharp_input(p, netif);
 800eff4:	6839      	ldr	r1, [r7, #0]
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7fe f94e 	bl	800d298 <etharp_input>
      break;
 800effc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800effe:	2300      	movs	r3, #0
 800f000:	e00a      	b.n	800f018 <ethernet_input+0x11c>
    goto free_and_return;
 800f002:	bf00      	nop
 800f004:	e004      	b.n	800f010 <ethernet_input+0x114>
        goto free_and_return;
 800f006:	bf00      	nop
 800f008:	e002      	b.n	800f010 <ethernet_input+0x114>

free_and_return:
 800f00a:	bf00      	nop
 800f00c:	e000      	b.n	800f010 <ethernet_input+0x114>
        goto free_and_return;
 800f00e:	bf00      	nop
  pbuf_free(p);
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7f8 fd77 	bl	8007b04 <pbuf_free>
  return ERR_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3718      	adds	r7, #24
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	080120ac 	.word	0x080120ac

0800f024 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b086      	sub	sp, #24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
 800f030:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f032:	8c3b      	ldrh	r3, [r7, #32]
 800f034:	4618      	mov	r0, r3
 800f036:	f7f7 fbc9 	bl	80067cc <lwip_htons>
 800f03a:	4603      	mov	r3, r0
 800f03c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800f03e:	210e      	movs	r1, #14
 800f040:	68b8      	ldr	r0, [r7, #8]
 800f042:	f7f8 fd3b 	bl	8007abc <pbuf_header>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d125      	bne.n	800f098 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	8afa      	ldrh	r2, [r7, #22]
 800f056:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	2206      	movs	r2, #6
 800f05c:	6839      	ldr	r1, [r7, #0]
 800f05e:	4618      	mov	r0, r3
 800f060:	f000 f987 	bl	800f372 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	3306      	adds	r3, #6
 800f068:	2206      	movs	r2, #6
 800f06a:	6879      	ldr	r1, [r7, #4]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f000 f980 	bl	800f372 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f078:	2b06      	cmp	r3, #6
 800f07a:	d006      	beq.n	800f08a <ethernet_output+0x66>
 800f07c:	4b0a      	ldr	r3, [pc, #40]	; (800f0a8 <ethernet_output+0x84>)
 800f07e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f082:	490a      	ldr	r1, [pc, #40]	; (800f0ac <ethernet_output+0x88>)
 800f084:	480a      	ldr	r0, [pc, #40]	; (800f0b0 <ethernet_output+0x8c>)
 800f086:	f000 f987 	bl	800f398 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	699b      	ldr	r3, [r3, #24]
 800f08e:	68b9      	ldr	r1, [r7, #8]
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	4798      	blx	r3
 800f094:	4603      	mov	r3, r0
 800f096:	e002      	b.n	800f09e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f098:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f09a:	f06f 0301 	mvn.w	r3, #1
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	08011eec 	.word	0x08011eec
 800f0ac:	08011f24 	.word	0x08011f24
 800f0b0:	08011f58 	.word	0x08011f58

0800f0b4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	60bb      	str	r3, [r7, #8]
 800f0c2:	2304      	movs	r3, #4
 800f0c4:	60fb      	str	r3, [r7, #12]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	613b      	str	r3, [r7, #16]
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800f0ce:	f107 0308 	add.w	r3, r7, #8
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7f4 fd31 	bl	8003b3c <osMessageCreate>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d102      	bne.n	800f0ee <sys_mbox_new+0x3a>
    return ERR_MEM;
 800f0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ec:	e000      	b.n	800f0f0 <sys_mbox_new+0x3c>

  return ERR_OK;
 800f0ee:	2300      	movs	r3, #0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3718      	adds	r7, #24
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800f102:	bf00      	nop
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	6839      	ldr	r1, [r7, #0]
 800f10a:	f04f 32ff 	mov.w	r2, #4294967295
 800f10e:	4618      	mov	r0, r3
 800f110:	f7f4 fd3e 	bl	8003b90 <osMessagePut>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1f4      	bne.n	800f104 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 800f11a:	bf00      	nop
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800f122:	b580      	push	{r7, lr}
 800f124:	b084      	sub	sp, #16
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
 800f12a:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	6839      	ldr	r1, [r7, #0]
 800f132:	2200      	movs	r2, #0
 800f134:	4618      	mov	r0, r3
 800f136:	f7f4 fd2b 	bl	8003b90 <osMessagePut>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800f140:	2300      	movs	r3, #0
 800f142:	73fb      	strb	r3, [r7, #15]
 800f144:	e001      	b.n	800f14a <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800f146:	23ff      	movs	r3, #255	; 0xff
 800f148:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800f14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b08c      	sub	sp, #48	; 0x30
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	61f8      	str	r0, [r7, #28]
 800f15e:	61b9      	str	r1, [r7, #24]
 800f160:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800f162:	f7f4 fb27 	bl	80037b4 <osKernelSysTick>
 800f166:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d017      	beq.n	800f19e <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	6819      	ldr	r1, [r3, #0]
 800f172:	f107 0320 	add.w	r3, r7, #32
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	4618      	mov	r0, r3
 800f17a:	f7f4 fd49 	bl	8003c10 <osMessageGet>

    if(event.status == osEventMessage)
 800f17e:	6a3b      	ldr	r3, [r7, #32]
 800f180:	2b10      	cmp	r3, #16
 800f182:	d109      	bne.n	800f198 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800f184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f186:	461a      	mov	r2, r3
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800f18c:	f7f4 fb12 	bl	80037b4 <osKernelSysTick>
 800f190:	4602      	mov	r2, r0
 800f192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	e019      	b.n	800f1cc <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800f198:	f04f 33ff 	mov.w	r3, #4294967295
 800f19c:	e016      	b.n	800f1cc <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	6819      	ldr	r1, [r3, #0]
 800f1a2:	463b      	mov	r3, r7
 800f1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7f4 fd31 	bl	8003c10 <osMessageGet>
 800f1ae:	f107 0320 	add.w	r3, r7, #32
 800f1b2:	463a      	mov	r2, r7
 800f1b4:	ca07      	ldmia	r2, {r0, r1, r2}
 800f1b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	461a      	mov	r2, r3
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 800f1c2:	f7f4 faf7 	bl	80037b4 <osKernelSysTick>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ca:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3730      	adds	r7, #48	; 0x30
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <sys_mbox_valid+0x14>
    return 0;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	e000      	b.n	800f1ea <sys_mbox_valid+0x16>
  else
    return 1;
 800f1e8:	2301      	movs	r3, #1
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
	...

0800f1f8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800f1fc:	4803      	ldr	r0, [pc, #12]	; (800f20c <sys_init+0x14>)
 800f1fe:	f7f4 fb49 	bl	8003894 <osMutexCreate>
 800f202:	4602      	mov	r2, r0
 800f204:	4b02      	ldr	r3, [pc, #8]	; (800f210 <sys_init+0x18>)
 800f206:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800f208:	bf00      	nop
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	080120bc 	.word	0x080120bc
 800f210:	2000e43c 	.word	0x2000e43c

0800f214 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800f21c:	2300      	movs	r3, #0
 800f21e:	60bb      	str	r3, [r7, #8]
 800f220:	2300      	movs	r3, #0
 800f222:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800f224:	f107 0308 	add.w	r3, r7, #8
 800f228:	4618      	mov	r0, r3
 800f22a:	f7f4 fb33 	bl	8003894 <osMutexCreate>
 800f22e:	4602      	mov	r2, r0
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d102      	bne.n	800f242 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800f23c:	f04f 33ff 	mov.w	r3, #4294967295
 800f240:	e000      	b.n	800f244 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f04f 31ff 	mov.w	r1, #4294967295
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7f4 fb31 	bl	80038c4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 800f262:	bf00      	nop
 800f264:	3708      	adds	r7, #8
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b082      	sub	sp, #8
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4618      	mov	r0, r3
 800f278:	f7f4 fb72 	bl	8003960 <osMutexRelease>
}
 800f27c:	bf00      	nop
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08c      	sub	sp, #48	; 0x30
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800f292:	f107 0314 	add.w	r3, r7, #20
 800f296:	2200      	movs	r2, #0
 800f298:	601a      	str	r2, [r3, #0]
 800f29a:	605a      	str	r2, [r3, #4]
 800f29c:	609a      	str	r2, [r3, #8]
 800f29e:	60da      	str	r2, [r3, #12]
 800f2a0:	611a      	str	r2, [r3, #16]
 800f2a2:	615a      	str	r2, [r3, #20]
 800f2a4:	619a      	str	r2, [r3, #24]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	617b      	str	r3, [r7, #20]
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	61bb      	str	r3, [r7, #24]
 800f2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b0:	b21b      	sxth	r3, r3
 800f2b2:	83bb      	strh	r3, [r7, #28]
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 800f2b8:	f107 0314 	add.w	r3, r7, #20
 800f2bc:	6879      	ldr	r1, [r7, #4]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7f4 fa88 	bl	80037d4 <osThreadCreate>
 800f2c4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3730      	adds	r7, #48	; 0x30
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
	...

0800f2d0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800f2d4:	4b04      	ldr	r3, [pc, #16]	; (800f2e8 <sys_arch_protect+0x18>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f04f 31ff 	mov.w	r1, #4294967295
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7f4 faf1 	bl	80038c4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 800f2e2:	2301      	movs	r3, #1
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	2000e43c 	.word	0x2000e43c

0800f2ec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800f2f4:	4b04      	ldr	r3, [pc, #16]	; (800f308 <sys_arch_unprotect+0x1c>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7f4 fb31 	bl	8003960 <osMutexRelease>
}
 800f2fe:	bf00      	nop
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	2000e43c 	.word	0x2000e43c

0800f30c <__libc_init_array>:
 800f30c:	b570      	push	{r4, r5, r6, lr}
 800f30e:	4e0d      	ldr	r6, [pc, #52]	; (800f344 <__libc_init_array+0x38>)
 800f310:	4c0d      	ldr	r4, [pc, #52]	; (800f348 <__libc_init_array+0x3c>)
 800f312:	1ba4      	subs	r4, r4, r6
 800f314:	10a4      	asrs	r4, r4, #2
 800f316:	2500      	movs	r5, #0
 800f318:	42a5      	cmp	r5, r4
 800f31a:	d109      	bne.n	800f330 <__libc_init_array+0x24>
 800f31c:	4e0b      	ldr	r6, [pc, #44]	; (800f34c <__libc_init_array+0x40>)
 800f31e:	4c0c      	ldr	r4, [pc, #48]	; (800f350 <__libc_init_array+0x44>)
 800f320:	f000 ff1e 	bl	8010160 <_init>
 800f324:	1ba4      	subs	r4, r4, r6
 800f326:	10a4      	asrs	r4, r4, #2
 800f328:	2500      	movs	r5, #0
 800f32a:	42a5      	cmp	r5, r4
 800f32c:	d105      	bne.n	800f33a <__libc_init_array+0x2e>
 800f32e:	bd70      	pop	{r4, r5, r6, pc}
 800f330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f334:	4798      	blx	r3
 800f336:	3501      	adds	r5, #1
 800f338:	e7ee      	b.n	800f318 <__libc_init_array+0xc>
 800f33a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f33e:	4798      	blx	r3
 800f340:	3501      	adds	r5, #1
 800f342:	e7f2      	b.n	800f32a <__libc_init_array+0x1e>
 800f344:	08012164 	.word	0x08012164
 800f348:	08012164 	.word	0x08012164
 800f34c:	08012164 	.word	0x08012164
 800f350:	08012168 	.word	0x08012168

0800f354 <memcmp>:
 800f354:	b530      	push	{r4, r5, lr}
 800f356:	2400      	movs	r4, #0
 800f358:	42a2      	cmp	r2, r4
 800f35a:	d101      	bne.n	800f360 <memcmp+0xc>
 800f35c:	2000      	movs	r0, #0
 800f35e:	e007      	b.n	800f370 <memcmp+0x1c>
 800f360:	5d03      	ldrb	r3, [r0, r4]
 800f362:	3401      	adds	r4, #1
 800f364:	190d      	adds	r5, r1, r4
 800f366:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f36a:	42ab      	cmp	r3, r5
 800f36c:	d0f4      	beq.n	800f358 <memcmp+0x4>
 800f36e:	1b58      	subs	r0, r3, r5
 800f370:	bd30      	pop	{r4, r5, pc}

0800f372 <memcpy>:
 800f372:	b510      	push	{r4, lr}
 800f374:	1e43      	subs	r3, r0, #1
 800f376:	440a      	add	r2, r1
 800f378:	4291      	cmp	r1, r2
 800f37a:	d100      	bne.n	800f37e <memcpy+0xc>
 800f37c:	bd10      	pop	{r4, pc}
 800f37e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f382:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f386:	e7f7      	b.n	800f378 <memcpy+0x6>

0800f388 <memset>:
 800f388:	4402      	add	r2, r0
 800f38a:	4603      	mov	r3, r0
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d100      	bne.n	800f392 <memset+0xa>
 800f390:	4770      	bx	lr
 800f392:	f803 1b01 	strb.w	r1, [r3], #1
 800f396:	e7f9      	b.n	800f38c <memset+0x4>

0800f398 <iprintf>:
 800f398:	b40f      	push	{r0, r1, r2, r3}
 800f39a:	4b0a      	ldr	r3, [pc, #40]	; (800f3c4 <iprintf+0x2c>)
 800f39c:	b513      	push	{r0, r1, r4, lr}
 800f39e:	681c      	ldr	r4, [r3, #0]
 800f3a0:	b124      	cbz	r4, 800f3ac <iprintf+0x14>
 800f3a2:	69a3      	ldr	r3, [r4, #24]
 800f3a4:	b913      	cbnz	r3, 800f3ac <iprintf+0x14>
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f000 f84e 	bl	800f448 <__sinit>
 800f3ac:	ab05      	add	r3, sp, #20
 800f3ae:	9a04      	ldr	r2, [sp, #16]
 800f3b0:	68a1      	ldr	r1, [r4, #8]
 800f3b2:	9301      	str	r3, [sp, #4]
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f000 f955 	bl	800f664 <_vfiprintf_r>
 800f3ba:	b002      	add	sp, #8
 800f3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3c0:	b004      	add	sp, #16
 800f3c2:	4770      	bx	lr
 800f3c4:	20000010 	.word	0x20000010

0800f3c8 <std>:
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	b510      	push	{r4, lr}
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	e9c0 3300 	strd	r3, r3, [r0]
 800f3d2:	6083      	str	r3, [r0, #8]
 800f3d4:	8181      	strh	r1, [r0, #12]
 800f3d6:	6643      	str	r3, [r0, #100]	; 0x64
 800f3d8:	81c2      	strh	r2, [r0, #14]
 800f3da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3de:	6183      	str	r3, [r0, #24]
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	2208      	movs	r2, #8
 800f3e4:	305c      	adds	r0, #92	; 0x5c
 800f3e6:	f7ff ffcf 	bl	800f388 <memset>
 800f3ea:	4b05      	ldr	r3, [pc, #20]	; (800f400 <std+0x38>)
 800f3ec:	6263      	str	r3, [r4, #36]	; 0x24
 800f3ee:	4b05      	ldr	r3, [pc, #20]	; (800f404 <std+0x3c>)
 800f3f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f3f2:	4b05      	ldr	r3, [pc, #20]	; (800f408 <std+0x40>)
 800f3f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3f6:	4b05      	ldr	r3, [pc, #20]	; (800f40c <std+0x44>)
 800f3f8:	6224      	str	r4, [r4, #32]
 800f3fa:	6323      	str	r3, [r4, #48]	; 0x30
 800f3fc:	bd10      	pop	{r4, pc}
 800f3fe:	bf00      	nop
 800f400:	0800fbc1 	.word	0x0800fbc1
 800f404:	0800fbe3 	.word	0x0800fbe3
 800f408:	0800fc1b 	.word	0x0800fc1b
 800f40c:	0800fc3f 	.word	0x0800fc3f

0800f410 <_cleanup_r>:
 800f410:	4901      	ldr	r1, [pc, #4]	; (800f418 <_cleanup_r+0x8>)
 800f412:	f000 b885 	b.w	800f520 <_fwalk_reent>
 800f416:	bf00      	nop
 800f418:	0800ff19 	.word	0x0800ff19

0800f41c <__sfmoreglue>:
 800f41c:	b570      	push	{r4, r5, r6, lr}
 800f41e:	1e4a      	subs	r2, r1, #1
 800f420:	2568      	movs	r5, #104	; 0x68
 800f422:	4355      	muls	r5, r2
 800f424:	460e      	mov	r6, r1
 800f426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f42a:	f000 f897 	bl	800f55c <_malloc_r>
 800f42e:	4604      	mov	r4, r0
 800f430:	b140      	cbz	r0, 800f444 <__sfmoreglue+0x28>
 800f432:	2100      	movs	r1, #0
 800f434:	e9c0 1600 	strd	r1, r6, [r0]
 800f438:	300c      	adds	r0, #12
 800f43a:	60a0      	str	r0, [r4, #8]
 800f43c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f440:	f7ff ffa2 	bl	800f388 <memset>
 800f444:	4620      	mov	r0, r4
 800f446:	bd70      	pop	{r4, r5, r6, pc}

0800f448 <__sinit>:
 800f448:	6983      	ldr	r3, [r0, #24]
 800f44a:	b510      	push	{r4, lr}
 800f44c:	4604      	mov	r4, r0
 800f44e:	bb33      	cbnz	r3, 800f49e <__sinit+0x56>
 800f450:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f454:	6503      	str	r3, [r0, #80]	; 0x50
 800f456:	4b12      	ldr	r3, [pc, #72]	; (800f4a0 <__sinit+0x58>)
 800f458:	4a12      	ldr	r2, [pc, #72]	; (800f4a4 <__sinit+0x5c>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	6282      	str	r2, [r0, #40]	; 0x28
 800f45e:	4298      	cmp	r0, r3
 800f460:	bf04      	itt	eq
 800f462:	2301      	moveq	r3, #1
 800f464:	6183      	streq	r3, [r0, #24]
 800f466:	f000 f81f 	bl	800f4a8 <__sfp>
 800f46a:	6060      	str	r0, [r4, #4]
 800f46c:	4620      	mov	r0, r4
 800f46e:	f000 f81b 	bl	800f4a8 <__sfp>
 800f472:	60a0      	str	r0, [r4, #8]
 800f474:	4620      	mov	r0, r4
 800f476:	f000 f817 	bl	800f4a8 <__sfp>
 800f47a:	2200      	movs	r2, #0
 800f47c:	60e0      	str	r0, [r4, #12]
 800f47e:	2104      	movs	r1, #4
 800f480:	6860      	ldr	r0, [r4, #4]
 800f482:	f7ff ffa1 	bl	800f3c8 <std>
 800f486:	2201      	movs	r2, #1
 800f488:	2109      	movs	r1, #9
 800f48a:	68a0      	ldr	r0, [r4, #8]
 800f48c:	f7ff ff9c 	bl	800f3c8 <std>
 800f490:	2202      	movs	r2, #2
 800f492:	2112      	movs	r1, #18
 800f494:	68e0      	ldr	r0, [r4, #12]
 800f496:	f7ff ff97 	bl	800f3c8 <std>
 800f49a:	2301      	movs	r3, #1
 800f49c:	61a3      	str	r3, [r4, #24]
 800f49e:	bd10      	pop	{r4, pc}
 800f4a0:	080120c4 	.word	0x080120c4
 800f4a4:	0800f411 	.word	0x0800f411

0800f4a8 <__sfp>:
 800f4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4aa:	4b1b      	ldr	r3, [pc, #108]	; (800f518 <__sfp+0x70>)
 800f4ac:	681e      	ldr	r6, [r3, #0]
 800f4ae:	69b3      	ldr	r3, [r6, #24]
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	b913      	cbnz	r3, 800f4ba <__sfp+0x12>
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	f7ff ffc7 	bl	800f448 <__sinit>
 800f4ba:	3648      	adds	r6, #72	; 0x48
 800f4bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f4c0:	3b01      	subs	r3, #1
 800f4c2:	d503      	bpl.n	800f4cc <__sfp+0x24>
 800f4c4:	6833      	ldr	r3, [r6, #0]
 800f4c6:	b133      	cbz	r3, 800f4d6 <__sfp+0x2e>
 800f4c8:	6836      	ldr	r6, [r6, #0]
 800f4ca:	e7f7      	b.n	800f4bc <__sfp+0x14>
 800f4cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f4d0:	b16d      	cbz	r5, 800f4ee <__sfp+0x46>
 800f4d2:	3468      	adds	r4, #104	; 0x68
 800f4d4:	e7f4      	b.n	800f4c0 <__sfp+0x18>
 800f4d6:	2104      	movs	r1, #4
 800f4d8:	4638      	mov	r0, r7
 800f4da:	f7ff ff9f 	bl	800f41c <__sfmoreglue>
 800f4de:	6030      	str	r0, [r6, #0]
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	d1f1      	bne.n	800f4c8 <__sfp+0x20>
 800f4e4:	230c      	movs	r3, #12
 800f4e6:	603b      	str	r3, [r7, #0]
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ee:	4b0b      	ldr	r3, [pc, #44]	; (800f51c <__sfp+0x74>)
 800f4f0:	6665      	str	r5, [r4, #100]	; 0x64
 800f4f2:	e9c4 5500 	strd	r5, r5, [r4]
 800f4f6:	60a5      	str	r5, [r4, #8]
 800f4f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f4fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f500:	2208      	movs	r2, #8
 800f502:	4629      	mov	r1, r5
 800f504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f508:	f7ff ff3e 	bl	800f388 <memset>
 800f50c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f514:	e7e9      	b.n	800f4ea <__sfp+0x42>
 800f516:	bf00      	nop
 800f518:	080120c4 	.word	0x080120c4
 800f51c:	ffff0001 	.word	0xffff0001

0800f520 <_fwalk_reent>:
 800f520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f524:	4680      	mov	r8, r0
 800f526:	4689      	mov	r9, r1
 800f528:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f52c:	2600      	movs	r6, #0
 800f52e:	b914      	cbnz	r4, 800f536 <_fwalk_reent+0x16>
 800f530:	4630      	mov	r0, r6
 800f532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f536:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f53a:	3f01      	subs	r7, #1
 800f53c:	d501      	bpl.n	800f542 <_fwalk_reent+0x22>
 800f53e:	6824      	ldr	r4, [r4, #0]
 800f540:	e7f5      	b.n	800f52e <_fwalk_reent+0xe>
 800f542:	89ab      	ldrh	r3, [r5, #12]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d907      	bls.n	800f558 <_fwalk_reent+0x38>
 800f548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f54c:	3301      	adds	r3, #1
 800f54e:	d003      	beq.n	800f558 <_fwalk_reent+0x38>
 800f550:	4629      	mov	r1, r5
 800f552:	4640      	mov	r0, r8
 800f554:	47c8      	blx	r9
 800f556:	4306      	orrs	r6, r0
 800f558:	3568      	adds	r5, #104	; 0x68
 800f55a:	e7ee      	b.n	800f53a <_fwalk_reent+0x1a>

0800f55c <_malloc_r>:
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	1ccd      	adds	r5, r1, #3
 800f560:	f025 0503 	bic.w	r5, r5, #3
 800f564:	3508      	adds	r5, #8
 800f566:	2d0c      	cmp	r5, #12
 800f568:	bf38      	it	cc
 800f56a:	250c      	movcc	r5, #12
 800f56c:	2d00      	cmp	r5, #0
 800f56e:	4606      	mov	r6, r0
 800f570:	db01      	blt.n	800f576 <_malloc_r+0x1a>
 800f572:	42a9      	cmp	r1, r5
 800f574:	d903      	bls.n	800f57e <_malloc_r+0x22>
 800f576:	230c      	movs	r3, #12
 800f578:	6033      	str	r3, [r6, #0]
 800f57a:	2000      	movs	r0, #0
 800f57c:	bd70      	pop	{r4, r5, r6, pc}
 800f57e:	f000 fd6b 	bl	8010058 <__malloc_lock>
 800f582:	4a21      	ldr	r2, [pc, #132]	; (800f608 <_malloc_r+0xac>)
 800f584:	6814      	ldr	r4, [r2, #0]
 800f586:	4621      	mov	r1, r4
 800f588:	b991      	cbnz	r1, 800f5b0 <_malloc_r+0x54>
 800f58a:	4c20      	ldr	r4, [pc, #128]	; (800f60c <_malloc_r+0xb0>)
 800f58c:	6823      	ldr	r3, [r4, #0]
 800f58e:	b91b      	cbnz	r3, 800f598 <_malloc_r+0x3c>
 800f590:	4630      	mov	r0, r6
 800f592:	f000 fb05 	bl	800fba0 <_sbrk_r>
 800f596:	6020      	str	r0, [r4, #0]
 800f598:	4629      	mov	r1, r5
 800f59a:	4630      	mov	r0, r6
 800f59c:	f000 fb00 	bl	800fba0 <_sbrk_r>
 800f5a0:	1c43      	adds	r3, r0, #1
 800f5a2:	d124      	bne.n	800f5ee <_malloc_r+0x92>
 800f5a4:	230c      	movs	r3, #12
 800f5a6:	6033      	str	r3, [r6, #0]
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f000 fd56 	bl	801005a <__malloc_unlock>
 800f5ae:	e7e4      	b.n	800f57a <_malloc_r+0x1e>
 800f5b0:	680b      	ldr	r3, [r1, #0]
 800f5b2:	1b5b      	subs	r3, r3, r5
 800f5b4:	d418      	bmi.n	800f5e8 <_malloc_r+0x8c>
 800f5b6:	2b0b      	cmp	r3, #11
 800f5b8:	d90f      	bls.n	800f5da <_malloc_r+0x7e>
 800f5ba:	600b      	str	r3, [r1, #0]
 800f5bc:	50cd      	str	r5, [r1, r3]
 800f5be:	18cc      	adds	r4, r1, r3
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	f000 fd4a 	bl	801005a <__malloc_unlock>
 800f5c6:	f104 000b 	add.w	r0, r4, #11
 800f5ca:	1d23      	adds	r3, r4, #4
 800f5cc:	f020 0007 	bic.w	r0, r0, #7
 800f5d0:	1ac3      	subs	r3, r0, r3
 800f5d2:	d0d3      	beq.n	800f57c <_malloc_r+0x20>
 800f5d4:	425a      	negs	r2, r3
 800f5d6:	50e2      	str	r2, [r4, r3]
 800f5d8:	e7d0      	b.n	800f57c <_malloc_r+0x20>
 800f5da:	428c      	cmp	r4, r1
 800f5dc:	684b      	ldr	r3, [r1, #4]
 800f5de:	bf16      	itet	ne
 800f5e0:	6063      	strne	r3, [r4, #4]
 800f5e2:	6013      	streq	r3, [r2, #0]
 800f5e4:	460c      	movne	r4, r1
 800f5e6:	e7eb      	b.n	800f5c0 <_malloc_r+0x64>
 800f5e8:	460c      	mov	r4, r1
 800f5ea:	6849      	ldr	r1, [r1, #4]
 800f5ec:	e7cc      	b.n	800f588 <_malloc_r+0x2c>
 800f5ee:	1cc4      	adds	r4, r0, #3
 800f5f0:	f024 0403 	bic.w	r4, r4, #3
 800f5f4:	42a0      	cmp	r0, r4
 800f5f6:	d005      	beq.n	800f604 <_malloc_r+0xa8>
 800f5f8:	1a21      	subs	r1, r4, r0
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f000 fad0 	bl	800fba0 <_sbrk_r>
 800f600:	3001      	adds	r0, #1
 800f602:	d0cf      	beq.n	800f5a4 <_malloc_r+0x48>
 800f604:	6025      	str	r5, [r4, #0]
 800f606:	e7db      	b.n	800f5c0 <_malloc_r+0x64>
 800f608:	200041c8 	.word	0x200041c8
 800f60c:	200041cc 	.word	0x200041cc

0800f610 <__sfputc_r>:
 800f610:	6893      	ldr	r3, [r2, #8]
 800f612:	3b01      	subs	r3, #1
 800f614:	2b00      	cmp	r3, #0
 800f616:	b410      	push	{r4}
 800f618:	6093      	str	r3, [r2, #8]
 800f61a:	da08      	bge.n	800f62e <__sfputc_r+0x1e>
 800f61c:	6994      	ldr	r4, [r2, #24]
 800f61e:	42a3      	cmp	r3, r4
 800f620:	db01      	blt.n	800f626 <__sfputc_r+0x16>
 800f622:	290a      	cmp	r1, #10
 800f624:	d103      	bne.n	800f62e <__sfputc_r+0x1e>
 800f626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f62a:	f000 bb0d 	b.w	800fc48 <__swbuf_r>
 800f62e:	6813      	ldr	r3, [r2, #0]
 800f630:	1c58      	adds	r0, r3, #1
 800f632:	6010      	str	r0, [r2, #0]
 800f634:	7019      	strb	r1, [r3, #0]
 800f636:	4608      	mov	r0, r1
 800f638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f63c:	4770      	bx	lr

0800f63e <__sfputs_r>:
 800f63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f640:	4606      	mov	r6, r0
 800f642:	460f      	mov	r7, r1
 800f644:	4614      	mov	r4, r2
 800f646:	18d5      	adds	r5, r2, r3
 800f648:	42ac      	cmp	r4, r5
 800f64a:	d101      	bne.n	800f650 <__sfputs_r+0x12>
 800f64c:	2000      	movs	r0, #0
 800f64e:	e007      	b.n	800f660 <__sfputs_r+0x22>
 800f650:	463a      	mov	r2, r7
 800f652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f656:	4630      	mov	r0, r6
 800f658:	f7ff ffda 	bl	800f610 <__sfputc_r>
 800f65c:	1c43      	adds	r3, r0, #1
 800f65e:	d1f3      	bne.n	800f648 <__sfputs_r+0xa>
 800f660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f664 <_vfiprintf_r>:
 800f664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f668:	460c      	mov	r4, r1
 800f66a:	b09d      	sub	sp, #116	; 0x74
 800f66c:	4617      	mov	r7, r2
 800f66e:	461d      	mov	r5, r3
 800f670:	4606      	mov	r6, r0
 800f672:	b118      	cbz	r0, 800f67c <_vfiprintf_r+0x18>
 800f674:	6983      	ldr	r3, [r0, #24]
 800f676:	b90b      	cbnz	r3, 800f67c <_vfiprintf_r+0x18>
 800f678:	f7ff fee6 	bl	800f448 <__sinit>
 800f67c:	4b7c      	ldr	r3, [pc, #496]	; (800f870 <_vfiprintf_r+0x20c>)
 800f67e:	429c      	cmp	r4, r3
 800f680:	d158      	bne.n	800f734 <_vfiprintf_r+0xd0>
 800f682:	6874      	ldr	r4, [r6, #4]
 800f684:	89a3      	ldrh	r3, [r4, #12]
 800f686:	0718      	lsls	r0, r3, #28
 800f688:	d55e      	bpl.n	800f748 <_vfiprintf_r+0xe4>
 800f68a:	6923      	ldr	r3, [r4, #16]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d05b      	beq.n	800f748 <_vfiprintf_r+0xe4>
 800f690:	2300      	movs	r3, #0
 800f692:	9309      	str	r3, [sp, #36]	; 0x24
 800f694:	2320      	movs	r3, #32
 800f696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f69a:	2330      	movs	r3, #48	; 0x30
 800f69c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6a0:	9503      	str	r5, [sp, #12]
 800f6a2:	f04f 0b01 	mov.w	fp, #1
 800f6a6:	46b8      	mov	r8, r7
 800f6a8:	4645      	mov	r5, r8
 800f6aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f6ae:	b10b      	cbz	r3, 800f6b4 <_vfiprintf_r+0x50>
 800f6b0:	2b25      	cmp	r3, #37	; 0x25
 800f6b2:	d154      	bne.n	800f75e <_vfiprintf_r+0xfa>
 800f6b4:	ebb8 0a07 	subs.w	sl, r8, r7
 800f6b8:	d00b      	beq.n	800f6d2 <_vfiprintf_r+0x6e>
 800f6ba:	4653      	mov	r3, sl
 800f6bc:	463a      	mov	r2, r7
 800f6be:	4621      	mov	r1, r4
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	f7ff ffbc 	bl	800f63e <__sfputs_r>
 800f6c6:	3001      	adds	r0, #1
 800f6c8:	f000 80c2 	beq.w	800f850 <_vfiprintf_r+0x1ec>
 800f6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ce:	4453      	add	r3, sl
 800f6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d2:	f898 3000 	ldrb.w	r3, [r8]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f000 80ba 	beq.w	800f850 <_vfiprintf_r+0x1ec>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6e6:	9304      	str	r3, [sp, #16]
 800f6e8:	9307      	str	r3, [sp, #28]
 800f6ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6ee:	931a      	str	r3, [sp, #104]	; 0x68
 800f6f0:	46a8      	mov	r8, r5
 800f6f2:	2205      	movs	r2, #5
 800f6f4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f6f8:	485e      	ldr	r0, [pc, #376]	; (800f874 <_vfiprintf_r+0x210>)
 800f6fa:	f7f0 fd69 	bl	80001d0 <memchr>
 800f6fe:	9b04      	ldr	r3, [sp, #16]
 800f700:	bb78      	cbnz	r0, 800f762 <_vfiprintf_r+0xfe>
 800f702:	06d9      	lsls	r1, r3, #27
 800f704:	bf44      	itt	mi
 800f706:	2220      	movmi	r2, #32
 800f708:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f70c:	071a      	lsls	r2, r3, #28
 800f70e:	bf44      	itt	mi
 800f710:	222b      	movmi	r2, #43	; 0x2b
 800f712:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f716:	782a      	ldrb	r2, [r5, #0]
 800f718:	2a2a      	cmp	r2, #42	; 0x2a
 800f71a:	d02a      	beq.n	800f772 <_vfiprintf_r+0x10e>
 800f71c:	9a07      	ldr	r2, [sp, #28]
 800f71e:	46a8      	mov	r8, r5
 800f720:	2000      	movs	r0, #0
 800f722:	250a      	movs	r5, #10
 800f724:	4641      	mov	r1, r8
 800f726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f72a:	3b30      	subs	r3, #48	; 0x30
 800f72c:	2b09      	cmp	r3, #9
 800f72e:	d969      	bls.n	800f804 <_vfiprintf_r+0x1a0>
 800f730:	b360      	cbz	r0, 800f78c <_vfiprintf_r+0x128>
 800f732:	e024      	b.n	800f77e <_vfiprintf_r+0x11a>
 800f734:	4b50      	ldr	r3, [pc, #320]	; (800f878 <_vfiprintf_r+0x214>)
 800f736:	429c      	cmp	r4, r3
 800f738:	d101      	bne.n	800f73e <_vfiprintf_r+0xda>
 800f73a:	68b4      	ldr	r4, [r6, #8]
 800f73c:	e7a2      	b.n	800f684 <_vfiprintf_r+0x20>
 800f73e:	4b4f      	ldr	r3, [pc, #316]	; (800f87c <_vfiprintf_r+0x218>)
 800f740:	429c      	cmp	r4, r3
 800f742:	bf08      	it	eq
 800f744:	68f4      	ldreq	r4, [r6, #12]
 800f746:	e79d      	b.n	800f684 <_vfiprintf_r+0x20>
 800f748:	4621      	mov	r1, r4
 800f74a:	4630      	mov	r0, r6
 800f74c:	f000 fae0 	bl	800fd10 <__swsetup_r>
 800f750:	2800      	cmp	r0, #0
 800f752:	d09d      	beq.n	800f690 <_vfiprintf_r+0x2c>
 800f754:	f04f 30ff 	mov.w	r0, #4294967295
 800f758:	b01d      	add	sp, #116	; 0x74
 800f75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f75e:	46a8      	mov	r8, r5
 800f760:	e7a2      	b.n	800f6a8 <_vfiprintf_r+0x44>
 800f762:	4a44      	ldr	r2, [pc, #272]	; (800f874 <_vfiprintf_r+0x210>)
 800f764:	1a80      	subs	r0, r0, r2
 800f766:	fa0b f000 	lsl.w	r0, fp, r0
 800f76a:	4318      	orrs	r0, r3
 800f76c:	9004      	str	r0, [sp, #16]
 800f76e:	4645      	mov	r5, r8
 800f770:	e7be      	b.n	800f6f0 <_vfiprintf_r+0x8c>
 800f772:	9a03      	ldr	r2, [sp, #12]
 800f774:	1d11      	adds	r1, r2, #4
 800f776:	6812      	ldr	r2, [r2, #0]
 800f778:	9103      	str	r1, [sp, #12]
 800f77a:	2a00      	cmp	r2, #0
 800f77c:	db01      	blt.n	800f782 <_vfiprintf_r+0x11e>
 800f77e:	9207      	str	r2, [sp, #28]
 800f780:	e004      	b.n	800f78c <_vfiprintf_r+0x128>
 800f782:	4252      	negs	r2, r2
 800f784:	f043 0302 	orr.w	r3, r3, #2
 800f788:	9207      	str	r2, [sp, #28]
 800f78a:	9304      	str	r3, [sp, #16]
 800f78c:	f898 3000 	ldrb.w	r3, [r8]
 800f790:	2b2e      	cmp	r3, #46	; 0x2e
 800f792:	d10e      	bne.n	800f7b2 <_vfiprintf_r+0x14e>
 800f794:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f798:	2b2a      	cmp	r3, #42	; 0x2a
 800f79a:	d138      	bne.n	800f80e <_vfiprintf_r+0x1aa>
 800f79c:	9b03      	ldr	r3, [sp, #12]
 800f79e:	1d1a      	adds	r2, r3, #4
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	9203      	str	r2, [sp, #12]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	bfb8      	it	lt
 800f7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7ac:	f108 0802 	add.w	r8, r8, #2
 800f7b0:	9305      	str	r3, [sp, #20]
 800f7b2:	4d33      	ldr	r5, [pc, #204]	; (800f880 <_vfiprintf_r+0x21c>)
 800f7b4:	f898 1000 	ldrb.w	r1, [r8]
 800f7b8:	2203      	movs	r2, #3
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	f7f0 fd08 	bl	80001d0 <memchr>
 800f7c0:	b140      	cbz	r0, 800f7d4 <_vfiprintf_r+0x170>
 800f7c2:	2340      	movs	r3, #64	; 0x40
 800f7c4:	1b40      	subs	r0, r0, r5
 800f7c6:	fa03 f000 	lsl.w	r0, r3, r0
 800f7ca:	9b04      	ldr	r3, [sp, #16]
 800f7cc:	4303      	orrs	r3, r0
 800f7ce:	f108 0801 	add.w	r8, r8, #1
 800f7d2:	9304      	str	r3, [sp, #16]
 800f7d4:	f898 1000 	ldrb.w	r1, [r8]
 800f7d8:	482a      	ldr	r0, [pc, #168]	; (800f884 <_vfiprintf_r+0x220>)
 800f7da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7de:	2206      	movs	r2, #6
 800f7e0:	f108 0701 	add.w	r7, r8, #1
 800f7e4:	f7f0 fcf4 	bl	80001d0 <memchr>
 800f7e8:	2800      	cmp	r0, #0
 800f7ea:	d037      	beq.n	800f85c <_vfiprintf_r+0x1f8>
 800f7ec:	4b26      	ldr	r3, [pc, #152]	; (800f888 <_vfiprintf_r+0x224>)
 800f7ee:	bb1b      	cbnz	r3, 800f838 <_vfiprintf_r+0x1d4>
 800f7f0:	9b03      	ldr	r3, [sp, #12]
 800f7f2:	3307      	adds	r3, #7
 800f7f4:	f023 0307 	bic.w	r3, r3, #7
 800f7f8:	3308      	adds	r3, #8
 800f7fa:	9303      	str	r3, [sp, #12]
 800f7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7fe:	444b      	add	r3, r9
 800f800:	9309      	str	r3, [sp, #36]	; 0x24
 800f802:	e750      	b.n	800f6a6 <_vfiprintf_r+0x42>
 800f804:	fb05 3202 	mla	r2, r5, r2, r3
 800f808:	2001      	movs	r0, #1
 800f80a:	4688      	mov	r8, r1
 800f80c:	e78a      	b.n	800f724 <_vfiprintf_r+0xc0>
 800f80e:	2300      	movs	r3, #0
 800f810:	f108 0801 	add.w	r8, r8, #1
 800f814:	9305      	str	r3, [sp, #20]
 800f816:	4619      	mov	r1, r3
 800f818:	250a      	movs	r5, #10
 800f81a:	4640      	mov	r0, r8
 800f81c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f820:	3a30      	subs	r2, #48	; 0x30
 800f822:	2a09      	cmp	r2, #9
 800f824:	d903      	bls.n	800f82e <_vfiprintf_r+0x1ca>
 800f826:	2b00      	cmp	r3, #0
 800f828:	d0c3      	beq.n	800f7b2 <_vfiprintf_r+0x14e>
 800f82a:	9105      	str	r1, [sp, #20]
 800f82c:	e7c1      	b.n	800f7b2 <_vfiprintf_r+0x14e>
 800f82e:	fb05 2101 	mla	r1, r5, r1, r2
 800f832:	2301      	movs	r3, #1
 800f834:	4680      	mov	r8, r0
 800f836:	e7f0      	b.n	800f81a <_vfiprintf_r+0x1b6>
 800f838:	ab03      	add	r3, sp, #12
 800f83a:	9300      	str	r3, [sp, #0]
 800f83c:	4622      	mov	r2, r4
 800f83e:	4b13      	ldr	r3, [pc, #76]	; (800f88c <_vfiprintf_r+0x228>)
 800f840:	a904      	add	r1, sp, #16
 800f842:	4630      	mov	r0, r6
 800f844:	f3af 8000 	nop.w
 800f848:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f84c:	4681      	mov	r9, r0
 800f84e:	d1d5      	bne.n	800f7fc <_vfiprintf_r+0x198>
 800f850:	89a3      	ldrh	r3, [r4, #12]
 800f852:	065b      	lsls	r3, r3, #25
 800f854:	f53f af7e 	bmi.w	800f754 <_vfiprintf_r+0xf0>
 800f858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f85a:	e77d      	b.n	800f758 <_vfiprintf_r+0xf4>
 800f85c:	ab03      	add	r3, sp, #12
 800f85e:	9300      	str	r3, [sp, #0]
 800f860:	4622      	mov	r2, r4
 800f862:	4b0a      	ldr	r3, [pc, #40]	; (800f88c <_vfiprintf_r+0x228>)
 800f864:	a904      	add	r1, sp, #16
 800f866:	4630      	mov	r0, r6
 800f868:	f000 f888 	bl	800f97c <_printf_i>
 800f86c:	e7ec      	b.n	800f848 <_vfiprintf_r+0x1e4>
 800f86e:	bf00      	nop
 800f870:	080120e8 	.word	0x080120e8
 800f874:	08012128 	.word	0x08012128
 800f878:	08012108 	.word	0x08012108
 800f87c:	080120c8 	.word	0x080120c8
 800f880:	0801212e 	.word	0x0801212e
 800f884:	08012132 	.word	0x08012132
 800f888:	00000000 	.word	0x00000000
 800f88c:	0800f63f 	.word	0x0800f63f

0800f890 <_printf_common>:
 800f890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f894:	4691      	mov	r9, r2
 800f896:	461f      	mov	r7, r3
 800f898:	688a      	ldr	r2, [r1, #8]
 800f89a:	690b      	ldr	r3, [r1, #16]
 800f89c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	bfb8      	it	lt
 800f8a4:	4613      	movlt	r3, r2
 800f8a6:	f8c9 3000 	str.w	r3, [r9]
 800f8aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	b112      	cbz	r2, 800f8ba <_printf_common+0x2a>
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	f8c9 3000 	str.w	r3, [r9]
 800f8ba:	6823      	ldr	r3, [r4, #0]
 800f8bc:	0699      	lsls	r1, r3, #26
 800f8be:	bf42      	ittt	mi
 800f8c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f8c4:	3302      	addmi	r3, #2
 800f8c6:	f8c9 3000 	strmi.w	r3, [r9]
 800f8ca:	6825      	ldr	r5, [r4, #0]
 800f8cc:	f015 0506 	ands.w	r5, r5, #6
 800f8d0:	d107      	bne.n	800f8e2 <_printf_common+0x52>
 800f8d2:	f104 0a19 	add.w	sl, r4, #25
 800f8d6:	68e3      	ldr	r3, [r4, #12]
 800f8d8:	f8d9 2000 	ldr.w	r2, [r9]
 800f8dc:	1a9b      	subs	r3, r3, r2
 800f8de:	42ab      	cmp	r3, r5
 800f8e0:	dc28      	bgt.n	800f934 <_printf_common+0xa4>
 800f8e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f8e6:	6822      	ldr	r2, [r4, #0]
 800f8e8:	3300      	adds	r3, #0
 800f8ea:	bf18      	it	ne
 800f8ec:	2301      	movne	r3, #1
 800f8ee:	0692      	lsls	r2, r2, #26
 800f8f0:	d42d      	bmi.n	800f94e <_printf_common+0xbe>
 800f8f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8f6:	4639      	mov	r1, r7
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	47c0      	blx	r8
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	d020      	beq.n	800f942 <_printf_common+0xb2>
 800f900:	6823      	ldr	r3, [r4, #0]
 800f902:	68e5      	ldr	r5, [r4, #12]
 800f904:	f8d9 2000 	ldr.w	r2, [r9]
 800f908:	f003 0306 	and.w	r3, r3, #6
 800f90c:	2b04      	cmp	r3, #4
 800f90e:	bf08      	it	eq
 800f910:	1aad      	subeq	r5, r5, r2
 800f912:	68a3      	ldr	r3, [r4, #8]
 800f914:	6922      	ldr	r2, [r4, #16]
 800f916:	bf0c      	ite	eq
 800f918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f91c:	2500      	movne	r5, #0
 800f91e:	4293      	cmp	r3, r2
 800f920:	bfc4      	itt	gt
 800f922:	1a9b      	subgt	r3, r3, r2
 800f924:	18ed      	addgt	r5, r5, r3
 800f926:	f04f 0900 	mov.w	r9, #0
 800f92a:	341a      	adds	r4, #26
 800f92c:	454d      	cmp	r5, r9
 800f92e:	d11a      	bne.n	800f966 <_printf_common+0xd6>
 800f930:	2000      	movs	r0, #0
 800f932:	e008      	b.n	800f946 <_printf_common+0xb6>
 800f934:	2301      	movs	r3, #1
 800f936:	4652      	mov	r2, sl
 800f938:	4639      	mov	r1, r7
 800f93a:	4630      	mov	r0, r6
 800f93c:	47c0      	blx	r8
 800f93e:	3001      	adds	r0, #1
 800f940:	d103      	bne.n	800f94a <_printf_common+0xba>
 800f942:	f04f 30ff 	mov.w	r0, #4294967295
 800f946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f94a:	3501      	adds	r5, #1
 800f94c:	e7c3      	b.n	800f8d6 <_printf_common+0x46>
 800f94e:	18e1      	adds	r1, r4, r3
 800f950:	1c5a      	adds	r2, r3, #1
 800f952:	2030      	movs	r0, #48	; 0x30
 800f954:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f958:	4422      	add	r2, r4
 800f95a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f95e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f962:	3302      	adds	r3, #2
 800f964:	e7c5      	b.n	800f8f2 <_printf_common+0x62>
 800f966:	2301      	movs	r3, #1
 800f968:	4622      	mov	r2, r4
 800f96a:	4639      	mov	r1, r7
 800f96c:	4630      	mov	r0, r6
 800f96e:	47c0      	blx	r8
 800f970:	3001      	adds	r0, #1
 800f972:	d0e6      	beq.n	800f942 <_printf_common+0xb2>
 800f974:	f109 0901 	add.w	r9, r9, #1
 800f978:	e7d8      	b.n	800f92c <_printf_common+0x9c>
	...

0800f97c <_printf_i>:
 800f97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f980:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f984:	460c      	mov	r4, r1
 800f986:	7e09      	ldrb	r1, [r1, #24]
 800f988:	b085      	sub	sp, #20
 800f98a:	296e      	cmp	r1, #110	; 0x6e
 800f98c:	4617      	mov	r7, r2
 800f98e:	4606      	mov	r6, r0
 800f990:	4698      	mov	r8, r3
 800f992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f994:	f000 80b3 	beq.w	800fafe <_printf_i+0x182>
 800f998:	d822      	bhi.n	800f9e0 <_printf_i+0x64>
 800f99a:	2963      	cmp	r1, #99	; 0x63
 800f99c:	d036      	beq.n	800fa0c <_printf_i+0x90>
 800f99e:	d80a      	bhi.n	800f9b6 <_printf_i+0x3a>
 800f9a0:	2900      	cmp	r1, #0
 800f9a2:	f000 80b9 	beq.w	800fb18 <_printf_i+0x19c>
 800f9a6:	2958      	cmp	r1, #88	; 0x58
 800f9a8:	f000 8083 	beq.w	800fab2 <_printf_i+0x136>
 800f9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f9b4:	e032      	b.n	800fa1c <_printf_i+0xa0>
 800f9b6:	2964      	cmp	r1, #100	; 0x64
 800f9b8:	d001      	beq.n	800f9be <_printf_i+0x42>
 800f9ba:	2969      	cmp	r1, #105	; 0x69
 800f9bc:	d1f6      	bne.n	800f9ac <_printf_i+0x30>
 800f9be:	6820      	ldr	r0, [r4, #0]
 800f9c0:	6813      	ldr	r3, [r2, #0]
 800f9c2:	0605      	lsls	r5, r0, #24
 800f9c4:	f103 0104 	add.w	r1, r3, #4
 800f9c8:	d52a      	bpl.n	800fa20 <_printf_i+0xa4>
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	6011      	str	r1, [r2, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	da03      	bge.n	800f9da <_printf_i+0x5e>
 800f9d2:	222d      	movs	r2, #45	; 0x2d
 800f9d4:	425b      	negs	r3, r3
 800f9d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f9da:	486f      	ldr	r0, [pc, #444]	; (800fb98 <_printf_i+0x21c>)
 800f9dc:	220a      	movs	r2, #10
 800f9de:	e039      	b.n	800fa54 <_printf_i+0xd8>
 800f9e0:	2973      	cmp	r1, #115	; 0x73
 800f9e2:	f000 809d 	beq.w	800fb20 <_printf_i+0x1a4>
 800f9e6:	d808      	bhi.n	800f9fa <_printf_i+0x7e>
 800f9e8:	296f      	cmp	r1, #111	; 0x6f
 800f9ea:	d020      	beq.n	800fa2e <_printf_i+0xb2>
 800f9ec:	2970      	cmp	r1, #112	; 0x70
 800f9ee:	d1dd      	bne.n	800f9ac <_printf_i+0x30>
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	f043 0320 	orr.w	r3, r3, #32
 800f9f6:	6023      	str	r3, [r4, #0]
 800f9f8:	e003      	b.n	800fa02 <_printf_i+0x86>
 800f9fa:	2975      	cmp	r1, #117	; 0x75
 800f9fc:	d017      	beq.n	800fa2e <_printf_i+0xb2>
 800f9fe:	2978      	cmp	r1, #120	; 0x78
 800fa00:	d1d4      	bne.n	800f9ac <_printf_i+0x30>
 800fa02:	2378      	movs	r3, #120	; 0x78
 800fa04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fa08:	4864      	ldr	r0, [pc, #400]	; (800fb9c <_printf_i+0x220>)
 800fa0a:	e055      	b.n	800fab8 <_printf_i+0x13c>
 800fa0c:	6813      	ldr	r3, [r2, #0]
 800fa0e:	1d19      	adds	r1, r3, #4
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	6011      	str	r1, [r2, #0]
 800fa14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	e08c      	b.n	800fb3a <_printf_i+0x1be>
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	6011      	str	r1, [r2, #0]
 800fa24:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa28:	bf18      	it	ne
 800fa2a:	b21b      	sxthne	r3, r3
 800fa2c:	e7cf      	b.n	800f9ce <_printf_i+0x52>
 800fa2e:	6813      	ldr	r3, [r2, #0]
 800fa30:	6825      	ldr	r5, [r4, #0]
 800fa32:	1d18      	adds	r0, r3, #4
 800fa34:	6010      	str	r0, [r2, #0]
 800fa36:	0628      	lsls	r0, r5, #24
 800fa38:	d501      	bpl.n	800fa3e <_printf_i+0xc2>
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	e002      	b.n	800fa44 <_printf_i+0xc8>
 800fa3e:	0668      	lsls	r0, r5, #25
 800fa40:	d5fb      	bpl.n	800fa3a <_printf_i+0xbe>
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	4854      	ldr	r0, [pc, #336]	; (800fb98 <_printf_i+0x21c>)
 800fa46:	296f      	cmp	r1, #111	; 0x6f
 800fa48:	bf14      	ite	ne
 800fa4a:	220a      	movne	r2, #10
 800fa4c:	2208      	moveq	r2, #8
 800fa4e:	2100      	movs	r1, #0
 800fa50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa54:	6865      	ldr	r5, [r4, #4]
 800fa56:	60a5      	str	r5, [r4, #8]
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	f2c0 8095 	blt.w	800fb88 <_printf_i+0x20c>
 800fa5e:	6821      	ldr	r1, [r4, #0]
 800fa60:	f021 0104 	bic.w	r1, r1, #4
 800fa64:	6021      	str	r1, [r4, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d13d      	bne.n	800fae6 <_printf_i+0x16a>
 800fa6a:	2d00      	cmp	r5, #0
 800fa6c:	f040 808e 	bne.w	800fb8c <_printf_i+0x210>
 800fa70:	4665      	mov	r5, ip
 800fa72:	2a08      	cmp	r2, #8
 800fa74:	d10b      	bne.n	800fa8e <_printf_i+0x112>
 800fa76:	6823      	ldr	r3, [r4, #0]
 800fa78:	07db      	lsls	r3, r3, #31
 800fa7a:	d508      	bpl.n	800fa8e <_printf_i+0x112>
 800fa7c:	6923      	ldr	r3, [r4, #16]
 800fa7e:	6862      	ldr	r2, [r4, #4]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	bfde      	ittt	le
 800fa84:	2330      	movle	r3, #48	; 0x30
 800fa86:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa8e:	ebac 0305 	sub.w	r3, ip, r5
 800fa92:	6123      	str	r3, [r4, #16]
 800fa94:	f8cd 8000 	str.w	r8, [sp]
 800fa98:	463b      	mov	r3, r7
 800fa9a:	aa03      	add	r2, sp, #12
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	4630      	mov	r0, r6
 800faa0:	f7ff fef6 	bl	800f890 <_printf_common>
 800faa4:	3001      	adds	r0, #1
 800faa6:	d14d      	bne.n	800fb44 <_printf_i+0x1c8>
 800faa8:	f04f 30ff 	mov.w	r0, #4294967295
 800faac:	b005      	add	sp, #20
 800faae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fab2:	4839      	ldr	r0, [pc, #228]	; (800fb98 <_printf_i+0x21c>)
 800fab4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fab8:	6813      	ldr	r3, [r2, #0]
 800faba:	6821      	ldr	r1, [r4, #0]
 800fabc:	1d1d      	adds	r5, r3, #4
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	6015      	str	r5, [r2, #0]
 800fac2:	060a      	lsls	r2, r1, #24
 800fac4:	d50b      	bpl.n	800fade <_printf_i+0x162>
 800fac6:	07ca      	lsls	r2, r1, #31
 800fac8:	bf44      	itt	mi
 800faca:	f041 0120 	orrmi.w	r1, r1, #32
 800face:	6021      	strmi	r1, [r4, #0]
 800fad0:	b91b      	cbnz	r3, 800fada <_printf_i+0x15e>
 800fad2:	6822      	ldr	r2, [r4, #0]
 800fad4:	f022 0220 	bic.w	r2, r2, #32
 800fad8:	6022      	str	r2, [r4, #0]
 800fada:	2210      	movs	r2, #16
 800fadc:	e7b7      	b.n	800fa4e <_printf_i+0xd2>
 800fade:	064d      	lsls	r5, r1, #25
 800fae0:	bf48      	it	mi
 800fae2:	b29b      	uxthmi	r3, r3
 800fae4:	e7ef      	b.n	800fac6 <_printf_i+0x14a>
 800fae6:	4665      	mov	r5, ip
 800fae8:	fbb3 f1f2 	udiv	r1, r3, r2
 800faec:	fb02 3311 	mls	r3, r2, r1, r3
 800faf0:	5cc3      	ldrb	r3, [r0, r3]
 800faf2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800faf6:	460b      	mov	r3, r1
 800faf8:	2900      	cmp	r1, #0
 800fafa:	d1f5      	bne.n	800fae8 <_printf_i+0x16c>
 800fafc:	e7b9      	b.n	800fa72 <_printf_i+0xf6>
 800fafe:	6813      	ldr	r3, [r2, #0]
 800fb00:	6825      	ldr	r5, [r4, #0]
 800fb02:	6961      	ldr	r1, [r4, #20]
 800fb04:	1d18      	adds	r0, r3, #4
 800fb06:	6010      	str	r0, [r2, #0]
 800fb08:	0628      	lsls	r0, r5, #24
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	d501      	bpl.n	800fb12 <_printf_i+0x196>
 800fb0e:	6019      	str	r1, [r3, #0]
 800fb10:	e002      	b.n	800fb18 <_printf_i+0x19c>
 800fb12:	066a      	lsls	r2, r5, #25
 800fb14:	d5fb      	bpl.n	800fb0e <_printf_i+0x192>
 800fb16:	8019      	strh	r1, [r3, #0]
 800fb18:	2300      	movs	r3, #0
 800fb1a:	6123      	str	r3, [r4, #16]
 800fb1c:	4665      	mov	r5, ip
 800fb1e:	e7b9      	b.n	800fa94 <_printf_i+0x118>
 800fb20:	6813      	ldr	r3, [r2, #0]
 800fb22:	1d19      	adds	r1, r3, #4
 800fb24:	6011      	str	r1, [r2, #0]
 800fb26:	681d      	ldr	r5, [r3, #0]
 800fb28:	6862      	ldr	r2, [r4, #4]
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	f7f0 fb4f 	bl	80001d0 <memchr>
 800fb32:	b108      	cbz	r0, 800fb38 <_printf_i+0x1bc>
 800fb34:	1b40      	subs	r0, r0, r5
 800fb36:	6060      	str	r0, [r4, #4]
 800fb38:	6863      	ldr	r3, [r4, #4]
 800fb3a:	6123      	str	r3, [r4, #16]
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb42:	e7a7      	b.n	800fa94 <_printf_i+0x118>
 800fb44:	6923      	ldr	r3, [r4, #16]
 800fb46:	462a      	mov	r2, r5
 800fb48:	4639      	mov	r1, r7
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	47c0      	blx	r8
 800fb4e:	3001      	adds	r0, #1
 800fb50:	d0aa      	beq.n	800faa8 <_printf_i+0x12c>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	079b      	lsls	r3, r3, #30
 800fb56:	d413      	bmi.n	800fb80 <_printf_i+0x204>
 800fb58:	68e0      	ldr	r0, [r4, #12]
 800fb5a:	9b03      	ldr	r3, [sp, #12]
 800fb5c:	4298      	cmp	r0, r3
 800fb5e:	bfb8      	it	lt
 800fb60:	4618      	movlt	r0, r3
 800fb62:	e7a3      	b.n	800faac <_printf_i+0x130>
 800fb64:	2301      	movs	r3, #1
 800fb66:	464a      	mov	r2, r9
 800fb68:	4639      	mov	r1, r7
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	47c0      	blx	r8
 800fb6e:	3001      	adds	r0, #1
 800fb70:	d09a      	beq.n	800faa8 <_printf_i+0x12c>
 800fb72:	3501      	adds	r5, #1
 800fb74:	68e3      	ldr	r3, [r4, #12]
 800fb76:	9a03      	ldr	r2, [sp, #12]
 800fb78:	1a9b      	subs	r3, r3, r2
 800fb7a:	42ab      	cmp	r3, r5
 800fb7c:	dcf2      	bgt.n	800fb64 <_printf_i+0x1e8>
 800fb7e:	e7eb      	b.n	800fb58 <_printf_i+0x1dc>
 800fb80:	2500      	movs	r5, #0
 800fb82:	f104 0919 	add.w	r9, r4, #25
 800fb86:	e7f5      	b.n	800fb74 <_printf_i+0x1f8>
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1ac      	bne.n	800fae6 <_printf_i+0x16a>
 800fb8c:	7803      	ldrb	r3, [r0, #0]
 800fb8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb96:	e76c      	b.n	800fa72 <_printf_i+0xf6>
 800fb98:	08012139 	.word	0x08012139
 800fb9c:	0801214a 	.word	0x0801214a

0800fba0 <_sbrk_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	4c06      	ldr	r4, [pc, #24]	; (800fbbc <_sbrk_r+0x1c>)
 800fba4:	2300      	movs	r3, #0
 800fba6:	4605      	mov	r5, r0
 800fba8:	4608      	mov	r0, r1
 800fbaa:	6023      	str	r3, [r4, #0]
 800fbac:	f7f0 ff4e 	bl	8000a4c <_sbrk>
 800fbb0:	1c43      	adds	r3, r0, #1
 800fbb2:	d102      	bne.n	800fbba <_sbrk_r+0x1a>
 800fbb4:	6823      	ldr	r3, [r4, #0]
 800fbb6:	b103      	cbz	r3, 800fbba <_sbrk_r+0x1a>
 800fbb8:	602b      	str	r3, [r5, #0]
 800fbba:	bd38      	pop	{r3, r4, r5, pc}
 800fbbc:	2000e438 	.word	0x2000e438

0800fbc0 <__sread>:
 800fbc0:	b510      	push	{r4, lr}
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc8:	f000 fa96 	bl	80100f8 <_read_r>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	bfab      	itete	ge
 800fbd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fbd2:	89a3      	ldrhlt	r3, [r4, #12]
 800fbd4:	181b      	addge	r3, r3, r0
 800fbd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fbda:	bfac      	ite	ge
 800fbdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800fbde:	81a3      	strhlt	r3, [r4, #12]
 800fbe0:	bd10      	pop	{r4, pc}

0800fbe2 <__swrite>:
 800fbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe6:	461f      	mov	r7, r3
 800fbe8:	898b      	ldrh	r3, [r1, #12]
 800fbea:	05db      	lsls	r3, r3, #23
 800fbec:	4605      	mov	r5, r0
 800fbee:	460c      	mov	r4, r1
 800fbf0:	4616      	mov	r6, r2
 800fbf2:	d505      	bpl.n	800fc00 <__swrite+0x1e>
 800fbf4:	2302      	movs	r3, #2
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbfc:	f000 f9b6 	bl	800ff6c <_lseek_r>
 800fc00:	89a3      	ldrh	r3, [r4, #12]
 800fc02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc0a:	81a3      	strh	r3, [r4, #12]
 800fc0c:	4632      	mov	r2, r6
 800fc0e:	463b      	mov	r3, r7
 800fc10:	4628      	mov	r0, r5
 800fc12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc16:	f000 b869 	b.w	800fcec <_write_r>

0800fc1a <__sseek>:
 800fc1a:	b510      	push	{r4, lr}
 800fc1c:	460c      	mov	r4, r1
 800fc1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc22:	f000 f9a3 	bl	800ff6c <_lseek_r>
 800fc26:	1c43      	adds	r3, r0, #1
 800fc28:	89a3      	ldrh	r3, [r4, #12]
 800fc2a:	bf15      	itete	ne
 800fc2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc36:	81a3      	strheq	r3, [r4, #12]
 800fc38:	bf18      	it	ne
 800fc3a:	81a3      	strhne	r3, [r4, #12]
 800fc3c:	bd10      	pop	{r4, pc}

0800fc3e <__sclose>:
 800fc3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc42:	f000 b8d3 	b.w	800fdec <_close_r>
	...

0800fc48 <__swbuf_r>:
 800fc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc4a:	460e      	mov	r6, r1
 800fc4c:	4614      	mov	r4, r2
 800fc4e:	4605      	mov	r5, r0
 800fc50:	b118      	cbz	r0, 800fc5a <__swbuf_r+0x12>
 800fc52:	6983      	ldr	r3, [r0, #24]
 800fc54:	b90b      	cbnz	r3, 800fc5a <__swbuf_r+0x12>
 800fc56:	f7ff fbf7 	bl	800f448 <__sinit>
 800fc5a:	4b21      	ldr	r3, [pc, #132]	; (800fce0 <__swbuf_r+0x98>)
 800fc5c:	429c      	cmp	r4, r3
 800fc5e:	d12a      	bne.n	800fcb6 <__swbuf_r+0x6e>
 800fc60:	686c      	ldr	r4, [r5, #4]
 800fc62:	69a3      	ldr	r3, [r4, #24]
 800fc64:	60a3      	str	r3, [r4, #8]
 800fc66:	89a3      	ldrh	r3, [r4, #12]
 800fc68:	071a      	lsls	r2, r3, #28
 800fc6a:	d52e      	bpl.n	800fcca <__swbuf_r+0x82>
 800fc6c:	6923      	ldr	r3, [r4, #16]
 800fc6e:	b363      	cbz	r3, 800fcca <__swbuf_r+0x82>
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	6820      	ldr	r0, [r4, #0]
 800fc74:	1ac0      	subs	r0, r0, r3
 800fc76:	6963      	ldr	r3, [r4, #20]
 800fc78:	b2f6      	uxtb	r6, r6
 800fc7a:	4283      	cmp	r3, r0
 800fc7c:	4637      	mov	r7, r6
 800fc7e:	dc04      	bgt.n	800fc8a <__swbuf_r+0x42>
 800fc80:	4621      	mov	r1, r4
 800fc82:	4628      	mov	r0, r5
 800fc84:	f000 f948 	bl	800ff18 <_fflush_r>
 800fc88:	bb28      	cbnz	r0, 800fcd6 <__swbuf_r+0x8e>
 800fc8a:	68a3      	ldr	r3, [r4, #8]
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	60a3      	str	r3, [r4, #8]
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	6022      	str	r2, [r4, #0]
 800fc96:	701e      	strb	r6, [r3, #0]
 800fc98:	6963      	ldr	r3, [r4, #20]
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	4283      	cmp	r3, r0
 800fc9e:	d004      	beq.n	800fcaa <__swbuf_r+0x62>
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	07db      	lsls	r3, r3, #31
 800fca4:	d519      	bpl.n	800fcda <__swbuf_r+0x92>
 800fca6:	2e0a      	cmp	r6, #10
 800fca8:	d117      	bne.n	800fcda <__swbuf_r+0x92>
 800fcaa:	4621      	mov	r1, r4
 800fcac:	4628      	mov	r0, r5
 800fcae:	f000 f933 	bl	800ff18 <_fflush_r>
 800fcb2:	b190      	cbz	r0, 800fcda <__swbuf_r+0x92>
 800fcb4:	e00f      	b.n	800fcd6 <__swbuf_r+0x8e>
 800fcb6:	4b0b      	ldr	r3, [pc, #44]	; (800fce4 <__swbuf_r+0x9c>)
 800fcb8:	429c      	cmp	r4, r3
 800fcba:	d101      	bne.n	800fcc0 <__swbuf_r+0x78>
 800fcbc:	68ac      	ldr	r4, [r5, #8]
 800fcbe:	e7d0      	b.n	800fc62 <__swbuf_r+0x1a>
 800fcc0:	4b09      	ldr	r3, [pc, #36]	; (800fce8 <__swbuf_r+0xa0>)
 800fcc2:	429c      	cmp	r4, r3
 800fcc4:	bf08      	it	eq
 800fcc6:	68ec      	ldreq	r4, [r5, #12]
 800fcc8:	e7cb      	b.n	800fc62 <__swbuf_r+0x1a>
 800fcca:	4621      	mov	r1, r4
 800fccc:	4628      	mov	r0, r5
 800fcce:	f000 f81f 	bl	800fd10 <__swsetup_r>
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d0cc      	beq.n	800fc70 <__swbuf_r+0x28>
 800fcd6:	f04f 37ff 	mov.w	r7, #4294967295
 800fcda:	4638      	mov	r0, r7
 800fcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcde:	bf00      	nop
 800fce0:	080120e8 	.word	0x080120e8
 800fce4:	08012108 	.word	0x08012108
 800fce8:	080120c8 	.word	0x080120c8

0800fcec <_write_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4c07      	ldr	r4, [pc, #28]	; (800fd0c <_write_r+0x20>)
 800fcf0:	4605      	mov	r5, r0
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	6022      	str	r2, [r4, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f7f0 fe55 	bl	80009aa <_write>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_write_r+0x1e>
 800fd04:	6823      	ldr	r3, [r4, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_write_r+0x1e>
 800fd08:	602b      	str	r3, [r5, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	2000e438 	.word	0x2000e438

0800fd10 <__swsetup_r>:
 800fd10:	4b32      	ldr	r3, [pc, #200]	; (800fddc <__swsetup_r+0xcc>)
 800fd12:	b570      	push	{r4, r5, r6, lr}
 800fd14:	681d      	ldr	r5, [r3, #0]
 800fd16:	4606      	mov	r6, r0
 800fd18:	460c      	mov	r4, r1
 800fd1a:	b125      	cbz	r5, 800fd26 <__swsetup_r+0x16>
 800fd1c:	69ab      	ldr	r3, [r5, #24]
 800fd1e:	b913      	cbnz	r3, 800fd26 <__swsetup_r+0x16>
 800fd20:	4628      	mov	r0, r5
 800fd22:	f7ff fb91 	bl	800f448 <__sinit>
 800fd26:	4b2e      	ldr	r3, [pc, #184]	; (800fde0 <__swsetup_r+0xd0>)
 800fd28:	429c      	cmp	r4, r3
 800fd2a:	d10f      	bne.n	800fd4c <__swsetup_r+0x3c>
 800fd2c:	686c      	ldr	r4, [r5, #4]
 800fd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	0715      	lsls	r5, r2, #28
 800fd36:	d42c      	bmi.n	800fd92 <__swsetup_r+0x82>
 800fd38:	06d0      	lsls	r0, r2, #27
 800fd3a:	d411      	bmi.n	800fd60 <__swsetup_r+0x50>
 800fd3c:	2209      	movs	r2, #9
 800fd3e:	6032      	str	r2, [r6, #0]
 800fd40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd44:	81a3      	strh	r3, [r4, #12]
 800fd46:	f04f 30ff 	mov.w	r0, #4294967295
 800fd4a:	e03e      	b.n	800fdca <__swsetup_r+0xba>
 800fd4c:	4b25      	ldr	r3, [pc, #148]	; (800fde4 <__swsetup_r+0xd4>)
 800fd4e:	429c      	cmp	r4, r3
 800fd50:	d101      	bne.n	800fd56 <__swsetup_r+0x46>
 800fd52:	68ac      	ldr	r4, [r5, #8]
 800fd54:	e7eb      	b.n	800fd2e <__swsetup_r+0x1e>
 800fd56:	4b24      	ldr	r3, [pc, #144]	; (800fde8 <__swsetup_r+0xd8>)
 800fd58:	429c      	cmp	r4, r3
 800fd5a:	bf08      	it	eq
 800fd5c:	68ec      	ldreq	r4, [r5, #12]
 800fd5e:	e7e6      	b.n	800fd2e <__swsetup_r+0x1e>
 800fd60:	0751      	lsls	r1, r2, #29
 800fd62:	d512      	bpl.n	800fd8a <__swsetup_r+0x7a>
 800fd64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd66:	b141      	cbz	r1, 800fd7a <__swsetup_r+0x6a>
 800fd68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd6c:	4299      	cmp	r1, r3
 800fd6e:	d002      	beq.n	800fd76 <__swsetup_r+0x66>
 800fd70:	4630      	mov	r0, r6
 800fd72:	f000 f973 	bl	801005c <_free_r>
 800fd76:	2300      	movs	r3, #0
 800fd78:	6363      	str	r3, [r4, #52]	; 0x34
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd80:	81a3      	strh	r3, [r4, #12]
 800fd82:	2300      	movs	r3, #0
 800fd84:	6063      	str	r3, [r4, #4]
 800fd86:	6923      	ldr	r3, [r4, #16]
 800fd88:	6023      	str	r3, [r4, #0]
 800fd8a:	89a3      	ldrh	r3, [r4, #12]
 800fd8c:	f043 0308 	orr.w	r3, r3, #8
 800fd90:	81a3      	strh	r3, [r4, #12]
 800fd92:	6923      	ldr	r3, [r4, #16]
 800fd94:	b94b      	cbnz	r3, 800fdaa <__swsetup_r+0x9a>
 800fd96:	89a3      	ldrh	r3, [r4, #12]
 800fd98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fda0:	d003      	beq.n	800fdaa <__swsetup_r+0x9a>
 800fda2:	4621      	mov	r1, r4
 800fda4:	4630      	mov	r0, r6
 800fda6:	f000 f917 	bl	800ffd8 <__smakebuf_r>
 800fdaa:	89a2      	ldrh	r2, [r4, #12]
 800fdac:	f012 0301 	ands.w	r3, r2, #1
 800fdb0:	d00c      	beq.n	800fdcc <__swsetup_r+0xbc>
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	60a3      	str	r3, [r4, #8]
 800fdb6:	6963      	ldr	r3, [r4, #20]
 800fdb8:	425b      	negs	r3, r3
 800fdba:	61a3      	str	r3, [r4, #24]
 800fdbc:	6923      	ldr	r3, [r4, #16]
 800fdbe:	b953      	cbnz	r3, 800fdd6 <__swsetup_r+0xc6>
 800fdc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdc4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fdc8:	d1ba      	bne.n	800fd40 <__swsetup_r+0x30>
 800fdca:	bd70      	pop	{r4, r5, r6, pc}
 800fdcc:	0792      	lsls	r2, r2, #30
 800fdce:	bf58      	it	pl
 800fdd0:	6963      	ldrpl	r3, [r4, #20]
 800fdd2:	60a3      	str	r3, [r4, #8]
 800fdd4:	e7f2      	b.n	800fdbc <__swsetup_r+0xac>
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	e7f7      	b.n	800fdca <__swsetup_r+0xba>
 800fdda:	bf00      	nop
 800fddc:	20000010 	.word	0x20000010
 800fde0:	080120e8 	.word	0x080120e8
 800fde4:	08012108 	.word	0x08012108
 800fde8:	080120c8 	.word	0x080120c8

0800fdec <_close_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4c06      	ldr	r4, [pc, #24]	; (800fe08 <_close_r+0x1c>)
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	4605      	mov	r5, r0
 800fdf4:	4608      	mov	r0, r1
 800fdf6:	6023      	str	r3, [r4, #0]
 800fdf8:	f7f0 fdf3 	bl	80009e2 <_close>
 800fdfc:	1c43      	adds	r3, r0, #1
 800fdfe:	d102      	bne.n	800fe06 <_close_r+0x1a>
 800fe00:	6823      	ldr	r3, [r4, #0]
 800fe02:	b103      	cbz	r3, 800fe06 <_close_r+0x1a>
 800fe04:	602b      	str	r3, [r5, #0]
 800fe06:	bd38      	pop	{r3, r4, r5, pc}
 800fe08:	2000e438 	.word	0x2000e438

0800fe0c <__sflush_r>:
 800fe0c:	898a      	ldrh	r2, [r1, #12]
 800fe0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe12:	4605      	mov	r5, r0
 800fe14:	0710      	lsls	r0, r2, #28
 800fe16:	460c      	mov	r4, r1
 800fe18:	d458      	bmi.n	800fecc <__sflush_r+0xc0>
 800fe1a:	684b      	ldr	r3, [r1, #4]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	dc05      	bgt.n	800fe2c <__sflush_r+0x20>
 800fe20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	dc02      	bgt.n	800fe2c <__sflush_r+0x20>
 800fe26:	2000      	movs	r0, #0
 800fe28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe2e:	2e00      	cmp	r6, #0
 800fe30:	d0f9      	beq.n	800fe26 <__sflush_r+0x1a>
 800fe32:	2300      	movs	r3, #0
 800fe34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe38:	682f      	ldr	r7, [r5, #0]
 800fe3a:	6a21      	ldr	r1, [r4, #32]
 800fe3c:	602b      	str	r3, [r5, #0]
 800fe3e:	d032      	beq.n	800fea6 <__sflush_r+0x9a>
 800fe40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe42:	89a3      	ldrh	r3, [r4, #12]
 800fe44:	075a      	lsls	r2, r3, #29
 800fe46:	d505      	bpl.n	800fe54 <__sflush_r+0x48>
 800fe48:	6863      	ldr	r3, [r4, #4]
 800fe4a:	1ac0      	subs	r0, r0, r3
 800fe4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe4e:	b10b      	cbz	r3, 800fe54 <__sflush_r+0x48>
 800fe50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe52:	1ac0      	subs	r0, r0, r3
 800fe54:	2300      	movs	r3, #0
 800fe56:	4602      	mov	r2, r0
 800fe58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe5a:	6a21      	ldr	r1, [r4, #32]
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	47b0      	blx	r6
 800fe60:	1c43      	adds	r3, r0, #1
 800fe62:	89a3      	ldrh	r3, [r4, #12]
 800fe64:	d106      	bne.n	800fe74 <__sflush_r+0x68>
 800fe66:	6829      	ldr	r1, [r5, #0]
 800fe68:	291d      	cmp	r1, #29
 800fe6a:	d848      	bhi.n	800fefe <__sflush_r+0xf2>
 800fe6c:	4a29      	ldr	r2, [pc, #164]	; (800ff14 <__sflush_r+0x108>)
 800fe6e:	40ca      	lsrs	r2, r1
 800fe70:	07d6      	lsls	r6, r2, #31
 800fe72:	d544      	bpl.n	800fefe <__sflush_r+0xf2>
 800fe74:	2200      	movs	r2, #0
 800fe76:	6062      	str	r2, [r4, #4]
 800fe78:	04d9      	lsls	r1, r3, #19
 800fe7a:	6922      	ldr	r2, [r4, #16]
 800fe7c:	6022      	str	r2, [r4, #0]
 800fe7e:	d504      	bpl.n	800fe8a <__sflush_r+0x7e>
 800fe80:	1c42      	adds	r2, r0, #1
 800fe82:	d101      	bne.n	800fe88 <__sflush_r+0x7c>
 800fe84:	682b      	ldr	r3, [r5, #0]
 800fe86:	b903      	cbnz	r3, 800fe8a <__sflush_r+0x7e>
 800fe88:	6560      	str	r0, [r4, #84]	; 0x54
 800fe8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe8c:	602f      	str	r7, [r5, #0]
 800fe8e:	2900      	cmp	r1, #0
 800fe90:	d0c9      	beq.n	800fe26 <__sflush_r+0x1a>
 800fe92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe96:	4299      	cmp	r1, r3
 800fe98:	d002      	beq.n	800fea0 <__sflush_r+0x94>
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	f000 f8de 	bl	801005c <_free_r>
 800fea0:	2000      	movs	r0, #0
 800fea2:	6360      	str	r0, [r4, #52]	; 0x34
 800fea4:	e7c0      	b.n	800fe28 <__sflush_r+0x1c>
 800fea6:	2301      	movs	r3, #1
 800fea8:	4628      	mov	r0, r5
 800feaa:	47b0      	blx	r6
 800feac:	1c41      	adds	r1, r0, #1
 800feae:	d1c8      	bne.n	800fe42 <__sflush_r+0x36>
 800feb0:	682b      	ldr	r3, [r5, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d0c5      	beq.n	800fe42 <__sflush_r+0x36>
 800feb6:	2b1d      	cmp	r3, #29
 800feb8:	d001      	beq.n	800febe <__sflush_r+0xb2>
 800feba:	2b16      	cmp	r3, #22
 800febc:	d101      	bne.n	800fec2 <__sflush_r+0xb6>
 800febe:	602f      	str	r7, [r5, #0]
 800fec0:	e7b1      	b.n	800fe26 <__sflush_r+0x1a>
 800fec2:	89a3      	ldrh	r3, [r4, #12]
 800fec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fec8:	81a3      	strh	r3, [r4, #12]
 800feca:	e7ad      	b.n	800fe28 <__sflush_r+0x1c>
 800fecc:	690f      	ldr	r7, [r1, #16]
 800fece:	2f00      	cmp	r7, #0
 800fed0:	d0a9      	beq.n	800fe26 <__sflush_r+0x1a>
 800fed2:	0793      	lsls	r3, r2, #30
 800fed4:	680e      	ldr	r6, [r1, #0]
 800fed6:	bf08      	it	eq
 800fed8:	694b      	ldreq	r3, [r1, #20]
 800feda:	600f      	str	r7, [r1, #0]
 800fedc:	bf18      	it	ne
 800fede:	2300      	movne	r3, #0
 800fee0:	eba6 0807 	sub.w	r8, r6, r7
 800fee4:	608b      	str	r3, [r1, #8]
 800fee6:	f1b8 0f00 	cmp.w	r8, #0
 800feea:	dd9c      	ble.n	800fe26 <__sflush_r+0x1a>
 800feec:	4643      	mov	r3, r8
 800feee:	463a      	mov	r2, r7
 800fef0:	6a21      	ldr	r1, [r4, #32]
 800fef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fef4:	4628      	mov	r0, r5
 800fef6:	47b0      	blx	r6
 800fef8:	2800      	cmp	r0, #0
 800fefa:	dc06      	bgt.n	800ff0a <__sflush_r+0xfe>
 800fefc:	89a3      	ldrh	r3, [r4, #12]
 800fefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff02:	81a3      	strh	r3, [r4, #12]
 800ff04:	f04f 30ff 	mov.w	r0, #4294967295
 800ff08:	e78e      	b.n	800fe28 <__sflush_r+0x1c>
 800ff0a:	4407      	add	r7, r0
 800ff0c:	eba8 0800 	sub.w	r8, r8, r0
 800ff10:	e7e9      	b.n	800fee6 <__sflush_r+0xda>
 800ff12:	bf00      	nop
 800ff14:	20400001 	.word	0x20400001

0800ff18 <_fflush_r>:
 800ff18:	b538      	push	{r3, r4, r5, lr}
 800ff1a:	690b      	ldr	r3, [r1, #16]
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	460c      	mov	r4, r1
 800ff20:	b1db      	cbz	r3, 800ff5a <_fflush_r+0x42>
 800ff22:	b118      	cbz	r0, 800ff2c <_fflush_r+0x14>
 800ff24:	6983      	ldr	r3, [r0, #24]
 800ff26:	b90b      	cbnz	r3, 800ff2c <_fflush_r+0x14>
 800ff28:	f7ff fa8e 	bl	800f448 <__sinit>
 800ff2c:	4b0c      	ldr	r3, [pc, #48]	; (800ff60 <_fflush_r+0x48>)
 800ff2e:	429c      	cmp	r4, r3
 800ff30:	d109      	bne.n	800ff46 <_fflush_r+0x2e>
 800ff32:	686c      	ldr	r4, [r5, #4]
 800ff34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff38:	b17b      	cbz	r3, 800ff5a <_fflush_r+0x42>
 800ff3a:	4621      	mov	r1, r4
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff42:	f7ff bf63 	b.w	800fe0c <__sflush_r>
 800ff46:	4b07      	ldr	r3, [pc, #28]	; (800ff64 <_fflush_r+0x4c>)
 800ff48:	429c      	cmp	r4, r3
 800ff4a:	d101      	bne.n	800ff50 <_fflush_r+0x38>
 800ff4c:	68ac      	ldr	r4, [r5, #8]
 800ff4e:	e7f1      	b.n	800ff34 <_fflush_r+0x1c>
 800ff50:	4b05      	ldr	r3, [pc, #20]	; (800ff68 <_fflush_r+0x50>)
 800ff52:	429c      	cmp	r4, r3
 800ff54:	bf08      	it	eq
 800ff56:	68ec      	ldreq	r4, [r5, #12]
 800ff58:	e7ec      	b.n	800ff34 <_fflush_r+0x1c>
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	bd38      	pop	{r3, r4, r5, pc}
 800ff5e:	bf00      	nop
 800ff60:	080120e8 	.word	0x080120e8
 800ff64:	08012108 	.word	0x08012108
 800ff68:	080120c8 	.word	0x080120c8

0800ff6c <_lseek_r>:
 800ff6c:	b538      	push	{r3, r4, r5, lr}
 800ff6e:	4c07      	ldr	r4, [pc, #28]	; (800ff8c <_lseek_r+0x20>)
 800ff70:	4605      	mov	r5, r0
 800ff72:	4608      	mov	r0, r1
 800ff74:	4611      	mov	r1, r2
 800ff76:	2200      	movs	r2, #0
 800ff78:	6022      	str	r2, [r4, #0]
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	f7f0 fd58 	bl	8000a30 <_lseek>
 800ff80:	1c43      	adds	r3, r0, #1
 800ff82:	d102      	bne.n	800ff8a <_lseek_r+0x1e>
 800ff84:	6823      	ldr	r3, [r4, #0]
 800ff86:	b103      	cbz	r3, 800ff8a <_lseek_r+0x1e>
 800ff88:	602b      	str	r3, [r5, #0]
 800ff8a:	bd38      	pop	{r3, r4, r5, pc}
 800ff8c:	2000e438 	.word	0x2000e438

0800ff90 <__swhatbuf_r>:
 800ff90:	b570      	push	{r4, r5, r6, lr}
 800ff92:	460e      	mov	r6, r1
 800ff94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff98:	2900      	cmp	r1, #0
 800ff9a:	b096      	sub	sp, #88	; 0x58
 800ff9c:	4614      	mov	r4, r2
 800ff9e:	461d      	mov	r5, r3
 800ffa0:	da07      	bge.n	800ffb2 <__swhatbuf_r+0x22>
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	602b      	str	r3, [r5, #0]
 800ffa6:	89b3      	ldrh	r3, [r6, #12]
 800ffa8:	061a      	lsls	r2, r3, #24
 800ffaa:	d410      	bmi.n	800ffce <__swhatbuf_r+0x3e>
 800ffac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffb0:	e00e      	b.n	800ffd0 <__swhatbuf_r+0x40>
 800ffb2:	466a      	mov	r2, sp
 800ffb4:	f000 f8b2 	bl	801011c <_fstat_r>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	dbf2      	blt.n	800ffa2 <__swhatbuf_r+0x12>
 800ffbc:	9a01      	ldr	r2, [sp, #4]
 800ffbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ffc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ffc6:	425a      	negs	r2, r3
 800ffc8:	415a      	adcs	r2, r3
 800ffca:	602a      	str	r2, [r5, #0]
 800ffcc:	e7ee      	b.n	800ffac <__swhatbuf_r+0x1c>
 800ffce:	2340      	movs	r3, #64	; 0x40
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	6023      	str	r3, [r4, #0]
 800ffd4:	b016      	add	sp, #88	; 0x58
 800ffd6:	bd70      	pop	{r4, r5, r6, pc}

0800ffd8 <__smakebuf_r>:
 800ffd8:	898b      	ldrh	r3, [r1, #12]
 800ffda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffdc:	079d      	lsls	r5, r3, #30
 800ffde:	4606      	mov	r6, r0
 800ffe0:	460c      	mov	r4, r1
 800ffe2:	d507      	bpl.n	800fff4 <__smakebuf_r+0x1c>
 800ffe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ffe8:	6023      	str	r3, [r4, #0]
 800ffea:	6123      	str	r3, [r4, #16]
 800ffec:	2301      	movs	r3, #1
 800ffee:	6163      	str	r3, [r4, #20]
 800fff0:	b002      	add	sp, #8
 800fff2:	bd70      	pop	{r4, r5, r6, pc}
 800fff4:	ab01      	add	r3, sp, #4
 800fff6:	466a      	mov	r2, sp
 800fff8:	f7ff ffca 	bl	800ff90 <__swhatbuf_r>
 800fffc:	9900      	ldr	r1, [sp, #0]
 800fffe:	4605      	mov	r5, r0
 8010000:	4630      	mov	r0, r6
 8010002:	f7ff faab 	bl	800f55c <_malloc_r>
 8010006:	b948      	cbnz	r0, 801001c <__smakebuf_r+0x44>
 8010008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801000c:	059a      	lsls	r2, r3, #22
 801000e:	d4ef      	bmi.n	800fff0 <__smakebuf_r+0x18>
 8010010:	f023 0303 	bic.w	r3, r3, #3
 8010014:	f043 0302 	orr.w	r3, r3, #2
 8010018:	81a3      	strh	r3, [r4, #12]
 801001a:	e7e3      	b.n	800ffe4 <__smakebuf_r+0xc>
 801001c:	4b0d      	ldr	r3, [pc, #52]	; (8010054 <__smakebuf_r+0x7c>)
 801001e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010020:	89a3      	ldrh	r3, [r4, #12]
 8010022:	6020      	str	r0, [r4, #0]
 8010024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010028:	81a3      	strh	r3, [r4, #12]
 801002a:	9b00      	ldr	r3, [sp, #0]
 801002c:	6163      	str	r3, [r4, #20]
 801002e:	9b01      	ldr	r3, [sp, #4]
 8010030:	6120      	str	r0, [r4, #16]
 8010032:	b15b      	cbz	r3, 801004c <__smakebuf_r+0x74>
 8010034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010038:	4630      	mov	r0, r6
 801003a:	f000 f881 	bl	8010140 <_isatty_r>
 801003e:	b128      	cbz	r0, 801004c <__smakebuf_r+0x74>
 8010040:	89a3      	ldrh	r3, [r4, #12]
 8010042:	f023 0303 	bic.w	r3, r3, #3
 8010046:	f043 0301 	orr.w	r3, r3, #1
 801004a:	81a3      	strh	r3, [r4, #12]
 801004c:	89a3      	ldrh	r3, [r4, #12]
 801004e:	431d      	orrs	r5, r3
 8010050:	81a5      	strh	r5, [r4, #12]
 8010052:	e7cd      	b.n	800fff0 <__smakebuf_r+0x18>
 8010054:	0800f411 	.word	0x0800f411

08010058 <__malloc_lock>:
 8010058:	4770      	bx	lr

0801005a <__malloc_unlock>:
 801005a:	4770      	bx	lr

0801005c <_free_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	4605      	mov	r5, r0
 8010060:	2900      	cmp	r1, #0
 8010062:	d045      	beq.n	80100f0 <_free_r+0x94>
 8010064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010068:	1f0c      	subs	r4, r1, #4
 801006a:	2b00      	cmp	r3, #0
 801006c:	bfb8      	it	lt
 801006e:	18e4      	addlt	r4, r4, r3
 8010070:	f7ff fff2 	bl	8010058 <__malloc_lock>
 8010074:	4a1f      	ldr	r2, [pc, #124]	; (80100f4 <_free_r+0x98>)
 8010076:	6813      	ldr	r3, [r2, #0]
 8010078:	4610      	mov	r0, r2
 801007a:	b933      	cbnz	r3, 801008a <_free_r+0x2e>
 801007c:	6063      	str	r3, [r4, #4]
 801007e:	6014      	str	r4, [r2, #0]
 8010080:	4628      	mov	r0, r5
 8010082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010086:	f7ff bfe8 	b.w	801005a <__malloc_unlock>
 801008a:	42a3      	cmp	r3, r4
 801008c:	d90c      	bls.n	80100a8 <_free_r+0x4c>
 801008e:	6821      	ldr	r1, [r4, #0]
 8010090:	1862      	adds	r2, r4, r1
 8010092:	4293      	cmp	r3, r2
 8010094:	bf04      	itt	eq
 8010096:	681a      	ldreq	r2, [r3, #0]
 8010098:	685b      	ldreq	r3, [r3, #4]
 801009a:	6063      	str	r3, [r4, #4]
 801009c:	bf04      	itt	eq
 801009e:	1852      	addeq	r2, r2, r1
 80100a0:	6022      	streq	r2, [r4, #0]
 80100a2:	6004      	str	r4, [r0, #0]
 80100a4:	e7ec      	b.n	8010080 <_free_r+0x24>
 80100a6:	4613      	mov	r3, r2
 80100a8:	685a      	ldr	r2, [r3, #4]
 80100aa:	b10a      	cbz	r2, 80100b0 <_free_r+0x54>
 80100ac:	42a2      	cmp	r2, r4
 80100ae:	d9fa      	bls.n	80100a6 <_free_r+0x4a>
 80100b0:	6819      	ldr	r1, [r3, #0]
 80100b2:	1858      	adds	r0, r3, r1
 80100b4:	42a0      	cmp	r0, r4
 80100b6:	d10b      	bne.n	80100d0 <_free_r+0x74>
 80100b8:	6820      	ldr	r0, [r4, #0]
 80100ba:	4401      	add	r1, r0
 80100bc:	1858      	adds	r0, r3, r1
 80100be:	4282      	cmp	r2, r0
 80100c0:	6019      	str	r1, [r3, #0]
 80100c2:	d1dd      	bne.n	8010080 <_free_r+0x24>
 80100c4:	6810      	ldr	r0, [r2, #0]
 80100c6:	6852      	ldr	r2, [r2, #4]
 80100c8:	605a      	str	r2, [r3, #4]
 80100ca:	4401      	add	r1, r0
 80100cc:	6019      	str	r1, [r3, #0]
 80100ce:	e7d7      	b.n	8010080 <_free_r+0x24>
 80100d0:	d902      	bls.n	80100d8 <_free_r+0x7c>
 80100d2:	230c      	movs	r3, #12
 80100d4:	602b      	str	r3, [r5, #0]
 80100d6:	e7d3      	b.n	8010080 <_free_r+0x24>
 80100d8:	6820      	ldr	r0, [r4, #0]
 80100da:	1821      	adds	r1, r4, r0
 80100dc:	428a      	cmp	r2, r1
 80100de:	bf04      	itt	eq
 80100e0:	6811      	ldreq	r1, [r2, #0]
 80100e2:	6852      	ldreq	r2, [r2, #4]
 80100e4:	6062      	str	r2, [r4, #4]
 80100e6:	bf04      	itt	eq
 80100e8:	1809      	addeq	r1, r1, r0
 80100ea:	6021      	streq	r1, [r4, #0]
 80100ec:	605c      	str	r4, [r3, #4]
 80100ee:	e7c7      	b.n	8010080 <_free_r+0x24>
 80100f0:	bd38      	pop	{r3, r4, r5, pc}
 80100f2:	bf00      	nop
 80100f4:	200041c8 	.word	0x200041c8

080100f8 <_read_r>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	4c07      	ldr	r4, [pc, #28]	; (8010118 <_read_r+0x20>)
 80100fc:	4605      	mov	r5, r0
 80100fe:	4608      	mov	r0, r1
 8010100:	4611      	mov	r1, r2
 8010102:	2200      	movs	r2, #0
 8010104:	6022      	str	r2, [r4, #0]
 8010106:	461a      	mov	r2, r3
 8010108:	f7f0 fc32 	bl	8000970 <_read>
 801010c:	1c43      	adds	r3, r0, #1
 801010e:	d102      	bne.n	8010116 <_read_r+0x1e>
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	b103      	cbz	r3, 8010116 <_read_r+0x1e>
 8010114:	602b      	str	r3, [r5, #0]
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	2000e438 	.word	0x2000e438

0801011c <_fstat_r>:
 801011c:	b538      	push	{r3, r4, r5, lr}
 801011e:	4c07      	ldr	r4, [pc, #28]	; (801013c <_fstat_r+0x20>)
 8010120:	2300      	movs	r3, #0
 8010122:	4605      	mov	r5, r0
 8010124:	4608      	mov	r0, r1
 8010126:	4611      	mov	r1, r2
 8010128:	6023      	str	r3, [r4, #0]
 801012a:	f7f0 fc66 	bl	80009fa <_fstat>
 801012e:	1c43      	adds	r3, r0, #1
 8010130:	d102      	bne.n	8010138 <_fstat_r+0x1c>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	b103      	cbz	r3, 8010138 <_fstat_r+0x1c>
 8010136:	602b      	str	r3, [r5, #0]
 8010138:	bd38      	pop	{r3, r4, r5, pc}
 801013a:	bf00      	nop
 801013c:	2000e438 	.word	0x2000e438

08010140 <_isatty_r>:
 8010140:	b538      	push	{r3, r4, r5, lr}
 8010142:	4c06      	ldr	r4, [pc, #24]	; (801015c <_isatty_r+0x1c>)
 8010144:	2300      	movs	r3, #0
 8010146:	4605      	mov	r5, r0
 8010148:	4608      	mov	r0, r1
 801014a:	6023      	str	r3, [r4, #0]
 801014c:	f7f0 fc65 	bl	8000a1a <_isatty>
 8010150:	1c43      	adds	r3, r0, #1
 8010152:	d102      	bne.n	801015a <_isatty_r+0x1a>
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	b103      	cbz	r3, 801015a <_isatty_r+0x1a>
 8010158:	602b      	str	r3, [r5, #0]
 801015a:	bd38      	pop	{r3, r4, r5, pc}
 801015c:	2000e438 	.word	0x2000e438

08010160 <_init>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	bf00      	nop
 8010164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010166:	bc08      	pop	{r3}
 8010168:	469e      	mov	lr, r3
 801016a:	4770      	bx	lr

0801016c <_fini>:
 801016c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801016e:	bf00      	nop
 8010170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010172:	bc08      	pop	{r3}
 8010174:	469e      	mov	lr, r3
 8010176:	4770      	bx	lr
