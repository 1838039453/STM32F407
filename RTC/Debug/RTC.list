
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08009888  08009888  00019888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a03c  0800a03c  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800a03c  0800a03c  0001a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a044  0800a044  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a044  0800a044  0001a044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a048  0800a048  0001a048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800a04c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000248  0800a290  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800a290  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec27  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026ba  00000000  00000000  0002ee9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  00031558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  00031ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000230b1  00000000  00000000  00032930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb07  00000000  00000000  000559e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c88c9  00000000  00000000  000624e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012adb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff0  00000000  00000000  0012ae2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800986c 	.word	0x0800986c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800986c 	.word	0x0800986c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295
 8000be6:	f000 b9bd 	b.w	8000f64 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_DMA_Init+0x3c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <MX_DMA_Init+0x3c>)
 8000f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_DMA_Init+0x3c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	203a      	movs	r0, #58	; 0x3a
 8000f90:	f000 ff2f 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f94:	203a      	movs	r0, #58	; 0x3a
 8000f96:	f000 ff48 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_GPIO_Init+0x84>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a1d      	ldr	r2, [pc, #116]	; (800102c <MX_GPIO_Init+0x84>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_GPIO_Init+0x84>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_GPIO_Init+0x84>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <MX_GPIO_Init+0x84>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_GPIO_Init+0x84>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_GPIO_Init+0x84>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <MX_GPIO_Init+0x84>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <MX_GPIO_Init+0x84>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_GPIO_Init+0x84>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <MX_GPIO_Init+0x84>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_GPIO_Init+0x84>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b099      	sub	sp, #100	; 0x64
 8001034:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 fd8f 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f82f 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f7ff ffb3 	bl	8000fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001042:	f7ff ff91 	bl	8000f68 <MX_DMA_Init>
  MX_RTC_Init();
 8001046:	f000 f8b3 	bl	80011b0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800104a:	f000 fb17 	bl	800167c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_Debug_Init();
 800104e:	f000 fce5 	bl	8001a1c <UART_Debug_Init>
  printf("uart init ok...\r\n");
 8001052:	480f      	ldr	r0, [pc, #60]	; (8001090 <main+0x60>)
 8001054:	f004 fe30 	bl	8005cb8 <puts>
  struct tm *ts;
  char buf [80];

  while (1)
  {
	now = time (NULL);
 8001058:	2000      	movs	r0, #0
 800105a:	f000 f973 	bl	8001344 <time>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	ts = localtime (& now);
 8001066:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fcf2 	bl	8004a54 <localtime>
 8001070:	65f8      	str	r0, [r7, #92]	; 0x5c
	strftime (buf, sizeof (buf), "%a %Y-%m-%d %H:%M:%S %Z", ts);
 8001072:	4638      	mov	r0, r7
 8001074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <main+0x64>)
 8001078:	2150      	movs	r1, #80	; 0x50
 800107a:	f005 fb9b 	bl	80067b4 <strftime>
	printf("%s \n", buf);
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <main+0x68>)
 8001084:	f004 fda4 	bl	8005bd0 <iprintf>

	UART_Debug_Process();
 8001088:	f000 fce2 	bl	8001a50 <UART_Debug_Process>
	now = time (NULL);
 800108c:	e7e4      	b.n	8001058 <main+0x28>
 800108e:	bf00      	nop
 8001090:	08009888 	.word	0x08009888
 8001094:	0800989c 	.word	0x0800989c
 8001098:	080098b4 	.word	0x080098b4

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b098      	sub	sp, #96	; 0x60
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fdef 	bl	8004c8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <SystemClock_Config+0xfc>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a30      	ldr	r2, [pc, #192]	; (8001198 <SystemClock_Config+0xfc>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <SystemClock_Config+0xfc>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <SystemClock_Config+0x100>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a2a      	ldr	r2, [pc, #168]	; (800119c <SystemClock_Config+0x100>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <SystemClock_Config+0x100>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001106:	230a      	movs	r3, #10
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110a:	2301      	movs	r3, #1
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110e:	2310      	movs	r3, #16
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111a:	2300      	movs	r3, #0
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800111e:	2308      	movs	r3, #8
 8001120:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001122:	23a8      	movs	r3, #168	; 0xa8
 8001124:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800112a:	2304      	movs	r3, #4
 800112c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fc36 	bl	80029a4 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800113e:	f000 f82f 	bl	80011a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2302      	movs	r3, #2
 8001148:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2105      	movs	r1, #5
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fe61 	bl	8002e28 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800116c:	f000 f818 	bl	80011a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001170:	2302      	movs	r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001178:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4618      	mov	r0, r3
 8001180:	f002 f840 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800118a:	f000 f809 	bl	80011a0 <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3760      	adds	r7, #96	; 0x60
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <MX_RTC_Init+0xc0>)
 80011ca:	4a2a      	ldr	r2, [pc, #168]	; (8001274 <MX_RTC_Init+0xc4>)
 80011cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_RTC_Init+0xc0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <MX_RTC_Init+0xc0>)
 80011d6:	227f      	movs	r2, #127	; 0x7f
 80011d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_RTC_Init+0xc0>)
 80011dc:	22ff      	movs	r2, #255	; 0xff
 80011de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_RTC_Init+0xc0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_RTC_Init+0xc0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_RTC_Init+0xc0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011f2:	481f      	ldr	r0, [pc, #124]	; (8001270 <MX_RTC_Init+0xc0>)
 80011f4:	f002 f8e8 	bl	80033c8 <HAL_RTC_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011fe:	f7ff ffcf 	bl	80011a0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 10;
 8001202:	230a      	movs	r3, #10
 8001204:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 10;
 8001206:	230a      	movs	r3, #10
 8001208:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	4814      	ldr	r0, [pc, #80]	; (8001270 <MX_RTC_Init+0xc0>)
 800121e:	f002 f964 	bl	80034ea <HAL_RTC_SetTime>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001228:	f7ff ffba 	bl	80011a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800122c:	2301      	movs	r3, #1
 800122e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001230:	2310      	movs	r3, #16
 8001232:	707b      	strb	r3, [r7, #1]
  sDate.Date = 28;
 8001234:	231c      	movs	r3, #28
 8001236:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 19;
 8001238:	2313      	movs	r3, #19
 800123a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <MX_RTC_Init+0xc0>)
 8001244:	f002 fa6c 	bl	8003720 <HAL_RTC_SetDate>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800124e:	f7ff ffa7 	bl	80011a0 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001252:	2204      	movs	r2, #4
 8001254:	2100      	movs	r1, #0
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_RTC_Init+0xc0>)
 8001258:	f002 fbe8 	bl	8003a2c <HAL_RTCEx_SetWakeUpTimer_IT>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001262:	f7ff ff9d 	bl	80011a0 <Error_Handler>
  }

}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200003a8 	.word	0x200003a8
 8001274:	40002800 	.word	0x40002800

08001278 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b095      	sub	sp, #84	; 0x54
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a22      	ldr	r2, [pc, #136]	; (8001310 <HAL_RTC_MspInit+0x98>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d13d      	bne.n	8001306 <HAL_RTC_MspInit+0x8e>
	time_t settime;
	struct tm orig;
	RTC_TimeTypeDef RTC_TimeStruct;
	RTC_DateTypeDef RTC_DateStruct;

	HAL_RTC_GetTime(&hrtc, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800128a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	4820      	ldr	r0, [pc, #128]	; (8001314 <HAL_RTC_MspInit+0x9c>)
 8001294:	f002 f9e6 	bl	8003664 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_DateStruct, RTC_FORMAT_BIN);
 8001298:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	481c      	ldr	r0, [pc, #112]	; (8001314 <HAL_RTC_MspInit+0x9c>)
 80012a2:	f002 fae4 	bl	800386e <HAL_RTC_GetDate>

	orig.tm_sec = RTC_TimeStruct.Seconds;
 80012a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012aa:	60fb      	str	r3, [r7, #12]
	orig.tm_min = RTC_TimeStruct.Minutes;
 80012ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012b0:	613b      	str	r3, [r7, #16]
	orig.tm_hour = RTC_TimeStruct.Hours;
 80012b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012b6:	617b      	str	r3, [r7, #20]
	orig.tm_mday = RTC_DateStruct.Date;
 80012b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80012bc:	61bb      	str	r3, [r7, #24]
	orig.tm_mon = RTC_DateStruct.Month-1;
 80012be:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80012c2:	3b01      	subs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
	orig.tm_year = 2000 + RTC_DateStruct.Year - 1900;
 80012c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012ca:	3364      	adds	r3, #100	; 0x64
 80012cc:	623b      	str	r3, [r7, #32]
	orig.tm_isdst = -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	settime = mktime (&orig);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fdbb 	bl	8004e54 <mktime>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	time(&settime);
 80012e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f82a 	bl	8001344 <time>
  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_RTC_MspInit+0xa0>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 fd79 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 fd92 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001306:	bf00      	nop
 8001308:	3754      	adds	r7, #84	; 0x54
 800130a:	46bd      	mov	sp, r7
 800130c:	bd90      	pop	{r4, r7, pc}
 800130e:	bf00      	nop
 8001310:	40002800 	.word	0x40002800
 8001314:	200003a8 	.word	0x200003a8
 8001318:	42470e3c 	.word	0x42470e3c

0800131c <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 1 */
time_t time_dat;

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800131c:	b490      	push	{r4, r7}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  time_dat++;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8001326:	e9d3 1200 	ldrd	r1, r2, [r3]
 800132a:	1c4b      	adds	r3, r1, #1
 800132c:	f142 0400 	adc.w	r4, r2, #0
 8001330:	4a03      	ldr	r2, [pc, #12]	; (8001340 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8001332:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bc90      	pop	{r4, r7}
 800133e:	4770      	bx	lr
 8001340:	200003a0 	.word	0x200003a0

08001344 <time>:

time_t time (time_t *_timer)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b08b      	sub	sp, #44	; 0x2c
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  struct tm *ts;
  if(_timer != NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d041      	beq.n	80013d6 <time+0x92>
  {
    RTC_TimeTypeDef RTC_TimeStruct;
    RTC_DateTypeDef RTC_DateStruct;

    time_dat = *_timer;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001358:	4a23      	ldr	r2, [pc, #140]	; (80013e8 <time+0xa4>)
 800135a:	e9c2 3400 	strd	r3, r4, [r2]
    ts = localtime (_timer);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f003 fb78 	bl	8004a54 <localtime>
 8001364:	6278      	str	r0, [r7, #36]	; 0x24

    HAL_RTC_GetTime(&hrtc, &RTC_TimeStruct, RTC_FORMAT_BIN);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2200      	movs	r2, #0
 800136c:	4619      	mov	r1, r3
 800136e:	481f      	ldr	r0, [pc, #124]	; (80013ec <time+0xa8>)
 8001370:	f002 f978 	bl	8003664 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &RTC_DateStruct, RTC_FORMAT_BIN);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <time+0xa8>)
 800137e:	f002 fa76 	bl	800386e <HAL_RTC_GetDate>

    RTC_TimeStruct.Hours = ts->tm_hour;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	743b      	strb	r3, [r7, #16]
    RTC_TimeStruct.Minutes = ts->tm_min;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	747b      	strb	r3, [r7, #17]
    RTC_TimeStruct.Seconds = ts->tm_sec;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	74bb      	strb	r3, [r7, #18]

    RTC_DateStruct.Year = ts->tm_year+1900-2000;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3b64      	subs	r3, #100	; 0x64
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	73fb      	strb	r3, [r7, #15]
    RTC_DateStruct.Month = ts->tm_mon+1;
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	737b      	strb	r3, [r7, #13]
    RTC_DateStruct.Date = ts->tm_mday;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	73bb      	strb	r3, [r7, #14]

    HAL_RTC_SetTime(&hrtc, &RTC_TimeStruct, RTC_FORMAT_BIN);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	480a      	ldr	r0, [pc, #40]	; (80013ec <time+0xa8>)
 80013c4:	f002 f891 	bl	80034ea <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &RTC_DateStruct, RTC_FORMAT_BIN);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <time+0xa8>)
 80013d2:	f002 f9a5 	bl	8003720 <HAL_RTC_SetDate>
  }

  return time_dat;
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <time+0xa4>)
 80013d8:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	4621      	mov	r1, r4
 80013e0:	372c      	adds	r7, #44	; 0x2c
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003a0 	.word	0x200003a0
 80013ec:	200003a8 	.word	0x200003a8

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_MspInit+0x4c>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_MspInit+0x4c>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x4c>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x4c>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 fbb2 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <RTC_WKUP_IRQHandler+0x10>)
 80014a2:	f002 fb83 	bl	8003bac <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200003a8 	.word	0x200003a8

080014b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  Uart_Debug_IDLE(&huart1);
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <USART1_IRQHandler+0x14>)
 80014b6:	f000 fae1 	bl	8001a7c <Uart_Debug_IDLE>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014ba:	4802      	ldr	r0, [pc, #8]	; (80014c4 <USART1_IRQHandler+0x14>)
 80014bc:	f002 fd64 	bl	8003f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000428 	.word	0x20000428

080014c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <DMA2_Stream2_IRQHandler+0x10>)
 80014ce:	f000 fe67 	bl	80021a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200003c8 	.word	0x200003c8

080014dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e00a      	b.n	8001504 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ee:	f3af 8000 	nop.w
 80014f2:	4601      	mov	r1, r0
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	b2ca      	uxtb	r2, r1
 80014fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf0      	blt.n	80014ee <_read+0x12>
	}

return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e009      	b.n	800153c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f94f 	bl	80017d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf1      	blt.n	8001528 <_write+0x12>
	}
	return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_close>:

int _close(int file)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
	return -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001576:	605a      	str	r2, [r3, #4]
	return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_isatty>:

int _isatty(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	return 1;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
	return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x50>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_sbrk+0x16>
		heap_end = &end;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <_sbrk+0x50>)
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <_sbrk+0x54>)
 80015cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <_sbrk+0x50>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <_sbrk+0x50>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	466a      	mov	r2, sp
 80015de:	4293      	cmp	r3, r2
 80015e0:	d907      	bls.n	80015f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015e2:	f003 fa0d 	bl	8004a00 <__errno>
 80015e6:	4602      	mov	r2, r0
 80015e8:	230c      	movs	r3, #12
 80015ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	e006      	b.n	8001600 <_sbrk+0x48>
	}

	heap_end += incr;
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <_sbrk+0x50>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a03      	ldr	r2, [pc, #12]	; (8001608 <_sbrk+0x50>)
 80015fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000268 	.word	0x20000268
 800160c:	20000470 	.word	0x20000470

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <SystemInit+0x60>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a15      	ldr	r2, [pc, #84]	; (8001670 <SystemInit+0x60>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <SystemInit+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <SystemInit+0x64>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <SystemInit+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <SystemInit+0x64>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <SystemInit+0x64>)
 800163c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <SystemInit+0x64>)
 8001648:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <SystemInit+0x68>)
 800164a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <SystemInit+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a08      	ldr	r2, [pc, #32]	; (8001674 <SystemInit+0x64>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <SystemInit+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SystemInit+0x60>)
 8001660:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001664:	609a      	str	r2, [r3, #8]
#endif
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	40023800 	.word	0x40023800
 8001678:	24003010 	.word	0x24003010

0800167c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <MX_USART1_UART_Init+0x50>)
 8001684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f002 faa6 	bl	8003c04 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016be:	f7ff fd6f 	bl	80011a0 <Error_Handler>
  }

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000428 	.word	0x20000428
 80016cc:	40011000 	.word	0x40011000

080016d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a34      	ldr	r2, [pc, #208]	; (80017c0 <HAL_UART_MspInit+0xf0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d162      	bne.n	80017b8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800172a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001734:	2301      	movs	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800173c:	2307      	movs	r3, #7
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4820      	ldr	r0, [pc, #128]	; (80017c8 <HAL_UART_MspInit+0xf8>)
 8001748:	f000 ff92 	bl	8002670 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800174e:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <HAL_UART_MspInit+0x100>)
 8001750:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001754:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001758:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800178c:	480f      	ldr	r0, [pc, #60]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800178e:	f000 fb67 	bl	8001e60 <HAL_DMA_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001798:	f7ff fd02 	bl	80011a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_UART_MspInit+0xfc>)
 80017a0:	635a      	str	r2, [r3, #52]	; 0x34
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_UART_MspInit+0xfc>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2025      	movs	r0, #37	; 0x25
 80017ae:	f000 fb20 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017b2:	2025      	movs	r0, #37	; 0x25
 80017b4:	f000 fb39 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40011000 	.word	0x40011000
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	200003c8 	.word	0x200003c8
 80017d0:	40026440 	.word	0x40026440

080017d4 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80017dc:	1d39      	adds	r1, r7, #4
 80017de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e2:	2201      	movs	r2, #1
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <__io_putchar+0x20>)
 80017e6:	f002 fa5a 	bl	8003c9e <HAL_UART_Transmit>

  return ch;
 80017ea:	687b      	ldr	r3, [r7, #4]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000428 	.word	0x20000428

080017f8 <UART_Debug_Ifconfig>:
  {NULL, NULL, (void *) 0},
};

// ifconfig
static void UART_Debug_Ifconfig(uint8_t Argc, const char *Argv[])
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if(Argc == 1)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d103      	bne.n	8001812 <UART_Debug_Ifconfig+0x1a>
  {
    printf("UART_Debug_Ifconfig Get...\r\n");
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <UART_Debug_Ifconfig+0x28>)
 800180c:	f004 fa54 	bl	8005cb8 <puts>
  }
  else
  {
    printf("UART_Debug_Ifconfig Set...\r\n");
  }
}
 8001810:	e002      	b.n	8001818 <UART_Debug_Ifconfig+0x20>
    printf("UART_Debug_Ifconfig Set...\r\n");
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <UART_Debug_Ifconfig+0x2c>)
 8001814:	f004 fa50 	bl	8005cb8 <puts>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	080098d4 	.word	0x080098d4
 8001824:	080098f0 	.word	0x080098f0

08001828 <UART_Debug_Ls>:

// ls
static void UART_Debug_Ls(uint8_t Argc, const char *Argv[])
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if(Argc == 1)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d103      	bne.n	8001842 <UART_Debug_Ls+0x1a>
  {
    printf("UART_Debug_Ls Get...\r\n");
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <UART_Debug_Ls+0x28>)
 800183c:	f004 fa3c 	bl	8005cb8 <puts>
  }
  else
  {
    printf("UART_Debug_Ls Set...\r\n");
  }
}
 8001840:	e002      	b.n	8001848 <UART_Debug_Ls+0x20>
    printf("UART_Debug_Ls Set...\r\n");
 8001842:	4804      	ldr	r0, [pc, #16]	; (8001854 <UART_Debug_Ls+0x2c>)
 8001844:	f004 fa38 	bl	8005cb8 <puts>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	0800990c 	.word	0x0800990c
 8001854:	08009924 	.word	0x08009924

08001858 <UART_Debug_Ping>:

static void UART_Debug_Ping(uint8_t Argc, const char *Argv[])
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if(Argc == 1)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d103      	bne.n	8001872 <UART_Debug_Ping+0x1a>
  {
    printf("UART_Debug_Ping Get...\r\n");
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <UART_Debug_Ping+0x28>)
 800186c:	f004 fa24 	bl	8005cb8 <puts>
  }
  else
  {
    printf("UART_Debug_Ping Set...\r\n");
  }
}
 8001870:	e002      	b.n	8001878 <UART_Debug_Ping+0x20>
    printf("UART_Debug_Ping Set...\r\n");
 8001872:	4804      	ldr	r0, [pc, #16]	; (8001884 <UART_Debug_Ping+0x2c>)
 8001874:	f004 fa20 	bl	8005cb8 <puts>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	0800993c 	.word	0x0800993c
 8001884:	08009954 	.word	0x08009954

08001888 <UART_Debug_Ifconfig_Ack>:

static void UART_Debug_Ifconfig_Ack(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <UART_Debug_Ls_Ack>:

static void UART_Debug_Ls_Ack(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <UART_Debug_Ping_Ack>:

static void UART_Debug_Ping_Ack(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <UART_Debug_Read_Frame>:

#define UART_DEBUG_SEPARATE  " "
static uint8_t UART_Debug_Read_Frame(uint8_t *Buffer, const char *argv[])
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint8_t argc = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
  char *token;

  token = strtok((char *)Buffer, UART_DEBUG_SEPARATE);
 80018c2:	4914      	ldr	r1, [pc, #80]	; (8001914 <UART_Debug_Read_Frame+0x60>)
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f004 ff87 	bl	80067d8 <strtok>
 80018ca:	60b8      	str	r0, [r7, #8]
  while(token)
 80018cc:	e019      	b.n	8001902 <UART_Debug_Read_Frame+0x4e>
  {
    if(strcmp(token, UART_DEBUG_SEPARATE) == 0)
 80018ce:	4911      	ldr	r1, [pc, #68]	; (8001914 <UART_Debug_Read_Frame+0x60>)
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f7fe fc7d 	bl	80001d0 <strcmp>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <UART_Debug_Read_Frame+0x34>
    {
      token = strtok(NULL, UART_DEBUG_SEPARATE);
 80018dc:	490d      	ldr	r1, [pc, #52]	; (8001914 <UART_Debug_Read_Frame+0x60>)
 80018de:	2000      	movs	r0, #0
 80018e0:	f004 ff7a 	bl	80067d8 <strtok>
 80018e4:	60b8      	str	r0, [r7, #8]
      continue;
 80018e6:	e00c      	b.n	8001902 <UART_Debug_Read_Frame+0x4e>
    }

    argv[argc++] = token;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	73fa      	strb	r2, [r7, #15]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	601a      	str	r2, [r3, #0]
    token = strtok(NULL, UART_DEBUG_SEPARATE);
 80018f8:	4906      	ldr	r1, [pc, #24]	; (8001914 <UART_Debug_Read_Frame+0x60>)
 80018fa:	2000      	movs	r0, #0
 80018fc:	f004 ff6c 	bl	80067d8 <strtok>
 8001900:	60b8      	str	r0, [r7, #8]
  while(token)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e2      	bne.n	80018ce <UART_Debug_Read_Frame+0x1a>
  }

  return argc;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	0800996c 	.word	0x0800996c

08001918 <UART_Debug_Parse>:

void UART_Debug_Parse(uint8_t *Buffer, uint16_t Length)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 800191e:	af00      	add	r7, sp, #0
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	6018      	str	r0, [r3, #0]
 8001924:	460a      	mov	r2, r1
 8001926:	1cbb      	adds	r3, r7, #2
 8001928:	801a      	strh	r2, [r3, #0]
  uint8_t argc;
  const char *argv[UART_RECV_BUFFER_MAX];
  const char *cmd;

  if(Length == 1)
 800192a:	1cbb      	adds	r3, r7, #2
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d06a      	beq.n	8001a08 <UART_Debug_Parse+0xf0>
  {
    return;
  }

  argc = UART_Debug_Read_Frame(Buffer, argv);
 8001932:	f107 0208 	add.w	r2, r7, #8
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	4611      	mov	r1, r2
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	f7ff ffba 	bl	80018b4 <UART_Debug_Read_Frame>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d

  cmd = argv[0];
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

  uint16_t i;
  for(i = 0; i < ARRAY_SIZE(UART_Debug_Items); ++i)
 8001950:	2300      	movs	r3, #0
 8001952:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8001956:	e04b      	b.n	80019f0 <UART_Debug_Parse+0xd8>
  {
    if((strlen(UART_Debug_Items[i].Cmd) == strlen((const char *) cmd))
 8001958:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 800195c:	492d      	ldr	r1, [pc, #180]	; (8001a14 <UART_Debug_Parse+0xfc>)
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fc3a 	bl	80001e4 <strlen>
 8001970:	4604      	mov	r4, r0
 8001972:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8001976:	f7fe fc35 	bl	80001e4 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	429c      	cmp	r4, r3
 800197e:	d132      	bne.n	80019e6 <UART_Debug_Parse+0xce>
        && (memcmp(UART_Debug_Items[i].Cmd, cmd, strlen(cmd)) == 0))
 8001980:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8001984:	4923      	ldr	r1, [pc, #140]	; (8001a14 <UART_Debug_Parse+0xfc>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	681c      	ldr	r4, [r3, #0]
 8001992:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8001996:	f7fe fc25 	bl	80001e4 <strlen>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 80019a2:	4620      	mov	r0, r4
 80019a4:	f003 f964 	bl	8004c70 <memcmp>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d11b      	bne.n	80019e6 <UART_Debug_Parse+0xce>
    {
      UART_Debug_Items[i].UART_Debug_ParseCallback(argc, argv);
 80019ae:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 80019b2:	4918      	ldr	r1, [pc, #96]	; (8001a14 <UART_Debug_Parse+0xfc>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3304      	adds	r3, #4
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f107 0108 	add.w	r1, r7, #8
 80019c6:	f897 240d 	ldrb.w	r2, [r7, #1037]	; 0x40d
 80019ca:	4610      	mov	r0, r2
 80019cc:	4798      	blx	r3
      UART_Debug_Items[i].UART_Debug_AckCallback();
 80019ce:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 80019d2:	4910      	ldr	r1, [pc, #64]	; (8001a14 <UART_Debug_Parse+0xfc>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	3308      	adds	r3, #8
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4798      	blx	r3
      break;
 80019e4:	e008      	b.n	80019f8 <UART_Debug_Parse+0xe0>
  for(i = 0; i < ARRAY_SIZE(UART_Debug_Items); ++i)
 80019e6:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80019ea:	3301      	adds	r3, #1
 80019ec:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 80019f0:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d9af      	bls.n	8001958 <UART_Debug_Parse+0x40>
    }
  }

  if(i == ARRAY_SIZE(UART_Debug_Items))
 80019f8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d104      	bne.n	8001a0a <UART_Debug_Parse+0xf2>
  {
    printf("cmd is not found...\r\n");
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <UART_Debug_Parse+0x100>)
 8001a02:	f004 f959 	bl	8005cb8 <puts>
 8001a06:	e000      	b.n	8001a0a <UART_Debug_Parse+0xf2>
    return;
 8001a08:	bf00      	nop
  }
}
 8001a0a:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	080099ac 	.word	0x080099ac
 8001a18:	08009970 	.word	0x08009970

08001a1c <UART_Debug_Init>:

static UART_HandleTypeDef *UART_Debug_Handle = &huart1;
static UART_FrameTypeDef UART_Debug_Frame;

void UART_Debug_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  __HAL_UART_ENABLE_IT(UART_Debug_Handle, UART_IT_IDLE);
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <UART_Debug_Init+0x2c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <UART_Debug_Init+0x2c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0210 	orr.w	r2, r2, #16
 8001a32:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(UART_Debug_Handle, UART_Debug_Frame.Buffer, UART_RECV_BUFFER_MAX);
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <UART_Debug_Init+0x2c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3c:	4903      	ldr	r1, [pc, #12]	; (8001a4c <UART_Debug_Init+0x30>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 f9c6 	bl	8003dd0 <HAL_UART_Receive_DMA>
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	2000026c 	.word	0x2000026c

08001a50 <UART_Debug_Process>:

void UART_Debug_Process(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  if(UART_Debug_Frame.Ret)
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <UART_Debug_Process+0x28>)
 8001a56:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <UART_Debug_Process+0x24>
  {
    UART_Debug_Frame.Ret = 0;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <UART_Debug_Process+0x28>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    UART_Debug_Parse(UART_Debug_Frame.Buffer, UART_Debug_Frame.Length);
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <UART_Debug_Process+0x28>)
 8001a68:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4802      	ldr	r0, [pc, #8]	; (8001a78 <UART_Debug_Process+0x28>)
 8001a70:	f7ff ff52 	bl	8001918 <UART_Debug_Parse>
  }
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000026c 	.word	0x2000026c

08001a7c <Uart_Debug_IDLE>:

void Uart_Debug_IDLE(UART_HandleTypeDef *huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  if(huart == UART_Debug_Handle)
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <Uart_Debug_IDLE+0x80>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d132      	bne.n	8001af4 <Uart_Debug_IDLE+0x78>
  {
    if((__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b10      	cmp	r3, #16
 8001a9a:	d12b      	bne.n	8001af4 <Uart_Debug_IDLE+0x78>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      HAL_UART_DMAStop(huart);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f002 fa0c 	bl	8003ed0 <HAL_UART_DMAStop>
      temp = huart->hdmarx->Instance->NDTR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]
      UART_Debug_Frame.Length = UART_RECV_BUFFER_MAX - temp;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <Uart_Debug_IDLE+0x84>)
 8001ace:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      UART_Debug_Frame.Ret = 1;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <Uart_Debug_IDLE+0x84>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
      HAL_UART_Receive_DMA(huart, UART_Debug_Frame.Buffer, UART_RECV_BUFFER_MAX);
 8001ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <Uart_Debug_IDLE+0x84>)
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f002 f975 	bl	8003dd0 <HAL_UART_Receive_DMA>
      UART_Debug_Frame.Buffer[UART_Debug_Frame.Length] = '\0';
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <Uart_Debug_IDLE+0x84>)
 8001ae8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <Uart_Debug_IDLE+0x84>)
 8001af0:	2100      	movs	r1, #0
 8001af2:	5499      	strb	r1, [r3, r2]
    }
  }
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000026c 	.word	0x2000026c

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b0a:	e003      	b.n	8001b14 <LoopCopyDataInit>

08001b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b12:	3104      	adds	r1, #4

08001b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b1c:	d3f6      	bcc.n	8001b0c <CopyDataInit>
  ldr  r2, =_sbss
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b20:	e002      	b.n	8001b28 <LoopFillZerobss>

08001b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b24:	f842 3b04 	str.w	r3, [r2], #4

08001b28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b2c:	d3f9      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b2e:	f7ff fd6f 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b32:	f002 ff6b 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7ff fa7b 	bl	8001030 <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b40:	0800a04c 	.word	0x0800a04c
  ldr  r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b48:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8001b4c:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8001b50:	20000470 	.word	0x20000470

08001b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f92b 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fc30 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f943 	bl	8001e46 <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f000 f90b 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	20000010 	.word	0x20000010
 8001bf8:	2000000c 	.word	0x2000000c

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000010 	.word	0x20000010
 8001c20:	20000468 	.word	0x20000468

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000468 	.word	0x20000468

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff feda 	bl	8001c24 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e099      	b.n	8001fb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9c:	e00f      	b.n	8001ebe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9e:	f7ff fec1 	bl	8001c24 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d908      	bls.n	8001ebe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e078      	b.n	8001fb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e8      	bne.n	8001e9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_DMA_Init+0x158>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d107      	bne.n	8001f28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4313      	orrs	r3, r2
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f023 0307 	bic.w	r3, r3, #7
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d117      	bne.n	8001f82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fb09 	bl	800257c <DMA_CheckFifoParam>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2240      	movs	r2, #64	; 0x40
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e016      	b.n	8001fb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fac0 	bl	8002510 <DMA_CalcBaseAndBitshift>
 8001f90:	4603      	mov	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	223f      	movs	r2, #63	; 0x3f
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	f010803f 	.word	0xf010803f

08001fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_DMA_Start_IT+0x26>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e048      	b.n	8002074 <HAL_DMA_Start_IT+0xb8>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d137      	bne.n	8002066 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fa52 	bl	80024b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	223f      	movs	r2, #63	; 0x3f
 8002016:	409a      	lsls	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0216 	orr.w	r2, r2, #22
 800202a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0208 	orr.w	r2, r2, #8
 8002052:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e005      	b.n	8002072 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800208a:	f7ff fdcb 	bl	8001c24 <HAL_GetTick>
 800208e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d008      	beq.n	80020ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e052      	b.n	8002154 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0216 	bic.w	r2, r2, #22
 80020bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <HAL_DMA_Abort+0x62>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0208 	bic.w	r2, r2, #8
 80020ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fe:	e013      	b.n	8002128 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002100:	f7ff fd90 	bl	8001c24 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b05      	cmp	r3, #5
 800210c:	d90c      	bls.n	8002128 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2203      	movs	r2, #3
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e015      	b.n	8002154 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e4      	bne.n	8002100 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	223f      	movs	r2, #63	; 0x3f
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d004      	beq.n	800217a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00c      	b.n	8002194 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2205      	movs	r2, #5
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021ac:	4b92      	ldr	r3, [pc, #584]	; (80023f8 <HAL_DMA_IRQHandler+0x258>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a92      	ldr	r2, [pc, #584]	; (80023fc <HAL_DMA_IRQHandler+0x25c>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0a9b      	lsrs	r3, r3, #10
 80021b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	2208      	movs	r2, #8
 80021cc:	409a      	lsls	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01a      	beq.n	800220c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0204 	bic.w	r2, r2, #4
 80021f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2208      	movs	r2, #8
 80021fa:	409a      	lsls	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2201      	movs	r2, #1
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d012      	beq.n	8002242 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2201      	movs	r2, #1
 8002230:	409a      	lsls	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	f043 0202 	orr.w	r2, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	2204      	movs	r2, #4
 8002248:	409a      	lsls	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d012      	beq.n	8002278 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2204      	movs	r2, #4
 8002266:	409a      	lsls	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	f043 0204 	orr.w	r2, r3, #4
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	2210      	movs	r2, #16
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d043      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d03c      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	2210      	movs	r2, #16
 800229c:	409a      	lsls	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d018      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d024      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
 80022ce:	e01f      	b.n	8002310 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01b      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e016      	b.n	8002310 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0208 	bic.w	r2, r2, #8
 80022fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	2220      	movs	r2, #32
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 808e 	beq.w	800243e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8086 	beq.w	800243e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	2220      	movs	r2, #32
 8002338:	409a      	lsls	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b05      	cmp	r3, #5
 8002348:	d136      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0216 	bic.w	r2, r2, #22
 8002358:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002368:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_DMA_IRQHandler+0x1da>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	2b00      	cmp	r3, #0
 8002378:	d007      	beq.n	800238a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0208 	bic.w	r2, r2, #8
 8002388:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	223f      	movs	r2, #63	; 0x3f
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d07d      	beq.n	80024aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
        }
        return;
 80023b6:	e078      	b.n	80024aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01c      	beq.n	8002400 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d108      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d030      	beq.n	800243e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
 80023e4:	e02b      	b.n	800243e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d027      	beq.n	800243e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
 80023f6:	e022      	b.n	800243e <HAL_DMA_IRQHandler+0x29e>
 80023f8:	20000004 	.word	0x20000004
 80023fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10f      	bne.n	800242e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0210 	bic.w	r2, r2, #16
 800241c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	2b00      	cmp	r3, #0
 8002444:	d032      	beq.n	80024ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d022      	beq.n	8002498 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2205      	movs	r2, #5
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	429a      	cmp	r2, r3
 8002474:	d307      	bcc.n	8002486 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f2      	bne.n	800246a <HAL_DMA_IRQHandler+0x2ca>
 8002484:	e000      	b.n	8002488 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002486:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
 80024a8:	e000      	b.n	80024ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80024aa:	bf00      	nop
    }
  }
}
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop

080024b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	d108      	bne.n	80024f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024f2:	e007      	b.n	8002504 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	3b10      	subs	r3, #16
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <DMA_CalcBaseAndBitshift+0x64>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800252a:	4a13      	ldr	r2, [pc, #76]	; (8002578 <DMA_CalcBaseAndBitshift+0x68>)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d909      	bls.n	8002552 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	1d1a      	adds	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	659a      	str	r2, [r3, #88]	; 0x58
 8002550:	e007      	b.n	8002562 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	aaaaaaab 	.word	0xaaaaaaab
 8002578:	080099dc 	.word	0x080099dc

0800257c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11f      	bne.n	80025d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d855      	bhi.n	8002648 <DMA_CheckFifoParam+0xcc>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <DMA_CheckFifoParam+0x28>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025b5 	.word	0x080025b5
 80025a8:	080025c7 	.word	0x080025c7
 80025ac:	080025b5 	.word	0x080025b5
 80025b0:	08002649 	.word	0x08002649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d045      	beq.n	800264c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c4:	e042      	b.n	800264c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025ce:	d13f      	bne.n	8002650 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e03c      	b.n	8002650 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025de:	d121      	bne.n	8002624 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d836      	bhi.n	8002654 <DMA_CheckFifoParam+0xd8>
 80025e6:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <DMA_CheckFifoParam+0x70>)
 80025e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ec:	080025fd 	.word	0x080025fd
 80025f0:	08002603 	.word	0x08002603
 80025f4:	080025fd 	.word	0x080025fd
 80025f8:	08002615 	.word	0x08002615
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002600:	e02f      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d024      	beq.n	8002658 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002612:	e021      	b.n	8002658 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800261c:	d11e      	bne.n	800265c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002622:	e01b      	b.n	800265c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d902      	bls.n	8002630 <DMA_CheckFifoParam+0xb4>
 800262a:	2b03      	cmp	r3, #3
 800262c:	d003      	beq.n	8002636 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800262e:	e018      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      break;
 8002634:	e015      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00e      	beq.n	8002660 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      break;
 8002646:	e00b      	b.n	8002660 <DMA_CheckFifoParam+0xe4>
      break;
 8002648:	bf00      	nop
 800264a:	e00a      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
      break;
 800264c:	bf00      	nop
 800264e:	e008      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
      break;
 8002650:	bf00      	nop
 8002652:	e006      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
      break;
 8002654:	bf00      	nop
 8002656:	e004      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
      break;
 8002658:	bf00      	nop
 800265a:	e002      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
      break;   
 800265c:	bf00      	nop
 800265e:	e000      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
      break;
 8002660:	bf00      	nop
    }
  } 
  
  return status; 
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	e16b      	b.n	8002964 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800268c:	2201      	movs	r2, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	f040 815a 	bne.w	800295e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x4a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b12      	cmp	r3, #18
 80026b8:	d123      	bne.n	8002702 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	69b9      	ldr	r1, [r7, #24]
 80026fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0203 	and.w	r2, r3, #3
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d00b      	beq.n	8002756 <HAL_GPIO_Init+0xe6>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d007      	beq.n	8002756 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800274a:	2b11      	cmp	r3, #17
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b12      	cmp	r3, #18
 8002754:	d130      	bne.n	80027b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	2203      	movs	r2, #3
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 0201 	and.w	r2, r3, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80b4 	beq.w	800295e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_GPIO_Init+0x308>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a5e      	ldr	r2, [pc, #376]	; (8002978 <HAL_GPIO_Init+0x308>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <HAL_GPIO_Init+0x308>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002812:	4a5a      	ldr	r2, [pc, #360]	; (800297c <HAL_GPIO_Init+0x30c>)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	3302      	adds	r3, #2
 800281a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a51      	ldr	r2, [pc, #324]	; (8002980 <HAL_GPIO_Init+0x310>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02b      	beq.n	8002896 <HAL_GPIO_Init+0x226>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a50      	ldr	r2, [pc, #320]	; (8002984 <HAL_GPIO_Init+0x314>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d025      	beq.n	8002892 <HAL_GPIO_Init+0x222>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4f      	ldr	r2, [pc, #316]	; (8002988 <HAL_GPIO_Init+0x318>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01f      	beq.n	800288e <HAL_GPIO_Init+0x21e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4e      	ldr	r2, [pc, #312]	; (800298c <HAL_GPIO_Init+0x31c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x21a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4d      	ldr	r2, [pc, #308]	; (8002990 <HAL_GPIO_Init+0x320>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x216>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4c      	ldr	r2, [pc, #304]	; (8002994 <HAL_GPIO_Init+0x324>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x212>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4b      	ldr	r2, [pc, #300]	; (8002998 <HAL_GPIO_Init+0x328>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x20e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4a      	ldr	r2, [pc, #296]	; (800299c <HAL_GPIO_Init+0x32c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x20a>
 8002876:	2307      	movs	r3, #7
 8002878:	e00e      	b.n	8002898 <HAL_GPIO_Init+0x228>
 800287a:	2308      	movs	r3, #8
 800287c:	e00c      	b.n	8002898 <HAL_GPIO_Init+0x228>
 800287e:	2306      	movs	r3, #6
 8002880:	e00a      	b.n	8002898 <HAL_GPIO_Init+0x228>
 8002882:	2305      	movs	r3, #5
 8002884:	e008      	b.n	8002898 <HAL_GPIO_Init+0x228>
 8002886:	2304      	movs	r3, #4
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x228>
 800288a:	2303      	movs	r3, #3
 800288c:	e004      	b.n	8002898 <HAL_GPIO_Init+0x228>
 800288e:	2302      	movs	r3, #2
 8002890:	e002      	b.n	8002898 <HAL_GPIO_Init+0x228>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_GPIO_Init+0x228>
 8002896:	2300      	movs	r3, #0
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f002 0203 	and.w	r2, r2, #3
 800289e:	0092      	lsls	r2, r2, #2
 80028a0:	4093      	lsls	r3, r2
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a8:	4934      	ldr	r1, [pc, #208]	; (800297c <HAL_GPIO_Init+0x30c>)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	3302      	adds	r3, #2
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b6:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_GPIO_Init+0x330>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028da:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <HAL_GPIO_Init+0x330>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028e0:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_GPIO_Init+0x330>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002904:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <HAL_GPIO_Init+0x330>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_GPIO_Init+0x330>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_GPIO_Init+0x330>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_GPIO_Init+0x330>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_GPIO_Init+0x330>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3301      	adds	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b0f      	cmp	r3, #15
 8002968:	f67f ae90 	bls.w	800268c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800296c:	bf00      	nop
 800296e:	3724      	adds	r7, #36	; 0x24
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40023800 	.word	0x40023800
 800297c:	40013800 	.word	0x40013800
 8002980:	40020000 	.word	0x40020000
 8002984:	40020400 	.word	0x40020400
 8002988:	40020800 	.word	0x40020800
 800298c:	40020c00 	.word	0x40020c00
 8002990:	40021000 	.word	0x40021000
 8002994:	40021400 	.word	0x40021400
 8002998:	40021800 	.word	0x40021800
 800299c:	40021c00 	.word	0x40021c00
 80029a0:	40013c00 	.word	0x40013c00

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e22d      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d075      	beq.n	8002aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c2:	4ba3      	ldr	r3, [pc, #652]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d00c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ce:	4ba0      	ldr	r3, [pc, #640]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d112      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029da:	4b9d      	ldr	r3, [pc, #628]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e6:	d10b      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	4b99      	ldr	r3, [pc, #612]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05b      	beq.n	8002aac <HAL_RCC_OscConfig+0x108>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d157      	bne.n	8002aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e208      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d106      	bne.n	8002a18 <HAL_RCC_OscConfig+0x74>
 8002a0a:	4b91      	ldr	r3, [pc, #580]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a90      	ldr	r2, [pc, #576]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x98>
 8002a22:	4b8b      	ldr	r3, [pc, #556]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a8a      	ldr	r2, [pc, #552]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b88      	ldr	r3, [pc, #544]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a87      	ldr	r2, [pc, #540]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	4b84      	ldr	r3, [pc, #528]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a83      	ldr	r2, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b81      	ldr	r3, [pc, #516]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a80      	ldr	r2, [pc, #512]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff f8e2 	bl	8001c24 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff f8de 	bl	8001c24 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1cd      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xc0>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7ff f8ce 	bl	8001c24 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7ff f8ca 	bl	8001c24 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1b9      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0xe8>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d063      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b62      	ldr	r3, [pc, #392]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e18d      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b56      	ldr	r3, [pc, #344]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4952      	ldr	r1, [pc, #328]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCC_OscConfig+0x2b0>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7ff f883 	bl	8001c24 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b22:	f7ff f87f 	bl	8001c24 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e16e      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4940      	ldr	r1, [pc, #256]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_RCC_OscConfig+0x2b0>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff f862 	bl	8001c24 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b64:	f7ff f85e 	bl	8001c24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e14d      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d030      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCC_OscConfig+0x2b4>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7ff f842 	bl	8001c24 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7ff f83e 	bl	8001c24 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e12d      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x200>
 8002bc2:	e015      	b.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc4:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x2b4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7ff f82b 	bl	8001c24 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7ff f827 	bl	8001c24 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e116      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a0 	beq.w	8002d3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_OscConfig+0x2b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d121      	bne.n	8002c7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_RCC_OscConfig+0x2b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_RCC_OscConfig+0x2b8>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7fe ffed 	bl	8001c24 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	e011      	b.n	8002c72 <HAL_RCC_OscConfig+0x2ce>
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	42470000 	.word	0x42470000
 8002c58:	42470e80 	.word	0x42470e80
 8002c5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe ffe0 	bl	8001c24 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0cf      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d106      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x32a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x312>
 8002c9c:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a5f      	ldr	r2, [pc, #380]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a5c      	ldr	r2, [pc, #368]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x32a>
 8002cb6:	4b5a      	ldr	r3, [pc, #360]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a56      	ldr	r2, [pc, #344]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe ffa5 	bl	8001c24 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe ffa1 	bl	8001c24 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e08e      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	4b4a      	ldr	r3, [pc, #296]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x33a>
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fe ff8f 	bl	8001c24 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe ff8b 	bl	8001c24 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e078      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d064      	beq.n	8002e10 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d05c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d141      	bne.n	8002dde <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b32      	ldr	r3, [pc, #200]	; (8002e24 <HAL_RCC_OscConfig+0x480>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe ff60 	bl	8001c24 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe ff5c 	bl	8001c24 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e04b      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	491d      	ldr	r1, [pc, #116]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db0:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCC_OscConfig+0x480>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe ff35 	bl	8001c24 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe ff31 	bl	8001c24 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e020      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x41a>
 8002ddc:	e018      	b.n	8002e10 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_OscConfig+0x480>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe ff1e 	bl	8001c24 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe ff1a 	bl	8001c24 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e009      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_RCC_OscConfig+0x47c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x448>
 8002e0a:	e001      	b.n	8002e10 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470060 	.word	0x42470060

08002e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0ca      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b67      	ldr	r3, [pc, #412]	; (8002fdc <HAL_RCC_ClockConfig+0x1b4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d90c      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b64      	ldr	r3, [pc, #400]	; (8002fdc <HAL_RCC_ClockConfig+0x1b4>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b62      	ldr	r3, [pc, #392]	; (8002fdc <HAL_RCC_ClockConfig+0x1b4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b6      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b52      	ldr	r3, [pc, #328]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a51      	ldr	r2, [pc, #324]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494c      	ldr	r1, [pc, #304]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d044      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d119      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07d      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e06d      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e065      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4933      	ldr	r1, [pc, #204]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f18:	f7fe fe84 	bl	8001c24 <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fe fe80 	bl	8001c24 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e04d      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 020c 	and.w	r2, r3, #12
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1eb      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <HAL_RCC_ClockConfig+0x1b4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d20c      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_RCC_ClockConfig+0x1b4>)
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <HAL_RCC_ClockConfig+0x1b4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e030      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4915      	ldr	r1, [pc, #84]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490d      	ldr	r1, [pc, #52]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f81d 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 8002fb2:	4601      	mov	r1, r0
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	5cd3      	ldrb	r3, [r2, r3]
 8002fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fc6:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7fe fde6 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023c00 	.word	0x40023c00
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	08009994 	.word	0x08009994
 8002fe8:	20000004 	.word	0x20000004

08002fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b04      	cmp	r3, #4
 800300c:	d007      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x32>
 800300e:	2b08      	cmp	r3, #8
 8003010:	d008      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x38>
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 80b4 	bne.w	8003180 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800301a:	60bb      	str	r3, [r7, #8]
       break;
 800301c:	e0b3      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800301e:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003020:	60bb      	str	r3, [r7, #8]
      break;
 8003022:	e0b0      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003024:	4b5a      	ldr	r3, [pc, #360]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800302c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302e:	4b58      	ldr	r3, [pc, #352]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d04a      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	4b55      	ldr	r3, [pc, #340]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	f04f 0400 	mov.w	r4, #0
 8003044:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	ea03 0501 	and.w	r5, r3, r1
 8003050:	ea04 0602 	and.w	r6, r4, r2
 8003054:	4629      	mov	r1, r5
 8003056:	4632      	mov	r2, r6
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	f04f 0400 	mov.w	r4, #0
 8003060:	0154      	lsls	r4, r2, #5
 8003062:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003066:	014b      	lsls	r3, r1, #5
 8003068:	4619      	mov	r1, r3
 800306a:	4622      	mov	r2, r4
 800306c:	1b49      	subs	r1, r1, r5
 800306e:	eb62 0206 	sbc.w	r2, r2, r6
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	f04f 0400 	mov.w	r4, #0
 800307a:	0194      	lsls	r4, r2, #6
 800307c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003080:	018b      	lsls	r3, r1, #6
 8003082:	1a5b      	subs	r3, r3, r1
 8003084:	eb64 0402 	sbc.w	r4, r4, r2
 8003088:	f04f 0100 	mov.w	r1, #0
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	00e2      	lsls	r2, r4, #3
 8003092:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003096:	00d9      	lsls	r1, r3, #3
 8003098:	460b      	mov	r3, r1
 800309a:	4614      	mov	r4, r2
 800309c:	195b      	adds	r3, r3, r5
 800309e:	eb44 0406 	adc.w	r4, r4, r6
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	0262      	lsls	r2, r4, #9
 80030ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030b0:	0259      	lsls	r1, r3, #9
 80030b2:	460b      	mov	r3, r1
 80030b4:	4614      	mov	r4, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	4621      	mov	r1, r4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	461a      	mov	r2, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	f7fd fdd0 	bl	8000c68 <__aeabi_uldivmod>
 80030c8:	4603      	mov	r3, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e049      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	f04f 0400 	mov.w	r4, #0
 80030da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	ea03 0501 	and.w	r5, r3, r1
 80030e6:	ea04 0602 	and.w	r6, r4, r2
 80030ea:	4629      	mov	r1, r5
 80030ec:	4632      	mov	r2, r6
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	f04f 0400 	mov.w	r4, #0
 80030f6:	0154      	lsls	r4, r2, #5
 80030f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030fc:	014b      	lsls	r3, r1, #5
 80030fe:	4619      	mov	r1, r3
 8003100:	4622      	mov	r2, r4
 8003102:	1b49      	subs	r1, r1, r5
 8003104:	eb62 0206 	sbc.w	r2, r2, r6
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	0194      	lsls	r4, r2, #6
 8003112:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003116:	018b      	lsls	r3, r1, #6
 8003118:	1a5b      	subs	r3, r3, r1
 800311a:	eb64 0402 	sbc.w	r4, r4, r2
 800311e:	f04f 0100 	mov.w	r1, #0
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	00e2      	lsls	r2, r4, #3
 8003128:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800312c:	00d9      	lsls	r1, r3, #3
 800312e:	460b      	mov	r3, r1
 8003130:	4614      	mov	r4, r2
 8003132:	195b      	adds	r3, r3, r5
 8003134:	eb44 0406 	adc.w	r4, r4, r6
 8003138:	f04f 0100 	mov.w	r1, #0
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	02a2      	lsls	r2, r4, #10
 8003142:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003146:	0299      	lsls	r1, r3, #10
 8003148:	460b      	mov	r3, r1
 800314a:	4614      	mov	r4, r2
 800314c:	4618      	mov	r0, r3
 800314e:	4621      	mov	r1, r4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f04f 0400 	mov.w	r4, #0
 8003156:	461a      	mov	r2, r3
 8003158:	4623      	mov	r3, r4
 800315a:	f7fd fd85 	bl	8000c68 <__aeabi_uldivmod>
 800315e:	4603      	mov	r3, r0
 8003160:	460c      	mov	r4, r1
 8003162:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	60bb      	str	r3, [r7, #8]
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003182:	60bb      	str	r3, [r7, #8]
      break;
 8003184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003186:	68bb      	ldr	r3, [r7, #8]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200

0800319c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031b8:	f7ff fff0 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031bc:	4601      	mov	r1, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0a9b      	lsrs	r3, r3, #10
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4a03      	ldr	r2, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	080099a4 	.word	0x080099a4

080031dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031e0:	f7ff ffdc 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031e4:	4601      	mov	r1, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	0b5b      	lsrs	r3, r3, #13
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4a03      	ldr	r2, [pc, #12]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f2:	5cd3      	ldrb	r3, [r2, r3]
 80031f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	080099a4 	.word	0x080099a4

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003228:	2b00      	cmp	r3, #0
 800322a:	d035      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800322c:	4b62      	ldr	r3, [pc, #392]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003232:	f7fe fcf7 	bl	8001c24 <HAL_GetTick>
 8003236:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003238:	e008      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800323a:	f7fe fcf3 	bl	8001c24 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0b0      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800324c:	4b5b      	ldr	r3, [pc, #364]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	019a      	lsls	r2, r3, #6
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	071b      	lsls	r3, r3, #28
 8003264:	4955      	ldr	r1, [pc, #340]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800326c:	4b52      	ldr	r3, [pc, #328]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003272:	f7fe fcd7 	bl	8001c24 <HAL_GetTick>
 8003276:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800327a:	f7fe fcd3 	bl	8001c24 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e090      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800328c:	4b4b      	ldr	r3, [pc, #300]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8083 	beq.w	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	4b44      	ldr	r3, [pc, #272]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	4a43      	ldr	r2, [pc, #268]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032c2:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a3e      	ldr	r2, [pc, #248]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032ce:	f7fe fca9 	bl	8001c24 <HAL_GetTick>
 80032d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fe fca5 	bl	8001c24 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e062      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02f      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	429a      	cmp	r2, r3
 8003310:	d028      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003312:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003322:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003328:	4a24      	ldr	r2, [pc, #144]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d114      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe fc73 	bl	8001c24 <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fc6f 	bl	8001c24 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e02a      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ee      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003370:	d10d      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003386:	490d      	ldr	r1, [pc, #52]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]
 800338c:	e005      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003394:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003398:	6093      	str	r3, [r2, #8]
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800339c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a6:	4905      	ldr	r1, [pc, #20]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	42470068 	.word	0x42470068
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40007000 	.word	0x40007000
 80033c4:	42470e40 	.word	0x42470e40

080033c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e083      	b.n	80034e2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7f5b      	ldrb	r3, [r3, #29]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd ff44 	bl	8001278 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	22ca      	movs	r2, #202	; 0xca
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2253      	movs	r2, #83	; 0x53
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 faa8 	bl	800395c <RTC_EnterInitMode>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	22ff      	movs	r2, #255	; 0xff
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2204      	movs	r2, #4
 800341e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e05e      	b.n	80034e2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003436:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6899      	ldr	r1, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68d2      	ldr	r2, [r2, #12]
 800345e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6919      	ldr	r1, [r3, #16]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	041a      	lsls	r2, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003482:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10e      	bne.n	80034b0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa3a 	bl	800390c <HAL_RTC_WaitForSynchro>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	22ff      	movs	r2, #255	; 0xff
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2204      	movs	r2, #4
 80034aa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e018      	b.n	80034e2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	22ff      	movs	r2, #255	; 0xff
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034ea:	b590      	push	{r4, r7, lr}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	7f1b      	ldrb	r3, [r3, #28]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_RTC_SetTime+0x1c>
 8003502:	2302      	movs	r3, #2
 8003504:	e0aa      	b.n	800365c <HAL_RTC_SetTime+0x172>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2202      	movs	r2, #2
 8003510:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d126      	bne.n	8003566 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2200      	movs	r2, #0
 800352a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fa3f 	bl	80039b4 <RTC_ByteToBcd2>
 8003536:	4603      	mov	r3, r0
 8003538:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	785b      	ldrb	r3, [r3, #1]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fa38 	bl	80039b4 <RTC_ByteToBcd2>
 8003544:	4603      	mov	r3, r0
 8003546:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003548:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	789b      	ldrb	r3, [r3, #2]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fa30 	bl	80039b4 <RTC_ByteToBcd2>
 8003554:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003556:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	78db      	ldrb	r3, [r3, #3]
 800355e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e018      	b.n	8003598 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2200      	movs	r2, #0
 8003578:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003586:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800358c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	78db      	ldrb	r3, [r3, #3]
 8003592:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	22ca      	movs	r2, #202	; 0xca
 800359e:	625a      	str	r2, [r3, #36]	; 0x24
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2253      	movs	r2, #83	; 0x53
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f9d7 	bl	800395c <RTC_EnterInitMode>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	22ff      	movs	r2, #255	; 0xff
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2204      	movs	r2, #4
 80035c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e047      	b.n	800365c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80035d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80035da:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6899      	ldr	r1, [r3, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003612:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d111      	bne.n	8003646 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f972 	bl	800390c <HAL_RTC_WaitForSynchro>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	22ff      	movs	r2, #255	; 0xff
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2204      	movs	r2, #4
 800363a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e00a      	b.n	800365c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	22ff      	movs	r2, #255	; 0xff
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800365a:	2300      	movs	r3, #0
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd90      	pop	{r4, r7, pc}

08003664 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003696:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800369a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11a      	bne.n	8003716 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f983 	bl	80039f0 <RTC_Bcd2ToByte>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f97a 	bl	80039f0 <RTC_Bcd2ToByte>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	789b      	ldrb	r3, [r3, #2]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f971 	bl	80039f0 <RTC_Bcd2ToByte>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	7f1b      	ldrb	r3, [r3, #28]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_RTC_SetDate+0x1c>
 8003738:	2302      	movs	r3, #2
 800373a:	e094      	b.n	8003866 <HAL_RTC_SetDate+0x146>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2202      	movs	r2, #2
 8003746:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10e      	bne.n	800376c <HAL_RTC_SetDate+0x4c>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	785b      	ldrb	r3, [r3, #1]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	f023 0310 	bic.w	r3, r3, #16
 8003762:	b2db      	uxtb	r3, r3
 8003764:	330a      	adds	r3, #10
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11c      	bne.n	80037ac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	78db      	ldrb	r3, [r3, #3]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f91c 	bl	80039b4 <RTC_ByteToBcd2>
 800377c:	4603      	mov	r3, r0
 800377e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f915 	bl	80039b4 <RTC_ByteToBcd2>
 800378a:	4603      	mov	r3, r0
 800378c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800378e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	789b      	ldrb	r3, [r3, #2]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 f90d 	bl	80039b4 <RTC_ByteToBcd2>
 800379a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800379c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e00e      	b.n	80037ca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	78db      	ldrb	r3, [r3, #3]
 80037b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037b8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80037be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	22ca      	movs	r2, #202	; 0xca
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2253      	movs	r2, #83	; 0x53
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f8be 	bl	800395c <RTC_EnterInitMode>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	22ff      	movs	r2, #255	; 0xff
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2204      	movs	r2, #4
 80037f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e033      	b.n	8003866 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003808:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800380c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800381c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f86d 	bl	800390c <HAL_RTC_WaitForSynchro>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00b      	beq.n	8003850 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	22ff      	movs	r2, #255	; 0xff
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2204      	movs	r2, #4
 8003844:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e00a      	b.n	8003866 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	22ff      	movs	r2, #255	; 0xff
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}

0800386e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003888:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800388c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	0b5b      	lsrs	r3, r3, #13
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d11a      	bne.n	8003902 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	78db      	ldrb	r3, [r3, #3]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f88d 	bl	80039f0 <RTC_Bcd2ToByte>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461a      	mov	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f884 	bl	80039f0 <RTC_Bcd2ToByte>
 80038e8:	4603      	mov	r3, r0
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	789b      	ldrb	r3, [r3, #2]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f87b 	bl	80039f0 <RTC_Bcd2ToByte>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003926:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003928:	f7fe f97c 	bl	8001c24 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800392e:	e009      	b.n	8003944 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003930:	f7fe f978 	bl	8001c24 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800393e:	d901      	bls.n	8003944 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e007      	b.n	8003954 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0ee      	beq.n	8003930 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d119      	bne.n	80039aa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f04f 32ff 	mov.w	r2, #4294967295
 800397e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003980:	f7fe f950 	bl	8001c24 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003986:	e009      	b.n	800399c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003988:	f7fe f94c 	bl	8001c24 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003996:	d901      	bls.n	800399c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e007      	b.n	80039ac <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0ee      	beq.n	8003988 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80039c2:	e005      	b.n	80039d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	3b0a      	subs	r3, #10
 80039ce:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d8f6      	bhi.n	80039c4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	b2db      	uxtb	r3, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	b2db      	uxtb	r3, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	7f1b      	ldrb	r3, [r3, #28]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0a6      	b.n	8003b92 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	22ca      	movs	r2, #202	; 0xca
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2253      	movs	r2, #83	; 0x53
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d022      	beq.n	8003ab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8003a6e:	4b4c      	ldr	r3, [pc, #304]	; (8003ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a4c      	ldr	r2, [pc, #304]	; (8003ba4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	0adb      	lsrs	r3, r3, #11
 8003a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	1e5a      	subs	r2, r3, #1
 8003a88:	617a      	str	r2, [r7, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	22ff      	movs	r2, #255	; 0xff
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2203      	movs	r2, #3
 8003a9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e075      	b.n	8003b92 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e7      	bne.n	8003a84 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a36      	ldr	r2, [pc, #216]	; (8003ba4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0adb      	lsrs	r3, r3, #11
 8003ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	617a      	str	r2, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	22ff      	movs	r2, #255	; 0xff
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2203      	movs	r2, #3
 8003af0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e04a      	b.n	8003b92 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0e7      	beq.n	8003ada <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0207 	bic.w	r2, r2, #7
 8003b20:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6899      	ldr	r1, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b3c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b48:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b6a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b7a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	22ff      	movs	r2, #255	; 0xff
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000004 	.word	0x20000004
 8003ba4:	10624dd3 	.word	0x10624dd3
 8003ba8:	40013c00 	.word	0x40013c00

08003bac <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d012      	beq.n	8003be8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_WUT) != (uint32_t)RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>
    {
      /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fd fba3 	bl	800131c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003be6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RTCEx_WakeUpTimerIRQHandler+0x54>)
 8003bea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003bee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	775a      	strb	r2, [r3, #29]
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40013c00 	.word	0x40013c00

08003c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e03f      	b.n	8003c96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd fd50 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2224      	movs	r2, #36	; 0x24
 8003c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fccf 	bl	80045ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b088      	sub	sp, #32
 8003ca2:	af02      	add	r7, sp, #8
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	4613      	mov	r3, r2
 8003cac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f040 8083 	bne.w	8003dc6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_UART_Transmit+0x2e>
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e07b      	b.n	8003dc8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Transmit+0x40>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e074      	b.n	8003dc8 <HAL_UART_Transmit+0x12a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2221      	movs	r2, #33	; 0x21
 8003cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003cf4:	f7fd ff96 	bl	8001c24 <HAL_GetTick>
 8003cf8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d06:	e042      	b.n	8003d8e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1e:	d122      	bne.n	8003d66 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fadc 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e046      	b.n	8003dc8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d4c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3302      	adds	r3, #2
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	e017      	b.n	8003d8e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	e013      	b.n	8003d8e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2180      	movs	r1, #128	; 0x80
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fab9 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e023      	b.n	8003dc8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	60ba      	str	r2, [r7, #8]
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1b7      	bne.n	8003d08 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 faa0 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e00a      	b.n	8003dc8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d166      	bne.n	8003eb8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_UART_Receive_DMA+0x26>
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e05f      	b.n	8003eba <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_UART_Receive_DMA+0x38>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e058      	b.n	8003eba <HAL_UART_Receive_DMA+0xea>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	88fa      	ldrh	r2, [r7, #6]
 8003e1a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2222      	movs	r2, #34	; 0x22
 8003e26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <HAL_UART_Receive_DMA+0xf4>)
 8003e30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <HAL_UART_Receive_DMA+0xf8>)
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <HAL_UART_Receive_DMA+0xfc>)
 8003e40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	2200      	movs	r2, #0
 8003e48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	f7fe f8ab 	bl	8001fbc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e92:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	080041d1 	.word	0x080041d1
 8003ec8:	08004239 	.word	0x08004239
 8003ecc:	08004255 	.word	0x08004255

08003ed0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b21      	cmp	r3, #33	; 0x21
 8003efc:	d116      	bne.n	8003f2c <HAL_UART_DMAStop+0x5c>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d013      	beq.n	8003f2c <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f12:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe f8ab 	bl	800207c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fa28 	bl	800437c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b22      	cmp	r3, #34	; 0x22
 8003f4c:	d116      	bne.n	8003f7c <HAL_UART_DMAStop+0xac>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f62:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d004      	beq.n	8003f76 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe f883 	bl	800207c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa16 	bl	80043a8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10d      	bne.n	8003fda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_UART_IRQHandler+0x52>
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa88 	bl	80044e8 <UART_Receive_IT>
      return;
 8003fd8:	e0cc      	b.n	8004174 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80ab 	beq.w	8004138 <HAL_UART_IRQHandler+0x1b0>
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x70>
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80a0 	beq.w	8004138 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_UART_IRQHandler+0x90>
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_UART_IRQHandler+0xb0>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	f043 0202 	orr.w	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_UART_IRQHandler+0xd0>
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	f043 0204 	orr.w	r2, r3, #4
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_UART_IRQHandler+0xf0>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	f043 0208 	orr.w	r2, r3, #8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d078      	beq.n	8004172 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_UART_IRQHandler+0x112>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa27 	bl	80044e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <HAL_UART_IRQHandler+0x13a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d031      	beq.n	8004126 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f970 	bl	80043a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d123      	bne.n	800411e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d013      	beq.n	8004116 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	4a22      	ldr	r2, [pc, #136]	; (800417c <HAL_UART_IRQHandler+0x1f4>)
 80040f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe f82e 	bl	800215c <HAL_DMA_Abort_IT>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004110:	4610      	mov	r0, r2
 8004112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	e00e      	b.n	8004134 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f850 	bl	80041bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	e00a      	b.n	8004134 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f84c 	bl	80041bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	e006      	b.n	8004134 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f848 	bl	80041bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004132:	e01e      	b.n	8004172 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	bf00      	nop
    return;
 8004136:	e01c      	b.n	8004172 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_UART_IRQHandler+0x1cc>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f95d 	bl	800440c <UART_Transmit_IT>
    return;
 8004152:	e00f      	b.n	8004174 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_UART_IRQHandler+0x1ec>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f9a5 	bl	80044b8 <UART_EndTransmit_IT>
    return;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004172:	bf00      	nop
  }
}
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	080043e5 	.word	0x080043e5

08004180 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d11e      	bne.n	800422a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004200:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004220:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff ffb2 	bl	8004194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff ffae 	bl	80041a8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b21      	cmp	r3, #33	; 0x21
 8004286:	d108      	bne.n	800429a <UART_DMAError+0x46>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2200      	movs	r2, #0
 8004292:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004294:	68b8      	ldr	r0, [r7, #8]
 8004296:	f000 f871 	bl	800437c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b22      	cmp	r3, #34	; 0x22
 80042ba:	d108      	bne.n	80042ce <UART_DMAError+0x7a>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042c8:	68b8      	ldr	r0, [r7, #8]
 80042ca:	f000 f86d 	bl	80043a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	f043 0210 	orr.w	r2, r3, #16
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042da:	68b8      	ldr	r0, [r7, #8]
 80042dc:	f7ff ff6e 	bl	80041bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f8:	e02c      	b.n	8004354 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d028      	beq.n	8004354 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <UART_WaitOnFlagUntilTimeout+0x30>
 8004308:	f7fd fc8c 	bl	8001c24 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	429a      	cmp	r2, r3
 8004316:	d21d      	bcs.n	8004354 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004326:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e00f      	b.n	8004374 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	429a      	cmp	r2, r3
 8004370:	d0c3      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004392:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0201 	bic.w	r2, r2, #1
 80043ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7ff fedc 	bl	80041bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b21      	cmp	r3, #33	; 0x21
 800441e:	d144      	bne.n	80044aa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d11a      	bne.n	8004460 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]
 8004452:	e00e      	b.n	8004472 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]
 800445e:	e008      	b.n	8004472 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	1c59      	adds	r1, r3, #1
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6211      	str	r1, [r2, #32]
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29b      	uxth	r3, r3
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4619      	mov	r1, r3
 8004480:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004494:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fe51 	bl	8004180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b22      	cmp	r3, #34	; 0x22
 80044fa:	d171      	bne.n	80045e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004504:	d123      	bne.n	800454e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10e      	bne.n	8004532 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	1c9a      	adds	r2, r3, #2
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
 8004530:	e029      	b.n	8004586 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	b29b      	uxth	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	629a      	str	r2, [r3, #40]	; 0x28
 800454c:	e01b      	b.n	8004586 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6858      	ldr	r0, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	1c59      	adds	r1, r3, #1
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6291      	str	r1, [r2, #40]	; 0x28
 8004566:	b2c2      	uxtb	r2, r0
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e00c      	b.n	8004586 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	1c58      	adds	r0, r3, #1
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	6288      	str	r0, [r1, #40]	; 0x28
 800457e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29b      	uxth	r3, r3
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4619      	mov	r1, r3
 8004594:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004596:	2b00      	cmp	r3, #0
 8004598:	d120      	bne.n	80045dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0220 	bic.w	r2, r2, #32
 80045a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fdde 	bl	8004194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e002      	b.n	80045e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ec:	b5b0      	push	{r4, r5, r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800462c:	f023 030c 	bic.w	r3, r3, #12
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	430b      	orrs	r3, r1
 8004638:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004658:	f040 80e4 	bne.w	8004824 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4aab      	ldr	r2, [pc, #684]	; (8004910 <UART_SetConfig+0x324>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <UART_SetConfig+0x84>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4aaa      	ldr	r2, [pc, #680]	; (8004914 <UART_SetConfig+0x328>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d16c      	bne.n	800474a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004670:	f7fe fdb4 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 8004674:	4602      	mov	r2, r0
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009a      	lsls	r2, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	4aa3      	ldr	r2, [pc, #652]	; (8004918 <UART_SetConfig+0x32c>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	011c      	lsls	r4, r3, #4
 8004694:	f7fe fda2 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 8004698:	4602      	mov	r2, r0
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009a      	lsls	r2, r3, #2
 80046a2:	441a      	add	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80046ae:	f7fe fd95 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009a      	lsls	r2, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	4a93      	ldr	r2, [pc, #588]	; (8004918 <UART_SetConfig+0x32c>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2264      	movs	r2, #100	; 0x64
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	1aeb      	subs	r3, r5, r3
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	3332      	adds	r3, #50	; 0x32
 80046dc:	4a8e      	ldr	r2, [pc, #568]	; (8004918 <UART_SetConfig+0x32c>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046ea:	441c      	add	r4, r3
 80046ec:	f7fe fd76 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009a      	lsls	r2, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fbb2 f5f3 	udiv	r5, r2, r3
 8004706:	f7fe fd69 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 800470a:	4602      	mov	r2, r0
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009a      	lsls	r2, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	4a7d      	ldr	r2, [pc, #500]	; (8004918 <UART_SetConfig+0x32c>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2264      	movs	r2, #100	; 0x64
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	1aeb      	subs	r3, r5, r3
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	3332      	adds	r3, #50	; 0x32
 8004734:	4a78      	ldr	r2, [pc, #480]	; (8004918 <UART_SetConfig+0x32c>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	f003 0207 	and.w	r2, r3, #7
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4422      	add	r2, r4
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	e154      	b.n	80049f4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800474a:	f7fe fd33 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800474e:	4602      	mov	r2, r0
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009a      	lsls	r2, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	4a6c      	ldr	r2, [pc, #432]	; (8004918 <UART_SetConfig+0x32c>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	011c      	lsls	r4, r3, #4
 800476e:	f7fe fd21 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8004772:	4602      	mov	r2, r0
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009a      	lsls	r2, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	fbb2 f5f3 	udiv	r5, r2, r3
 8004788:	f7fe fd14 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800478c:	4602      	mov	r2, r0
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009a      	lsls	r2, r3, #2
 8004796:	441a      	add	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	4a5d      	ldr	r2, [pc, #372]	; (8004918 <UART_SetConfig+0x32c>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	2264      	movs	r2, #100	; 0x64
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	1aeb      	subs	r3, r5, r3
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	3332      	adds	r3, #50	; 0x32
 80047b6:	4a58      	ldr	r2, [pc, #352]	; (8004918 <UART_SetConfig+0x32c>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047c4:	441c      	add	r4, r3
 80047c6:	f7fe fcf5 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 80047ca:	4602      	mov	r2, r0
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	009a      	lsls	r2, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80047e0:	f7fe fce8 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009a      	lsls	r2, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	4a47      	ldr	r2, [pc, #284]	; (8004918 <UART_SetConfig+0x32c>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	2264      	movs	r2, #100	; 0x64
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	1aeb      	subs	r3, r5, r3
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	3332      	adds	r3, #50	; 0x32
 800480e:	4a42      	ldr	r2, [pc, #264]	; (8004918 <UART_SetConfig+0x32c>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 0207 	and.w	r2, r3, #7
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4422      	add	r2, r4
 8004820:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004822:	e0e7      	b.n	80049f4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a39      	ldr	r2, [pc, #228]	; (8004910 <UART_SetConfig+0x324>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <UART_SetConfig+0x24c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a38      	ldr	r2, [pc, #224]	; (8004914 <UART_SetConfig+0x328>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d171      	bne.n	800491c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004838:	f7fe fcd0 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 800483c:	4602      	mov	r2, r0
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009a      	lsls	r2, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	4a31      	ldr	r2, [pc, #196]	; (8004918 <UART_SetConfig+0x32c>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	011c      	lsls	r4, r3, #4
 800485c:	f7fe fcbe 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 8004860:	4602      	mov	r2, r0
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009a      	lsls	r2, r3, #2
 800486a:	441a      	add	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	fbb2 f5f3 	udiv	r5, r2, r3
 8004876:	f7fe fcb1 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 800487a:	4602      	mov	r2, r0
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009a      	lsls	r2, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	4a21      	ldr	r2, [pc, #132]	; (8004918 <UART_SetConfig+0x32c>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2264      	movs	r2, #100	; 0x64
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	1aeb      	subs	r3, r5, r3
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	3332      	adds	r3, #50	; 0x32
 80048a4:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <UART_SetConfig+0x32c>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b0:	441c      	add	r4, r3
 80048b2:	f7fe fc93 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 80048b6:	4602      	mov	r2, r0
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009a      	lsls	r2, r3, #2
 80048c0:	441a      	add	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80048cc:	f7fe fc86 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	2264      	movs	r2, #100	; 0x64
 80048f0:	fb02 f303 	mul.w	r3, r2, r3
 80048f4:	1aeb      	subs	r3, r5, r3
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	3332      	adds	r3, #50	; 0x32
 80048fa:	4a07      	ldr	r2, [pc, #28]	; (8004918 <UART_SetConfig+0x32c>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	f003 020f 	and.w	r2, r3, #15
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4422      	add	r2, r4
 800490c:	609a      	str	r2, [r3, #8]
 800490e:	e071      	b.n	80049f4 <UART_SetConfig+0x408>
 8004910:	40011000 	.word	0x40011000
 8004914:	40011400 	.word	0x40011400
 8004918:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800491c:	f7fe fc4a 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8004920:	4602      	mov	r2, r0
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009a      	lsls	r2, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	fbb2 f3f3 	udiv	r3, r2, r3
 8004936:	4a31      	ldr	r2, [pc, #196]	; (80049fc <UART_SetConfig+0x410>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	011c      	lsls	r4, r3, #4
 8004940:	f7fe fc38 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8004944:	4602      	mov	r2, r0
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	009a      	lsls	r2, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	fbb2 f5f3 	udiv	r5, r2, r3
 800495a:	f7fe fc2b 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800495e:	4602      	mov	r2, r0
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	009a      	lsls	r2, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	4a21      	ldr	r2, [pc, #132]	; (80049fc <UART_SetConfig+0x410>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2264      	movs	r2, #100	; 0x64
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	1aeb      	subs	r3, r5, r3
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	3332      	adds	r3, #50	; 0x32
 8004988:	4a1c      	ldr	r2, [pc, #112]	; (80049fc <UART_SetConfig+0x410>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004994:	441c      	add	r4, r3
 8004996:	f7fe fc0d 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800499a:	4602      	mov	r2, r0
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	009a      	lsls	r2, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80049b0:	f7fe fc00 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009a      	lsls	r2, r3, #2
 80049be:	441a      	add	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <UART_SetConfig+0x410>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	2264      	movs	r2, #100	; 0x64
 80049d4:	fb02 f303 	mul.w	r3, r2, r3
 80049d8:	1aeb      	subs	r3, r5, r3
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	3332      	adds	r3, #50	; 0x32
 80049de:	4a07      	ldr	r2, [pc, #28]	; (80049fc <UART_SetConfig+0x410>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	f003 020f 	and.w	r2, r3, #15
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4422      	add	r2, r4
 80049f0:	609a      	str	r2, [r3, #8]
}
 80049f2:	e7ff      	b.n	80049f4 <UART_SetConfig+0x408>
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bdb0      	pop	{r4, r5, r7, pc}
 80049fc:	51eb851f 	.word	0x51eb851f

08004a00 <__errno>:
 8004a00:	4b01      	ldr	r3, [pc, #4]	; (8004a08 <__errno+0x8>)
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000014 	.word	0x20000014

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4e0d      	ldr	r6, [pc, #52]	; (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	; (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1ba4      	subs	r4, r4, r6
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2500      	movs	r5, #0
 8004a18:	42a5      	cmp	r5, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4e0b      	ldr	r6, [pc, #44]	; (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	; (8004a50 <__libc_init_array+0x44>)
 8004a20:	f004 ff24 	bl	800986c <_init>
 8004a24:	1ba4      	subs	r4, r4, r6
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2500      	movs	r5, #0
 8004a2a:	42a5      	cmp	r5, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a34:	4798      	blx	r3
 8004a36:	3501      	adds	r5, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a3e:	4798      	blx	r3
 8004a40:	3501      	adds	r5, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	0800a044 	.word	0x0800a044
 8004a48:	0800a044 	.word	0x0800a044
 8004a4c:	0800a044 	.word	0x0800a044
 8004a50:	0800a048 	.word	0x0800a048

08004a54 <localtime>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <localtime+0x20>)
 8004a58:	681c      	ldr	r4, [r3, #0]
 8004a5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	b91b      	cbnz	r3, 8004a68 <localtime+0x14>
 8004a60:	2024      	movs	r0, #36	; 0x24
 8004a62:	f000 f8f5 	bl	8004c50 <malloc>
 8004a66:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004a68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a70:	f000 b802 	b.w	8004a78 <localtime_r>
 8004a74:	20000014 	.word	0x20000014

08004a78 <localtime_r>:
 8004a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	4680      	mov	r8, r0
 8004a80:	f003 faa8 	bl	8007fd4 <__gettzinfo>
 8004a84:	4621      	mov	r1, r4
 8004a86:	4607      	mov	r7, r0
 8004a88:	4640      	mov	r0, r8
 8004a8a:	f003 faa7 	bl	8007fdc <gmtime_r>
 8004a8e:	6946      	ldr	r6, [r0, #20]
 8004a90:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8004a94:	07b2      	lsls	r2, r6, #30
 8004a96:	4604      	mov	r4, r0
 8004a98:	d105      	bne.n	8004aa6 <localtime_r+0x2e>
 8004a9a:	2264      	movs	r2, #100	; 0x64
 8004a9c:	fb96 f3f2 	sdiv	r3, r6, r2
 8004aa0:	fb02 6313 	mls	r3, r2, r3, r6
 8004aa4:	bb13      	cbnz	r3, 8004aec <localtime_r+0x74>
 8004aa6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004aaa:	fb96 f5f3 	sdiv	r5, r6, r3
 8004aae:	fb03 6515 	mls	r5, r3, r5, r6
 8004ab2:	fab5 f585 	clz	r5, r5
 8004ab6:	096d      	lsrs	r5, r5, #5
 8004ab8:	4b63      	ldr	r3, [pc, #396]	; (8004c48 <localtime_r+0x1d0>)
 8004aba:	2230      	movs	r2, #48	; 0x30
 8004abc:	fb02 3505 	mla	r5, r2, r5, r3
 8004ac0:	f002 f828 	bl	8006b14 <__tz_lock>
 8004ac4:	f002 f828 	bl	8006b18 <_tzset_unlocked>
 8004ac8:	4b60      	ldr	r3, [pc, #384]	; (8004c4c <localtime_r+0x1d4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	b323      	cbz	r3, 8004b18 <localtime_r+0xa0>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	42b3      	cmp	r3, r6
 8004ad2:	d10d      	bne.n	8004af0 <localtime_r+0x78>
 8004ad4:	683e      	ldr	r6, [r7, #0]
 8004ad6:	e9d8 0100 	ldrd	r0, r1, [r8]
 8004ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ade:	b97e      	cbnz	r6, 8004b00 <localtime_r+0x88>
 8004ae0:	4290      	cmp	r0, r2
 8004ae2:	eb71 0303 	sbcs.w	r3, r1, r3
 8004ae6:	db0f      	blt.n	8004b08 <localtime_r+0x90>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e015      	b.n	8004b18 <localtime_r+0xa0>
 8004aec:	2501      	movs	r5, #1
 8004aee:	e7e3      	b.n	8004ab8 <localtime_r+0x40>
 8004af0:	4630      	mov	r0, r6
 8004af2:	f001 ff67 	bl	80069c4 <__tzcalc_limits>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d1ec      	bne.n	8004ad4 <localtime_r+0x5c>
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295
 8004afe:	e00b      	b.n	8004b18 <localtime_r+0xa0>
 8004b00:	4290      	cmp	r0, r2
 8004b02:	eb71 0303 	sbcs.w	r3, r1, r3
 8004b06:	db58      	blt.n	8004bba <localtime_r+0x142>
 8004b08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b0c:	4290      	cmp	r0, r2
 8004b0e:	eb71 0303 	sbcs.w	r3, r1, r3
 8004b12:	bfb4      	ite	lt
 8004b14:	2301      	movlt	r3, #1
 8004b16:	2300      	movge	r3, #0
 8004b18:	6223      	str	r3, [r4, #32]
 8004b1a:	6a23      	ldr	r3, [r4, #32]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	bf0c      	ite	eq
 8004b20:	6d39      	ldreq	r1, [r7, #80]	; 0x50
 8004b22:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
 8004b24:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004b28:	203c      	movs	r0, #60	; 0x3c
 8004b2a:	fb91 f6f3 	sdiv	r6, r1, r3
 8004b2e:	fb03 1316 	mls	r3, r3, r6, r1
 8004b32:	6861      	ldr	r1, [r4, #4]
 8004b34:	fb93 f2f0 	sdiv	r2, r3, r0
 8004b38:	fb00 3012 	mls	r0, r0, r2, r3
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	1a89      	subs	r1, r1, r2
 8004b40:	68a2      	ldr	r2, [r4, #8]
 8004b42:	6061      	str	r1, [r4, #4]
 8004b44:	1a1b      	subs	r3, r3, r0
 8004b46:	1b92      	subs	r2, r2, r6
 8004b48:	2b3b      	cmp	r3, #59	; 0x3b
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	60a2      	str	r2, [r4, #8]
 8004b4e:	dd36      	ble.n	8004bbe <localtime_r+0x146>
 8004b50:	3101      	adds	r1, #1
 8004b52:	6061      	str	r1, [r4, #4]
 8004b54:	3b3c      	subs	r3, #60	; 0x3c
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b5c:	dd35      	ble.n	8004bca <localtime_r+0x152>
 8004b5e:	3201      	adds	r2, #1
 8004b60:	60a2      	str	r2, [r4, #8]
 8004b62:	3b3c      	subs	r3, #60	; 0x3c
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	68a3      	ldr	r3, [r4, #8]
 8004b68:	2b17      	cmp	r3, #23
 8004b6a:	dd34      	ble.n	8004bd6 <localtime_r+0x15e>
 8004b6c:	69e2      	ldr	r2, [r4, #28]
 8004b6e:	3201      	adds	r2, #1
 8004b70:	61e2      	str	r2, [r4, #28]
 8004b72:	69a2      	ldr	r2, [r4, #24]
 8004b74:	3201      	adds	r2, #1
 8004b76:	2a06      	cmp	r2, #6
 8004b78:	bfc8      	it	gt
 8004b7a:	2200      	movgt	r2, #0
 8004b7c:	61a2      	str	r2, [r4, #24]
 8004b7e:	68e2      	ldr	r2, [r4, #12]
 8004b80:	3b18      	subs	r3, #24
 8004b82:	3201      	adds	r2, #1
 8004b84:	60a3      	str	r3, [r4, #8]
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	60e2      	str	r2, [r4, #12]
 8004b8a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8004b8e:	428a      	cmp	r2, r1
 8004b90:	dd0e      	ble.n	8004bb0 <localtime_r+0x138>
 8004b92:	3301      	adds	r3, #1
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	bf0c      	ite	eq
 8004b98:	6963      	ldreq	r3, [r4, #20]
 8004b9a:	6123      	strne	r3, [r4, #16]
 8004b9c:	eba2 0201 	sub.w	r2, r2, r1
 8004ba0:	60e2      	str	r2, [r4, #12]
 8004ba2:	bf01      	itttt	eq
 8004ba4:	3301      	addeq	r3, #1
 8004ba6:	2200      	moveq	r2, #0
 8004ba8:	6122      	streq	r2, [r4, #16]
 8004baa:	6163      	streq	r3, [r4, #20]
 8004bac:	bf08      	it	eq
 8004bae:	61e2      	streq	r2, [r4, #28]
 8004bb0:	f001 ffb1 	bl	8006b16 <__tz_unlock>
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e7ac      	b.n	8004b18 <localtime_r+0xa0>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	daca      	bge.n	8004b58 <localtime_r+0xe0>
 8004bc2:	3901      	subs	r1, #1
 8004bc4:	6061      	str	r1, [r4, #4]
 8004bc6:	333c      	adds	r3, #60	; 0x3c
 8004bc8:	e7c5      	b.n	8004b56 <localtime_r+0xde>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	dacb      	bge.n	8004b66 <localtime_r+0xee>
 8004bce:	3a01      	subs	r2, #1
 8004bd0:	60a2      	str	r2, [r4, #8]
 8004bd2:	333c      	adds	r3, #60	; 0x3c
 8004bd4:	e7c6      	b.n	8004b64 <localtime_r+0xec>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	daea      	bge.n	8004bb0 <localtime_r+0x138>
 8004bda:	69e2      	ldr	r2, [r4, #28]
 8004bdc:	3a01      	subs	r2, #1
 8004bde:	61e2      	str	r2, [r4, #28]
 8004be0:	69a2      	ldr	r2, [r4, #24]
 8004be2:	3a01      	subs	r2, #1
 8004be4:	bf48      	it	mi
 8004be6:	2206      	movmi	r2, #6
 8004be8:	61a2      	str	r2, [r4, #24]
 8004bea:	68e2      	ldr	r2, [r4, #12]
 8004bec:	3318      	adds	r3, #24
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	60e2      	str	r2, [r4, #12]
 8004bf2:	60a3      	str	r3, [r4, #8]
 8004bf4:	2a00      	cmp	r2, #0
 8004bf6:	d1db      	bne.n	8004bb0 <localtime_r+0x138>
 8004bf8:	6923      	ldr	r3, [r4, #16]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	d405      	bmi.n	8004c0a <localtime_r+0x192>
 8004bfe:	6123      	str	r3, [r4, #16]
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004c06:	60e3      	str	r3, [r4, #12]
 8004c08:	e7d2      	b.n	8004bb0 <localtime_r+0x138>
 8004c0a:	6962      	ldr	r2, [r4, #20]
 8004c0c:	230b      	movs	r3, #11
 8004c0e:	1e51      	subs	r1, r2, #1
 8004c10:	6123      	str	r3, [r4, #16]
 8004c12:	078b      	lsls	r3, r1, #30
 8004c14:	6161      	str	r1, [r4, #20]
 8004c16:	f202 726b 	addw	r2, r2, #1899	; 0x76b
 8004c1a:	d105      	bne.n	8004c28 <localtime_r+0x1b0>
 8004c1c:	2164      	movs	r1, #100	; 0x64
 8004c1e:	fb92 f3f1 	sdiv	r3, r2, r1
 8004c22:	fb01 2313 	mls	r3, r1, r3, r2
 8004c26:	b963      	cbnz	r3, 8004c42 <localtime_r+0x1ca>
 8004c28:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004c2c:	fb92 f3f1 	sdiv	r3, r2, r1
 8004c30:	fb01 2313 	mls	r3, r1, r3, r2
 8004c34:	fab3 f383 	clz	r3, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004c3e:	61e3      	str	r3, [r4, #28]
 8004c40:	e7de      	b.n	8004c00 <localtime_r+0x188>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e7f9      	b.n	8004c3a <localtime_r+0x1c2>
 8004c46:	bf00      	nop
 8004c48:	08009a48 	.word	0x08009a48
 8004c4c:	20000394 	.word	0x20000394

08004c50 <malloc>:
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <malloc+0xc>)
 8004c52:	4601      	mov	r1, r0
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	f000 bb05 	b.w	8005264 <_malloc_r>
 8004c5a:	bf00      	nop
 8004c5c:	20000014 	.word	0x20000014

08004c60 <free>:
 8004c60:	4b02      	ldr	r3, [pc, #8]	; (8004c6c <free+0xc>)
 8004c62:	4601      	mov	r1, r0
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	f000 baaf 	b.w	80051c8 <_free_r>
 8004c6a:	bf00      	nop
 8004c6c:	20000014 	.word	0x20000014

08004c70 <memcmp>:
 8004c70:	b530      	push	{r4, r5, lr}
 8004c72:	2400      	movs	r4, #0
 8004c74:	42a2      	cmp	r2, r4
 8004c76:	d101      	bne.n	8004c7c <memcmp+0xc>
 8004c78:	2000      	movs	r0, #0
 8004c7a:	e007      	b.n	8004c8c <memcmp+0x1c>
 8004c7c:	5d03      	ldrb	r3, [r0, r4]
 8004c7e:	3401      	adds	r4, #1
 8004c80:	190d      	adds	r5, r1, r4
 8004c82:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004c86:	42ab      	cmp	r3, r5
 8004c88:	d0f4      	beq.n	8004c74 <memcmp+0x4>
 8004c8a:	1b58      	subs	r0, r3, r5
 8004c8c:	bd30      	pop	{r4, r5, pc}

08004c8e <memset>:
 8004c8e:	4402      	add	r2, r0
 8004c90:	4603      	mov	r3, r0
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d100      	bne.n	8004c98 <memset+0xa>
 8004c96:	4770      	bx	lr
 8004c98:	f803 1b01 	strb.w	r1, [r3], #1
 8004c9c:	e7f9      	b.n	8004c92 <memset+0x4>
	...

08004ca0 <validate_structure>:
 8004ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ca2:	6801      	ldr	r1, [r0, #0]
 8004ca4:	293b      	cmp	r1, #59	; 0x3b
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	d911      	bls.n	8004cce <validate_structure+0x2e>
 8004caa:	223c      	movs	r2, #60	; 0x3c
 8004cac:	4668      	mov	r0, sp
 8004cae:	f002 f97b 	bl	8006fa8 <div>
 8004cb2:	9a01      	ldr	r2, [sp, #4]
 8004cb4:	6863      	ldr	r3, [r4, #4]
 8004cb6:	9900      	ldr	r1, [sp, #0]
 8004cb8:	2a00      	cmp	r2, #0
 8004cba:	440b      	add	r3, r1
 8004cbc:	6063      	str	r3, [r4, #4]
 8004cbe:	bfbb      	ittet	lt
 8004cc0:	323c      	addlt	r2, #60	; 0x3c
 8004cc2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8004cc6:	6022      	strge	r2, [r4, #0]
 8004cc8:	6022      	strlt	r2, [r4, #0]
 8004cca:	bfb8      	it	lt
 8004ccc:	6063      	strlt	r3, [r4, #4]
 8004cce:	6861      	ldr	r1, [r4, #4]
 8004cd0:	293b      	cmp	r1, #59	; 0x3b
 8004cd2:	d911      	bls.n	8004cf8 <validate_structure+0x58>
 8004cd4:	223c      	movs	r2, #60	; 0x3c
 8004cd6:	4668      	mov	r0, sp
 8004cd8:	f002 f966 	bl	8006fa8 <div>
 8004cdc:	9a01      	ldr	r2, [sp, #4]
 8004cde:	68a3      	ldr	r3, [r4, #8]
 8004ce0:	9900      	ldr	r1, [sp, #0]
 8004ce2:	2a00      	cmp	r2, #0
 8004ce4:	440b      	add	r3, r1
 8004ce6:	60a3      	str	r3, [r4, #8]
 8004ce8:	bfbb      	ittet	lt
 8004cea:	323c      	addlt	r2, #60	; 0x3c
 8004cec:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8004cf0:	6062      	strge	r2, [r4, #4]
 8004cf2:	6062      	strlt	r2, [r4, #4]
 8004cf4:	bfb8      	it	lt
 8004cf6:	60a3      	strlt	r3, [r4, #8]
 8004cf8:	68a1      	ldr	r1, [r4, #8]
 8004cfa:	2917      	cmp	r1, #23
 8004cfc:	d911      	bls.n	8004d22 <validate_structure+0x82>
 8004cfe:	2218      	movs	r2, #24
 8004d00:	4668      	mov	r0, sp
 8004d02:	f002 f951 	bl	8006fa8 <div>
 8004d06:	9a01      	ldr	r2, [sp, #4]
 8004d08:	68e3      	ldr	r3, [r4, #12]
 8004d0a:	9900      	ldr	r1, [sp, #0]
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	440b      	add	r3, r1
 8004d10:	60e3      	str	r3, [r4, #12]
 8004d12:	bfbb      	ittet	lt
 8004d14:	3218      	addlt	r2, #24
 8004d16:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8004d1a:	60a2      	strge	r2, [r4, #8]
 8004d1c:	60a2      	strlt	r2, [r4, #8]
 8004d1e:	bfb8      	it	lt
 8004d20:	60e3      	strlt	r3, [r4, #12]
 8004d22:	6921      	ldr	r1, [r4, #16]
 8004d24:	290b      	cmp	r1, #11
 8004d26:	d911      	bls.n	8004d4c <validate_structure+0xac>
 8004d28:	220c      	movs	r2, #12
 8004d2a:	4668      	mov	r0, sp
 8004d2c:	f002 f93c 	bl	8006fa8 <div>
 8004d30:	9a01      	ldr	r2, [sp, #4]
 8004d32:	6963      	ldr	r3, [r4, #20]
 8004d34:	9900      	ldr	r1, [sp, #0]
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	440b      	add	r3, r1
 8004d3a:	6163      	str	r3, [r4, #20]
 8004d3c:	bfbb      	ittet	lt
 8004d3e:	320c      	addlt	r2, #12
 8004d40:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8004d44:	6122      	strge	r2, [r4, #16]
 8004d46:	6122      	strlt	r2, [r4, #16]
 8004d48:	bfb8      	it	lt
 8004d4a:	6163      	strlt	r3, [r4, #20]
 8004d4c:	6963      	ldr	r3, [r4, #20]
 8004d4e:	0799      	lsls	r1, r3, #30
 8004d50:	d120      	bne.n	8004d94 <validate_structure+0xf4>
 8004d52:	2164      	movs	r1, #100	; 0x64
 8004d54:	fb93 f2f1 	sdiv	r2, r3, r1
 8004d58:	fb01 3212 	mls	r2, r1, r2, r3
 8004d5c:	b9e2      	cbnz	r2, 8004d98 <validate_structure+0xf8>
 8004d5e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8004d62:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004d66:	fb93 f2f1 	sdiv	r2, r3, r1
 8004d6a:	fb01 3312 	mls	r3, r1, r2, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf14      	ite	ne
 8004d72:	231c      	movne	r3, #28
 8004d74:	231d      	moveq	r3, #29
 8004d76:	68e2      	ldr	r2, [r4, #12]
 8004d78:	2a00      	cmp	r2, #0
 8004d7a:	dc0f      	bgt.n	8004d9c <validate_structure+0xfc>
 8004d7c:	4f34      	ldr	r7, [pc, #208]	; (8004e50 <validate_structure+0x1b0>)
 8004d7e:	260b      	movs	r6, #11
 8004d80:	2064      	movs	r0, #100	; 0x64
 8004d82:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8004d86:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8004d8a:	f1bc 0f00 	cmp.w	ip, #0
 8004d8e:	dd14      	ble.n	8004dba <validate_structure+0x11a>
 8004d90:	b003      	add	sp, #12
 8004d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d94:	231c      	movs	r3, #28
 8004d96:	e7ee      	b.n	8004d76 <validate_structure+0xd6>
 8004d98:	231d      	movs	r3, #29
 8004d9a:	e7ec      	b.n	8004d76 <validate_structure+0xd6>
 8004d9c:	4f2c      	ldr	r7, [pc, #176]	; (8004e50 <validate_structure+0x1b0>)
 8004d9e:	f04f 0c00 	mov.w	ip, #0
 8004da2:	2564      	movs	r5, #100	; 0x64
 8004da4:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8004da8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8004dac:	2a01      	cmp	r2, #1
 8004dae:	d02f      	beq.n	8004e10 <validate_structure+0x170>
 8004db0:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8004db4:	4281      	cmp	r1, r0
 8004db6:	dc2e      	bgt.n	8004e16 <validate_structure+0x176>
 8004db8:	e7ea      	b.n	8004d90 <validate_structure+0xf0>
 8004dba:	6921      	ldr	r1, [r4, #16]
 8004dbc:	3901      	subs	r1, #1
 8004dbe:	6121      	str	r1, [r4, #16]
 8004dc0:	3101      	adds	r1, #1
 8004dc2:	d114      	bne.n	8004dee <validate_structure+0x14e>
 8004dc4:	6963      	ldr	r3, [r4, #20]
 8004dc6:	1e59      	subs	r1, r3, #1
 8004dc8:	078a      	lsls	r2, r1, #30
 8004dca:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8004dce:	d117      	bne.n	8004e00 <validate_structure+0x160>
 8004dd0:	fb91 f2f0 	sdiv	r2, r1, r0
 8004dd4:	fb00 1112 	mls	r1, r0, r2, r1
 8004dd8:	b9a1      	cbnz	r1, 8004e04 <validate_structure+0x164>
 8004dda:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8004dde:	fb93 f2f5 	sdiv	r2, r3, r5
 8004de2:	fb05 3312 	mls	r3, r5, r2, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	231c      	movne	r3, #28
 8004dec:	231d      	moveq	r3, #29
 8004dee:	6922      	ldr	r2, [r4, #16]
 8004df0:	2a01      	cmp	r2, #1
 8004df2:	bf14      	ite	ne
 8004df4:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8004df8:	461a      	moveq	r2, r3
 8004dfa:	4462      	add	r2, ip
 8004dfc:	60e2      	str	r2, [r4, #12]
 8004dfe:	e7c2      	b.n	8004d86 <validate_structure+0xe6>
 8004e00:	231c      	movs	r3, #28
 8004e02:	e7f4      	b.n	8004dee <validate_structure+0x14e>
 8004e04:	231d      	movs	r3, #29
 8004e06:	e7f2      	b.n	8004dee <validate_structure+0x14e>
 8004e08:	231c      	movs	r3, #28
 8004e0a:	e7cd      	b.n	8004da8 <validate_structure+0x108>
 8004e0c:	231d      	movs	r3, #29
 8004e0e:	e7cb      	b.n	8004da8 <validate_structure+0x108>
 8004e10:	428b      	cmp	r3, r1
 8004e12:	dabd      	bge.n	8004d90 <validate_structure+0xf0>
 8004e14:	4618      	mov	r0, r3
 8004e16:	3201      	adds	r2, #1
 8004e18:	1a09      	subs	r1, r1, r0
 8004e1a:	2a0c      	cmp	r2, #12
 8004e1c:	60e1      	str	r1, [r4, #12]
 8004e1e:	6122      	str	r2, [r4, #16]
 8004e20:	d1c2      	bne.n	8004da8 <validate_structure+0x108>
 8004e22:	6963      	ldr	r3, [r4, #20]
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	0791      	lsls	r1, r2, #30
 8004e28:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8004e2c:	d1ec      	bne.n	8004e08 <validate_structure+0x168>
 8004e2e:	fb92 f1f5 	sdiv	r1, r2, r5
 8004e32:	fb05 2211 	mls	r2, r5, r1, r2
 8004e36:	2a00      	cmp	r2, #0
 8004e38:	d1e8      	bne.n	8004e0c <validate_structure+0x16c>
 8004e3a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8004e3e:	fb93 f2f6 	sdiv	r2, r3, r6
 8004e42:	fb06 3312 	mls	r3, r6, r2, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	231c      	movne	r3, #28
 8004e4c:	231d      	moveq	r3, #29
 8004e4e:	e7ab      	b.n	8004da8 <validate_structure+0x108>
 8004e50:	080099e8 	.word	0x080099e8

08004e54 <mktime>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	b089      	sub	sp, #36	; 0x24
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	f003 f8ba 	bl	8007fd4 <__gettzinfo>
 8004e60:	4680      	mov	r8, r0
 8004e62:	4630      	mov	r0, r6
 8004e64:	f7ff ff1c 	bl	8004ca0 <validate_structure>
 8004e68:	e9d6 3000 	ldrd	r3, r0, [r6]
 8004e6c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8004e70:	fb0a 3a00 	mla	sl, sl, r0, r3
 8004e74:	68b0      	ldr	r0, [r6, #8]
 8004e76:	4abe      	ldr	r2, [pc, #760]	; (8005170 <mktime+0x31c>)
 8004e78:	6975      	ldr	r5, [r6, #20]
 8004e7a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004e7e:	fb03 aa00 	mla	sl, r3, r0, sl
 8004e82:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8004e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e8a:	3c01      	subs	r4, #1
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8004e92:	4414      	add	r4, r2
 8004e94:	dd11      	ble.n	8004eba <mktime+0x66>
 8004e96:	07a9      	lsls	r1, r5, #30
 8004e98:	d10f      	bne.n	8004eba <mktime+0x66>
 8004e9a:	2264      	movs	r2, #100	; 0x64
 8004e9c:	fb95 f3f2 	sdiv	r3, r5, r2
 8004ea0:	fb02 5313 	mls	r3, r2, r3, r5
 8004ea4:	b943      	cbnz	r3, 8004eb8 <mktime+0x64>
 8004ea6:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8004eaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004eae:	fb91 f3f2 	sdiv	r3, r1, r2
 8004eb2:	fb02 1313 	mls	r3, r2, r3, r1
 8004eb6:	b903      	cbnz	r3, 8004eba <mktime+0x66>
 8004eb8:	3401      	adds	r4, #1
 8004eba:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 8004ebe:	3310      	adds	r3, #16
 8004ec0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	61f4      	str	r4, [r6, #28]
 8004ec8:	f200 8179 	bhi.w	80051be <mktime+0x36a>
 8004ecc:	2d46      	cmp	r5, #70	; 0x46
 8004ece:	f340 8084 	ble.w	8004fda <mktime+0x186>
 8004ed2:	2346      	movs	r3, #70	; 0x46
 8004ed4:	f240 176d 	movw	r7, #365	; 0x16d
 8004ed8:	2164      	movs	r1, #100	; 0x64
 8004eda:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004ede:	079a      	lsls	r2, r3, #30
 8004ee0:	d175      	bne.n	8004fce <mktime+0x17a>
 8004ee2:	fb93 f2f1 	sdiv	r2, r3, r1
 8004ee6:	fb01 3212 	mls	r2, r1, r2, r3
 8004eea:	2a00      	cmp	r2, #0
 8004eec:	d172      	bne.n	8004fd4 <mktime+0x180>
 8004eee:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8004ef2:	fb9c f2f0 	sdiv	r2, ip, r0
 8004ef6:	fb00 c212 	mls	r2, r0, r2, ip
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	bf14      	ite	ne
 8004efe:	463a      	movne	r2, r7
 8004f00:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8004f04:	3301      	adds	r3, #1
 8004f06:	429d      	cmp	r5, r3
 8004f08:	4414      	add	r4, r2
 8004f0a:	d1e8      	bne.n	8004ede <mktime+0x8a>
 8004f0c:	4b99      	ldr	r3, [pc, #612]	; (8005174 <mktime+0x320>)
 8004f0e:	4363      	muls	r3, r4
 8004f10:	eb1a 0103 	adds.w	r1, sl, r3
 8004f14:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 8004f18:	e9cd 1200 	strd	r1, r2, [sp]
 8004f1c:	f001 fdfa 	bl	8006b14 <__tz_lock>
 8004f20:	f001 fdfa 	bl	8006b18 <_tzset_unlocked>
 8004f24:	4b94      	ldr	r3, [pc, #592]	; (8005178 <mktime+0x324>)
 8004f26:	f8d3 9000 	ldr.w	r9, [r3]
 8004f2a:	f1b9 0f00 	cmp.w	r9, #0
 8004f2e:	d045      	beq.n	8004fbc <mktime+0x168>
 8004f30:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8004f34:	6970      	ldr	r0, [r6, #20]
 8004f36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004f3a:	464f      	mov	r7, r9
 8004f3c:	2f01      	cmp	r7, #1
 8004f3e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8004f42:	bfa8      	it	ge
 8004f44:	2701      	movge	r7, #1
 8004f46:	4283      	cmp	r3, r0
 8004f48:	f040 8089 	bne.w	800505e <mktime+0x20a>
 8004f4c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8004f50:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8004f54:	460a      	mov	r2, r1
 8004f56:	17cb      	asrs	r3, r1, #31
 8004f58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f5c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8004f60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f64:	1a12      	subs	r2, r2, r0
 8004f66:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 8004f6a:	4692      	mov	sl, r2
 8004f6c:	469b      	mov	fp, r3
 8004f6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f72:	4552      	cmp	r2, sl
 8004f74:	eb73 0c0b 	sbcs.w	ip, r3, fp
 8004f78:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004f7c:	da76      	bge.n	800506c <mktime+0x218>
 8004f7e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8004f82:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004f86:	ebb2 0a0a 	subs.w	sl, r2, sl
 8004f8a:	eb63 0b0b 	sbc.w	fp, r3, fp
 8004f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d079      	beq.n	800508a <mktime+0x236>
 8004f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f9a:	4552      	cmp	r2, sl
 8004f9c:	eb73 030b 	sbcs.w	r3, r3, fp
 8004fa0:	db07      	blt.n	8004fb2 <mktime+0x15e>
 8004fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fa6:	e9dd ab00 	ldrd	sl, fp, [sp]
 8004faa:	4592      	cmp	sl, r2
 8004fac:	eb7b 0303 	sbcs.w	r3, fp, r3
 8004fb0:	db71      	blt.n	8005096 <mktime+0x242>
 8004fb2:	f1b9 0f00 	cmp.w	r9, #0
 8004fb6:	f04f 0900 	mov.w	r9, #0
 8004fba:	da71      	bge.n	80050a0 <mktime+0x24c>
 8004fbc:	e9dd ab00 	ldrd	sl, fp, [sp]
 8004fc0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8004fc4:	eb1a 0a03 	adds.w	sl, sl, r3
 8004fc8:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8004fcc:	e0b4      	b.n	8005138 <mktime+0x2e4>
 8004fce:	f240 126d 	movw	r2, #365	; 0x16d
 8004fd2:	e797      	b.n	8004f04 <mktime+0xb0>
 8004fd4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004fd8:	e794      	b.n	8004f04 <mktime+0xb0>
 8004fda:	d097      	beq.n	8004f0c <mktime+0xb8>
 8004fdc:	2345      	movs	r3, #69	; 0x45
 8004fde:	f240 176d 	movw	r7, #365	; 0x16d
 8004fe2:	2164      	movs	r1, #100	; 0x64
 8004fe4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004fe8:	e012      	b.n	8005010 <mktime+0x1bc>
 8004fea:	bb62      	cbnz	r2, 8005046 <mktime+0x1f2>
 8004fec:	fb93 f2f1 	sdiv	r2, r3, r1
 8004ff0:	fb01 3212 	mls	r2, r1, r2, r3
 8004ff4:	bb52      	cbnz	r2, 800504c <mktime+0x1f8>
 8004ff6:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8004ffa:	fb9c f2f0 	sdiv	r2, ip, r0
 8004ffe:	fb00 c212 	mls	r2, r0, r2, ip
 8005002:	2a00      	cmp	r2, #0
 8005004:	bf14      	ite	ne
 8005006:	463a      	movne	r2, r7
 8005008:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800500c:	1aa4      	subs	r4, r4, r2
 800500e:	3b01      	subs	r3, #1
 8005010:	429d      	cmp	r5, r3
 8005012:	f003 0203 	and.w	r2, r3, #3
 8005016:	dbe8      	blt.n	8004fea <mktime+0x196>
 8005018:	b9da      	cbnz	r2, 8005052 <mktime+0x1fe>
 800501a:	2264      	movs	r2, #100	; 0x64
 800501c:	fb95 f3f2 	sdiv	r3, r5, r2
 8005020:	fb02 5313 	mls	r3, r2, r3, r5
 8005024:	b9c3      	cbnz	r3, 8005058 <mktime+0x204>
 8005026:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 800502a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800502e:	fb91 f3f2 	sdiv	r3, r1, r2
 8005032:	fb02 1313 	mls	r3, r2, r3, r1
 8005036:	2b00      	cmp	r3, #0
 8005038:	f240 136d 	movw	r3, #365	; 0x16d
 800503c:	bf08      	it	eq
 800503e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8005042:	1ae4      	subs	r4, r4, r3
 8005044:	e762      	b.n	8004f0c <mktime+0xb8>
 8005046:	f240 126d 	movw	r2, #365	; 0x16d
 800504a:	e7df      	b.n	800500c <mktime+0x1b8>
 800504c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8005050:	e7dc      	b.n	800500c <mktime+0x1b8>
 8005052:	f240 136d 	movw	r3, #365	; 0x16d
 8005056:	e7f4      	b.n	8005042 <mktime+0x1ee>
 8005058:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800505c:	e7f1      	b.n	8005042 <mktime+0x1ee>
 800505e:	f001 fcb1 	bl	80069c4 <__tzcalc_limits>
 8005062:	2800      	cmp	r0, #0
 8005064:	f47f af72 	bne.w	8004f4c <mktime+0xf8>
 8005068:	46b9      	mov	r9, r7
 800506a:	e057      	b.n	800511c <mktime+0x2c8>
 800506c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005074:	ebb2 020a 	subs.w	r2, r2, sl
 8005078:	eb63 030b 	sbc.w	r3, r3, fp
 800507c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8005080:	4592      	cmp	sl, r2
 8005082:	eb7b 0303 	sbcs.w	r3, fp, r3
 8005086:	dbef      	blt.n	8005068 <mktime+0x214>
 8005088:	e779      	b.n	8004f7e <mktime+0x12a>
 800508a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800508e:	4552      	cmp	r2, sl
 8005090:	eb73 030b 	sbcs.w	r3, r3, fp
 8005094:	db85      	blt.n	8004fa2 <mktime+0x14e>
 8005096:	f1b9 0f00 	cmp.w	r9, #0
 800509a:	db43      	blt.n	8005124 <mktime+0x2d0>
 800509c:	f04f 0901 	mov.w	r9, #1
 80050a0:	ea87 0709 	eor.w	r7, r7, r9
 80050a4:	2f01      	cmp	r7, #1
 80050a6:	d139      	bne.n	800511c <mktime+0x2c8>
 80050a8:	1a40      	subs	r0, r0, r1
 80050aa:	f1b9 0f00 	cmp.w	r9, #0
 80050ae:	d100      	bne.n	80050b2 <mktime+0x25e>
 80050b0:	4240      	negs	r0, r0
 80050b2:	6833      	ldr	r3, [r6, #0]
 80050b4:	4403      	add	r3, r0
 80050b6:	6033      	str	r3, [r6, #0]
 80050b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050bc:	1812      	adds	r2, r2, r0
 80050be:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 80050c2:	e9cd 2300 	strd	r2, r3, [sp]
 80050c6:	4630      	mov	r0, r6
 80050c8:	68f2      	ldr	r2, [r6, #12]
 80050ca:	9202      	str	r2, [sp, #8]
 80050cc:	f7ff fde8 	bl	8004ca0 <validate_structure>
 80050d0:	68f3      	ldr	r3, [r6, #12]
 80050d2:	9a02      	ldr	r2, [sp, #8]
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	d021      	beq.n	800511c <mktime+0x2c8>
 80050d8:	2b01      	cmp	r3, #1
 80050da:	dc40      	bgt.n	800515e <mktime+0x30a>
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	bfa8      	it	ge
 80050e2:	461f      	movge	r7, r3
 80050e4:	69f3      	ldr	r3, [r6, #28]
 80050e6:	443c      	add	r4, r7
 80050e8:	18ff      	adds	r7, r7, r3
 80050ea:	d547      	bpl.n	800517c <mktime+0x328>
 80050ec:	1e6a      	subs	r2, r5, #1
 80050ee:	0791      	lsls	r1, r2, #30
 80050f0:	d138      	bne.n	8005164 <mktime+0x310>
 80050f2:	2164      	movs	r1, #100	; 0x64
 80050f4:	fb92 f3f1 	sdiv	r3, r2, r1
 80050f8:	fb01 2313 	mls	r3, r1, r3, r2
 80050fc:	bbab      	cbnz	r3, 800516a <mktime+0x316>
 80050fe:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8005102:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005106:	fb95 f3f2 	sdiv	r3, r5, r2
 800510a:	fb02 5513 	mls	r5, r2, r3, r5
 800510e:	2d00      	cmp	r5, #0
 8005110:	f240 136d 	movw	r3, #365	; 0x16d
 8005114:	bf18      	it	ne
 8005116:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800511a:	61f3      	str	r3, [r6, #28]
 800511c:	f1b9 0f01 	cmp.w	r9, #1
 8005120:	f47f af4c 	bne.w	8004fbc <mktime+0x168>
 8005124:	e9dd ab00 	ldrd	sl, fp, [sp]
 8005128:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 800512c:	eb1a 0a03 	adds.w	sl, sl, r3
 8005130:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8005134:	f04f 0901 	mov.w	r9, #1
 8005138:	f001 fced 	bl	8006b16 <__tz_unlock>
 800513c:	3404      	adds	r4, #4
 800513e:	2307      	movs	r3, #7
 8005140:	fb94 f3f3 	sdiv	r3, r4, r3
 8005144:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005148:	1ae4      	subs	r4, r4, r3
 800514a:	bf48      	it	mi
 800514c:	3407      	addmi	r4, #7
 800514e:	f8c6 9020 	str.w	r9, [r6, #32]
 8005152:	61b4      	str	r4, [r6, #24]
 8005154:	4650      	mov	r0, sl
 8005156:	4659      	mov	r1, fp
 8005158:	b009      	add	sp, #36	; 0x24
 800515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515e:	f04f 37ff 	mov.w	r7, #4294967295
 8005162:	e7bf      	b.n	80050e4 <mktime+0x290>
 8005164:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8005168:	e7d7      	b.n	800511a <mktime+0x2c6>
 800516a:	f240 136d 	movw	r3, #365	; 0x16d
 800516e:	e7d4      	b.n	800511a <mktime+0x2c6>
 8005170:	08009a18 	.word	0x08009a18
 8005174:	00015180 	.word	0x00015180
 8005178:	20000394 	.word	0x20000394
 800517c:	07ab      	lsls	r3, r5, #30
 800517e:	d118      	bne.n	80051b2 <mktime+0x35e>
 8005180:	2264      	movs	r2, #100	; 0x64
 8005182:	fb95 f3f2 	sdiv	r3, r5, r2
 8005186:	fb02 5313 	mls	r3, r2, r3, r5
 800518a:	b9ab      	cbnz	r3, 80051b8 <mktime+0x364>
 800518c:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8005190:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005194:	fb95 f3f2 	sdiv	r3, r5, r2
 8005198:	fb02 5513 	mls	r5, r2, r3, r5
 800519c:	2d00      	cmp	r5, #0
 800519e:	f240 136d 	movw	r3, #365	; 0x16d
 80051a2:	bf08      	it	eq
 80051a4:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80051a8:	429f      	cmp	r7, r3
 80051aa:	bfa8      	it	ge
 80051ac:	1aff      	subge	r7, r7, r3
 80051ae:	61f7      	str	r7, [r6, #28]
 80051b0:	e7b4      	b.n	800511c <mktime+0x2c8>
 80051b2:	f240 136d 	movw	r3, #365	; 0x16d
 80051b6:	e7f7      	b.n	80051a8 <mktime+0x354>
 80051b8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80051bc:	e7f4      	b.n	80051a8 <mktime+0x354>
 80051be:	f04f 3aff 	mov.w	sl, #4294967295
 80051c2:	f04f 3bff 	mov.w	fp, #4294967295
 80051c6:	e7c5      	b.n	8005154 <mktime+0x300>

080051c8 <_free_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4605      	mov	r5, r0
 80051cc:	2900      	cmp	r1, #0
 80051ce:	d045      	beq.n	800525c <_free_r+0x94>
 80051d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d4:	1f0c      	subs	r4, r1, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bfb8      	it	lt
 80051da:	18e4      	addlt	r4, r4, r3
 80051dc:	f003 f851 	bl	8008282 <__malloc_lock>
 80051e0:	4a1f      	ldr	r2, [pc, #124]	; (8005260 <_free_r+0x98>)
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	4610      	mov	r0, r2
 80051e6:	b933      	cbnz	r3, 80051f6 <_free_r+0x2e>
 80051e8:	6063      	str	r3, [r4, #4]
 80051ea:	6014      	str	r4, [r2, #0]
 80051ec:	4628      	mov	r0, r5
 80051ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051f2:	f003 b847 	b.w	8008284 <__malloc_unlock>
 80051f6:	42a3      	cmp	r3, r4
 80051f8:	d90c      	bls.n	8005214 <_free_r+0x4c>
 80051fa:	6821      	ldr	r1, [r4, #0]
 80051fc:	1862      	adds	r2, r4, r1
 80051fe:	4293      	cmp	r3, r2
 8005200:	bf04      	itt	eq
 8005202:	681a      	ldreq	r2, [r3, #0]
 8005204:	685b      	ldreq	r3, [r3, #4]
 8005206:	6063      	str	r3, [r4, #4]
 8005208:	bf04      	itt	eq
 800520a:	1852      	addeq	r2, r2, r1
 800520c:	6022      	streq	r2, [r4, #0]
 800520e:	6004      	str	r4, [r0, #0]
 8005210:	e7ec      	b.n	80051ec <_free_r+0x24>
 8005212:	4613      	mov	r3, r2
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	b10a      	cbz	r2, 800521c <_free_r+0x54>
 8005218:	42a2      	cmp	r2, r4
 800521a:	d9fa      	bls.n	8005212 <_free_r+0x4a>
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	1858      	adds	r0, r3, r1
 8005220:	42a0      	cmp	r0, r4
 8005222:	d10b      	bne.n	800523c <_free_r+0x74>
 8005224:	6820      	ldr	r0, [r4, #0]
 8005226:	4401      	add	r1, r0
 8005228:	1858      	adds	r0, r3, r1
 800522a:	4282      	cmp	r2, r0
 800522c:	6019      	str	r1, [r3, #0]
 800522e:	d1dd      	bne.n	80051ec <_free_r+0x24>
 8005230:	6810      	ldr	r0, [r2, #0]
 8005232:	6852      	ldr	r2, [r2, #4]
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	4401      	add	r1, r0
 8005238:	6019      	str	r1, [r3, #0]
 800523a:	e7d7      	b.n	80051ec <_free_r+0x24>
 800523c:	d902      	bls.n	8005244 <_free_r+0x7c>
 800523e:	230c      	movs	r3, #12
 8005240:	602b      	str	r3, [r5, #0]
 8005242:	e7d3      	b.n	80051ec <_free_r+0x24>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	1821      	adds	r1, r4, r0
 8005248:	428a      	cmp	r2, r1
 800524a:	bf04      	itt	eq
 800524c:	6811      	ldreq	r1, [r2, #0]
 800524e:	6852      	ldreq	r2, [r2, #4]
 8005250:	6062      	str	r2, [r4, #4]
 8005252:	bf04      	itt	eq
 8005254:	1809      	addeq	r1, r1, r0
 8005256:	6021      	streq	r1, [r4, #0]
 8005258:	605c      	str	r4, [r3, #4]
 800525a:	e7c7      	b.n	80051ec <_free_r+0x24>
 800525c:	bd38      	pop	{r3, r4, r5, pc}
 800525e:	bf00      	nop
 8005260:	20000370 	.word	0x20000370

08005264 <_malloc_r>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	1ccd      	adds	r5, r1, #3
 8005268:	f025 0503 	bic.w	r5, r5, #3
 800526c:	3508      	adds	r5, #8
 800526e:	2d0c      	cmp	r5, #12
 8005270:	bf38      	it	cc
 8005272:	250c      	movcc	r5, #12
 8005274:	2d00      	cmp	r5, #0
 8005276:	4606      	mov	r6, r0
 8005278:	db01      	blt.n	800527e <_malloc_r+0x1a>
 800527a:	42a9      	cmp	r1, r5
 800527c:	d903      	bls.n	8005286 <_malloc_r+0x22>
 800527e:	230c      	movs	r3, #12
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	2000      	movs	r0, #0
 8005284:	bd70      	pop	{r4, r5, r6, pc}
 8005286:	f002 fffc 	bl	8008282 <__malloc_lock>
 800528a:	4a21      	ldr	r2, [pc, #132]	; (8005310 <_malloc_r+0xac>)
 800528c:	6814      	ldr	r4, [r2, #0]
 800528e:	4621      	mov	r1, r4
 8005290:	b991      	cbnz	r1, 80052b8 <_malloc_r+0x54>
 8005292:	4c20      	ldr	r4, [pc, #128]	; (8005314 <_malloc_r+0xb0>)
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	b91b      	cbnz	r3, 80052a0 <_malloc_r+0x3c>
 8005298:	4630      	mov	r0, r6
 800529a:	f000 fd15 	bl	8005cc8 <_sbrk_r>
 800529e:	6020      	str	r0, [r4, #0]
 80052a0:	4629      	mov	r1, r5
 80052a2:	4630      	mov	r0, r6
 80052a4:	f000 fd10 	bl	8005cc8 <_sbrk_r>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d124      	bne.n	80052f6 <_malloc_r+0x92>
 80052ac:	230c      	movs	r3, #12
 80052ae:	6033      	str	r3, [r6, #0]
 80052b0:	4630      	mov	r0, r6
 80052b2:	f002 ffe7 	bl	8008284 <__malloc_unlock>
 80052b6:	e7e4      	b.n	8005282 <_malloc_r+0x1e>
 80052b8:	680b      	ldr	r3, [r1, #0]
 80052ba:	1b5b      	subs	r3, r3, r5
 80052bc:	d418      	bmi.n	80052f0 <_malloc_r+0x8c>
 80052be:	2b0b      	cmp	r3, #11
 80052c0:	d90f      	bls.n	80052e2 <_malloc_r+0x7e>
 80052c2:	600b      	str	r3, [r1, #0]
 80052c4:	50cd      	str	r5, [r1, r3]
 80052c6:	18cc      	adds	r4, r1, r3
 80052c8:	4630      	mov	r0, r6
 80052ca:	f002 ffdb 	bl	8008284 <__malloc_unlock>
 80052ce:	f104 000b 	add.w	r0, r4, #11
 80052d2:	1d23      	adds	r3, r4, #4
 80052d4:	f020 0007 	bic.w	r0, r0, #7
 80052d8:	1ac3      	subs	r3, r0, r3
 80052da:	d0d3      	beq.n	8005284 <_malloc_r+0x20>
 80052dc:	425a      	negs	r2, r3
 80052de:	50e2      	str	r2, [r4, r3]
 80052e0:	e7d0      	b.n	8005284 <_malloc_r+0x20>
 80052e2:	428c      	cmp	r4, r1
 80052e4:	684b      	ldr	r3, [r1, #4]
 80052e6:	bf16      	itet	ne
 80052e8:	6063      	strne	r3, [r4, #4]
 80052ea:	6013      	streq	r3, [r2, #0]
 80052ec:	460c      	movne	r4, r1
 80052ee:	e7eb      	b.n	80052c8 <_malloc_r+0x64>
 80052f0:	460c      	mov	r4, r1
 80052f2:	6849      	ldr	r1, [r1, #4]
 80052f4:	e7cc      	b.n	8005290 <_malloc_r+0x2c>
 80052f6:	1cc4      	adds	r4, r0, #3
 80052f8:	f024 0403 	bic.w	r4, r4, #3
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d005      	beq.n	800530c <_malloc_r+0xa8>
 8005300:	1a21      	subs	r1, r4, r0
 8005302:	4630      	mov	r0, r6
 8005304:	f000 fce0 	bl	8005cc8 <_sbrk_r>
 8005308:	3001      	adds	r0, #1
 800530a:	d0cf      	beq.n	80052ac <_malloc_r+0x48>
 800530c:	6025      	str	r5, [r4, #0]
 800530e:	e7db      	b.n	80052c8 <_malloc_r+0x64>
 8005310:	20000370 	.word	0x20000370
 8005314:	20000374 	.word	0x20000374

08005318 <__cvt>:
 8005318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	ec55 4b10 	vmov	r4, r5, d0
 8005320:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005322:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005326:	2d00      	cmp	r5, #0
 8005328:	460e      	mov	r6, r1
 800532a:	4691      	mov	r9, r2
 800532c:	4619      	mov	r1, r3
 800532e:	bfb8      	it	lt
 8005330:	4622      	movlt	r2, r4
 8005332:	462b      	mov	r3, r5
 8005334:	f027 0720 	bic.w	r7, r7, #32
 8005338:	bfbb      	ittet	lt
 800533a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800533e:	461d      	movlt	r5, r3
 8005340:	2300      	movge	r3, #0
 8005342:	232d      	movlt	r3, #45	; 0x2d
 8005344:	bfb8      	it	lt
 8005346:	4614      	movlt	r4, r2
 8005348:	2f46      	cmp	r7, #70	; 0x46
 800534a:	700b      	strb	r3, [r1, #0]
 800534c:	d004      	beq.n	8005358 <__cvt+0x40>
 800534e:	2f45      	cmp	r7, #69	; 0x45
 8005350:	d100      	bne.n	8005354 <__cvt+0x3c>
 8005352:	3601      	adds	r6, #1
 8005354:	2102      	movs	r1, #2
 8005356:	e000      	b.n	800535a <__cvt+0x42>
 8005358:	2103      	movs	r1, #3
 800535a:	ab03      	add	r3, sp, #12
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	ab02      	add	r3, sp, #8
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	4632      	mov	r2, r6
 8005364:	4653      	mov	r3, sl
 8005366:	ec45 4b10 	vmov	d0, r4, r5
 800536a:	f001 febd 	bl	80070e8 <_dtoa_r>
 800536e:	2f47      	cmp	r7, #71	; 0x47
 8005370:	4680      	mov	r8, r0
 8005372:	d102      	bne.n	800537a <__cvt+0x62>
 8005374:	f019 0f01 	tst.w	r9, #1
 8005378:	d026      	beq.n	80053c8 <__cvt+0xb0>
 800537a:	2f46      	cmp	r7, #70	; 0x46
 800537c:	eb08 0906 	add.w	r9, r8, r6
 8005380:	d111      	bne.n	80053a6 <__cvt+0x8e>
 8005382:	f898 3000 	ldrb.w	r3, [r8]
 8005386:	2b30      	cmp	r3, #48	; 0x30
 8005388:	d10a      	bne.n	80053a0 <__cvt+0x88>
 800538a:	2200      	movs	r2, #0
 800538c:	2300      	movs	r3, #0
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f7fb fba9 	bl	8000ae8 <__aeabi_dcmpeq>
 8005396:	b918      	cbnz	r0, 80053a0 <__cvt+0x88>
 8005398:	f1c6 0601 	rsb	r6, r6, #1
 800539c:	f8ca 6000 	str.w	r6, [sl]
 80053a0:	f8da 3000 	ldr.w	r3, [sl]
 80053a4:	4499      	add	r9, r3
 80053a6:	2200      	movs	r2, #0
 80053a8:	2300      	movs	r3, #0
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fb fb9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80053b2:	b938      	cbnz	r0, 80053c4 <__cvt+0xac>
 80053b4:	2230      	movs	r2, #48	; 0x30
 80053b6:	9b03      	ldr	r3, [sp, #12]
 80053b8:	454b      	cmp	r3, r9
 80053ba:	d205      	bcs.n	80053c8 <__cvt+0xb0>
 80053bc:	1c59      	adds	r1, r3, #1
 80053be:	9103      	str	r1, [sp, #12]
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	e7f8      	b.n	80053b6 <__cvt+0x9e>
 80053c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053cc:	eba3 0308 	sub.w	r3, r3, r8
 80053d0:	4640      	mov	r0, r8
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	b004      	add	sp, #16
 80053d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080053da <__exponent>:
 80053da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053dc:	2900      	cmp	r1, #0
 80053de:	4604      	mov	r4, r0
 80053e0:	bfba      	itte	lt
 80053e2:	4249      	neglt	r1, r1
 80053e4:	232d      	movlt	r3, #45	; 0x2d
 80053e6:	232b      	movge	r3, #43	; 0x2b
 80053e8:	2909      	cmp	r1, #9
 80053ea:	f804 2b02 	strb.w	r2, [r4], #2
 80053ee:	7043      	strb	r3, [r0, #1]
 80053f0:	dd20      	ble.n	8005434 <__exponent+0x5a>
 80053f2:	f10d 0307 	add.w	r3, sp, #7
 80053f6:	461f      	mov	r7, r3
 80053f8:	260a      	movs	r6, #10
 80053fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80053fe:	fb06 1115 	mls	r1, r6, r5, r1
 8005402:	3130      	adds	r1, #48	; 0x30
 8005404:	2d09      	cmp	r5, #9
 8005406:	f803 1c01 	strb.w	r1, [r3, #-1]
 800540a:	f103 32ff 	add.w	r2, r3, #4294967295
 800540e:	4629      	mov	r1, r5
 8005410:	dc09      	bgt.n	8005426 <__exponent+0x4c>
 8005412:	3130      	adds	r1, #48	; 0x30
 8005414:	3b02      	subs	r3, #2
 8005416:	f802 1c01 	strb.w	r1, [r2, #-1]
 800541a:	42bb      	cmp	r3, r7
 800541c:	4622      	mov	r2, r4
 800541e:	d304      	bcc.n	800542a <__exponent+0x50>
 8005420:	1a10      	subs	r0, r2, r0
 8005422:	b003      	add	sp, #12
 8005424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005426:	4613      	mov	r3, r2
 8005428:	e7e7      	b.n	80053fa <__exponent+0x20>
 800542a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800542e:	f804 2b01 	strb.w	r2, [r4], #1
 8005432:	e7f2      	b.n	800541a <__exponent+0x40>
 8005434:	2330      	movs	r3, #48	; 0x30
 8005436:	4419      	add	r1, r3
 8005438:	7083      	strb	r3, [r0, #2]
 800543a:	1d02      	adds	r2, r0, #4
 800543c:	70c1      	strb	r1, [r0, #3]
 800543e:	e7ef      	b.n	8005420 <__exponent+0x46>

08005440 <_printf_float>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	b08d      	sub	sp, #52	; 0x34
 8005446:	460c      	mov	r4, r1
 8005448:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800544c:	4616      	mov	r6, r2
 800544e:	461f      	mov	r7, r3
 8005450:	4605      	mov	r5, r0
 8005452:	f002 fe87 	bl	8008164 <_localeconv_r>
 8005456:	6803      	ldr	r3, [r0, #0]
 8005458:	9304      	str	r3, [sp, #16]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fa fec2 	bl	80001e4 <strlen>
 8005460:	2300      	movs	r3, #0
 8005462:	930a      	str	r3, [sp, #40]	; 0x28
 8005464:	f8d8 3000 	ldr.w	r3, [r8]
 8005468:	9005      	str	r0, [sp, #20]
 800546a:	3307      	adds	r3, #7
 800546c:	f023 0307 	bic.w	r3, r3, #7
 8005470:	f103 0208 	add.w	r2, r3, #8
 8005474:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005478:	f8d4 b000 	ldr.w	fp, [r4]
 800547c:	f8c8 2000 	str.w	r2, [r8]
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005488:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800548c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005490:	9307      	str	r3, [sp, #28]
 8005492:	f8cd 8018 	str.w	r8, [sp, #24]
 8005496:	f04f 32ff 	mov.w	r2, #4294967295
 800549a:	4ba7      	ldr	r3, [pc, #668]	; (8005738 <_printf_float+0x2f8>)
 800549c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054a0:	f7fb fb54 	bl	8000b4c <__aeabi_dcmpun>
 80054a4:	bb70      	cbnz	r0, 8005504 <_printf_float+0xc4>
 80054a6:	f04f 32ff 	mov.w	r2, #4294967295
 80054aa:	4ba3      	ldr	r3, [pc, #652]	; (8005738 <_printf_float+0x2f8>)
 80054ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054b0:	f7fb fb2e 	bl	8000b10 <__aeabi_dcmple>
 80054b4:	bb30      	cbnz	r0, 8005504 <_printf_float+0xc4>
 80054b6:	2200      	movs	r2, #0
 80054b8:	2300      	movs	r3, #0
 80054ba:	4640      	mov	r0, r8
 80054bc:	4649      	mov	r1, r9
 80054be:	f7fb fb1d 	bl	8000afc <__aeabi_dcmplt>
 80054c2:	b110      	cbz	r0, 80054ca <_printf_float+0x8a>
 80054c4:	232d      	movs	r3, #45	; 0x2d
 80054c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ca:	4a9c      	ldr	r2, [pc, #624]	; (800573c <_printf_float+0x2fc>)
 80054cc:	4b9c      	ldr	r3, [pc, #624]	; (8005740 <_printf_float+0x300>)
 80054ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80054d2:	bf8c      	ite	hi
 80054d4:	4690      	movhi	r8, r2
 80054d6:	4698      	movls	r8, r3
 80054d8:	2303      	movs	r3, #3
 80054da:	f02b 0204 	bic.w	r2, fp, #4
 80054de:	6123      	str	r3, [r4, #16]
 80054e0:	6022      	str	r2, [r4, #0]
 80054e2:	f04f 0900 	mov.w	r9, #0
 80054e6:	9700      	str	r7, [sp, #0]
 80054e8:	4633      	mov	r3, r6
 80054ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80054ec:	4621      	mov	r1, r4
 80054ee:	4628      	mov	r0, r5
 80054f0:	f000 f9e6 	bl	80058c0 <_printf_common>
 80054f4:	3001      	adds	r0, #1
 80054f6:	f040 808d 	bne.w	8005614 <_printf_float+0x1d4>
 80054fa:	f04f 30ff 	mov.w	r0, #4294967295
 80054fe:	b00d      	add	sp, #52	; 0x34
 8005500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	4640      	mov	r0, r8
 800550a:	4649      	mov	r1, r9
 800550c:	f7fb fb1e 	bl	8000b4c <__aeabi_dcmpun>
 8005510:	b110      	cbz	r0, 8005518 <_printf_float+0xd8>
 8005512:	4a8c      	ldr	r2, [pc, #560]	; (8005744 <_printf_float+0x304>)
 8005514:	4b8c      	ldr	r3, [pc, #560]	; (8005748 <_printf_float+0x308>)
 8005516:	e7da      	b.n	80054ce <_printf_float+0x8e>
 8005518:	6861      	ldr	r1, [r4, #4]
 800551a:	1c4b      	adds	r3, r1, #1
 800551c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005520:	a80a      	add	r0, sp, #40	; 0x28
 8005522:	d13e      	bne.n	80055a2 <_printf_float+0x162>
 8005524:	2306      	movs	r3, #6
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	2300      	movs	r3, #0
 800552a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800552e:	ab09      	add	r3, sp, #36	; 0x24
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	ec49 8b10 	vmov	d0, r8, r9
 8005536:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800553a:	6022      	str	r2, [r4, #0]
 800553c:	f8cd a004 	str.w	sl, [sp, #4]
 8005540:	6861      	ldr	r1, [r4, #4]
 8005542:	4628      	mov	r0, r5
 8005544:	f7ff fee8 	bl	8005318 <__cvt>
 8005548:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800554c:	2b47      	cmp	r3, #71	; 0x47
 800554e:	4680      	mov	r8, r0
 8005550:	d109      	bne.n	8005566 <_printf_float+0x126>
 8005552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005554:	1cd8      	adds	r0, r3, #3
 8005556:	db02      	blt.n	800555e <_printf_float+0x11e>
 8005558:	6862      	ldr	r2, [r4, #4]
 800555a:	4293      	cmp	r3, r2
 800555c:	dd47      	ble.n	80055ee <_printf_float+0x1ae>
 800555e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005562:	fa5f fa8a 	uxtb.w	sl, sl
 8005566:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800556a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800556c:	d824      	bhi.n	80055b8 <_printf_float+0x178>
 800556e:	3901      	subs	r1, #1
 8005570:	4652      	mov	r2, sl
 8005572:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005576:	9109      	str	r1, [sp, #36]	; 0x24
 8005578:	f7ff ff2f 	bl	80053da <__exponent>
 800557c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800557e:	1813      	adds	r3, r2, r0
 8005580:	2a01      	cmp	r2, #1
 8005582:	4681      	mov	r9, r0
 8005584:	6123      	str	r3, [r4, #16]
 8005586:	dc02      	bgt.n	800558e <_printf_float+0x14e>
 8005588:	6822      	ldr	r2, [r4, #0]
 800558a:	07d1      	lsls	r1, r2, #31
 800558c:	d501      	bpl.n	8005592 <_printf_float+0x152>
 800558e:	3301      	adds	r3, #1
 8005590:	6123      	str	r3, [r4, #16]
 8005592:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0a5      	beq.n	80054e6 <_printf_float+0xa6>
 800559a:	232d      	movs	r3, #45	; 0x2d
 800559c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a0:	e7a1      	b.n	80054e6 <_printf_float+0xa6>
 80055a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80055a6:	f000 8177 	beq.w	8005898 <_printf_float+0x458>
 80055aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80055ae:	d1bb      	bne.n	8005528 <_printf_float+0xe8>
 80055b0:	2900      	cmp	r1, #0
 80055b2:	d1b9      	bne.n	8005528 <_printf_float+0xe8>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e7b6      	b.n	8005526 <_printf_float+0xe6>
 80055b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80055bc:	d119      	bne.n	80055f2 <_printf_float+0x1b2>
 80055be:	2900      	cmp	r1, #0
 80055c0:	6863      	ldr	r3, [r4, #4]
 80055c2:	dd0c      	ble.n	80055de <_printf_float+0x19e>
 80055c4:	6121      	str	r1, [r4, #16]
 80055c6:	b913      	cbnz	r3, 80055ce <_printf_float+0x18e>
 80055c8:	6822      	ldr	r2, [r4, #0]
 80055ca:	07d2      	lsls	r2, r2, #31
 80055cc:	d502      	bpl.n	80055d4 <_printf_float+0x194>
 80055ce:	3301      	adds	r3, #1
 80055d0:	440b      	add	r3, r1
 80055d2:	6123      	str	r3, [r4, #16]
 80055d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80055d8:	f04f 0900 	mov.w	r9, #0
 80055dc:	e7d9      	b.n	8005592 <_printf_float+0x152>
 80055de:	b913      	cbnz	r3, 80055e6 <_printf_float+0x1a6>
 80055e0:	6822      	ldr	r2, [r4, #0]
 80055e2:	07d0      	lsls	r0, r2, #31
 80055e4:	d501      	bpl.n	80055ea <_printf_float+0x1aa>
 80055e6:	3302      	adds	r3, #2
 80055e8:	e7f3      	b.n	80055d2 <_printf_float+0x192>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e7f1      	b.n	80055d2 <_printf_float+0x192>
 80055ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80055f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80055f6:	4293      	cmp	r3, r2
 80055f8:	db05      	blt.n	8005606 <_printf_float+0x1c6>
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	6123      	str	r3, [r4, #16]
 80055fe:	07d1      	lsls	r1, r2, #31
 8005600:	d5e8      	bpl.n	80055d4 <_printf_float+0x194>
 8005602:	3301      	adds	r3, #1
 8005604:	e7e5      	b.n	80055d2 <_printf_float+0x192>
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfd4      	ite	le
 800560a:	f1c3 0302 	rsble	r3, r3, #2
 800560e:	2301      	movgt	r3, #1
 8005610:	4413      	add	r3, r2
 8005612:	e7de      	b.n	80055d2 <_printf_float+0x192>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	055a      	lsls	r2, r3, #21
 8005618:	d407      	bmi.n	800562a <_printf_float+0x1ea>
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	4642      	mov	r2, r8
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	d12b      	bne.n	8005680 <_printf_float+0x240>
 8005628:	e767      	b.n	80054fa <_printf_float+0xba>
 800562a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800562e:	f240 80dc 	bls.w	80057ea <_printf_float+0x3aa>
 8005632:	2200      	movs	r2, #0
 8005634:	2300      	movs	r3, #0
 8005636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800563a:	f7fb fa55 	bl	8000ae8 <__aeabi_dcmpeq>
 800563e:	2800      	cmp	r0, #0
 8005640:	d033      	beq.n	80056aa <_printf_float+0x26a>
 8005642:	2301      	movs	r3, #1
 8005644:	4a41      	ldr	r2, [pc, #260]	; (800574c <_printf_float+0x30c>)
 8005646:	4631      	mov	r1, r6
 8005648:	4628      	mov	r0, r5
 800564a:	47b8      	blx	r7
 800564c:	3001      	adds	r0, #1
 800564e:	f43f af54 	beq.w	80054fa <_printf_float+0xba>
 8005652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005656:	429a      	cmp	r2, r3
 8005658:	db02      	blt.n	8005660 <_printf_float+0x220>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	07d8      	lsls	r0, r3, #31
 800565e:	d50f      	bpl.n	8005680 <_printf_float+0x240>
 8005660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	f43f af45 	beq.w	80054fa <_printf_float+0xba>
 8005670:	f04f 0800 	mov.w	r8, #0
 8005674:	f104 091a 	add.w	r9, r4, #26
 8005678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567a:	3b01      	subs	r3, #1
 800567c:	4543      	cmp	r3, r8
 800567e:	dc09      	bgt.n	8005694 <_printf_float+0x254>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	079b      	lsls	r3, r3, #30
 8005684:	f100 8103 	bmi.w	800588e <_printf_float+0x44e>
 8005688:	68e0      	ldr	r0, [r4, #12]
 800568a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800568c:	4298      	cmp	r0, r3
 800568e:	bfb8      	it	lt
 8005690:	4618      	movlt	r0, r3
 8005692:	e734      	b.n	80054fe <_printf_float+0xbe>
 8005694:	2301      	movs	r3, #1
 8005696:	464a      	mov	r2, r9
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	f43f af2b 	beq.w	80054fa <_printf_float+0xba>
 80056a4:	f108 0801 	add.w	r8, r8, #1
 80056a8:	e7e6      	b.n	8005678 <_printf_float+0x238>
 80056aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dc2b      	bgt.n	8005708 <_printf_float+0x2c8>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4a26      	ldr	r2, [pc, #152]	; (800574c <_printf_float+0x30c>)
 80056b4:	4631      	mov	r1, r6
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b8      	blx	r7
 80056ba:	3001      	adds	r0, #1
 80056bc:	f43f af1d 	beq.w	80054fa <_printf_float+0xba>
 80056c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c2:	b923      	cbnz	r3, 80056ce <_printf_float+0x28e>
 80056c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c6:	b913      	cbnz	r3, 80056ce <_printf_float+0x28e>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	07d9      	lsls	r1, r3, #31
 80056cc:	d5d8      	bpl.n	8005680 <_printf_float+0x240>
 80056ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056d2:	4631      	mov	r1, r6
 80056d4:	4628      	mov	r0, r5
 80056d6:	47b8      	blx	r7
 80056d8:	3001      	adds	r0, #1
 80056da:	f43f af0e 	beq.w	80054fa <_printf_float+0xba>
 80056de:	f04f 0900 	mov.w	r9, #0
 80056e2:	f104 0a1a 	add.w	sl, r4, #26
 80056e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e8:	425b      	negs	r3, r3
 80056ea:	454b      	cmp	r3, r9
 80056ec:	dc01      	bgt.n	80056f2 <_printf_float+0x2b2>
 80056ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f0:	e794      	b.n	800561c <_printf_float+0x1dc>
 80056f2:	2301      	movs	r3, #1
 80056f4:	4652      	mov	r2, sl
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	f43f aefc 	beq.w	80054fa <_printf_float+0xba>
 8005702:	f109 0901 	add.w	r9, r9, #1
 8005706:	e7ee      	b.n	80056e6 <_printf_float+0x2a6>
 8005708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800570a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800570c:	429a      	cmp	r2, r3
 800570e:	bfa8      	it	ge
 8005710:	461a      	movge	r2, r3
 8005712:	2a00      	cmp	r2, #0
 8005714:	4691      	mov	r9, r2
 8005716:	dd07      	ble.n	8005728 <_printf_float+0x2e8>
 8005718:	4613      	mov	r3, r2
 800571a:	4631      	mov	r1, r6
 800571c:	4642      	mov	r2, r8
 800571e:	4628      	mov	r0, r5
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	f43f aee9 	beq.w	80054fa <_printf_float+0xba>
 8005728:	f104 031a 	add.w	r3, r4, #26
 800572c:	f04f 0b00 	mov.w	fp, #0
 8005730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005734:	9306      	str	r3, [sp, #24]
 8005736:	e015      	b.n	8005764 <_printf_float+0x324>
 8005738:	7fefffff 	.word	0x7fefffff
 800573c:	08009aac 	.word	0x08009aac
 8005740:	08009aa8 	.word	0x08009aa8
 8005744:	08009ab4 	.word	0x08009ab4
 8005748:	08009ab0 	.word	0x08009ab0
 800574c:	0800a034 	.word	0x0800a034
 8005750:	2301      	movs	r3, #1
 8005752:	9a06      	ldr	r2, [sp, #24]
 8005754:	4631      	mov	r1, r6
 8005756:	4628      	mov	r0, r5
 8005758:	47b8      	blx	r7
 800575a:	3001      	adds	r0, #1
 800575c:	f43f aecd 	beq.w	80054fa <_printf_float+0xba>
 8005760:	f10b 0b01 	add.w	fp, fp, #1
 8005764:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005768:	ebaa 0309 	sub.w	r3, sl, r9
 800576c:	455b      	cmp	r3, fp
 800576e:	dcef      	bgt.n	8005750 <_printf_float+0x310>
 8005770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005774:	429a      	cmp	r2, r3
 8005776:	44d0      	add	r8, sl
 8005778:	db15      	blt.n	80057a6 <_printf_float+0x366>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	07da      	lsls	r2, r3, #31
 800577e:	d412      	bmi.n	80057a6 <_printf_float+0x366>
 8005780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005784:	eba3 020a 	sub.w	r2, r3, sl
 8005788:	eba3 0a01 	sub.w	sl, r3, r1
 800578c:	4592      	cmp	sl, r2
 800578e:	bfa8      	it	ge
 8005790:	4692      	movge	sl, r2
 8005792:	f1ba 0f00 	cmp.w	sl, #0
 8005796:	dc0e      	bgt.n	80057b6 <_printf_float+0x376>
 8005798:	f04f 0800 	mov.w	r8, #0
 800579c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057a0:	f104 091a 	add.w	r9, r4, #26
 80057a4:	e019      	b.n	80057da <_printf_float+0x39a>
 80057a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	d1e5      	bne.n	8005780 <_printf_float+0x340>
 80057b4:	e6a1      	b.n	80054fa <_printf_float+0xba>
 80057b6:	4653      	mov	r3, sl
 80057b8:	4642      	mov	r2, r8
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	d1e9      	bne.n	8005798 <_printf_float+0x358>
 80057c4:	e699      	b.n	80054fa <_printf_float+0xba>
 80057c6:	2301      	movs	r3, #1
 80057c8:	464a      	mov	r2, r9
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f ae92 	beq.w	80054fa <_printf_float+0xba>
 80057d6:	f108 0801 	add.w	r8, r8, #1
 80057da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	eba3 030a 	sub.w	r3, r3, sl
 80057e4:	4543      	cmp	r3, r8
 80057e6:	dcee      	bgt.n	80057c6 <_printf_float+0x386>
 80057e8:	e74a      	b.n	8005680 <_printf_float+0x240>
 80057ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ec:	2a01      	cmp	r2, #1
 80057ee:	dc01      	bgt.n	80057f4 <_printf_float+0x3b4>
 80057f0:	07db      	lsls	r3, r3, #31
 80057f2:	d53a      	bpl.n	800586a <_printf_float+0x42a>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4642      	mov	r2, r8
 80057f8:	4631      	mov	r1, r6
 80057fa:	4628      	mov	r0, r5
 80057fc:	47b8      	blx	r7
 80057fe:	3001      	adds	r0, #1
 8005800:	f43f ae7b 	beq.w	80054fa <_printf_float+0xba>
 8005804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005808:	4631      	mov	r1, r6
 800580a:	4628      	mov	r0, r5
 800580c:	47b8      	blx	r7
 800580e:	3001      	adds	r0, #1
 8005810:	f108 0801 	add.w	r8, r8, #1
 8005814:	f43f ae71 	beq.w	80054fa <_printf_float+0xba>
 8005818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800581a:	2200      	movs	r2, #0
 800581c:	f103 3aff 	add.w	sl, r3, #4294967295
 8005820:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005824:	2300      	movs	r3, #0
 8005826:	f7fb f95f 	bl	8000ae8 <__aeabi_dcmpeq>
 800582a:	b9c8      	cbnz	r0, 8005860 <_printf_float+0x420>
 800582c:	4653      	mov	r3, sl
 800582e:	4642      	mov	r2, r8
 8005830:	4631      	mov	r1, r6
 8005832:	4628      	mov	r0, r5
 8005834:	47b8      	blx	r7
 8005836:	3001      	adds	r0, #1
 8005838:	d10e      	bne.n	8005858 <_printf_float+0x418>
 800583a:	e65e      	b.n	80054fa <_printf_float+0xba>
 800583c:	2301      	movs	r3, #1
 800583e:	4652      	mov	r2, sl
 8005840:	4631      	mov	r1, r6
 8005842:	4628      	mov	r0, r5
 8005844:	47b8      	blx	r7
 8005846:	3001      	adds	r0, #1
 8005848:	f43f ae57 	beq.w	80054fa <_printf_float+0xba>
 800584c:	f108 0801 	add.w	r8, r8, #1
 8005850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005852:	3b01      	subs	r3, #1
 8005854:	4543      	cmp	r3, r8
 8005856:	dcf1      	bgt.n	800583c <_printf_float+0x3fc>
 8005858:	464b      	mov	r3, r9
 800585a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800585e:	e6de      	b.n	800561e <_printf_float+0x1de>
 8005860:	f04f 0800 	mov.w	r8, #0
 8005864:	f104 0a1a 	add.w	sl, r4, #26
 8005868:	e7f2      	b.n	8005850 <_printf_float+0x410>
 800586a:	2301      	movs	r3, #1
 800586c:	e7df      	b.n	800582e <_printf_float+0x3ee>
 800586e:	2301      	movs	r3, #1
 8005870:	464a      	mov	r2, r9
 8005872:	4631      	mov	r1, r6
 8005874:	4628      	mov	r0, r5
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	f43f ae3e 	beq.w	80054fa <_printf_float+0xba>
 800587e:	f108 0801 	add.w	r8, r8, #1
 8005882:	68e3      	ldr	r3, [r4, #12]
 8005884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	4543      	cmp	r3, r8
 800588a:	dcf0      	bgt.n	800586e <_printf_float+0x42e>
 800588c:	e6fc      	b.n	8005688 <_printf_float+0x248>
 800588e:	f04f 0800 	mov.w	r8, #0
 8005892:	f104 0919 	add.w	r9, r4, #25
 8005896:	e7f4      	b.n	8005882 <_printf_float+0x442>
 8005898:	2900      	cmp	r1, #0
 800589a:	f43f ae8b 	beq.w	80055b4 <_printf_float+0x174>
 800589e:	2300      	movs	r3, #0
 80058a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80058a4:	ab09      	add	r3, sp, #36	; 0x24
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	ec49 8b10 	vmov	d0, r8, r9
 80058ac:	6022      	str	r2, [r4, #0]
 80058ae:	f8cd a004 	str.w	sl, [sp, #4]
 80058b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058b6:	4628      	mov	r0, r5
 80058b8:	f7ff fd2e 	bl	8005318 <__cvt>
 80058bc:	4680      	mov	r8, r0
 80058be:	e648      	b.n	8005552 <_printf_float+0x112>

080058c0 <_printf_common>:
 80058c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c4:	4691      	mov	r9, r2
 80058c6:	461f      	mov	r7, r3
 80058c8:	688a      	ldr	r2, [r1, #8]
 80058ca:	690b      	ldr	r3, [r1, #16]
 80058cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bfb8      	it	lt
 80058d4:	4613      	movlt	r3, r2
 80058d6:	f8c9 3000 	str.w	r3, [r9]
 80058da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058de:	4606      	mov	r6, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	b112      	cbz	r2, 80058ea <_printf_common+0x2a>
 80058e4:	3301      	adds	r3, #1
 80058e6:	f8c9 3000 	str.w	r3, [r9]
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	0699      	lsls	r1, r3, #26
 80058ee:	bf42      	ittt	mi
 80058f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80058f4:	3302      	addmi	r3, #2
 80058f6:	f8c9 3000 	strmi.w	r3, [r9]
 80058fa:	6825      	ldr	r5, [r4, #0]
 80058fc:	f015 0506 	ands.w	r5, r5, #6
 8005900:	d107      	bne.n	8005912 <_printf_common+0x52>
 8005902:	f104 0a19 	add.w	sl, r4, #25
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	f8d9 2000 	ldr.w	r2, [r9]
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	42ab      	cmp	r3, r5
 8005910:	dc28      	bgt.n	8005964 <_printf_common+0xa4>
 8005912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	3300      	adds	r3, #0
 800591a:	bf18      	it	ne
 800591c:	2301      	movne	r3, #1
 800591e:	0692      	lsls	r2, r2, #26
 8005920:	d42d      	bmi.n	800597e <_printf_common+0xbe>
 8005922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005926:	4639      	mov	r1, r7
 8005928:	4630      	mov	r0, r6
 800592a:	47c0      	blx	r8
 800592c:	3001      	adds	r0, #1
 800592e:	d020      	beq.n	8005972 <_printf_common+0xb2>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	68e5      	ldr	r5, [r4, #12]
 8005934:	f8d9 2000 	ldr.w	r2, [r9]
 8005938:	f003 0306 	and.w	r3, r3, #6
 800593c:	2b04      	cmp	r3, #4
 800593e:	bf08      	it	eq
 8005940:	1aad      	subeq	r5, r5, r2
 8005942:	68a3      	ldr	r3, [r4, #8]
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	bf0c      	ite	eq
 8005948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800594c:	2500      	movne	r5, #0
 800594e:	4293      	cmp	r3, r2
 8005950:	bfc4      	itt	gt
 8005952:	1a9b      	subgt	r3, r3, r2
 8005954:	18ed      	addgt	r5, r5, r3
 8005956:	f04f 0900 	mov.w	r9, #0
 800595a:	341a      	adds	r4, #26
 800595c:	454d      	cmp	r5, r9
 800595e:	d11a      	bne.n	8005996 <_printf_common+0xd6>
 8005960:	2000      	movs	r0, #0
 8005962:	e008      	b.n	8005976 <_printf_common+0xb6>
 8005964:	2301      	movs	r3, #1
 8005966:	4652      	mov	r2, sl
 8005968:	4639      	mov	r1, r7
 800596a:	4630      	mov	r0, r6
 800596c:	47c0      	blx	r8
 800596e:	3001      	adds	r0, #1
 8005970:	d103      	bne.n	800597a <_printf_common+0xba>
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597a:	3501      	adds	r5, #1
 800597c:	e7c3      	b.n	8005906 <_printf_common+0x46>
 800597e:	18e1      	adds	r1, r4, r3
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	2030      	movs	r0, #48	; 0x30
 8005984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005988:	4422      	add	r2, r4
 800598a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800598e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005992:	3302      	adds	r3, #2
 8005994:	e7c5      	b.n	8005922 <_printf_common+0x62>
 8005996:	2301      	movs	r3, #1
 8005998:	4622      	mov	r2, r4
 800599a:	4639      	mov	r1, r7
 800599c:	4630      	mov	r0, r6
 800599e:	47c0      	blx	r8
 80059a0:	3001      	adds	r0, #1
 80059a2:	d0e6      	beq.n	8005972 <_printf_common+0xb2>
 80059a4:	f109 0901 	add.w	r9, r9, #1
 80059a8:	e7d8      	b.n	800595c <_printf_common+0x9c>
	...

080059ac <_printf_i>:
 80059ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80059b4:	460c      	mov	r4, r1
 80059b6:	7e09      	ldrb	r1, [r1, #24]
 80059b8:	b085      	sub	sp, #20
 80059ba:	296e      	cmp	r1, #110	; 0x6e
 80059bc:	4617      	mov	r7, r2
 80059be:	4606      	mov	r6, r0
 80059c0:	4698      	mov	r8, r3
 80059c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059c4:	f000 80b3 	beq.w	8005b2e <_printf_i+0x182>
 80059c8:	d822      	bhi.n	8005a10 <_printf_i+0x64>
 80059ca:	2963      	cmp	r1, #99	; 0x63
 80059cc:	d036      	beq.n	8005a3c <_printf_i+0x90>
 80059ce:	d80a      	bhi.n	80059e6 <_printf_i+0x3a>
 80059d0:	2900      	cmp	r1, #0
 80059d2:	f000 80b9 	beq.w	8005b48 <_printf_i+0x19c>
 80059d6:	2958      	cmp	r1, #88	; 0x58
 80059d8:	f000 8083 	beq.w	8005ae2 <_printf_i+0x136>
 80059dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80059e4:	e032      	b.n	8005a4c <_printf_i+0xa0>
 80059e6:	2964      	cmp	r1, #100	; 0x64
 80059e8:	d001      	beq.n	80059ee <_printf_i+0x42>
 80059ea:	2969      	cmp	r1, #105	; 0x69
 80059ec:	d1f6      	bne.n	80059dc <_printf_i+0x30>
 80059ee:	6820      	ldr	r0, [r4, #0]
 80059f0:	6813      	ldr	r3, [r2, #0]
 80059f2:	0605      	lsls	r5, r0, #24
 80059f4:	f103 0104 	add.w	r1, r3, #4
 80059f8:	d52a      	bpl.n	8005a50 <_printf_i+0xa4>
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6011      	str	r1, [r2, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	da03      	bge.n	8005a0a <_printf_i+0x5e>
 8005a02:	222d      	movs	r2, #45	; 0x2d
 8005a04:	425b      	negs	r3, r3
 8005a06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a0a:	486f      	ldr	r0, [pc, #444]	; (8005bc8 <_printf_i+0x21c>)
 8005a0c:	220a      	movs	r2, #10
 8005a0e:	e039      	b.n	8005a84 <_printf_i+0xd8>
 8005a10:	2973      	cmp	r1, #115	; 0x73
 8005a12:	f000 809d 	beq.w	8005b50 <_printf_i+0x1a4>
 8005a16:	d808      	bhi.n	8005a2a <_printf_i+0x7e>
 8005a18:	296f      	cmp	r1, #111	; 0x6f
 8005a1a:	d020      	beq.n	8005a5e <_printf_i+0xb2>
 8005a1c:	2970      	cmp	r1, #112	; 0x70
 8005a1e:	d1dd      	bne.n	80059dc <_printf_i+0x30>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	f043 0320 	orr.w	r3, r3, #32
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	e003      	b.n	8005a32 <_printf_i+0x86>
 8005a2a:	2975      	cmp	r1, #117	; 0x75
 8005a2c:	d017      	beq.n	8005a5e <_printf_i+0xb2>
 8005a2e:	2978      	cmp	r1, #120	; 0x78
 8005a30:	d1d4      	bne.n	80059dc <_printf_i+0x30>
 8005a32:	2378      	movs	r3, #120	; 0x78
 8005a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a38:	4864      	ldr	r0, [pc, #400]	; (8005bcc <_printf_i+0x220>)
 8005a3a:	e055      	b.n	8005ae8 <_printf_i+0x13c>
 8005a3c:	6813      	ldr	r3, [r2, #0]
 8005a3e:	1d19      	adds	r1, r3, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6011      	str	r1, [r2, #0]
 8005a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e08c      	b.n	8005b6a <_printf_i+0x1be>
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6011      	str	r1, [r2, #0]
 8005a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a58:	bf18      	it	ne
 8005a5a:	b21b      	sxthne	r3, r3
 8005a5c:	e7cf      	b.n	80059fe <_printf_i+0x52>
 8005a5e:	6813      	ldr	r3, [r2, #0]
 8005a60:	6825      	ldr	r5, [r4, #0]
 8005a62:	1d18      	adds	r0, r3, #4
 8005a64:	6010      	str	r0, [r2, #0]
 8005a66:	0628      	lsls	r0, r5, #24
 8005a68:	d501      	bpl.n	8005a6e <_printf_i+0xc2>
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	e002      	b.n	8005a74 <_printf_i+0xc8>
 8005a6e:	0668      	lsls	r0, r5, #25
 8005a70:	d5fb      	bpl.n	8005a6a <_printf_i+0xbe>
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	4854      	ldr	r0, [pc, #336]	; (8005bc8 <_printf_i+0x21c>)
 8005a76:	296f      	cmp	r1, #111	; 0x6f
 8005a78:	bf14      	ite	ne
 8005a7a:	220a      	movne	r2, #10
 8005a7c:	2208      	moveq	r2, #8
 8005a7e:	2100      	movs	r1, #0
 8005a80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a84:	6865      	ldr	r5, [r4, #4]
 8005a86:	60a5      	str	r5, [r4, #8]
 8005a88:	2d00      	cmp	r5, #0
 8005a8a:	f2c0 8095 	blt.w	8005bb8 <_printf_i+0x20c>
 8005a8e:	6821      	ldr	r1, [r4, #0]
 8005a90:	f021 0104 	bic.w	r1, r1, #4
 8005a94:	6021      	str	r1, [r4, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d13d      	bne.n	8005b16 <_printf_i+0x16a>
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	f040 808e 	bne.w	8005bbc <_printf_i+0x210>
 8005aa0:	4665      	mov	r5, ip
 8005aa2:	2a08      	cmp	r2, #8
 8005aa4:	d10b      	bne.n	8005abe <_printf_i+0x112>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	07db      	lsls	r3, r3, #31
 8005aaa:	d508      	bpl.n	8005abe <_printf_i+0x112>
 8005aac:	6923      	ldr	r3, [r4, #16]
 8005aae:	6862      	ldr	r2, [r4, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	bfde      	ittt	le
 8005ab4:	2330      	movle	r3, #48	; 0x30
 8005ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005aba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005abe:	ebac 0305 	sub.w	r3, ip, r5
 8005ac2:	6123      	str	r3, [r4, #16]
 8005ac4:	f8cd 8000 	str.w	r8, [sp]
 8005ac8:	463b      	mov	r3, r7
 8005aca:	aa03      	add	r2, sp, #12
 8005acc:	4621      	mov	r1, r4
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f7ff fef6 	bl	80058c0 <_printf_common>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d14d      	bne.n	8005b74 <_printf_i+0x1c8>
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8005adc:	b005      	add	sp, #20
 8005ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ae2:	4839      	ldr	r0, [pc, #228]	; (8005bc8 <_printf_i+0x21c>)
 8005ae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ae8:	6813      	ldr	r3, [r2, #0]
 8005aea:	6821      	ldr	r1, [r4, #0]
 8005aec:	1d1d      	adds	r5, r3, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6015      	str	r5, [r2, #0]
 8005af2:	060a      	lsls	r2, r1, #24
 8005af4:	d50b      	bpl.n	8005b0e <_printf_i+0x162>
 8005af6:	07ca      	lsls	r2, r1, #31
 8005af8:	bf44      	itt	mi
 8005afa:	f041 0120 	orrmi.w	r1, r1, #32
 8005afe:	6021      	strmi	r1, [r4, #0]
 8005b00:	b91b      	cbnz	r3, 8005b0a <_printf_i+0x15e>
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	f022 0220 	bic.w	r2, r2, #32
 8005b08:	6022      	str	r2, [r4, #0]
 8005b0a:	2210      	movs	r2, #16
 8005b0c:	e7b7      	b.n	8005a7e <_printf_i+0xd2>
 8005b0e:	064d      	lsls	r5, r1, #25
 8005b10:	bf48      	it	mi
 8005b12:	b29b      	uxthmi	r3, r3
 8005b14:	e7ef      	b.n	8005af6 <_printf_i+0x14a>
 8005b16:	4665      	mov	r5, ip
 8005b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b1c:	fb02 3311 	mls	r3, r2, r1, r3
 8005b20:	5cc3      	ldrb	r3, [r0, r3]
 8005b22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005b26:	460b      	mov	r3, r1
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	d1f5      	bne.n	8005b18 <_printf_i+0x16c>
 8005b2c:	e7b9      	b.n	8005aa2 <_printf_i+0xf6>
 8005b2e:	6813      	ldr	r3, [r2, #0]
 8005b30:	6825      	ldr	r5, [r4, #0]
 8005b32:	6961      	ldr	r1, [r4, #20]
 8005b34:	1d18      	adds	r0, r3, #4
 8005b36:	6010      	str	r0, [r2, #0]
 8005b38:	0628      	lsls	r0, r5, #24
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	d501      	bpl.n	8005b42 <_printf_i+0x196>
 8005b3e:	6019      	str	r1, [r3, #0]
 8005b40:	e002      	b.n	8005b48 <_printf_i+0x19c>
 8005b42:	066a      	lsls	r2, r5, #25
 8005b44:	d5fb      	bpl.n	8005b3e <_printf_i+0x192>
 8005b46:	8019      	strh	r1, [r3, #0]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	4665      	mov	r5, ip
 8005b4e:	e7b9      	b.n	8005ac4 <_printf_i+0x118>
 8005b50:	6813      	ldr	r3, [r2, #0]
 8005b52:	1d19      	adds	r1, r3, #4
 8005b54:	6011      	str	r1, [r2, #0]
 8005b56:	681d      	ldr	r5, [r3, #0]
 8005b58:	6862      	ldr	r2, [r4, #4]
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f7fa fb4f 	bl	8000200 <memchr>
 8005b62:	b108      	cbz	r0, 8005b68 <_printf_i+0x1bc>
 8005b64:	1b40      	subs	r0, r0, r5
 8005b66:	6060      	str	r0, [r4, #4]
 8005b68:	6863      	ldr	r3, [r4, #4]
 8005b6a:	6123      	str	r3, [r4, #16]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b72:	e7a7      	b.n	8005ac4 <_printf_i+0x118>
 8005b74:	6923      	ldr	r3, [r4, #16]
 8005b76:	462a      	mov	r2, r5
 8005b78:	4639      	mov	r1, r7
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	47c0      	blx	r8
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d0aa      	beq.n	8005ad8 <_printf_i+0x12c>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	079b      	lsls	r3, r3, #30
 8005b86:	d413      	bmi.n	8005bb0 <_printf_i+0x204>
 8005b88:	68e0      	ldr	r0, [r4, #12]
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	4298      	cmp	r0, r3
 8005b8e:	bfb8      	it	lt
 8005b90:	4618      	movlt	r0, r3
 8005b92:	e7a3      	b.n	8005adc <_printf_i+0x130>
 8005b94:	2301      	movs	r3, #1
 8005b96:	464a      	mov	r2, r9
 8005b98:	4639      	mov	r1, r7
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	47c0      	blx	r8
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d09a      	beq.n	8005ad8 <_printf_i+0x12c>
 8005ba2:	3501      	adds	r5, #1
 8005ba4:	68e3      	ldr	r3, [r4, #12]
 8005ba6:	9a03      	ldr	r2, [sp, #12]
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	42ab      	cmp	r3, r5
 8005bac:	dcf2      	bgt.n	8005b94 <_printf_i+0x1e8>
 8005bae:	e7eb      	b.n	8005b88 <_printf_i+0x1dc>
 8005bb0:	2500      	movs	r5, #0
 8005bb2:	f104 0919 	add.w	r9, r4, #25
 8005bb6:	e7f5      	b.n	8005ba4 <_printf_i+0x1f8>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1ac      	bne.n	8005b16 <_printf_i+0x16a>
 8005bbc:	7803      	ldrb	r3, [r0, #0]
 8005bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc6:	e76c      	b.n	8005aa2 <_printf_i+0xf6>
 8005bc8:	08009ab8 	.word	0x08009ab8
 8005bcc:	08009ac9 	.word	0x08009ac9

08005bd0 <iprintf>:
 8005bd0:	b40f      	push	{r0, r1, r2, r3}
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <iprintf+0x2c>)
 8005bd4:	b513      	push	{r0, r1, r4, lr}
 8005bd6:	681c      	ldr	r4, [r3, #0]
 8005bd8:	b124      	cbz	r4, 8005be4 <iprintf+0x14>
 8005bda:	69a3      	ldr	r3, [r4, #24]
 8005bdc:	b913      	cbnz	r3, 8005be4 <iprintf+0x14>
 8005bde:	4620      	mov	r0, r4
 8005be0:	f002 f92a 	bl	8007e38 <__sinit>
 8005be4:	ab05      	add	r3, sp, #20
 8005be6:	9a04      	ldr	r2, [sp, #16]
 8005be8:	68a1      	ldr	r1, [r4, #8]
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	4620      	mov	r0, r4
 8005bee:	f002 fe5d 	bl	80088ac <_vfiprintf_r>
 8005bf2:	b002      	add	sp, #8
 8005bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf8:	b004      	add	sp, #16
 8005bfa:	4770      	bx	lr
 8005bfc:	20000014 	.word	0x20000014

08005c00 <_puts_r>:
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	460e      	mov	r6, r1
 8005c04:	4605      	mov	r5, r0
 8005c06:	b118      	cbz	r0, 8005c10 <_puts_r+0x10>
 8005c08:	6983      	ldr	r3, [r0, #24]
 8005c0a:	b90b      	cbnz	r3, 8005c10 <_puts_r+0x10>
 8005c0c:	f002 f914 	bl	8007e38 <__sinit>
 8005c10:	69ab      	ldr	r3, [r5, #24]
 8005c12:	68ac      	ldr	r4, [r5, #8]
 8005c14:	b913      	cbnz	r3, 8005c1c <_puts_r+0x1c>
 8005c16:	4628      	mov	r0, r5
 8005c18:	f002 f90e 	bl	8007e38 <__sinit>
 8005c1c:	4b23      	ldr	r3, [pc, #140]	; (8005cac <_puts_r+0xac>)
 8005c1e:	429c      	cmp	r4, r3
 8005c20:	d117      	bne.n	8005c52 <_puts_r+0x52>
 8005c22:	686c      	ldr	r4, [r5, #4]
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	071b      	lsls	r3, r3, #28
 8005c28:	d51d      	bpl.n	8005c66 <_puts_r+0x66>
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	b1db      	cbz	r3, 8005c66 <_puts_r+0x66>
 8005c2e:	3e01      	subs	r6, #1
 8005c30:	68a3      	ldr	r3, [r4, #8]
 8005c32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c36:	3b01      	subs	r3, #1
 8005c38:	60a3      	str	r3, [r4, #8]
 8005c3a:	b9e9      	cbnz	r1, 8005c78 <_puts_r+0x78>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	da2e      	bge.n	8005c9e <_puts_r+0x9e>
 8005c40:	4622      	mov	r2, r4
 8005c42:	210a      	movs	r1, #10
 8005c44:	4628      	mov	r0, r5
 8005c46:	f001 f8eb 	bl	8006e20 <__swbuf_r>
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d011      	beq.n	8005c72 <_puts_r+0x72>
 8005c4e:	200a      	movs	r0, #10
 8005c50:	e011      	b.n	8005c76 <_puts_r+0x76>
 8005c52:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <_puts_r+0xb0>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d101      	bne.n	8005c5c <_puts_r+0x5c>
 8005c58:	68ac      	ldr	r4, [r5, #8]
 8005c5a:	e7e3      	b.n	8005c24 <_puts_r+0x24>
 8005c5c:	4b15      	ldr	r3, [pc, #84]	; (8005cb4 <_puts_r+0xb4>)
 8005c5e:	429c      	cmp	r4, r3
 8005c60:	bf08      	it	eq
 8005c62:	68ec      	ldreq	r4, [r5, #12]
 8005c64:	e7de      	b.n	8005c24 <_puts_r+0x24>
 8005c66:	4621      	mov	r1, r4
 8005c68:	4628      	mov	r0, r5
 8005c6a:	f001 f92b 	bl	8006ec4 <__swsetup_r>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d0dd      	beq.n	8005c2e <_puts_r+0x2e>
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	da04      	bge.n	8005c86 <_puts_r+0x86>
 8005c7c:	69a2      	ldr	r2, [r4, #24]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	dc06      	bgt.n	8005c90 <_puts_r+0x90>
 8005c82:	290a      	cmp	r1, #10
 8005c84:	d004      	beq.n	8005c90 <_puts_r+0x90>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	6022      	str	r2, [r4, #0]
 8005c8c:	7019      	strb	r1, [r3, #0]
 8005c8e:	e7cf      	b.n	8005c30 <_puts_r+0x30>
 8005c90:	4622      	mov	r2, r4
 8005c92:	4628      	mov	r0, r5
 8005c94:	f001 f8c4 	bl	8006e20 <__swbuf_r>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d1c9      	bne.n	8005c30 <_puts_r+0x30>
 8005c9c:	e7e9      	b.n	8005c72 <_puts_r+0x72>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	200a      	movs	r0, #10
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	7018      	strb	r0, [r3, #0]
 8005ca8:	e7e5      	b.n	8005c76 <_puts_r+0x76>
 8005caa:	bf00      	nop
 8005cac:	08009dc4 	.word	0x08009dc4
 8005cb0:	08009de4 	.word	0x08009de4
 8005cb4:	08009da4 	.word	0x08009da4

08005cb8 <puts>:
 8005cb8:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <puts+0xc>)
 8005cba:	4601      	mov	r1, r0
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	f7ff bf9f 	b.w	8005c00 <_puts_r>
 8005cc2:	bf00      	nop
 8005cc4:	20000014 	.word	0x20000014

08005cc8 <_sbrk_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4c06      	ldr	r4, [pc, #24]	; (8005ce4 <_sbrk_r+0x1c>)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4605      	mov	r5, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	f7fb fc70 	bl	80015b8 <_sbrk>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_sbrk_r+0x1a>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_sbrk_r+0x1a>
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	2000046c 	.word	0x2000046c

08005ce8 <iso_year_adjust>:
 8005ce8:	6942      	ldr	r2, [r0, #20]
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	f240 736c 	movw	r3, #1900	; 0x76c
 8005cf0:	bfa8      	it	ge
 8005cf2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8005cf6:	441a      	add	r2, r3
 8005cf8:	0793      	lsls	r3, r2, #30
 8005cfa:	d105      	bne.n	8005d08 <iso_year_adjust+0x20>
 8005cfc:	2164      	movs	r1, #100	; 0x64
 8005cfe:	fb92 f3f1 	sdiv	r3, r2, r1
 8005d02:	fb01 2313 	mls	r3, r1, r3, r2
 8005d06:	b9d3      	cbnz	r3, 8005d3e <iso_year_adjust+0x56>
 8005d08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d0c:	fb92 f3f1 	sdiv	r3, r2, r1
 8005d10:	fb01 2313 	mls	r3, r1, r3, r2
 8005d14:	fab3 f283 	clz	r2, r3
 8005d18:	0952      	lsrs	r2, r2, #5
 8005d1a:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005d24:	4413      	add	r3, r2
 8005d26:	2b21      	cmp	r3, #33	; 0x21
 8005d28:	dc11      	bgt.n	8005d4e <iso_year_adjust+0x66>
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	da30      	bge.n	8005d90 <iso_year_adjust+0xa8>
 8005d2e:	2b0d      	cmp	r3, #13
 8005d30:	dc07      	bgt.n	8005d42 <iso_year_adjust+0x5a>
 8005d32:	2b0a      	cmp	r3, #10
 8005d34:	da2c      	bge.n	8005d90 <iso_year_adjust+0xa8>
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d92a      	bls.n	8005d90 <iso_year_adjust+0xa8>
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	4770      	bx	lr
 8005d3e:	2201      	movs	r2, #1
 8005d40:	e7eb      	b.n	8005d1a <iso_year_adjust+0x32>
 8005d42:	2b10      	cmp	r3, #16
 8005d44:	dbf9      	blt.n	8005d3a <iso_year_adjust+0x52>
 8005d46:	2b11      	cmp	r3, #17
 8005d48:	dd22      	ble.n	8005d90 <iso_year_adjust+0xa8>
 8005d4a:	3b1c      	subs	r3, #28
 8005d4c:	e7f3      	b.n	8005d36 <iso_year_adjust+0x4e>
 8005d4e:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8005d52:	4293      	cmp	r3, r2
 8005d54:	dc0f      	bgt.n	8005d76 <iso_year_adjust+0x8e>
 8005d56:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	da09      	bge.n	8005d72 <iso_year_adjust+0x8a>
 8005d5e:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d005      	beq.n	8005d72 <iso_year_adjust+0x8a>
 8005d66:	dbe8      	blt.n	8005d3a <iso_year_adjust+0x52>
 8005d68:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8005d6c:	3b12      	subs	r3, #18
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d8e3      	bhi.n	8005d3a <iso_year_adjust+0x52>
 8005d72:	2001      	movs	r0, #1
 8005d74:	4770      	bx	lr
 8005d76:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d0f9      	beq.n	8005d72 <iso_year_adjust+0x8a>
 8005d7e:	f241 62d7 	movw	r2, #5847	; 0x16d7
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d0f5      	beq.n	8005d72 <iso_year_adjust+0x8a>
 8005d86:	f241 62d3 	movw	r2, #5843	; 0x16d3
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d1d5      	bne.n	8005d3a <iso_year_adjust+0x52>
 8005d8e:	e7f0      	b.n	8005d72 <iso_year_adjust+0x8a>
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	4770      	bx	lr
	...

08005d98 <__strftime>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	b091      	sub	sp, #68	; 0x44
 8005d9e:	461d      	mov	r5, r3
 8005da0:	2300      	movs	r3, #0
 8005da2:	4607      	mov	r7, r0
 8005da4:	460e      	mov	r6, r1
 8005da6:	9303      	str	r3, [sp, #12]
 8005da8:	461c      	mov	r4, r3
 8005daa:	f101 3bff 	add.w	fp, r1, #4294967295
 8005dae:	7813      	ldrb	r3, [r2, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 84e3 	beq.w	800677c <__strftime+0x9e4>
 8005db6:	2b25      	cmp	r3, #37	; 0x25
 8005db8:	d11f      	bne.n	8005dfa <__strftime+0x62>
 8005dba:	f892 a001 	ldrb.w	sl, [r2, #1]
 8005dbe:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8005dc2:	d023      	beq.n	8005e0c <__strftime+0x74>
 8005dc4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005dc8:	d020      	beq.n	8005e0c <__strftime+0x74>
 8005dca:	f102 0801 	add.w	r8, r2, #1
 8005dce:	f04f 0a00 	mov.w	sl, #0
 8005dd2:	f898 3000 	ldrb.w	r3, [r8]
 8005dd6:	3b31      	subs	r3, #49	; 0x31
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d81a      	bhi.n	8005e12 <__strftime+0x7a>
 8005ddc:	4640      	mov	r0, r8
 8005dde:	220a      	movs	r2, #10
 8005de0:	a908      	add	r1, sp, #32
 8005de2:	f000 fdd9 	bl	8006998 <strtoul>
 8005de6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dea:	4681      	mov	r9, r0
 8005dec:	f898 3000 	ldrb.w	r3, [r8]
 8005df0:	2b45      	cmp	r3, #69	; 0x45
 8005df2:	d111      	bne.n	8005e18 <__strftime+0x80>
 8005df4:	f108 0801 	add.w	r8, r8, #1
 8005df8:	e010      	b.n	8005e1c <__strftime+0x84>
 8005dfa:	45a3      	cmp	fp, r4
 8005dfc:	d802      	bhi.n	8005e04 <__strftime+0x6c>
 8005dfe:	2400      	movs	r4, #0
 8005e00:	f000 bcbf 	b.w	8006782 <__strftime+0x9ea>
 8005e04:	553b      	strb	r3, [r7, r4]
 8005e06:	3201      	adds	r2, #1
 8005e08:	3401      	adds	r4, #1
 8005e0a:	e7d0      	b.n	8005dae <__strftime+0x16>
 8005e0c:	f102 0802 	add.w	r8, r2, #2
 8005e10:	e7df      	b.n	8005dd2 <__strftime+0x3a>
 8005e12:	f04f 0900 	mov.w	r9, #0
 8005e16:	e7e9      	b.n	8005dec <__strftime+0x54>
 8005e18:	2b4f      	cmp	r3, #79	; 0x4f
 8005e1a:	d0eb      	beq.n	8005df4 <__strftime+0x5c>
 8005e1c:	f898 1000 	ldrb.w	r1, [r8]
 8005e20:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 8005e24:	2b55      	cmp	r3, #85	; 0x55
 8005e26:	d8ea      	bhi.n	8005dfe <__strftime+0x66>
 8005e28:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <__strftime+0x98>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08006773 	.word	0x08006773
 8005e34:	08005dff 	.word	0x08005dff
 8005e38:	08005dff 	.word	0x08005dff
 8005e3c:	08005dff 	.word	0x08005dff
 8005e40:	08005dff 	.word	0x08005dff
 8005e44:	08005dff 	.word	0x08005dff
 8005e48:	08005dff 	.word	0x08005dff
 8005e4c:	08005dff 	.word	0x08005dff
 8005e50:	08005dff 	.word	0x08005dff
 8005e54:	08005dff 	.word	0x08005dff
 8005e58:	08005dff 	.word	0x08005dff
 8005e5c:	08005dff 	.word	0x08005dff
 8005e60:	08005dff 	.word	0x08005dff
 8005e64:	08005dff 	.word	0x08005dff
 8005e68:	08005dff 	.word	0x08005dff
 8005e6c:	08005dff 	.word	0x08005dff
 8005e70:	08005dff 	.word	0x08005dff
 8005e74:	08005dff 	.word	0x08005dff
 8005e78:	08005dff 	.word	0x08005dff
 8005e7c:	08005dff 	.word	0x08005dff
 8005e80:	08005dff 	.word	0x08005dff
 8005e84:	08005dff 	.word	0x08005dff
 8005e88:	08005dff 	.word	0x08005dff
 8005e8c:	08005dff 	.word	0x08005dff
 8005e90:	08005dff 	.word	0x08005dff
 8005e94:	08005dff 	.word	0x08005dff
 8005e98:	08005dff 	.word	0x08005dff
 8005e9c:	08005dff 	.word	0x08005dff
 8005ea0:	08005fc5 	.word	0x08005fc5
 8005ea4:	08006019 	.word	0x08006019
 8005ea8:	08006089 	.word	0x08006089
 8005eac:	08006123 	.word	0x08006123
 8005eb0:	08005dff 	.word	0x08005dff
 8005eb4:	08006171 	.word	0x08006171
 8005eb8:	08006261 	.word	0x08006261
 8005ebc:	08006379 	.word	0x08006379
 8005ec0:	08006387 	.word	0x08006387
 8005ec4:	08005dff 	.word	0x08005dff
 8005ec8:	08005dff 	.word	0x08005dff
 8005ecc:	08005dff 	.word	0x08005dff
 8005ed0:	080063b7 	.word	0x080063b7
 8005ed4:	08005dff 	.word	0x08005dff
 8005ed8:	08005dff 	.word	0x08005dff
 8005edc:	080063c9 	.word	0x080063c9
 8005ee0:	08005dff 	.word	0x08005dff
 8005ee4:	08006427 	.word	0x08006427
 8005ee8:	0800653f 	.word	0x0800653f
 8005eec:	0800654d 	.word	0x0800654d
 8005ef0:	0800659d 	.word	0x0800659d
 8005ef4:	080065ad 	.word	0x080065ad
 8005ef8:	0800661f 	.word	0x0800661f
 8005efc:	08006081 	.word	0x08006081
 8005f00:	08006659 	.word	0x08006659
 8005f04:	0800671f 	.word	0x0800671f
 8005f08:	08005dff 	.word	0x08005dff
 8005f0c:	08005dff 	.word	0x08005dff
 8005f10:	08005dff 	.word	0x08005dff
 8005f14:	08005dff 	.word	0x08005dff
 8005f18:	08005dff 	.word	0x08005dff
 8005f1c:	08005dff 	.word	0x08005dff
 8005f20:	08005f89 	.word	0x08005f89
 8005f24:	08005ff1 	.word	0x08005ff1
 8005f28:	08006043 	.word	0x08006043
 8005f2c:	080060ff 	.word	0x080060ff
 8005f30:	080060ff 	.word	0x080060ff
 8005f34:	08005dff 	.word	0x08005dff
 8005f38:	080061c9 	.word	0x080061c9
 8005f3c:	08005ff1 	.word	0x08005ff1
 8005f40:	08005dff 	.word	0x08005dff
 8005f44:	080063a9 	.word	0x080063a9
 8005f48:	08006379 	.word	0x08006379
 8005f4c:	08006387 	.word	0x08006387
 8005f50:	080063b1 	.word	0x080063b1
 8005f54:	080063bb 	.word	0x080063bb
 8005f58:	08005dff 	.word	0x08005dff
 8005f5c:	080063c9 	.word	0x080063c9
 8005f60:	08005dff 	.word	0x08005dff
 8005f64:	08006071 	.word	0x08006071
 8005f68:	08006439 	.word	0x08006439
 8005f6c:	08006543 	.word	0x08006543
 8005f70:	08006585 	.word	0x08006585
 8005f74:	08005dff 	.word	0x08005dff
 8005f78:	08006613 	.word	0x08006613
 8005f7c:	08006079 	.word	0x08006079
 8005f80:	08006637 	.word	0x08006637
 8005f84:	080066ad 	.word	0x080066ad
 8005f88:	69ab      	ldr	r3, [r5, #24]
 8005f8a:	4aa8      	ldr	r2, [pc, #672]	; (800622c <__strftime+0x494>)
 8005f8c:	3318      	adds	r3, #24
 8005f8e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8005f92:	4648      	mov	r0, r9
 8005f94:	f7fa f926 	bl	80001e4 <strlen>
 8005f98:	eba9 0904 	sub.w	r9, r9, r4
 8005f9c:	4420      	add	r0, r4
 8005f9e:	42a0      	cmp	r0, r4
 8005fa0:	d108      	bne.n	8005fb4 <__strftime+0x21c>
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	f898 3000 	ldrb.w	r3, [r8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 83e7 	beq.w	800677c <__strftime+0x9e4>
 8005fae:	f108 0201 	add.w	r2, r8, #1
 8005fb2:	e6fc      	b.n	8005dae <__strftime+0x16>
 8005fb4:	45a3      	cmp	fp, r4
 8005fb6:	f67f af22 	bls.w	8005dfe <__strftime+0x66>
 8005fba:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005fbe:	553b      	strb	r3, [r7, r4]
 8005fc0:	3401      	adds	r4, #1
 8005fc2:	e7ec      	b.n	8005f9e <__strftime+0x206>
 8005fc4:	69aa      	ldr	r2, [r5, #24]
 8005fc6:	4b99      	ldr	r3, [pc, #612]	; (800622c <__strftime+0x494>)
 8005fc8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005fcc:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8005fd0:	4648      	mov	r0, r9
 8005fd2:	f7fa f907 	bl	80001e4 <strlen>
 8005fd6:	eba9 0904 	sub.w	r9, r9, r4
 8005fda:	4420      	add	r0, r4
 8005fdc:	42a0      	cmp	r0, r4
 8005fde:	d0e0      	beq.n	8005fa2 <__strftime+0x20a>
 8005fe0:	45a3      	cmp	fp, r4
 8005fe2:	f67f af0c 	bls.w	8005dfe <__strftime+0x66>
 8005fe6:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005fea:	553b      	strb	r3, [r7, r4]
 8005fec:	3401      	adds	r4, #1
 8005fee:	e7f5      	b.n	8005fdc <__strftime+0x244>
 8005ff0:	692a      	ldr	r2, [r5, #16]
 8005ff2:	4b8e      	ldr	r3, [pc, #568]	; (800622c <__strftime+0x494>)
 8005ff4:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8005ff8:	4648      	mov	r0, r9
 8005ffa:	f7fa f8f3 	bl	80001e4 <strlen>
 8005ffe:	eba9 0904 	sub.w	r9, r9, r4
 8006002:	4420      	add	r0, r4
 8006004:	42a0      	cmp	r0, r4
 8006006:	d0cc      	beq.n	8005fa2 <__strftime+0x20a>
 8006008:	45a3      	cmp	fp, r4
 800600a:	f67f aef8 	bls.w	8005dfe <__strftime+0x66>
 800600e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8006012:	553b      	strb	r3, [r7, r4]
 8006014:	3401      	adds	r4, #1
 8006016:	e7f5      	b.n	8006004 <__strftime+0x26c>
 8006018:	692b      	ldr	r3, [r5, #16]
 800601a:	4a84      	ldr	r2, [pc, #528]	; (800622c <__strftime+0x494>)
 800601c:	330c      	adds	r3, #12
 800601e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8006022:	4648      	mov	r0, r9
 8006024:	f7fa f8de 	bl	80001e4 <strlen>
 8006028:	eba9 0904 	sub.w	r9, r9, r4
 800602c:	4420      	add	r0, r4
 800602e:	42a0      	cmp	r0, r4
 8006030:	d0b7      	beq.n	8005fa2 <__strftime+0x20a>
 8006032:	45a3      	cmp	fp, r4
 8006034:	f67f aee3 	bls.w	8005dfe <__strftime+0x66>
 8006038:	f819 3004 	ldrb.w	r3, [r9, r4]
 800603c:	553b      	strb	r3, [r7, r4]
 800603e:	3401      	adds	r4, #1
 8006040:	e7f5      	b.n	800602e <__strftime+0x296>
 8006042:	4b7a      	ldr	r3, [pc, #488]	; (800622c <__strftime+0x494>)
 8006044:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8006048:	4648      	mov	r0, r9
 800604a:	f7fa f8cb 	bl	80001e4 <strlen>
 800604e:	f899 3000 	ldrb.w	r3, [r9]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0a6      	beq.n	8005fa4 <__strftime+0x20c>
 8006056:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	464a      	mov	r2, r9
 800605c:	462b      	mov	r3, r5
 800605e:	1b31      	subs	r1, r6, r4
 8006060:	1938      	adds	r0, r7, r4
 8006062:	f7ff fe99 	bl	8005d98 <__strftime>
 8006066:	2800      	cmp	r0, #0
 8006068:	f77f aec9 	ble.w	8005dfe <__strftime+0x66>
 800606c:	4404      	add	r4, r0
 800606e:	e799      	b.n	8005fa4 <__strftime+0x20c>
 8006070:	4b6e      	ldr	r3, [pc, #440]	; (800622c <__strftime+0x494>)
 8006072:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8006076:	e7e7      	b.n	8006048 <__strftime+0x2b0>
 8006078:	4b6c      	ldr	r3, [pc, #432]	; (800622c <__strftime+0x494>)
 800607a:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800607e:	e7e3      	b.n	8006048 <__strftime+0x2b0>
 8006080:	4b6a      	ldr	r3, [pc, #424]	; (800622c <__strftime+0x494>)
 8006082:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8006086:	e7df      	b.n	8006048 <__strftime+0x2b0>
 8006088:	4b69      	ldr	r3, [pc, #420]	; (8006230 <__strftime+0x498>)
 800608a:	6969      	ldr	r1, [r5, #20]
 800608c:	4299      	cmp	r1, r3
 800608e:	bfac      	ite	ge
 8006090:	2300      	movge	r3, #0
 8006092:	2301      	movlt	r3, #1
 8006094:	2900      	cmp	r1, #0
 8006096:	9304      	str	r3, [sp, #16]
 8006098:	db10      	blt.n	80060bc <__strftime+0x324>
 800609a:	2064      	movs	r0, #100	; 0x64
 800609c:	fb91 f0f0 	sdiv	r0, r1, r0
 80060a0:	3013      	adds	r0, #19
 80060a2:	f1ba 0f00 	cmp.w	sl, #0
 80060a6:	d013      	beq.n	80060d0 <__strftime+0x338>
 80060a8:	2863      	cmp	r0, #99	; 0x63
 80060aa:	dd26      	ble.n	80060fa <__strftime+0x362>
 80060ac:	4a61      	ldr	r2, [pc, #388]	; (8006234 <__strftime+0x49c>)
 80060ae:	4b62      	ldr	r3, [pc, #392]	; (8006238 <__strftime+0x4a0>)
 80060b0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80060b4:	bf18      	it	ne
 80060b6:	4613      	movne	r3, r2
 80060b8:	4a60      	ldr	r2, [pc, #384]	; (800623c <__strftime+0x4a4>)
 80060ba:	e00b      	b.n	80060d4 <__strftime+0x33c>
 80060bc:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80060c0:	9105      	str	r1, [sp, #20]
 80060c2:	f000 ff6d 	bl	8006fa0 <abs>
 80060c6:	2364      	movs	r3, #100	; 0x64
 80060c8:	9905      	ldr	r1, [sp, #20]
 80060ca:	fb90 f0f3 	sdiv	r0, r0, r3
 80060ce:	e7e8      	b.n	80060a2 <__strftime+0x30a>
 80060d0:	4b58      	ldr	r3, [pc, #352]	; (8006234 <__strftime+0x49c>)
 80060d2:	4a5b      	ldr	r2, [pc, #364]	; (8006240 <__strftime+0x4a8>)
 80060d4:	9001      	str	r0, [sp, #4]
 80060d6:	9804      	ldr	r0, [sp, #16]
 80060d8:	f8df c154 	ldr.w	ip, [pc, #340]	; 8006230 <__strftime+0x498>
 80060dc:	f1b9 0f02 	cmp.w	r9, #2
 80060e0:	bf2c      	ite	cs
 80060e2:	ebc0 0009 	rsbcs	r0, r0, r9
 80060e6:	f1c0 0002 	rsbcc	r0, r0, #2
 80060ea:	9000      	str	r0, [sp, #0]
 80060ec:	4855      	ldr	r0, [pc, #340]	; (8006244 <__strftime+0x4ac>)
 80060ee:	4561      	cmp	r1, ip
 80060f0:	bfb8      	it	lt
 80060f2:	4603      	movlt	r3, r0
 80060f4:	1b31      	subs	r1, r6, r4
 80060f6:	1938      	adds	r0, r7, r4
 80060f8:	e029      	b.n	800614e <__strftime+0x3b6>
 80060fa:	4b4e      	ldr	r3, [pc, #312]	; (8006234 <__strftime+0x49c>)
 80060fc:	e7dc      	b.n	80060b8 <__strftime+0x320>
 80060fe:	4852      	ldr	r0, [pc, #328]	; (8006248 <__strftime+0x4b0>)
 8006100:	4a52      	ldr	r2, [pc, #328]	; (800624c <__strftime+0x4b4>)
 8006102:	68eb      	ldr	r3, [r5, #12]
 8006104:	2964      	cmp	r1, #100	; 0x64
 8006106:	bf18      	it	ne
 8006108:	4602      	movne	r2, r0
 800610a:	1b31      	subs	r1, r6, r4
 800610c:	1938      	adds	r0, r7, r4
 800610e:	f002 fce3 	bl	8008ad8 <sniprintf>
 8006112:	2800      	cmp	r0, #0
 8006114:	f6ff ae73 	blt.w	8005dfe <__strftime+0x66>
 8006118:	4404      	add	r4, r0
 800611a:	42a6      	cmp	r6, r4
 800611c:	f63f af42 	bhi.w	8005fa4 <__strftime+0x20c>
 8006120:	e66d      	b.n	8005dfe <__strftime+0x66>
 8006122:	6968      	ldr	r0, [r5, #20]
 8006124:	692b      	ldr	r3, [r5, #16]
 8006126:	68ea      	ldr	r2, [r5, #12]
 8006128:	2800      	cmp	r0, #0
 800612a:	eb07 0904 	add.w	r9, r7, r4
 800612e:	eba6 0a04 	sub.w	sl, r6, r4
 8006132:	f103 0301 	add.w	r3, r3, #1
 8006136:	db0d      	blt.n	8006154 <__strftime+0x3bc>
 8006138:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800613c:	fb90 f1fc 	sdiv	r1, r0, ip
 8006140:	fb0c 0011 	mls	r0, ip, r1, r0
 8006144:	e9cd 2000 	strd	r2, r0, [sp]
 8006148:	4a41      	ldr	r2, [pc, #260]	; (8006250 <__strftime+0x4b8>)
 800614a:	4651      	mov	r1, sl
 800614c:	4648      	mov	r0, r9
 800614e:	f002 fcc3 	bl	8008ad8 <sniprintf>
 8006152:	e7de      	b.n	8006112 <__strftime+0x37a>
 8006154:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006158:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800615c:	f000 ff20 	bl	8006fa0 <abs>
 8006160:	2164      	movs	r1, #100	; 0x64
 8006162:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8006166:	fb90 fcf1 	sdiv	ip, r0, r1
 800616a:	fb0c 0011 	mls	r0, ip, r1, r0
 800616e:	e7e9      	b.n	8006144 <__strftime+0x3ac>
 8006170:	2325      	movs	r3, #37	; 0x25
 8006172:	f88d 3020 	strb.w	r3, [sp, #32]
 8006176:	f1ba 0f00 	cmp.w	sl, #0
 800617a:	d013      	beq.n	80061a4 <__strftime+0x40c>
 800617c:	f1b9 0f06 	cmp.w	r9, #6
 8006180:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 8006184:	bf38      	it	cc
 8006186:	f04f 0906 	movcc.w	r9, #6
 800618a:	f1b9 0306 	subs.w	r3, r9, #6
 800618e:	d10f      	bne.n	80061b0 <__strftime+0x418>
 8006190:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8006194:	492f      	ldr	r1, [pc, #188]	; (8006254 <__strftime+0x4bc>)
 8006196:	f002 fd42 	bl	8008c1e <strcpy>
 800619a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	aa08      	add	r2, sp, #32
 80061a0:	462b      	mov	r3, r5
 80061a2:	e75c      	b.n	800605e <__strftime+0x2c6>
 80061a4:	232b      	movs	r3, #43	; 0x2b
 80061a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80061aa:	f04f 090a 	mov.w	r9, #10
 80061ae:	e7ec      	b.n	800618a <__strftime+0x3f2>
 80061b0:	4a29      	ldr	r2, [pc, #164]	; (8006258 <__strftime+0x4c0>)
 80061b2:	211e      	movs	r1, #30
 80061b4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80061b8:	f002 fc8e 	bl	8008ad8 <sniprintf>
 80061bc:	2800      	cmp	r0, #0
 80061be:	dde7      	ble.n	8006190 <__strftime+0x3f8>
 80061c0:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80061c4:	4418      	add	r0, r3
 80061c6:	e7e5      	b.n	8006194 <__strftime+0x3fc>
 80061c8:	4628      	mov	r0, r5
 80061ca:	f7ff fd8d 	bl	8005ce8 <iso_year_adjust>
 80061ce:	4681      	mov	r9, r0
 80061d0:	6968      	ldr	r0, [r5, #20]
 80061d2:	2800      	cmp	r0, #0
 80061d4:	db1a      	blt.n	800620c <__strftime+0x474>
 80061d6:	2264      	movs	r2, #100	; 0x64
 80061d8:	fb90 f3f2 	sdiv	r3, r0, r2
 80061dc:	f1b9 0f00 	cmp.w	r9, #0
 80061e0:	fb02 0013 	mls	r0, r2, r3, r0
 80061e4:	da1a      	bge.n	800621c <__strftime+0x484>
 80061e6:	696a      	ldr	r2, [r5, #20]
 80061e8:	4b1c      	ldr	r3, [pc, #112]	; (800625c <__strftime+0x4c4>)
 80061ea:	429a      	cmp	r2, r3
 80061ec:	bfb8      	it	lt
 80061ee:	f04f 0901 	movlt.w	r9, #1
 80061f2:	2364      	movs	r3, #100	; 0x64
 80061f4:	4481      	add	r9, r0
 80061f6:	fb99 f0f3 	sdiv	r0, r9, r3
 80061fa:	fb03 9910 	mls	r9, r3, r0, r9
 80061fe:	4499      	add	r9, r3
 8006200:	fb99 f2f3 	sdiv	r2, r9, r3
 8006204:	fb03 9312 	mls	r3, r3, r2, r9
 8006208:	4a10      	ldr	r2, [pc, #64]	; (800624c <__strftime+0x4b4>)
 800620a:	e77e      	b.n	800610a <__strftime+0x372>
 800620c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006210:	f000 fec6 	bl	8006fa0 <abs>
 8006214:	2364      	movs	r3, #100	; 0x64
 8006216:	fb90 f2f3 	sdiv	r2, r0, r3
 800621a:	e7df      	b.n	80061dc <__strftime+0x444>
 800621c:	d0e9      	beq.n	80061f2 <__strftime+0x45a>
 800621e:	696a      	ldr	r2, [r5, #20]
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <__strftime+0x498>)
 8006222:	429a      	cmp	r2, r3
 8006224:	bfb8      	it	lt
 8006226:	f04f 39ff 	movlt.w	r9, #4294967295
 800622a:	e7e2      	b.n	80061f2 <__strftime+0x45a>
 800622c:	08009b34 	.word	0x08009b34
 8006230:	fffff894 	.word	0xfffff894
 8006234:	08009f11 	.word	0x08009f11
 8006238:	08009ae9 	.word	0x08009ae9
 800623c:	08009ae1 	.word	0x08009ae1
 8006240:	08009ada 	.word	0x08009ada
 8006244:	0800a031 	.word	0x0800a031
 8006248:	08009aeb 	.word	0x08009aeb
 800624c:	08009af9 	.word	0x08009af9
 8006250:	08009aef 	.word	0x08009aef
 8006254:	08009b02 	.word	0x08009b02
 8006258:	08009afe 	.word	0x08009afe
 800625c:	fffff895 	.word	0xfffff895
 8006260:	696b      	ldr	r3, [r5, #20]
 8006262:	9304      	str	r3, [sp, #16]
 8006264:	9a04      	ldr	r2, [sp, #16]
 8006266:	4bbd      	ldr	r3, [pc, #756]	; (800655c <__strftime+0x7c4>)
 8006268:	429a      	cmp	r2, r3
 800626a:	bfac      	ite	ge
 800626c:	2300      	movge	r3, #0
 800626e:	2301      	movlt	r3, #1
 8006270:	4628      	mov	r0, r5
 8006272:	9305      	str	r3, [sp, #20]
 8006274:	f7ff fd38 	bl	8005ce8 <iso_year_adjust>
 8006278:	9a04      	ldr	r2, [sp, #16]
 800627a:	2a00      	cmp	r2, #0
 800627c:	4603      	mov	r3, r0
 800627e:	db3a      	blt.n	80062f6 <__strftime+0x55e>
 8006280:	2264      	movs	r2, #100	; 0x64
 8006282:	9904      	ldr	r1, [sp, #16]
 8006284:	fb91 f2f2 	sdiv	r2, r1, r2
 8006288:	3213      	adds	r2, #19
 800628a:	6968      	ldr	r0, [r5, #20]
 800628c:	2800      	cmp	r0, #0
 800628e:	db3d      	blt.n	800630c <__strftime+0x574>
 8006290:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006294:	fb90 fefc 	sdiv	lr, r0, ip
 8006298:	fb0c 001e 	mls	r0, ip, lr, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	da44      	bge.n	800632a <__strftime+0x592>
 80062a0:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8006580 <__strftime+0x7e8>
 80062a4:	6969      	ldr	r1, [r5, #20]
 80062a6:	4561      	cmp	r1, ip
 80062a8:	da01      	bge.n	80062ae <__strftime+0x516>
 80062aa:	2301      	movs	r3, #1
 80062ac:	9305      	str	r3, [sp, #20]
 80062ae:	4403      	add	r3, r0
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	d146      	bne.n	8006342 <__strftime+0x5aa>
 80062b4:	3a01      	subs	r2, #1
 80062b6:	2363      	movs	r3, #99	; 0x63
 80062b8:	2064      	movs	r0, #100	; 0x64
 80062ba:	fb00 3202 	mla	r2, r0, r2, r3
 80062be:	9b05      	ldr	r3, [sp, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d043      	beq.n	800634c <__strftime+0x5b4>
 80062c4:	232d      	movs	r3, #45	; 0x2d
 80062c6:	f88d 3020 	strb.w	r3, [sp, #32]
 80062ca:	f1b9 0f00 	cmp.w	r9, #0
 80062ce:	d001      	beq.n	80062d4 <__strftime+0x53c>
 80062d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80062d4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80062d8:	2125      	movs	r1, #37	; 0x25
 80062da:	7019      	strb	r1, [r3, #0]
 80062dc:	f1ba 0f00 	cmp.w	sl, #0
 80062e0:	d144      	bne.n	800636c <__strftime+0x5d4>
 80062e2:	1c58      	adds	r0, r3, #1
 80062e4:	499e      	ldr	r1, [pc, #632]	; (8006560 <__strftime+0x7c8>)
 80062e6:	9204      	str	r2, [sp, #16]
 80062e8:	f002 fc99 	bl	8008c1e <strcpy>
 80062ec:	9a04      	ldr	r2, [sp, #16]
 80062ee:	9200      	str	r2, [sp, #0]
 80062f0:	464b      	mov	r3, r9
 80062f2:	aa08      	add	r2, sp, #32
 80062f4:	e09b      	b.n	800642e <__strftime+0x696>
 80062f6:	9b04      	ldr	r3, [sp, #16]
 80062f8:	9006      	str	r0, [sp, #24]
 80062fa:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 80062fe:	f000 fe4f 	bl	8006fa0 <abs>
 8006302:	2264      	movs	r2, #100	; 0x64
 8006304:	9b06      	ldr	r3, [sp, #24]
 8006306:	fb90 f2f2 	sdiv	r2, r0, r2
 800630a:	e7be      	b.n	800628a <__strftime+0x4f2>
 800630c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006310:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8006314:	f000 fe44 	bl	8006fa0 <abs>
 8006318:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800631c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006320:	fb90 fefc 	sdiv	lr, r0, ip
 8006324:	fb0e 001c 	mls	r0, lr, ip, r0
 8006328:	e7b8      	b.n	800629c <__strftime+0x504>
 800632a:	d0c0      	beq.n	80062ae <__strftime+0x516>
 800632c:	9904      	ldr	r1, [sp, #16]
 800632e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 800655c <__strftime+0x7c4>
 8006332:	4561      	cmp	r1, ip
 8006334:	bfae      	itee	ge
 8006336:	2100      	movge	r1, #0
 8006338:	2101      	movlt	r1, #1
 800633a:	f04f 33ff 	movlt.w	r3, #4294967295
 800633e:	9105      	str	r1, [sp, #20]
 8006340:	e7b5      	b.n	80062ae <__strftime+0x516>
 8006342:	2b64      	cmp	r3, #100	; 0x64
 8006344:	bf04      	itt	eq
 8006346:	3201      	addeq	r2, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	e7b5      	b.n	80062b8 <__strftime+0x520>
 800634c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8006350:	d110      	bne.n	8006374 <__strftime+0x5dc>
 8006352:	f242 730f 	movw	r3, #9999	; 0x270f
 8006356:	429a      	cmp	r2, r3
 8006358:	d90c      	bls.n	8006374 <__strftime+0x5dc>
 800635a:	f88d a020 	strb.w	sl, [sp, #32]
 800635e:	f1b9 0f00 	cmp.w	r9, #0
 8006362:	d1b5      	bne.n	80062d0 <__strftime+0x538>
 8006364:	ab10      	add	r3, sp, #64	; 0x40
 8006366:	2125      	movs	r1, #37	; 0x25
 8006368:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 800636c:	2130      	movs	r1, #48	; 0x30
 800636e:	1c98      	adds	r0, r3, #2
 8006370:	7059      	strb	r1, [r3, #1]
 8006372:	e7b7      	b.n	80062e4 <__strftime+0x54c>
 8006374:	ab08      	add	r3, sp, #32
 8006376:	e7af      	b.n	80062d8 <__strftime+0x540>
 8006378:	487a      	ldr	r0, [pc, #488]	; (8006564 <__strftime+0x7cc>)
 800637a:	4a7b      	ldr	r2, [pc, #492]	; (8006568 <__strftime+0x7d0>)
 800637c:	68ab      	ldr	r3, [r5, #8]
 800637e:	296b      	cmp	r1, #107	; 0x6b
 8006380:	bf18      	it	ne
 8006382:	4602      	movne	r2, r0
 8006384:	e6c1      	b.n	800610a <__strftime+0x372>
 8006386:	68ab      	ldr	r3, [r5, #8]
 8006388:	220c      	movs	r2, #12
 800638a:	b15b      	cbz	r3, 80063a4 <__strftime+0x60c>
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <__strftime+0x600>
 8006390:	fb93 f0f2 	sdiv	r0, r3, r2
 8006394:	fb02 3310 	mls	r3, r2, r0, r3
 8006398:	4873      	ldr	r0, [pc, #460]	; (8006568 <__strftime+0x7d0>)
 800639a:	4a72      	ldr	r2, [pc, #456]	; (8006564 <__strftime+0x7cc>)
 800639c:	2949      	cmp	r1, #73	; 0x49
 800639e:	bf18      	it	ne
 80063a0:	4602      	movne	r2, r0
 80063a2:	e6b2      	b.n	800610a <__strftime+0x372>
 80063a4:	4613      	mov	r3, r2
 80063a6:	e7f7      	b.n	8006398 <__strftime+0x600>
 80063a8:	69eb      	ldr	r3, [r5, #28]
 80063aa:	4a70      	ldr	r2, [pc, #448]	; (800656c <__strftime+0x7d4>)
 80063ac:	3301      	adds	r3, #1
 80063ae:	e6ac      	b.n	800610a <__strftime+0x372>
 80063b0:	692b      	ldr	r3, [r5, #16]
 80063b2:	3301      	adds	r3, #1
 80063b4:	e728      	b.n	8006208 <__strftime+0x470>
 80063b6:	686b      	ldr	r3, [r5, #4]
 80063b8:	e726      	b.n	8006208 <__strftime+0x470>
 80063ba:	45a3      	cmp	fp, r4
 80063bc:	f67f ad1f 	bls.w	8005dfe <__strftime+0x66>
 80063c0:	230a      	movs	r3, #10
 80063c2:	553b      	strb	r3, [r7, r4]
 80063c4:	3401      	adds	r4, #1
 80063c6:	e5ed      	b.n	8005fa4 <__strftime+0x20c>
 80063c8:	68ab      	ldr	r3, [r5, #8]
 80063ca:	2b0b      	cmp	r3, #11
 80063cc:	bfcc      	ite	gt
 80063ce:	22a4      	movgt	r2, #164	; 0xa4
 80063d0:	22a0      	movle	r2, #160	; 0xa0
 80063d2:	4b67      	ldr	r3, [pc, #412]	; (8006570 <__strftime+0x7d8>)
 80063d4:	4413      	add	r3, r2
 80063d6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80063da:	4648      	mov	r0, r9
 80063dc:	f7f9 ff02 	bl	80001e4 <strlen>
 80063e0:	eba9 0304 	sub.w	r3, r9, r4
 80063e4:	eb04 0a00 	add.w	sl, r4, r0
 80063e8:	45a2      	cmp	sl, r4
 80063ea:	d101      	bne.n	80063f0 <__strftime+0x658>
 80063ec:	4654      	mov	r4, sl
 80063ee:	e5d9      	b.n	8005fa4 <__strftime+0x20c>
 80063f0:	45a3      	cmp	fp, r4
 80063f2:	f67f ad04 	bls.w	8005dfe <__strftime+0x66>
 80063f6:	f898 2000 	ldrb.w	r2, [r8]
 80063fa:	f813 9004 	ldrb.w	r9, [r3, r4]
 80063fe:	2a50      	cmp	r2, #80	; 0x50
 8006400:	d10d      	bne.n	800641e <__strftime+0x686>
 8006402:	9304      	str	r3, [sp, #16]
 8006404:	f001 fea0 	bl	8008148 <__locale_ctype_ptr>
 8006408:	4448      	add	r0, r9
 800640a:	9b04      	ldr	r3, [sp, #16]
 800640c:	7842      	ldrb	r2, [r0, #1]
 800640e:	f002 0203 	and.w	r2, r2, #3
 8006412:	2a01      	cmp	r2, #1
 8006414:	bf08      	it	eq
 8006416:	f109 0920 	addeq.w	r9, r9, #32
 800641a:	fa5f f989 	uxtb.w	r9, r9
 800641e:	f807 9004 	strb.w	r9, [r7, r4]
 8006422:	3401      	adds	r4, #1
 8006424:	e7e0      	b.n	80063e8 <__strftime+0x650>
 8006426:	686b      	ldr	r3, [r5, #4]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	4a52      	ldr	r2, [pc, #328]	; (8006574 <__strftime+0x7dc>)
 800642c:	68ab      	ldr	r3, [r5, #8]
 800642e:	1b31      	subs	r1, r6, r4
 8006430:	1938      	adds	r0, r7, r4
 8006432:	f002 fb51 	bl	8008ad8 <sniprintf>
 8006436:	e66c      	b.n	8006112 <__strftime+0x37a>
 8006438:	6a2b      	ldr	r3, [r5, #32]
 800643a:	2b00      	cmp	r3, #0
 800643c:	db7c      	blt.n	8006538 <__strftime+0x7a0>
 800643e:	f000 fb69 	bl	8006b14 <__tz_lock>
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	b90b      	cbnz	r3, 800644a <__strftime+0x6b2>
 8006446:	f000 fb67 	bl	8006b18 <_tzset_unlocked>
 800644a:	f001 fdc3 	bl	8007fd4 <__gettzinfo>
 800644e:	6a2b      	ldr	r3, [r5, #32]
 8006450:	2b00      	cmp	r3, #0
 8006452:	bfcc      	ite	gt
 8006454:	2350      	movgt	r3, #80	; 0x50
 8006456:	2328      	movle	r3, #40	; 0x28
 8006458:	58c3      	ldr	r3, [r0, r3]
 800645a:	425b      	negs	r3, r3
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	f000 fb5a 	bl	8006b16 <__tz_unlock>
 8006462:	2301      	movs	r3, #1
 8006464:	9303      	str	r3, [sp, #12]
 8006466:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800646a:	193b      	adds	r3, r7, r4
 800646c:	4662      	mov	r2, ip
 800646e:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006478:	f143 31ff 	adc.w	r1, r3, #4294967295
 800647c:	2800      	cmp	r0, #0
 800647e:	f171 0e00 	sbcs.w	lr, r1, #0
 8006482:	da03      	bge.n	800648c <__strftime+0x6f4>
 8006484:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 8006488:	f143 31ff 	adc.w	r1, r3, #4294967295
 800648c:	0883      	lsrs	r3, r0, #2
 800648e:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8006492:	4699      	mov	r9, r3
 8006494:	f10c 30ff 	add.w	r0, ip, #4294967295
 8006498:	108b      	asrs	r3, r1, #2
 800649a:	2164      	movs	r1, #100	; 0x64
 800649c:	fb90 f1f1 	sdiv	r1, r0, r1
 80064a0:	ebb9 0201 	subs.w	r2, r9, r1
 80064a4:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80064a8:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 80064ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80064b0:	fb90 f1f1 	sdiv	r1, r0, r1
 80064b4:	eb12 0901 	adds.w	r9, r2, r1
 80064b8:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 80064bc:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80064c0:	f240 116d 	movw	r1, #365	; 0x16d
 80064c4:	fb01 fc0c 	mul.w	ip, r1, ip
 80064c8:	69e9      	ldr	r1, [r5, #28]
 80064ca:	eb19 020c 	adds.w	r2, r9, ip
 80064ce:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 80064d2:	eb12 0901 	adds.w	r9, r2, r1
 80064d6:	f04f 0c18 	mov.w	ip, #24
 80064da:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 80064de:	fba9 230c 	umull	r2, r3, r9, ip
 80064e2:	4619      	mov	r1, r3
 80064e4:	fb0c 130a 	mla	r3, ip, sl, r1
 80064e8:	4619      	mov	r1, r3
 80064ea:	68ab      	ldr	r3, [r5, #8]
 80064ec:	4610      	mov	r0, r2
 80064ee:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80064f2:	18c0      	adds	r0, r0, r3
 80064f4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80064f8:	fba0 230c 	umull	r2, r3, r0, ip
 80064fc:	fb0c 3301 	mla	r3, ip, r1, r3
 8006500:	6869      	ldr	r1, [r5, #4]
 8006502:	4691      	mov	r9, r2
 8006504:	eb19 0201 	adds.w	r2, r9, r1
 8006508:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800650c:	fba2 010c 	umull	r0, r1, r2, ip
 8006510:	fb0c 1103 	mla	r1, ip, r3, r1
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <__strftime+0x7e0>)
 8006518:	eb10 0903 	adds.w	r9, r0, r3
 800651c:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 8006520:	9b04      	ldr	r3, [sp, #16]
 8006522:	ebb9 0003 	subs.w	r0, r9, r3
 8006526:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 800652a:	e9cd 0100 	strd	r0, r1, [sp]
 800652e:	1b31      	subs	r1, r6, r4
 8006530:	1938      	adds	r0, r7, r4
 8006532:	f002 fad1 	bl	8008ad8 <sniprintf>
 8006536:	e5ec      	b.n	8006112 <__strftime+0x37a>
 8006538:	2300      	movs	r3, #0
 800653a:	9304      	str	r3, [sp, #16]
 800653c:	e793      	b.n	8006466 <__strftime+0x6ce>
 800653e:	682b      	ldr	r3, [r5, #0]
 8006540:	e662      	b.n	8006208 <__strftime+0x470>
 8006542:	45a3      	cmp	fp, r4
 8006544:	f67f ac5b 	bls.w	8005dfe <__strftime+0x66>
 8006548:	2309      	movs	r3, #9
 800654a:	e73a      	b.n	80063c2 <__strftime+0x62a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	686b      	ldr	r3, [r5, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4a09      	ldr	r2, [pc, #36]	; (800657c <__strftime+0x7e4>)
 8006556:	68ab      	ldr	r3, [r5, #8]
 8006558:	e5cc      	b.n	80060f4 <__strftime+0x35c>
 800655a:	bf00      	nop
 800655c:	fffff894 	.word	0xfffff894
 8006560:	08009b0a 	.word	0x08009b0a
 8006564:	08009af9 	.word	0x08009af9
 8006568:	08009aeb 	.word	0x08009aeb
 800656c:	08009b0e 	.word	0x08009b0e
 8006570:	08009b34 	.word	0x08009b34
 8006574:	08009b1d 	.word	0x08009b1d
 8006578:	08009b13 	.word	0x08009b13
 800657c:	08009b18 	.word	0x08009b18
 8006580:	fffff895 	.word	0xfffff895
 8006584:	45a3      	cmp	fp, r4
 8006586:	f67f ac3a 	bls.w	8005dfe <__strftime+0x66>
 800658a:	69ab      	ldr	r3, [r5, #24]
 800658c:	193a      	adds	r2, r7, r4
 800658e:	3401      	adds	r4, #1
 8006590:	b913      	cbnz	r3, 8006598 <__strftime+0x800>
 8006592:	2337      	movs	r3, #55	; 0x37
 8006594:	7013      	strb	r3, [r2, #0]
 8006596:	e505      	b.n	8005fa4 <__strftime+0x20c>
 8006598:	3330      	adds	r3, #48	; 0x30
 800659a:	e7fb      	b.n	8006594 <__strftime+0x7fc>
 800659c:	69eb      	ldr	r3, [r5, #28]
 800659e:	69aa      	ldr	r2, [r5, #24]
 80065a0:	3307      	adds	r3, #7
 80065a2:	1a9b      	subs	r3, r3, r2
 80065a4:	2207      	movs	r2, #7
 80065a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80065aa:	e62d      	b.n	8006208 <__strftime+0x470>
 80065ac:	4628      	mov	r0, r5
 80065ae:	f7ff fb9b 	bl	8005ce8 <iso_year_adjust>
 80065b2:	69aa      	ldr	r2, [r5, #24]
 80065b4:	b132      	cbz	r2, 80065c4 <__strftime+0x82c>
 80065b6:	3a01      	subs	r2, #1
 80065b8:	2800      	cmp	r0, #0
 80065ba:	dc28      	bgt.n	800660e <__strftime+0x876>
 80065bc:	69eb      	ldr	r3, [r5, #28]
 80065be:	d103      	bne.n	80065c8 <__strftime+0x830>
 80065c0:	330a      	adds	r3, #10
 80065c2:	e7ee      	b.n	80065a2 <__strftime+0x80a>
 80065c4:	2206      	movs	r2, #6
 80065c6:	e7f7      	b.n	80065b8 <__strftime+0x820>
 80065c8:	6968      	ldr	r0, [r5, #20]
 80065ca:	2800      	cmp	r0, #0
 80065cc:	eba2 0303 	sub.w	r3, r2, r3
 80065d0:	f240 726b 	movw	r2, #1899	; 0x76b
 80065d4:	bfa8      	it	ge
 80065d6:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80065da:	4410      	add	r0, r2
 80065dc:	0782      	lsls	r2, r0, #30
 80065de:	d105      	bne.n	80065ec <__strftime+0x854>
 80065e0:	2264      	movs	r2, #100	; 0x64
 80065e2:	fb90 f1f2 	sdiv	r1, r0, r2
 80065e6:	fb02 0111 	mls	r1, r2, r1, r0
 80065ea:	b971      	cbnz	r1, 800660a <__strftime+0x872>
 80065ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065f0:	fb90 f2f1 	sdiv	r2, r0, r1
 80065f4:	fb01 0212 	mls	r2, r1, r2, r0
 80065f8:	fab2 f282 	clz	r2, r2
 80065fc:	0952      	lsrs	r2, r2, #5
 80065fe:	1a9a      	subs	r2, r3, r2
 8006600:	2a04      	cmp	r2, #4
 8006602:	bfcc      	ite	gt
 8006604:	2334      	movgt	r3, #52	; 0x34
 8006606:	2335      	movle	r3, #53	; 0x35
 8006608:	e5fe      	b.n	8006208 <__strftime+0x470>
 800660a:	2201      	movs	r2, #1
 800660c:	e7f7      	b.n	80065fe <__strftime+0x866>
 800660e:	2301      	movs	r3, #1
 8006610:	e5fa      	b.n	8006208 <__strftime+0x470>
 8006612:	45a3      	cmp	fp, r4
 8006614:	f67f abf3 	bls.w	8005dfe <__strftime+0x66>
 8006618:	69ab      	ldr	r3, [r5, #24]
 800661a:	3330      	adds	r3, #48	; 0x30
 800661c:	e6d1      	b.n	80063c2 <__strftime+0x62a>
 800661e:	69ab      	ldr	r3, [r5, #24]
 8006620:	b13b      	cbz	r3, 8006632 <__strftime+0x89a>
 8006622:	3b01      	subs	r3, #1
 8006624:	69ea      	ldr	r2, [r5, #28]
 8006626:	3207      	adds	r2, #7
 8006628:	1ad2      	subs	r2, r2, r3
 800662a:	2307      	movs	r3, #7
 800662c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006630:	e5ea      	b.n	8006208 <__strftime+0x470>
 8006632:	2306      	movs	r3, #6
 8006634:	e7f6      	b.n	8006624 <__strftime+0x88c>
 8006636:	6968      	ldr	r0, [r5, #20]
 8006638:	2800      	cmp	r0, #0
 800663a:	db05      	blt.n	8006648 <__strftime+0x8b0>
 800663c:	2264      	movs	r2, #100	; 0x64
 800663e:	fb90 f3f2 	sdiv	r3, r0, r2
 8006642:	fb02 0313 	mls	r3, r2, r3, r0
 8006646:	e5df      	b.n	8006208 <__strftime+0x470>
 8006648:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800664c:	f000 fca8 	bl	8006fa0 <abs>
 8006650:	2364      	movs	r3, #100	; 0x64
 8006652:	fb90 f2f3 	sdiv	r2, r0, r3
 8006656:	e7f4      	b.n	8006642 <__strftime+0x8aa>
 8006658:	696b      	ldr	r3, [r5, #20]
 800665a:	4a52      	ldr	r2, [pc, #328]	; (80067a4 <__strftime+0xa0c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	da18      	bge.n	8006692 <__strftime+0x8fa>
 8006660:	212d      	movs	r1, #45	; 0x2d
 8006662:	f88d 1020 	strb.w	r1, [sp, #32]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	f1b9 0f00 	cmp.w	r9, #0
 800666c:	d001      	beq.n	8006672 <__strftime+0x8da>
 800666e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006672:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 8006676:	2125      	movs	r1, #37	; 0x25
 8006678:	7011      	strb	r1, [r2, #0]
 800667a:	f1ba 0f00 	cmp.w	sl, #0
 800667e:	f040 8088 	bne.w	8006792 <__strftime+0x9fa>
 8006682:	1c50      	adds	r0, r2, #1
 8006684:	4948      	ldr	r1, [pc, #288]	; (80067a8 <__strftime+0xa10>)
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	f002 fac9 	bl	8008c1e <strcpy>
 800668c:	9b04      	ldr	r3, [sp, #16]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	e62e      	b.n	80062f0 <__strftime+0x558>
 8006692:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8006696:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800669a:	f040 8081 	bne.w	80067a0 <__strftime+0xa08>
 800669e:	f242 720f 	movw	r2, #9999	; 0x270f
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d979      	bls.n	800679a <__strftime+0xa02>
 80066a6:	f88d a020 	strb.w	sl, [sp, #32]
 80066aa:	e7dd      	b.n	8006668 <__strftime+0x8d0>
 80066ac:	6a2b      	ldr	r3, [r5, #32]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f6ff ac78 	blt.w	8005fa4 <__strftime+0x20c>
 80066b4:	f000 fa2e 	bl	8006b14 <__tz_lock>
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	b90b      	cbnz	r3, 80066c0 <__strftime+0x928>
 80066bc:	f000 fa2c 	bl	8006b18 <_tzset_unlocked>
 80066c0:	f001 fc88 	bl	8007fd4 <__gettzinfo>
 80066c4:	6a2b      	ldr	r3, [r5, #32]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bfcc      	ite	gt
 80066ca:	2350      	movgt	r3, #80	; 0x50
 80066cc:	2328      	movle	r3, #40	; 0x28
 80066ce:	eb07 0a04 	add.w	sl, r7, r4
 80066d2:	58c3      	ldr	r3, [r0, r3]
 80066d4:	f1c3 0900 	rsb	r9, r3, #0
 80066d8:	f000 fa1d 	bl	8006b16 <__tz_unlock>
 80066dc:	233c      	movs	r3, #60	; 0x3c
 80066de:	1b31      	subs	r1, r6, r4
 80066e0:	fb99 f0f3 	sdiv	r0, r9, r3
 80066e4:	9104      	str	r1, [sp, #16]
 80066e6:	9303      	str	r3, [sp, #12]
 80066e8:	f001 fd26 	bl	8008138 <labs>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	fb90 f2f3 	sdiv	r2, r0, r3
 80066f2:	fb02 0013 	mls	r0, r2, r3, r0
 80066f6:	9000      	str	r0, [sp, #0]
 80066f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80066fc:	4a2b      	ldr	r2, [pc, #172]	; (80067ac <__strftime+0xa14>)
 80066fe:	fb99 f3f3 	sdiv	r3, r9, r3
 8006702:	9904      	ldr	r1, [sp, #16]
 8006704:	4650      	mov	r0, sl
 8006706:	f002 f9e7 	bl	8008ad8 <sniprintf>
 800670a:	2800      	cmp	r0, #0
 800670c:	f6ff ab77 	blt.w	8005dfe <__strftime+0x66>
 8006710:	4404      	add	r4, r0
 8006712:	42a6      	cmp	r6, r4
 8006714:	f67f ab73 	bls.w	8005dfe <__strftime+0x66>
 8006718:	2301      	movs	r3, #1
 800671a:	9303      	str	r3, [sp, #12]
 800671c:	e442      	b.n	8005fa4 <__strftime+0x20c>
 800671e:	6a2b      	ldr	r3, [r5, #32]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f6ff ac3f 	blt.w	8005fa4 <__strftime+0x20c>
 8006726:	f000 f9f5 	bl	8006b14 <__tz_lock>
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	b90b      	cbnz	r3, 8006732 <__strftime+0x99a>
 800672e:	f000 f9f3 	bl	8006b18 <_tzset_unlocked>
 8006732:	6a2b      	ldr	r3, [r5, #32]
 8006734:	4a1e      	ldr	r2, [pc, #120]	; (80067b0 <__strftime+0xa18>)
 8006736:	2b00      	cmp	r3, #0
 8006738:	bfd4      	ite	le
 800673a:	2300      	movle	r3, #0
 800673c:	2301      	movgt	r3, #1
 800673e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8006742:	4648      	mov	r0, r9
 8006744:	f7f9 fd4e 	bl	80001e4 <strlen>
 8006748:	eba9 0904 	sub.w	r9, r9, r4
 800674c:	eb04 0a00 	add.w	sl, r4, r0
 8006750:	45a2      	cmp	sl, r4
 8006752:	d103      	bne.n	800675c <__strftime+0x9c4>
 8006754:	f000 f9df 	bl	8006b16 <__tz_unlock>
 8006758:	4654      	mov	r4, sl
 800675a:	e7dd      	b.n	8006718 <__strftime+0x980>
 800675c:	45a3      	cmp	fp, r4
 800675e:	d904      	bls.n	800676a <__strftime+0x9d2>
 8006760:	f819 3004 	ldrb.w	r3, [r9, r4]
 8006764:	553b      	strb	r3, [r7, r4]
 8006766:	3401      	adds	r4, #1
 8006768:	e7f2      	b.n	8006750 <__strftime+0x9b8>
 800676a:	f000 f9d4 	bl	8006b16 <__tz_unlock>
 800676e:	f7ff bb46 	b.w	8005dfe <__strftime+0x66>
 8006772:	45a3      	cmp	fp, r4
 8006774:	f67f ab43 	bls.w	8005dfe <__strftime+0x66>
 8006778:	2325      	movs	r3, #37	; 0x25
 800677a:	e622      	b.n	80063c2 <__strftime+0x62a>
 800677c:	b10e      	cbz	r6, 8006782 <__strftime+0x9ea>
 800677e:	2300      	movs	r3, #0
 8006780:	553b      	strb	r3, [r7, r4]
 8006782:	4620      	mov	r0, r4
 8006784:	b011      	add	sp, #68	; 0x44
 8006786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678a:	2225      	movs	r2, #37	; 0x25
 800678c:	f88d 2020 	strb.w	r2, [sp, #32]
 8006790:	aa08      	add	r2, sp, #32
 8006792:	2130      	movs	r1, #48	; 0x30
 8006794:	1c90      	adds	r0, r2, #2
 8006796:	7051      	strb	r1, [r2, #1]
 8006798:	e774      	b.n	8006684 <__strftime+0x8ec>
 800679a:	f1b9 0f00 	cmp.w	r9, #0
 800679e:	d1f4      	bne.n	800678a <__strftime+0x9f2>
 80067a0:	aa08      	add	r2, sp, #32
 80067a2:	e768      	b.n	8006676 <__strftime+0x8de>
 80067a4:	fffff894 	.word	0xfffff894
 80067a8:	08009b0a 	.word	0x08009b0a
 80067ac:	08009b27 	.word	0x08009b27
 80067b0:	20000078 	.word	0x20000078

080067b4 <strftime>:
 80067b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067b6:	4c06      	ldr	r4, [pc, #24]	; (80067d0 <strftime+0x1c>)
 80067b8:	4d06      	ldr	r5, [pc, #24]	; (80067d4 <strftime+0x20>)
 80067ba:	6824      	ldr	r4, [r4, #0]
 80067bc:	6a24      	ldr	r4, [r4, #32]
 80067be:	2c00      	cmp	r4, #0
 80067c0:	bf08      	it	eq
 80067c2:	462c      	moveq	r4, r5
 80067c4:	9400      	str	r4, [sp, #0]
 80067c6:	f7ff fae7 	bl	8005d98 <__strftime>
 80067ca:	b003      	add	sp, #12
 80067cc:	bd30      	pop	{r4, r5, pc}
 80067ce:	bf00      	nop
 80067d0:	20000014 	.word	0x20000014
 80067d4:	200000d8 	.word	0x200000d8

080067d8 <strtok>:
 80067d8:	4b13      	ldr	r3, [pc, #76]	; (8006828 <strtok+0x50>)
 80067da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067de:	681d      	ldr	r5, [r3, #0]
 80067e0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80067e2:	4606      	mov	r6, r0
 80067e4:	460f      	mov	r7, r1
 80067e6:	b9b4      	cbnz	r4, 8006816 <strtok+0x3e>
 80067e8:	2050      	movs	r0, #80	; 0x50
 80067ea:	f7fe fa31 	bl	8004c50 <malloc>
 80067ee:	65a8      	str	r0, [r5, #88]	; 0x58
 80067f0:	e9c0 4400 	strd	r4, r4, [r0]
 80067f4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80067f8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80067fc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006800:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006804:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006808:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800680c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006810:	6184      	str	r4, [r0, #24]
 8006812:	7704      	strb	r4, [r0, #28]
 8006814:	6244      	str	r4, [r0, #36]	; 0x24
 8006816:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006818:	4639      	mov	r1, r7
 800681a:	4630      	mov	r0, r6
 800681c:	2301      	movs	r3, #1
 800681e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006822:	f000 b803 	b.w	800682c <__strtok_r>
 8006826:	bf00      	nop
 8006828:	20000014 	.word	0x20000014

0800682c <__strtok_r>:
 800682c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682e:	b918      	cbnz	r0, 8006838 <__strtok_r+0xc>
 8006830:	6810      	ldr	r0, [r2, #0]
 8006832:	b908      	cbnz	r0, 8006838 <__strtok_r+0xc>
 8006834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006836:	4620      	mov	r0, r4
 8006838:	4604      	mov	r4, r0
 800683a:	460f      	mov	r7, r1
 800683c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006840:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006844:	b91e      	cbnz	r6, 800684e <__strtok_r+0x22>
 8006846:	b96d      	cbnz	r5, 8006864 <__strtok_r+0x38>
 8006848:	6015      	str	r5, [r2, #0]
 800684a:	4628      	mov	r0, r5
 800684c:	e7f2      	b.n	8006834 <__strtok_r+0x8>
 800684e:	42b5      	cmp	r5, r6
 8006850:	d1f6      	bne.n	8006840 <__strtok_r+0x14>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1ef      	bne.n	8006836 <__strtok_r+0xa>
 8006856:	6014      	str	r4, [r2, #0]
 8006858:	7003      	strb	r3, [r0, #0]
 800685a:	e7eb      	b.n	8006834 <__strtok_r+0x8>
 800685c:	462b      	mov	r3, r5
 800685e:	e00d      	b.n	800687c <__strtok_r+0x50>
 8006860:	b926      	cbnz	r6, 800686c <__strtok_r+0x40>
 8006862:	461c      	mov	r4, r3
 8006864:	4623      	mov	r3, r4
 8006866:	460f      	mov	r7, r1
 8006868:	f813 5b01 	ldrb.w	r5, [r3], #1
 800686c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006870:	42b5      	cmp	r5, r6
 8006872:	d1f5      	bne.n	8006860 <__strtok_r+0x34>
 8006874:	2d00      	cmp	r5, #0
 8006876:	d0f1      	beq.n	800685c <__strtok_r+0x30>
 8006878:	2100      	movs	r1, #0
 800687a:	7021      	strb	r1, [r4, #0]
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e7d9      	b.n	8006834 <__strtok_r+0x8>

08006880 <_strtoul_l.isra.0>:
 8006880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	4680      	mov	r8, r0
 8006886:	4689      	mov	r9, r1
 8006888:	4692      	mov	sl, r2
 800688a:	461e      	mov	r6, r3
 800688c:	460f      	mov	r7, r1
 800688e:	463d      	mov	r5, r7
 8006890:	9808      	ldr	r0, [sp, #32]
 8006892:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006896:	f001 fc53 	bl	8008140 <__locale_ctype_ptr_l>
 800689a:	4420      	add	r0, r4
 800689c:	7843      	ldrb	r3, [r0, #1]
 800689e:	f013 0308 	ands.w	r3, r3, #8
 80068a2:	d130      	bne.n	8006906 <_strtoul_l.isra.0+0x86>
 80068a4:	2c2d      	cmp	r4, #45	; 0x2d
 80068a6:	d130      	bne.n	800690a <_strtoul_l.isra.0+0x8a>
 80068a8:	787c      	ldrb	r4, [r7, #1]
 80068aa:	1cbd      	adds	r5, r7, #2
 80068ac:	2101      	movs	r1, #1
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d05c      	beq.n	800696c <_strtoul_l.isra.0+0xec>
 80068b2:	2e10      	cmp	r6, #16
 80068b4:	d109      	bne.n	80068ca <_strtoul_l.isra.0+0x4a>
 80068b6:	2c30      	cmp	r4, #48	; 0x30
 80068b8:	d107      	bne.n	80068ca <_strtoul_l.isra.0+0x4a>
 80068ba:	782b      	ldrb	r3, [r5, #0]
 80068bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068c0:	2b58      	cmp	r3, #88	; 0x58
 80068c2:	d14e      	bne.n	8006962 <_strtoul_l.isra.0+0xe2>
 80068c4:	786c      	ldrb	r4, [r5, #1]
 80068c6:	2610      	movs	r6, #16
 80068c8:	3502      	adds	r5, #2
 80068ca:	f04f 32ff 	mov.w	r2, #4294967295
 80068ce:	2300      	movs	r3, #0
 80068d0:	fbb2 f2f6 	udiv	r2, r2, r6
 80068d4:	fb06 fc02 	mul.w	ip, r6, r2
 80068d8:	ea6f 0c0c 	mvn.w	ip, ip
 80068dc:	4618      	mov	r0, r3
 80068de:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80068e2:	2f09      	cmp	r7, #9
 80068e4:	d817      	bhi.n	8006916 <_strtoul_l.isra.0+0x96>
 80068e6:	463c      	mov	r4, r7
 80068e8:	42a6      	cmp	r6, r4
 80068ea:	dd23      	ble.n	8006934 <_strtoul_l.isra.0+0xb4>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	db1e      	blt.n	800692e <_strtoul_l.isra.0+0xae>
 80068f0:	4282      	cmp	r2, r0
 80068f2:	d31c      	bcc.n	800692e <_strtoul_l.isra.0+0xae>
 80068f4:	d101      	bne.n	80068fa <_strtoul_l.isra.0+0x7a>
 80068f6:	45a4      	cmp	ip, r4
 80068f8:	db19      	blt.n	800692e <_strtoul_l.isra.0+0xae>
 80068fa:	fb00 4006 	mla	r0, r0, r6, r4
 80068fe:	2301      	movs	r3, #1
 8006900:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006904:	e7eb      	b.n	80068de <_strtoul_l.isra.0+0x5e>
 8006906:	462f      	mov	r7, r5
 8006908:	e7c1      	b.n	800688e <_strtoul_l.isra.0+0xe>
 800690a:	2c2b      	cmp	r4, #43	; 0x2b
 800690c:	bf04      	itt	eq
 800690e:	1cbd      	addeq	r5, r7, #2
 8006910:	787c      	ldrbeq	r4, [r7, #1]
 8006912:	4619      	mov	r1, r3
 8006914:	e7cb      	b.n	80068ae <_strtoul_l.isra.0+0x2e>
 8006916:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800691a:	2f19      	cmp	r7, #25
 800691c:	d801      	bhi.n	8006922 <_strtoul_l.isra.0+0xa2>
 800691e:	3c37      	subs	r4, #55	; 0x37
 8006920:	e7e2      	b.n	80068e8 <_strtoul_l.isra.0+0x68>
 8006922:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006926:	2f19      	cmp	r7, #25
 8006928:	d804      	bhi.n	8006934 <_strtoul_l.isra.0+0xb4>
 800692a:	3c57      	subs	r4, #87	; 0x57
 800692c:	e7dc      	b.n	80068e8 <_strtoul_l.isra.0+0x68>
 800692e:	f04f 33ff 	mov.w	r3, #4294967295
 8006932:	e7e5      	b.n	8006900 <_strtoul_l.isra.0+0x80>
 8006934:	2b00      	cmp	r3, #0
 8006936:	da09      	bge.n	800694c <_strtoul_l.isra.0+0xcc>
 8006938:	2322      	movs	r3, #34	; 0x22
 800693a:	f8c8 3000 	str.w	r3, [r8]
 800693e:	f04f 30ff 	mov.w	r0, #4294967295
 8006942:	f1ba 0f00 	cmp.w	sl, #0
 8006946:	d107      	bne.n	8006958 <_strtoul_l.isra.0+0xd8>
 8006948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694c:	b101      	cbz	r1, 8006950 <_strtoul_l.isra.0+0xd0>
 800694e:	4240      	negs	r0, r0
 8006950:	f1ba 0f00 	cmp.w	sl, #0
 8006954:	d0f8      	beq.n	8006948 <_strtoul_l.isra.0+0xc8>
 8006956:	b10b      	cbz	r3, 800695c <_strtoul_l.isra.0+0xdc>
 8006958:	f105 39ff 	add.w	r9, r5, #4294967295
 800695c:	f8ca 9000 	str.w	r9, [sl]
 8006960:	e7f2      	b.n	8006948 <_strtoul_l.isra.0+0xc8>
 8006962:	2430      	movs	r4, #48	; 0x30
 8006964:	2e00      	cmp	r6, #0
 8006966:	d1b0      	bne.n	80068ca <_strtoul_l.isra.0+0x4a>
 8006968:	2608      	movs	r6, #8
 800696a:	e7ae      	b.n	80068ca <_strtoul_l.isra.0+0x4a>
 800696c:	2c30      	cmp	r4, #48	; 0x30
 800696e:	d0a4      	beq.n	80068ba <_strtoul_l.isra.0+0x3a>
 8006970:	260a      	movs	r6, #10
 8006972:	e7aa      	b.n	80068ca <_strtoul_l.isra.0+0x4a>

08006974 <_strtoul_r>:
 8006974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006976:	4c06      	ldr	r4, [pc, #24]	; (8006990 <_strtoul_r+0x1c>)
 8006978:	4d06      	ldr	r5, [pc, #24]	; (8006994 <_strtoul_r+0x20>)
 800697a:	6824      	ldr	r4, [r4, #0]
 800697c:	6a24      	ldr	r4, [r4, #32]
 800697e:	2c00      	cmp	r4, #0
 8006980:	bf08      	it	eq
 8006982:	462c      	moveq	r4, r5
 8006984:	9400      	str	r4, [sp, #0]
 8006986:	f7ff ff7b 	bl	8006880 <_strtoul_l.isra.0>
 800698a:	b003      	add	sp, #12
 800698c:	bd30      	pop	{r4, r5, pc}
 800698e:	bf00      	nop
 8006990:	20000014 	.word	0x20000014
 8006994:	200000d8 	.word	0x200000d8

08006998 <strtoul>:
 8006998:	4b08      	ldr	r3, [pc, #32]	; (80069bc <strtoul+0x24>)
 800699a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800699c:	681c      	ldr	r4, [r3, #0]
 800699e:	4d08      	ldr	r5, [pc, #32]	; (80069c0 <strtoul+0x28>)
 80069a0:	6a23      	ldr	r3, [r4, #32]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bf08      	it	eq
 80069a6:	462b      	moveq	r3, r5
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	4613      	mov	r3, r2
 80069ac:	460a      	mov	r2, r1
 80069ae:	4601      	mov	r1, r0
 80069b0:	4620      	mov	r0, r4
 80069b2:	f7ff ff65 	bl	8006880 <_strtoul_l.isra.0>
 80069b6:	b003      	add	sp, #12
 80069b8:	bd30      	pop	{r4, r5, pc}
 80069ba:	bf00      	nop
 80069bc:	20000014 	.word	0x20000014
 80069c0:	200000d8 	.word	0x200000d8

080069c4 <__tzcalc_limits>:
 80069c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	4680      	mov	r8, r0
 80069ca:	f001 fb03 	bl	8007fd4 <__gettzinfo>
 80069ce:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80069d2:	4598      	cmp	r8, r3
 80069d4:	f340 8098 	ble.w	8006b08 <__tzcalc_limits+0x144>
 80069d8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80069dc:	4443      	add	r3, r8
 80069de:	109b      	asrs	r3, r3, #2
 80069e0:	f240 126d 	movw	r2, #365	; 0x16d
 80069e4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80069e8:	fb02 3505 	mla	r5, r2, r5, r3
 80069ec:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80069f0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80069f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80069f8:	441d      	add	r5, r3
 80069fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80069fe:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8006a02:	fb98 f7f3 	sdiv	r7, r8, r3
 8006a06:	fb03 8717 	mls	r7, r3, r7, r8
 8006a0a:	4442      	add	r2, r8
 8006a0c:	fab7 fc87 	clz	ip, r7
 8006a10:	fb92 f2f3 	sdiv	r2, r2, r3
 8006a14:	f008 0303 	and.w	r3, r8, #3
 8006a18:	4415      	add	r5, r2
 8006a1a:	2264      	movs	r2, #100	; 0x64
 8006a1c:	f8c0 8004 	str.w	r8, [r0, #4]
 8006a20:	fb98 f6f2 	sdiv	r6, r8, r2
 8006a24:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8006a28:	fb02 8616 	mls	r6, r2, r6, r8
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	f04f 0e07 	mov.w	lr, #7
 8006a38:	7a22      	ldrb	r2, [r4, #8]
 8006a3a:	6963      	ldr	r3, [r4, #20]
 8006a3c:	2a4a      	cmp	r2, #74	; 0x4a
 8006a3e:	d128      	bne.n	8006a92 <__tzcalc_limits+0xce>
 8006a40:	9900      	ldr	r1, [sp, #0]
 8006a42:	18ea      	adds	r2, r5, r3
 8006a44:	b901      	cbnz	r1, 8006a48 <__tzcalc_limits+0x84>
 8006a46:	b906      	cbnz	r6, 8006a4a <__tzcalc_limits+0x86>
 8006a48:	bb0f      	cbnz	r7, 8006a8e <__tzcalc_limits+0xca>
 8006a4a:	2b3b      	cmp	r3, #59	; 0x3b
 8006a4c:	bfd4      	ite	le
 8006a4e:	2300      	movle	r3, #0
 8006a50:	2301      	movgt	r3, #1
 8006a52:	4413      	add	r3, r2
 8006a54:	1e5a      	subs	r2, r3, #1
 8006a56:	69a3      	ldr	r3, [r4, #24]
 8006a58:	492c      	ldr	r1, [pc, #176]	; (8006b0c <__tzcalc_limits+0x148>)
 8006a5a:	fb01 3202 	mla	r2, r1, r2, r3
 8006a5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a60:	4413      	add	r3, r2
 8006a62:	461a      	mov	r2, r3
 8006a64:	17db      	asrs	r3, r3, #31
 8006a66:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8006a6a:	3428      	adds	r4, #40	; 0x28
 8006a6c:	45a3      	cmp	fp, r4
 8006a6e:	d1e3      	bne.n	8006a38 <__tzcalc_limits+0x74>
 8006a70:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8006a74:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8006a78:	4294      	cmp	r4, r2
 8006a7a:	eb75 0303 	sbcs.w	r3, r5, r3
 8006a7e:	bfb4      	ite	lt
 8006a80:	2301      	movlt	r3, #1
 8006a82:	2300      	movge	r3, #0
 8006a84:	6003      	str	r3, [r0, #0]
 8006a86:	2001      	movs	r0, #1
 8006a88:	b003      	add	sp, #12
 8006a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8e:	2300      	movs	r3, #0
 8006a90:	e7df      	b.n	8006a52 <__tzcalc_limits+0x8e>
 8006a92:	2a44      	cmp	r2, #68	; 0x44
 8006a94:	d101      	bne.n	8006a9a <__tzcalc_limits+0xd6>
 8006a96:	18ea      	adds	r2, r5, r3
 8006a98:	e7dd      	b.n	8006a56 <__tzcalc_limits+0x92>
 8006a9a:	9a00      	ldr	r2, [sp, #0]
 8006a9c:	bb72      	cbnz	r2, 8006afc <__tzcalc_limits+0x138>
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	bf0c      	ite	eq
 8006aa2:	46e1      	moveq	r9, ip
 8006aa4:	f04f 0901 	movne.w	r9, #1
 8006aa8:	2230      	movs	r2, #48	; 0x30
 8006aaa:	fb02 f909 	mul.w	r9, r2, r9
 8006aae:	68e2      	ldr	r2, [r4, #12]
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	462a      	mov	r2, r5
 8006ab8:	f108 0801 	add.w	r8, r8, #1
 8006abc:	4914      	ldr	r1, [pc, #80]	; (8006b10 <__tzcalc_limits+0x14c>)
 8006abe:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8006ac2:	448a      	add	sl, r1
 8006ac4:	9901      	ldr	r1, [sp, #4]
 8006ac6:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8006aca:	4541      	cmp	r1, r8
 8006acc:	dc18      	bgt.n	8006b00 <__tzcalc_limits+0x13c>
 8006ace:	f102 0804 	add.w	r8, r2, #4
 8006ad2:	fb98 f9fe 	sdiv	r9, r8, lr
 8006ad6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8006ada:	eba8 0909 	sub.w	r9, r8, r9
 8006ade:	ebb3 0909 	subs.w	r9, r3, r9
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ae8:	bf48      	it	mi
 8006aea:	f109 0907 	addmi.w	r9, r9, #7
 8006aee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006af2:	444b      	add	r3, r9
 8006af4:	4553      	cmp	r3, sl
 8006af6:	da05      	bge.n	8006b04 <__tzcalc_limits+0x140>
 8006af8:	441a      	add	r2, r3
 8006afa:	e7ac      	b.n	8006a56 <__tzcalc_limits+0x92>
 8006afc:	46e1      	mov	r9, ip
 8006afe:	e7d3      	b.n	8006aa8 <__tzcalc_limits+0xe4>
 8006b00:	4452      	add	r2, sl
 8006b02:	e7d9      	b.n	8006ab8 <__tzcalc_limits+0xf4>
 8006b04:	3b07      	subs	r3, #7
 8006b06:	e7f5      	b.n	8006af4 <__tzcalc_limits+0x130>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e7bd      	b.n	8006a88 <__tzcalc_limits+0xc4>
 8006b0c:	00015180 	.word	0x00015180
 8006b10:	08009a48 	.word	0x08009a48

08006b14 <__tz_lock>:
 8006b14:	4770      	bx	lr

08006b16 <__tz_unlock>:
 8006b16:	4770      	bx	lr

08006b18 <_tzset_unlocked>:
 8006b18:	4b01      	ldr	r3, [pc, #4]	; (8006b20 <_tzset_unlocked+0x8>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	f000 b802 	b.w	8006b24 <_tzset_unlocked_r>
 8006b20:	20000014 	.word	0x20000014

08006b24 <_tzset_unlocked_r>:
 8006b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b28:	b08d      	sub	sp, #52	; 0x34
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	f001 fa52 	bl	8007fd4 <__gettzinfo>
 8006b30:	49af      	ldr	r1, [pc, #700]	; (8006df0 <_tzset_unlocked_r+0x2cc>)
 8006b32:	4eb0      	ldr	r6, [pc, #704]	; (8006df4 <_tzset_unlocked_r+0x2d0>)
 8006b34:	4605      	mov	r5, r0
 8006b36:	4638      	mov	r0, r7
 8006b38:	f001 fa44 	bl	8007fc4 <_getenv_r>
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	b970      	cbnz	r0, 8006b5e <_tzset_unlocked_r+0x3a>
 8006b40:	4bad      	ldr	r3, [pc, #692]	; (8006df8 <_tzset_unlocked_r+0x2d4>)
 8006b42:	4aae      	ldr	r2, [pc, #696]	; (8006dfc <_tzset_unlocked_r+0x2d8>)
 8006b44:	6018      	str	r0, [r3, #0]
 8006b46:	4bae      	ldr	r3, [pc, #696]	; (8006e00 <_tzset_unlocked_r+0x2dc>)
 8006b48:	6018      	str	r0, [r3, #0]
 8006b4a:	4bae      	ldr	r3, [pc, #696]	; (8006e04 <_tzset_unlocked_r+0x2e0>)
 8006b4c:	6830      	ldr	r0, [r6, #0]
 8006b4e:	e9c3 2200 	strd	r2, r2, [r3]
 8006b52:	f7fe f885 	bl	8004c60 <free>
 8006b56:	6034      	str	r4, [r6, #0]
 8006b58:	b00d      	add	sp, #52	; 0x34
 8006b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5e:	6831      	ldr	r1, [r6, #0]
 8006b60:	2900      	cmp	r1, #0
 8006b62:	d15f      	bne.n	8006c24 <_tzset_unlocked_r+0x100>
 8006b64:	6830      	ldr	r0, [r6, #0]
 8006b66:	f7fe f87b 	bl	8004c60 <free>
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7f9 fb3a 	bl	80001e4 <strlen>
 8006b70:	1c41      	adds	r1, r0, #1
 8006b72:	4638      	mov	r0, r7
 8006b74:	f7fe fb76 	bl	8005264 <_malloc_r>
 8006b78:	6030      	str	r0, [r6, #0]
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d157      	bne.n	8006c2e <_tzset_unlocked_r+0x10a>
 8006b7e:	7823      	ldrb	r3, [r4, #0]
 8006b80:	4aa1      	ldr	r2, [pc, #644]	; (8006e08 <_tzset_unlocked_r+0x2e4>)
 8006b82:	49a2      	ldr	r1, [pc, #648]	; (8006e0c <_tzset_unlocked_r+0x2e8>)
 8006b84:	2b3a      	cmp	r3, #58	; 0x3a
 8006b86:	bf08      	it	eq
 8006b88:	3401      	addeq	r4, #1
 8006b8a:	ae0a      	add	r6, sp, #40	; 0x28
 8006b8c:	4633      	mov	r3, r6
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f001 ffd6 	bl	8008b40 <siscanf>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	dddf      	ble.n	8006b58 <_tzset_unlocked_r+0x34>
 8006b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b9a:	18e7      	adds	r7, r4, r3
 8006b9c:	5ce3      	ldrb	r3, [r4, r3]
 8006b9e:	2b2d      	cmp	r3, #45	; 0x2d
 8006ba0:	d149      	bne.n	8006c36 <_tzset_unlocked_r+0x112>
 8006ba2:	3701      	adds	r7, #1
 8006ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ba8:	f10d 0a20 	add.w	sl, sp, #32
 8006bac:	f10d 0b1e 	add.w	fp, sp, #30
 8006bb0:	f04f 0800 	mov.w	r8, #0
 8006bb4:	9603      	str	r6, [sp, #12]
 8006bb6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8006bba:	f8cd b000 	str.w	fp, [sp]
 8006bbe:	4633      	mov	r3, r6
 8006bc0:	aa07      	add	r2, sp, #28
 8006bc2:	4993      	ldr	r1, [pc, #588]	; (8006e10 <_tzset_unlocked_r+0x2ec>)
 8006bc4:	f8ad 801e 	strh.w	r8, [sp, #30]
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f8ad 8020 	strh.w	r8, [sp, #32]
 8006bce:	f001 ffb7 	bl	8008b40 <siscanf>
 8006bd2:	4540      	cmp	r0, r8
 8006bd4:	ddc0      	ble.n	8006b58 <_tzset_unlocked_r+0x34>
 8006bd6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006bda:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006bde:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8006e1c <_tzset_unlocked_r+0x2f8>
 8006be2:	213c      	movs	r1, #60	; 0x3c
 8006be4:	fb01 2203 	mla	r2, r1, r3, r2
 8006be8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006bec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006bf0:	fb01 2303 	mla	r3, r1, r3, r2
 8006bf4:	435c      	muls	r4, r3
 8006bf6:	62ac      	str	r4, [r5, #40]	; 0x28
 8006bf8:	4c82      	ldr	r4, [pc, #520]	; (8006e04 <_tzset_unlocked_r+0x2e0>)
 8006bfa:	4b83      	ldr	r3, [pc, #524]	; (8006e08 <_tzset_unlocked_r+0x2e4>)
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c00:	4982      	ldr	r1, [pc, #520]	; (8006e0c <_tzset_unlocked_r+0x2e8>)
 8006c02:	441f      	add	r7, r3
 8006c04:	464a      	mov	r2, r9
 8006c06:	4633      	mov	r3, r6
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f001 ff99 	bl	8008b40 <siscanf>
 8006c0e:	4540      	cmp	r0, r8
 8006c10:	dc16      	bgt.n	8006c40 <_tzset_unlocked_r+0x11c>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	6063      	str	r3, [r4, #4]
 8006c16:	4b78      	ldr	r3, [pc, #480]	; (8006df8 <_tzset_unlocked_r+0x2d4>)
 8006c18:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	4b78      	ldr	r3, [pc, #480]	; (8006e00 <_tzset_unlocked_r+0x2dc>)
 8006c1e:	f8c3 8000 	str.w	r8, [r3]
 8006c22:	e799      	b.n	8006b58 <_tzset_unlocked_r+0x34>
 8006c24:	f7f9 fad4 	bl	80001d0 <strcmp>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d095      	beq.n	8006b58 <_tzset_unlocked_r+0x34>
 8006c2c:	e79a      	b.n	8006b64 <_tzset_unlocked_r+0x40>
 8006c2e:	4621      	mov	r1, r4
 8006c30:	f001 fff5 	bl	8008c1e <strcpy>
 8006c34:	e7a3      	b.n	8006b7e <_tzset_unlocked_r+0x5a>
 8006c36:	2b2b      	cmp	r3, #43	; 0x2b
 8006c38:	bf08      	it	eq
 8006c3a:	3701      	addeq	r7, #1
 8006c3c:	2401      	movs	r4, #1
 8006c3e:	e7b3      	b.n	8006ba8 <_tzset_unlocked_r+0x84>
 8006c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c42:	f8c4 9004 	str.w	r9, [r4, #4]
 8006c46:	18fc      	adds	r4, r7, r3
 8006c48:	5cfb      	ldrb	r3, [r7, r3]
 8006c4a:	2b2d      	cmp	r3, #45	; 0x2d
 8006c4c:	f040 808b 	bne.w	8006d66 <_tzset_unlocked_r+0x242>
 8006c50:	3401      	adds	r4, #1
 8006c52:	f04f 37ff 	mov.w	r7, #4294967295
 8006c56:	2300      	movs	r3, #0
 8006c58:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006c5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006c60:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006c64:	930a      	str	r3, [sp, #40]	; 0x28
 8006c66:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006c6a:	e9cd b600 	strd	fp, r6, [sp]
 8006c6e:	4633      	mov	r3, r6
 8006c70:	aa07      	add	r2, sp, #28
 8006c72:	4967      	ldr	r1, [pc, #412]	; (8006e10 <_tzset_unlocked_r+0x2ec>)
 8006c74:	4620      	mov	r0, r4
 8006c76:	f001 ff63 	bl	8008b40 <siscanf>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	dc78      	bgt.n	8006d70 <_tzset_unlocked_r+0x24c>
 8006c7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006c80:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8006c84:	652b      	str	r3, [r5, #80]	; 0x50
 8006c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c88:	462f      	mov	r7, r5
 8006c8a:	441c      	add	r4, r3
 8006c8c:	f04f 0900 	mov.w	r9, #0
 8006c90:	7823      	ldrb	r3, [r4, #0]
 8006c92:	2b2c      	cmp	r3, #44	; 0x2c
 8006c94:	bf08      	it	eq
 8006c96:	3401      	addeq	r4, #1
 8006c98:	f894 8000 	ldrb.w	r8, [r4]
 8006c9c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8006ca0:	d179      	bne.n	8006d96 <_tzset_unlocked_r+0x272>
 8006ca2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8006ca6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8006caa:	ab09      	add	r3, sp, #36	; 0x24
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	9603      	str	r6, [sp, #12]
 8006cb0:	4633      	mov	r3, r6
 8006cb2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8006cb6:	4957      	ldr	r1, [pc, #348]	; (8006e14 <_tzset_unlocked_r+0x2f0>)
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f001 ff41 	bl	8008b40 <siscanf>
 8006cbe:	2803      	cmp	r0, #3
 8006cc0:	f47f af4a 	bne.w	8006b58 <_tzset_unlocked_r+0x34>
 8006cc4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8006cc8:	1e4b      	subs	r3, r1, #1
 8006cca:	2b0b      	cmp	r3, #11
 8006ccc:	f63f af44 	bhi.w	8006b58 <_tzset_unlocked_r+0x34>
 8006cd0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006cd4:	1e53      	subs	r3, r2, #1
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	f63f af3e 	bhi.w	8006b58 <_tzset_unlocked_r+0x34>
 8006cdc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8006ce0:	2b06      	cmp	r3, #6
 8006ce2:	f63f af39 	bhi.w	8006b58 <_tzset_unlocked_r+0x34>
 8006ce6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8006cea:	f887 8008 	strb.w	r8, [r7, #8]
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf2:	eb04 0803 	add.w	r8, r4, r3
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006d02:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006d06:	930a      	str	r3, [sp, #40]	; 0x28
 8006d08:	f898 3000 	ldrb.w	r3, [r8]
 8006d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8006d0e:	d109      	bne.n	8006d24 <_tzset_unlocked_r+0x200>
 8006d10:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006d14:	e9cd b600 	strd	fp, r6, [sp]
 8006d18:	4633      	mov	r3, r6
 8006d1a:	aa07      	add	r2, sp, #28
 8006d1c:	493e      	ldr	r1, [pc, #248]	; (8006e18 <_tzset_unlocked_r+0x2f4>)
 8006d1e:	4640      	mov	r0, r8
 8006d20:	f001 ff0e 	bl	8008b40 <siscanf>
 8006d24:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006d28:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006d2c:	213c      	movs	r1, #60	; 0x3c
 8006d2e:	fb01 2203 	mla	r2, r1, r3, r2
 8006d32:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006d36:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006d3a:	fb01 2303 	mla	r3, r1, r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d42:	3728      	adds	r7, #40	; 0x28
 8006d44:	4444      	add	r4, r8
 8006d46:	f1b9 0f00 	cmp.w	r9, #0
 8006d4a:	d021      	beq.n	8006d90 <_tzset_unlocked_r+0x26c>
 8006d4c:	6868      	ldr	r0, [r5, #4]
 8006d4e:	f7ff fe39 	bl	80069c4 <__tzcalc_limits>
 8006d52:	4b29      	ldr	r3, [pc, #164]	; (8006df8 <_tzset_unlocked_r+0x2d4>)
 8006d54:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	4a28      	ldr	r2, [pc, #160]	; (8006e00 <_tzset_unlocked_r+0x2dc>)
 8006d5e:	bf18      	it	ne
 8006d60:	2301      	movne	r3, #1
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	e6f8      	b.n	8006b58 <_tzset_unlocked_r+0x34>
 8006d66:	2b2b      	cmp	r3, #43	; 0x2b
 8006d68:	bf08      	it	eq
 8006d6a:	3401      	addeq	r4, #1
 8006d6c:	2701      	movs	r7, #1
 8006d6e:	e772      	b.n	8006c56 <_tzset_unlocked_r+0x132>
 8006d70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006d74:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006d78:	213c      	movs	r1, #60	; 0x3c
 8006d7a:	fb01 2203 	mla	r2, r1, r3, r2
 8006d7e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006d82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006d86:	fb01 2303 	mla	r3, r1, r3, r2
 8006d8a:	435f      	muls	r7, r3
 8006d8c:	652f      	str	r7, [r5, #80]	; 0x50
 8006d8e:	e77a      	b.n	8006c86 <_tzset_unlocked_r+0x162>
 8006d90:	f04f 0901 	mov.w	r9, #1
 8006d94:	e77c      	b.n	8006c90 <_tzset_unlocked_r+0x16c>
 8006d96:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8006d9a:	bf06      	itte	eq
 8006d9c:	3401      	addeq	r4, #1
 8006d9e:	4643      	moveq	r3, r8
 8006da0:	2344      	movne	r3, #68	; 0x44
 8006da2:	220a      	movs	r2, #10
 8006da4:	a90b      	add	r1, sp, #44	; 0x2c
 8006da6:	4620      	mov	r0, r4
 8006da8:	9305      	str	r3, [sp, #20]
 8006daa:	f7ff fdf5 	bl	8006998 <strtoul>
 8006dae:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8006db2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8006db6:	45a0      	cmp	r8, r4
 8006db8:	9b05      	ldr	r3, [sp, #20]
 8006dba:	d114      	bne.n	8006de6 <_tzset_unlocked_r+0x2c2>
 8006dbc:	234d      	movs	r3, #77	; 0x4d
 8006dbe:	f1b9 0f00 	cmp.w	r9, #0
 8006dc2:	d107      	bne.n	8006dd4 <_tzset_unlocked_r+0x2b0>
 8006dc4:	722b      	strb	r3, [r5, #8]
 8006dc6:	2103      	movs	r1, #3
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8006dce:	f8c5 9014 	str.w	r9, [r5, #20]
 8006dd2:	e790      	b.n	8006cf6 <_tzset_unlocked_r+0x1d2>
 8006dd4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8006dd8:	220b      	movs	r2, #11
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8006de0:	2300      	movs	r3, #0
 8006de2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006de4:	e787      	b.n	8006cf6 <_tzset_unlocked_r+0x1d2>
 8006de6:	b280      	uxth	r0, r0
 8006de8:	723b      	strb	r3, [r7, #8]
 8006dea:	6178      	str	r0, [r7, #20]
 8006dec:	e783      	b.n	8006cf6 <_tzset_unlocked_r+0x1d2>
 8006dee:	bf00      	nop
 8006df0:	08009d5b 	.word	0x08009d5b
 8006df4:	20000390 	.word	0x20000390
 8006df8:	20000398 	.word	0x20000398
 8006dfc:	08009d5e 	.word	0x08009d5e
 8006e00:	20000394 	.word	0x20000394
 8006e04:	20000078 	.word	0x20000078
 8006e08:	20000383 	.word	0x20000383
 8006e0c:	08009d62 	.word	0x08009d62
 8006e10:	08009d85 	.word	0x08009d85
 8006e14:	08009d71 	.word	0x08009d71
 8006e18:	08009d84 	.word	0x08009d84
 8006e1c:	20000378 	.word	0x20000378

08006e20 <__swbuf_r>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	460e      	mov	r6, r1
 8006e24:	4614      	mov	r4, r2
 8006e26:	4605      	mov	r5, r0
 8006e28:	b118      	cbz	r0, 8006e32 <__swbuf_r+0x12>
 8006e2a:	6983      	ldr	r3, [r0, #24]
 8006e2c:	b90b      	cbnz	r3, 8006e32 <__swbuf_r+0x12>
 8006e2e:	f001 f803 	bl	8007e38 <__sinit>
 8006e32:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <__swbuf_r+0x98>)
 8006e34:	429c      	cmp	r4, r3
 8006e36:	d12a      	bne.n	8006e8e <__swbuf_r+0x6e>
 8006e38:	686c      	ldr	r4, [r5, #4]
 8006e3a:	69a3      	ldr	r3, [r4, #24]
 8006e3c:	60a3      	str	r3, [r4, #8]
 8006e3e:	89a3      	ldrh	r3, [r4, #12]
 8006e40:	071a      	lsls	r2, r3, #28
 8006e42:	d52e      	bpl.n	8006ea2 <__swbuf_r+0x82>
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	b363      	cbz	r3, 8006ea2 <__swbuf_r+0x82>
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	1ac0      	subs	r0, r0, r3
 8006e4e:	6963      	ldr	r3, [r4, #20]
 8006e50:	b2f6      	uxtb	r6, r6
 8006e52:	4283      	cmp	r3, r0
 8006e54:	4637      	mov	r7, r6
 8006e56:	dc04      	bgt.n	8006e62 <__swbuf_r+0x42>
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f000 ff82 	bl	8007d64 <_fflush_r>
 8006e60:	bb28      	cbnz	r0, 8006eae <__swbuf_r+0x8e>
 8006e62:	68a3      	ldr	r3, [r4, #8]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	60a3      	str	r3, [r4, #8]
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	6022      	str	r2, [r4, #0]
 8006e6e:	701e      	strb	r6, [r3, #0]
 8006e70:	6963      	ldr	r3, [r4, #20]
 8006e72:	3001      	adds	r0, #1
 8006e74:	4283      	cmp	r3, r0
 8006e76:	d004      	beq.n	8006e82 <__swbuf_r+0x62>
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	07db      	lsls	r3, r3, #31
 8006e7c:	d519      	bpl.n	8006eb2 <__swbuf_r+0x92>
 8006e7e:	2e0a      	cmp	r6, #10
 8006e80:	d117      	bne.n	8006eb2 <__swbuf_r+0x92>
 8006e82:	4621      	mov	r1, r4
 8006e84:	4628      	mov	r0, r5
 8006e86:	f000 ff6d 	bl	8007d64 <_fflush_r>
 8006e8a:	b190      	cbz	r0, 8006eb2 <__swbuf_r+0x92>
 8006e8c:	e00f      	b.n	8006eae <__swbuf_r+0x8e>
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <__swbuf_r+0x9c>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d101      	bne.n	8006e98 <__swbuf_r+0x78>
 8006e94:	68ac      	ldr	r4, [r5, #8]
 8006e96:	e7d0      	b.n	8006e3a <__swbuf_r+0x1a>
 8006e98:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <__swbuf_r+0xa0>)
 8006e9a:	429c      	cmp	r4, r3
 8006e9c:	bf08      	it	eq
 8006e9e:	68ec      	ldreq	r4, [r5, #12]
 8006ea0:	e7cb      	b.n	8006e3a <__swbuf_r+0x1a>
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f000 f80d 	bl	8006ec4 <__swsetup_r>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d0cc      	beq.n	8006e48 <__swbuf_r+0x28>
 8006eae:	f04f 37ff 	mov.w	r7, #4294967295
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	08009dc4 	.word	0x08009dc4
 8006ebc:	08009de4 	.word	0x08009de4
 8006ec0:	08009da4 	.word	0x08009da4

08006ec4 <__swsetup_r>:
 8006ec4:	4b32      	ldr	r3, [pc, #200]	; (8006f90 <__swsetup_r+0xcc>)
 8006ec6:	b570      	push	{r4, r5, r6, lr}
 8006ec8:	681d      	ldr	r5, [r3, #0]
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460c      	mov	r4, r1
 8006ece:	b125      	cbz	r5, 8006eda <__swsetup_r+0x16>
 8006ed0:	69ab      	ldr	r3, [r5, #24]
 8006ed2:	b913      	cbnz	r3, 8006eda <__swsetup_r+0x16>
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f000 ffaf 	bl	8007e38 <__sinit>
 8006eda:	4b2e      	ldr	r3, [pc, #184]	; (8006f94 <__swsetup_r+0xd0>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	d10f      	bne.n	8006f00 <__swsetup_r+0x3c>
 8006ee0:	686c      	ldr	r4, [r5, #4]
 8006ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	0715      	lsls	r5, r2, #28
 8006eea:	d42c      	bmi.n	8006f46 <__swsetup_r+0x82>
 8006eec:	06d0      	lsls	r0, r2, #27
 8006eee:	d411      	bmi.n	8006f14 <__swsetup_r+0x50>
 8006ef0:	2209      	movs	r2, #9
 8006ef2:	6032      	str	r2, [r6, #0]
 8006ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295
 8006efe:	e03e      	b.n	8006f7e <__swsetup_r+0xba>
 8006f00:	4b25      	ldr	r3, [pc, #148]	; (8006f98 <__swsetup_r+0xd4>)
 8006f02:	429c      	cmp	r4, r3
 8006f04:	d101      	bne.n	8006f0a <__swsetup_r+0x46>
 8006f06:	68ac      	ldr	r4, [r5, #8]
 8006f08:	e7eb      	b.n	8006ee2 <__swsetup_r+0x1e>
 8006f0a:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <__swsetup_r+0xd8>)
 8006f0c:	429c      	cmp	r4, r3
 8006f0e:	bf08      	it	eq
 8006f10:	68ec      	ldreq	r4, [r5, #12]
 8006f12:	e7e6      	b.n	8006ee2 <__swsetup_r+0x1e>
 8006f14:	0751      	lsls	r1, r2, #29
 8006f16:	d512      	bpl.n	8006f3e <__swsetup_r+0x7a>
 8006f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f1a:	b141      	cbz	r1, 8006f2e <__swsetup_r+0x6a>
 8006f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f20:	4299      	cmp	r1, r3
 8006f22:	d002      	beq.n	8006f2a <__swsetup_r+0x66>
 8006f24:	4630      	mov	r0, r6
 8006f26:	f7fe f94f 	bl	80051c8 <_free_r>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	2300      	movs	r3, #0
 8006f38:	6063      	str	r3, [r4, #4]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f043 0308 	orr.w	r3, r3, #8
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	b94b      	cbnz	r3, 8006f5e <__swsetup_r+0x9a>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f54:	d003      	beq.n	8006f5e <__swsetup_r+0x9a>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f001 f935 	bl	80081c8 <__smakebuf_r>
 8006f5e:	89a2      	ldrh	r2, [r4, #12]
 8006f60:	f012 0301 	ands.w	r3, r2, #1
 8006f64:	d00c      	beq.n	8006f80 <__swsetup_r+0xbc>
 8006f66:	2300      	movs	r3, #0
 8006f68:	60a3      	str	r3, [r4, #8]
 8006f6a:	6963      	ldr	r3, [r4, #20]
 8006f6c:	425b      	negs	r3, r3
 8006f6e:	61a3      	str	r3, [r4, #24]
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	b953      	cbnz	r3, 8006f8a <__swsetup_r+0xc6>
 8006f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006f7c:	d1ba      	bne.n	8006ef4 <__swsetup_r+0x30>
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	0792      	lsls	r2, r2, #30
 8006f82:	bf58      	it	pl
 8006f84:	6963      	ldrpl	r3, [r4, #20]
 8006f86:	60a3      	str	r3, [r4, #8]
 8006f88:	e7f2      	b.n	8006f70 <__swsetup_r+0xac>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e7f7      	b.n	8006f7e <__swsetup_r+0xba>
 8006f8e:	bf00      	nop
 8006f90:	20000014 	.word	0x20000014
 8006f94:	08009dc4 	.word	0x08009dc4
 8006f98:	08009de4 	.word	0x08009de4
 8006f9c:	08009da4 	.word	0x08009da4

08006fa0 <abs>:
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	bfb8      	it	lt
 8006fa4:	4240      	neglt	r0, r0
 8006fa6:	4770      	bx	lr

08006fa8 <div>:
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	b510      	push	{r4, lr}
 8006fac:	fb91 f4f2 	sdiv	r4, r1, r2
 8006fb0:	fb02 1314 	mls	r3, r2, r4, r1
 8006fb4:	db06      	blt.n	8006fc4 <div+0x1c>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	da01      	bge.n	8006fbe <div+0x16>
 8006fba:	3401      	adds	r4, #1
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	e9c0 4300 	strd	r4, r3, [r0]
 8006fc2:	bd10      	pop	{r4, pc}
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bfc4      	itt	gt
 8006fc8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8006fcc:	189b      	addgt	r3, r3, r2
 8006fce:	e7f6      	b.n	8006fbe <div+0x16>

08006fd0 <quorem>:
 8006fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	6903      	ldr	r3, [r0, #16]
 8006fd6:	690c      	ldr	r4, [r1, #16]
 8006fd8:	42a3      	cmp	r3, r4
 8006fda:	4680      	mov	r8, r0
 8006fdc:	f2c0 8082 	blt.w	80070e4 <quorem+0x114>
 8006fe0:	3c01      	subs	r4, #1
 8006fe2:	f101 0714 	add.w	r7, r1, #20
 8006fe6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006fea:	f100 0614 	add.w	r6, r0, #20
 8006fee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006ff2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006ff6:	eb06 030c 	add.w	r3, r6, ip
 8006ffa:	3501      	adds	r5, #1
 8006ffc:	eb07 090c 	add.w	r9, r7, ip
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	fbb0 f5f5 	udiv	r5, r0, r5
 8007006:	b395      	cbz	r5, 800706e <quorem+0x9e>
 8007008:	f04f 0a00 	mov.w	sl, #0
 800700c:	4638      	mov	r0, r7
 800700e:	46b6      	mov	lr, r6
 8007010:	46d3      	mov	fp, sl
 8007012:	f850 2b04 	ldr.w	r2, [r0], #4
 8007016:	b293      	uxth	r3, r2
 8007018:	fb05 a303 	mla	r3, r5, r3, sl
 800701c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007020:	b29b      	uxth	r3, r3
 8007022:	ebab 0303 	sub.w	r3, fp, r3
 8007026:	0c12      	lsrs	r2, r2, #16
 8007028:	f8de b000 	ldr.w	fp, [lr]
 800702c:	fb05 a202 	mla	r2, r5, r2, sl
 8007030:	fa13 f38b 	uxtah	r3, r3, fp
 8007034:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007038:	fa1f fb82 	uxth.w	fp, r2
 800703c:	f8de 2000 	ldr.w	r2, [lr]
 8007040:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007044:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007048:	b29b      	uxth	r3, r3
 800704a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800704e:	4581      	cmp	r9, r0
 8007050:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007054:	f84e 3b04 	str.w	r3, [lr], #4
 8007058:	d2db      	bcs.n	8007012 <quorem+0x42>
 800705a:	f856 300c 	ldr.w	r3, [r6, ip]
 800705e:	b933      	cbnz	r3, 800706e <quorem+0x9e>
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	3b04      	subs	r3, #4
 8007064:	429e      	cmp	r6, r3
 8007066:	461a      	mov	r2, r3
 8007068:	d330      	bcc.n	80070cc <quorem+0xfc>
 800706a:	f8c8 4010 	str.w	r4, [r8, #16]
 800706e:	4640      	mov	r0, r8
 8007070:	f001 fb1e 	bl	80086b0 <__mcmp>
 8007074:	2800      	cmp	r0, #0
 8007076:	db25      	blt.n	80070c4 <quorem+0xf4>
 8007078:	3501      	adds	r5, #1
 800707a:	4630      	mov	r0, r6
 800707c:	f04f 0c00 	mov.w	ip, #0
 8007080:	f857 2b04 	ldr.w	r2, [r7], #4
 8007084:	f8d0 e000 	ldr.w	lr, [r0]
 8007088:	b293      	uxth	r3, r2
 800708a:	ebac 0303 	sub.w	r3, ip, r3
 800708e:	0c12      	lsrs	r2, r2, #16
 8007090:	fa13 f38e 	uxtah	r3, r3, lr
 8007094:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007098:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800709c:	b29b      	uxth	r3, r3
 800709e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a2:	45b9      	cmp	r9, r7
 80070a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070a8:	f840 3b04 	str.w	r3, [r0], #4
 80070ac:	d2e8      	bcs.n	8007080 <quorem+0xb0>
 80070ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80070b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80070b6:	b92a      	cbnz	r2, 80070c4 <quorem+0xf4>
 80070b8:	3b04      	subs	r3, #4
 80070ba:	429e      	cmp	r6, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	d30b      	bcc.n	80070d8 <quorem+0x108>
 80070c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80070c4:	4628      	mov	r0, r5
 80070c6:	b003      	add	sp, #12
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	3b04      	subs	r3, #4
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	d1ca      	bne.n	800706a <quorem+0x9a>
 80070d4:	3c01      	subs	r4, #1
 80070d6:	e7c5      	b.n	8007064 <quorem+0x94>
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	3b04      	subs	r3, #4
 80070dc:	2a00      	cmp	r2, #0
 80070de:	d1ef      	bne.n	80070c0 <quorem+0xf0>
 80070e0:	3c01      	subs	r4, #1
 80070e2:	e7ea      	b.n	80070ba <quorem+0xea>
 80070e4:	2000      	movs	r0, #0
 80070e6:	e7ee      	b.n	80070c6 <quorem+0xf6>

080070e8 <_dtoa_r>:
 80070e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ec:	ec57 6b10 	vmov	r6, r7, d0
 80070f0:	b097      	sub	sp, #92	; 0x5c
 80070f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070f4:	9106      	str	r1, [sp, #24]
 80070f6:	4604      	mov	r4, r0
 80070f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80070fa:	9312      	str	r3, [sp, #72]	; 0x48
 80070fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007100:	e9cd 6700 	strd	r6, r7, [sp]
 8007104:	b93d      	cbnz	r5, 8007116 <_dtoa_r+0x2e>
 8007106:	2010      	movs	r0, #16
 8007108:	f7fd fda2 	bl	8004c50 <malloc>
 800710c:	6260      	str	r0, [r4, #36]	; 0x24
 800710e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007112:	6005      	str	r5, [r0, #0]
 8007114:	60c5      	str	r5, [r0, #12]
 8007116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	b151      	cbz	r1, 8007132 <_dtoa_r+0x4a>
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	604a      	str	r2, [r1, #4]
 8007120:	2301      	movs	r3, #1
 8007122:	4093      	lsls	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
 8007126:	4620      	mov	r0, r4
 8007128:	f001 f8e1 	bl	80082ee <_Bfree>
 800712c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	1e3b      	subs	r3, r7, #0
 8007134:	bfbb      	ittet	lt
 8007136:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800713a:	9301      	strlt	r3, [sp, #4]
 800713c:	2300      	movge	r3, #0
 800713e:	2201      	movlt	r2, #1
 8007140:	bfac      	ite	ge
 8007142:	f8c8 3000 	strge.w	r3, [r8]
 8007146:	f8c8 2000 	strlt.w	r2, [r8]
 800714a:	4baf      	ldr	r3, [pc, #700]	; (8007408 <_dtoa_r+0x320>)
 800714c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007150:	ea33 0308 	bics.w	r3, r3, r8
 8007154:	d114      	bne.n	8007180 <_dtoa_r+0x98>
 8007156:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007158:	f242 730f 	movw	r3, #9999	; 0x270f
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	9b00      	ldr	r3, [sp, #0]
 8007160:	b923      	cbnz	r3, 800716c <_dtoa_r+0x84>
 8007162:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007166:	2800      	cmp	r0, #0
 8007168:	f000 8542 	beq.w	8007bf0 <_dtoa_r+0xb08>
 800716c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800716e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800741c <_dtoa_r+0x334>
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 8544 	beq.w	8007c00 <_dtoa_r+0xb18>
 8007178:	f10b 0303 	add.w	r3, fp, #3
 800717c:	f000 bd3e 	b.w	8007bfc <_dtoa_r+0xb14>
 8007180:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007184:	2200      	movs	r2, #0
 8007186:	2300      	movs	r3, #0
 8007188:	4630      	mov	r0, r6
 800718a:	4639      	mov	r1, r7
 800718c:	f7f9 fcac 	bl	8000ae8 <__aeabi_dcmpeq>
 8007190:	4681      	mov	r9, r0
 8007192:	b168      	cbz	r0, 80071b0 <_dtoa_r+0xc8>
 8007194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007196:	2301      	movs	r3, #1
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8524 	beq.w	8007bea <_dtoa_r+0xb02>
 80071a2:	4b9a      	ldr	r3, [pc, #616]	; (800740c <_dtoa_r+0x324>)
 80071a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	f000 bd28 	b.w	8007c00 <_dtoa_r+0xb18>
 80071b0:	aa14      	add	r2, sp, #80	; 0x50
 80071b2:	a915      	add	r1, sp, #84	; 0x54
 80071b4:	ec47 6b10 	vmov	d0, r6, r7
 80071b8:	4620      	mov	r0, r4
 80071ba:	f001 faf0 	bl	800879e <__d2b>
 80071be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80071c2:	9004      	str	r0, [sp, #16]
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	d07c      	beq.n	80072c2 <_dtoa_r+0x1da>
 80071c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80071d0:	46b2      	mov	sl, r6
 80071d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80071d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80071de:	2200      	movs	r2, #0
 80071e0:	4b8b      	ldr	r3, [pc, #556]	; (8007410 <_dtoa_r+0x328>)
 80071e2:	4650      	mov	r0, sl
 80071e4:	4659      	mov	r1, fp
 80071e6:	f7f9 f85f 	bl	80002a8 <__aeabi_dsub>
 80071ea:	a381      	add	r3, pc, #516	; (adr r3, 80073f0 <_dtoa_r+0x308>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f9 fa12 	bl	8000618 <__aeabi_dmul>
 80071f4:	a380      	add	r3, pc, #512	; (adr r3, 80073f8 <_dtoa_r+0x310>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f7f9 f857 	bl	80002ac <__adddf3>
 80071fe:	4606      	mov	r6, r0
 8007200:	4628      	mov	r0, r5
 8007202:	460f      	mov	r7, r1
 8007204:	f7f9 f99e 	bl	8000544 <__aeabi_i2d>
 8007208:	a37d      	add	r3, pc, #500	; (adr r3, 8007400 <_dtoa_r+0x318>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f7f9 fa03 	bl	8000618 <__aeabi_dmul>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4630      	mov	r0, r6
 8007218:	4639      	mov	r1, r7
 800721a:	f7f9 f847 	bl	80002ac <__adddf3>
 800721e:	4606      	mov	r6, r0
 8007220:	460f      	mov	r7, r1
 8007222:	f7f9 fca9 	bl	8000b78 <__aeabi_d2iz>
 8007226:	2200      	movs	r2, #0
 8007228:	4682      	mov	sl, r0
 800722a:	2300      	movs	r3, #0
 800722c:	4630      	mov	r0, r6
 800722e:	4639      	mov	r1, r7
 8007230:	f7f9 fc64 	bl	8000afc <__aeabi_dcmplt>
 8007234:	b148      	cbz	r0, 800724a <_dtoa_r+0x162>
 8007236:	4650      	mov	r0, sl
 8007238:	f7f9 f984 	bl	8000544 <__aeabi_i2d>
 800723c:	4632      	mov	r2, r6
 800723e:	463b      	mov	r3, r7
 8007240:	f7f9 fc52 	bl	8000ae8 <__aeabi_dcmpeq>
 8007244:	b908      	cbnz	r0, 800724a <_dtoa_r+0x162>
 8007246:	f10a 3aff 	add.w	sl, sl, #4294967295
 800724a:	f1ba 0f16 	cmp.w	sl, #22
 800724e:	d859      	bhi.n	8007304 <_dtoa_r+0x21c>
 8007250:	4970      	ldr	r1, [pc, #448]	; (8007414 <_dtoa_r+0x32c>)
 8007252:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007256:	e9dd 2300 	ldrd	r2, r3, [sp]
 800725a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800725e:	f7f9 fc6b 	bl	8000b38 <__aeabi_dcmpgt>
 8007262:	2800      	cmp	r0, #0
 8007264:	d050      	beq.n	8007308 <_dtoa_r+0x220>
 8007266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800726a:	2300      	movs	r3, #0
 800726c:	930f      	str	r3, [sp, #60]	; 0x3c
 800726e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007270:	1b5d      	subs	r5, r3, r5
 8007272:	f1b5 0801 	subs.w	r8, r5, #1
 8007276:	bf49      	itett	mi
 8007278:	f1c5 0301 	rsbmi	r3, r5, #1
 800727c:	2300      	movpl	r3, #0
 800727e:	9305      	strmi	r3, [sp, #20]
 8007280:	f04f 0800 	movmi.w	r8, #0
 8007284:	bf58      	it	pl
 8007286:	9305      	strpl	r3, [sp, #20]
 8007288:	f1ba 0f00 	cmp.w	sl, #0
 800728c:	db3e      	blt.n	800730c <_dtoa_r+0x224>
 800728e:	2300      	movs	r3, #0
 8007290:	44d0      	add	r8, sl
 8007292:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007296:	9307      	str	r3, [sp, #28]
 8007298:	9b06      	ldr	r3, [sp, #24]
 800729a:	2b09      	cmp	r3, #9
 800729c:	f200 8090 	bhi.w	80073c0 <_dtoa_r+0x2d8>
 80072a0:	2b05      	cmp	r3, #5
 80072a2:	bfc4      	itt	gt
 80072a4:	3b04      	subgt	r3, #4
 80072a6:	9306      	strgt	r3, [sp, #24]
 80072a8:	9b06      	ldr	r3, [sp, #24]
 80072aa:	f1a3 0302 	sub.w	r3, r3, #2
 80072ae:	bfcc      	ite	gt
 80072b0:	2500      	movgt	r5, #0
 80072b2:	2501      	movle	r5, #1
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	f200 808f 	bhi.w	80073d8 <_dtoa_r+0x2f0>
 80072ba:	e8df f003 	tbb	[pc, r3]
 80072be:	7f7d      	.short	0x7f7d
 80072c0:	7131      	.short	0x7131
 80072c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80072c6:	441d      	add	r5, r3
 80072c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80072cc:	2820      	cmp	r0, #32
 80072ce:	dd13      	ble.n	80072f8 <_dtoa_r+0x210>
 80072d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80072d4:	9b00      	ldr	r3, [sp, #0]
 80072d6:	fa08 f800 	lsl.w	r8, r8, r0
 80072da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80072de:	fa23 f000 	lsr.w	r0, r3, r0
 80072e2:	ea48 0000 	orr.w	r0, r8, r0
 80072e6:	f7f9 f91d 	bl	8000524 <__aeabi_ui2d>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4682      	mov	sl, r0
 80072ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80072f2:	3d01      	subs	r5, #1
 80072f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80072f6:	e772      	b.n	80071de <_dtoa_r+0xf6>
 80072f8:	9b00      	ldr	r3, [sp, #0]
 80072fa:	f1c0 0020 	rsb	r0, r0, #32
 80072fe:	fa03 f000 	lsl.w	r0, r3, r0
 8007302:	e7f0      	b.n	80072e6 <_dtoa_r+0x1fe>
 8007304:	2301      	movs	r3, #1
 8007306:	e7b1      	b.n	800726c <_dtoa_r+0x184>
 8007308:	900f      	str	r0, [sp, #60]	; 0x3c
 800730a:	e7b0      	b.n	800726e <_dtoa_r+0x186>
 800730c:	9b05      	ldr	r3, [sp, #20]
 800730e:	eba3 030a 	sub.w	r3, r3, sl
 8007312:	9305      	str	r3, [sp, #20]
 8007314:	f1ca 0300 	rsb	r3, sl, #0
 8007318:	9307      	str	r3, [sp, #28]
 800731a:	2300      	movs	r3, #0
 800731c:	930e      	str	r3, [sp, #56]	; 0x38
 800731e:	e7bb      	b.n	8007298 <_dtoa_r+0x1b0>
 8007320:	2301      	movs	r3, #1
 8007322:	930a      	str	r3, [sp, #40]	; 0x28
 8007324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007326:	2b00      	cmp	r3, #0
 8007328:	dd59      	ble.n	80073de <_dtoa_r+0x2f6>
 800732a:	9302      	str	r3, [sp, #8]
 800732c:	4699      	mov	r9, r3
 800732e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007330:	2200      	movs	r2, #0
 8007332:	6072      	str	r2, [r6, #4]
 8007334:	2204      	movs	r2, #4
 8007336:	f102 0014 	add.w	r0, r2, #20
 800733a:	4298      	cmp	r0, r3
 800733c:	6871      	ldr	r1, [r6, #4]
 800733e:	d953      	bls.n	80073e8 <_dtoa_r+0x300>
 8007340:	4620      	mov	r0, r4
 8007342:	f000 ffa0 	bl	8008286 <_Balloc>
 8007346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007348:	6030      	str	r0, [r6, #0]
 800734a:	f1b9 0f0e 	cmp.w	r9, #14
 800734e:	f8d3 b000 	ldr.w	fp, [r3]
 8007352:	f200 80e6 	bhi.w	8007522 <_dtoa_r+0x43a>
 8007356:	2d00      	cmp	r5, #0
 8007358:	f000 80e3 	beq.w	8007522 <_dtoa_r+0x43a>
 800735c:	ed9d 7b00 	vldr	d7, [sp]
 8007360:	f1ba 0f00 	cmp.w	sl, #0
 8007364:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007368:	dd74      	ble.n	8007454 <_dtoa_r+0x36c>
 800736a:	4a2a      	ldr	r2, [pc, #168]	; (8007414 <_dtoa_r+0x32c>)
 800736c:	f00a 030f 	and.w	r3, sl, #15
 8007370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007374:	ed93 7b00 	vldr	d7, [r3]
 8007378:	ea4f 162a 	mov.w	r6, sl, asr #4
 800737c:	06f0      	lsls	r0, r6, #27
 800737e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007382:	d565      	bpl.n	8007450 <_dtoa_r+0x368>
 8007384:	4b24      	ldr	r3, [pc, #144]	; (8007418 <_dtoa_r+0x330>)
 8007386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800738a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800738e:	f7f9 fa6d 	bl	800086c <__aeabi_ddiv>
 8007392:	e9cd 0100 	strd	r0, r1, [sp]
 8007396:	f006 060f 	and.w	r6, r6, #15
 800739a:	2503      	movs	r5, #3
 800739c:	4f1e      	ldr	r7, [pc, #120]	; (8007418 <_dtoa_r+0x330>)
 800739e:	e04c      	b.n	800743a <_dtoa_r+0x352>
 80073a0:	2301      	movs	r3, #1
 80073a2:	930a      	str	r3, [sp, #40]	; 0x28
 80073a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a6:	4453      	add	r3, sl
 80073a8:	f103 0901 	add.w	r9, r3, #1
 80073ac:	9302      	str	r3, [sp, #8]
 80073ae:	464b      	mov	r3, r9
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	bfb8      	it	lt
 80073b4:	2301      	movlt	r3, #1
 80073b6:	e7ba      	b.n	800732e <_dtoa_r+0x246>
 80073b8:	2300      	movs	r3, #0
 80073ba:	e7b2      	b.n	8007322 <_dtoa_r+0x23a>
 80073bc:	2300      	movs	r3, #0
 80073be:	e7f0      	b.n	80073a2 <_dtoa_r+0x2ba>
 80073c0:	2501      	movs	r5, #1
 80073c2:	2300      	movs	r3, #0
 80073c4:	9306      	str	r3, [sp, #24]
 80073c6:	950a      	str	r5, [sp, #40]	; 0x28
 80073c8:	f04f 33ff 	mov.w	r3, #4294967295
 80073cc:	9302      	str	r3, [sp, #8]
 80073ce:	4699      	mov	r9, r3
 80073d0:	2200      	movs	r2, #0
 80073d2:	2312      	movs	r3, #18
 80073d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80073d6:	e7aa      	b.n	800732e <_dtoa_r+0x246>
 80073d8:	2301      	movs	r3, #1
 80073da:	930a      	str	r3, [sp, #40]	; 0x28
 80073dc:	e7f4      	b.n	80073c8 <_dtoa_r+0x2e0>
 80073de:	2301      	movs	r3, #1
 80073e0:	9302      	str	r3, [sp, #8]
 80073e2:	4699      	mov	r9, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	e7f5      	b.n	80073d4 <_dtoa_r+0x2ec>
 80073e8:	3101      	adds	r1, #1
 80073ea:	6071      	str	r1, [r6, #4]
 80073ec:	0052      	lsls	r2, r2, #1
 80073ee:	e7a2      	b.n	8007336 <_dtoa_r+0x24e>
 80073f0:	636f4361 	.word	0x636f4361
 80073f4:	3fd287a7 	.word	0x3fd287a7
 80073f8:	8b60c8b3 	.word	0x8b60c8b3
 80073fc:	3fc68a28 	.word	0x3fc68a28
 8007400:	509f79fb 	.word	0x509f79fb
 8007404:	3fd34413 	.word	0x3fd34413
 8007408:	7ff00000 	.word	0x7ff00000
 800740c:	0800a035 	.word	0x0800a035
 8007410:	3ff80000 	.word	0x3ff80000
 8007414:	08009e38 	.word	0x08009e38
 8007418:	08009e10 	.word	0x08009e10
 800741c:	08009da0 	.word	0x08009da0
 8007420:	07f1      	lsls	r1, r6, #31
 8007422:	d508      	bpl.n	8007436 <_dtoa_r+0x34e>
 8007424:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800742c:	f7f9 f8f4 	bl	8000618 <__aeabi_dmul>
 8007430:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007434:	3501      	adds	r5, #1
 8007436:	1076      	asrs	r6, r6, #1
 8007438:	3708      	adds	r7, #8
 800743a:	2e00      	cmp	r6, #0
 800743c:	d1f0      	bne.n	8007420 <_dtoa_r+0x338>
 800743e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007442:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007446:	f7f9 fa11 	bl	800086c <__aeabi_ddiv>
 800744a:	e9cd 0100 	strd	r0, r1, [sp]
 800744e:	e01a      	b.n	8007486 <_dtoa_r+0x39e>
 8007450:	2502      	movs	r5, #2
 8007452:	e7a3      	b.n	800739c <_dtoa_r+0x2b4>
 8007454:	f000 80a0 	beq.w	8007598 <_dtoa_r+0x4b0>
 8007458:	f1ca 0600 	rsb	r6, sl, #0
 800745c:	4b9f      	ldr	r3, [pc, #636]	; (80076dc <_dtoa_r+0x5f4>)
 800745e:	4fa0      	ldr	r7, [pc, #640]	; (80076e0 <_dtoa_r+0x5f8>)
 8007460:	f006 020f 	and.w	r2, r6, #15
 8007464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007470:	f7f9 f8d2 	bl	8000618 <__aeabi_dmul>
 8007474:	e9cd 0100 	strd	r0, r1, [sp]
 8007478:	1136      	asrs	r6, r6, #4
 800747a:	2300      	movs	r3, #0
 800747c:	2502      	movs	r5, #2
 800747e:	2e00      	cmp	r6, #0
 8007480:	d17f      	bne.n	8007582 <_dtoa_r+0x49a>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e1      	bne.n	800744a <_dtoa_r+0x362>
 8007486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 8087 	beq.w	800759c <_dtoa_r+0x4b4>
 800748e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007492:	2200      	movs	r2, #0
 8007494:	4b93      	ldr	r3, [pc, #588]	; (80076e4 <_dtoa_r+0x5fc>)
 8007496:	4630      	mov	r0, r6
 8007498:	4639      	mov	r1, r7
 800749a:	f7f9 fb2f 	bl	8000afc <__aeabi_dcmplt>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d07c      	beq.n	800759c <_dtoa_r+0x4b4>
 80074a2:	f1b9 0f00 	cmp.w	r9, #0
 80074a6:	d079      	beq.n	800759c <_dtoa_r+0x4b4>
 80074a8:	9b02      	ldr	r3, [sp, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	dd35      	ble.n	800751a <_dtoa_r+0x432>
 80074ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80074b2:	9308      	str	r3, [sp, #32]
 80074b4:	4639      	mov	r1, r7
 80074b6:	2200      	movs	r2, #0
 80074b8:	4b8b      	ldr	r3, [pc, #556]	; (80076e8 <_dtoa_r+0x600>)
 80074ba:	4630      	mov	r0, r6
 80074bc:	f7f9 f8ac 	bl	8000618 <__aeabi_dmul>
 80074c0:	e9cd 0100 	strd	r0, r1, [sp]
 80074c4:	9f02      	ldr	r7, [sp, #8]
 80074c6:	3501      	adds	r5, #1
 80074c8:	4628      	mov	r0, r5
 80074ca:	f7f9 f83b 	bl	8000544 <__aeabi_i2d>
 80074ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074d2:	f7f9 f8a1 	bl	8000618 <__aeabi_dmul>
 80074d6:	2200      	movs	r2, #0
 80074d8:	4b84      	ldr	r3, [pc, #528]	; (80076ec <_dtoa_r+0x604>)
 80074da:	f7f8 fee7 	bl	80002ac <__adddf3>
 80074de:	4605      	mov	r5, r0
 80074e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80074e4:	2f00      	cmp	r7, #0
 80074e6:	d15d      	bne.n	80075a4 <_dtoa_r+0x4bc>
 80074e8:	2200      	movs	r2, #0
 80074ea:	4b81      	ldr	r3, [pc, #516]	; (80076f0 <_dtoa_r+0x608>)
 80074ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074f0:	f7f8 feda 	bl	80002a8 <__aeabi_dsub>
 80074f4:	462a      	mov	r2, r5
 80074f6:	4633      	mov	r3, r6
 80074f8:	e9cd 0100 	strd	r0, r1, [sp]
 80074fc:	f7f9 fb1c 	bl	8000b38 <__aeabi_dcmpgt>
 8007500:	2800      	cmp	r0, #0
 8007502:	f040 8288 	bne.w	8007a16 <_dtoa_r+0x92e>
 8007506:	462a      	mov	r2, r5
 8007508:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800750c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007510:	f7f9 faf4 	bl	8000afc <__aeabi_dcmplt>
 8007514:	2800      	cmp	r0, #0
 8007516:	f040 827c 	bne.w	8007a12 <_dtoa_r+0x92a>
 800751a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800751e:	e9cd 2300 	strd	r2, r3, [sp]
 8007522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007524:	2b00      	cmp	r3, #0
 8007526:	f2c0 8150 	blt.w	80077ca <_dtoa_r+0x6e2>
 800752a:	f1ba 0f0e 	cmp.w	sl, #14
 800752e:	f300 814c 	bgt.w	80077ca <_dtoa_r+0x6e2>
 8007532:	4b6a      	ldr	r3, [pc, #424]	; (80076dc <_dtoa_r+0x5f4>)
 8007534:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007538:	ed93 7b00 	vldr	d7, [r3]
 800753c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800753e:	2b00      	cmp	r3, #0
 8007540:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007544:	f280 80d8 	bge.w	80076f8 <_dtoa_r+0x610>
 8007548:	f1b9 0f00 	cmp.w	r9, #0
 800754c:	f300 80d4 	bgt.w	80076f8 <_dtoa_r+0x610>
 8007550:	f040 825e 	bne.w	8007a10 <_dtoa_r+0x928>
 8007554:	2200      	movs	r2, #0
 8007556:	4b66      	ldr	r3, [pc, #408]	; (80076f0 <_dtoa_r+0x608>)
 8007558:	ec51 0b17 	vmov	r0, r1, d7
 800755c:	f7f9 f85c 	bl	8000618 <__aeabi_dmul>
 8007560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007564:	f7f9 fade 	bl	8000b24 <__aeabi_dcmpge>
 8007568:	464f      	mov	r7, r9
 800756a:	464e      	mov	r6, r9
 800756c:	2800      	cmp	r0, #0
 800756e:	f040 8234 	bne.w	80079da <_dtoa_r+0x8f2>
 8007572:	2331      	movs	r3, #49	; 0x31
 8007574:	f10b 0501 	add.w	r5, fp, #1
 8007578:	f88b 3000 	strb.w	r3, [fp]
 800757c:	f10a 0a01 	add.w	sl, sl, #1
 8007580:	e22f      	b.n	80079e2 <_dtoa_r+0x8fa>
 8007582:	07f2      	lsls	r2, r6, #31
 8007584:	d505      	bpl.n	8007592 <_dtoa_r+0x4aa>
 8007586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758a:	f7f9 f845 	bl	8000618 <__aeabi_dmul>
 800758e:	3501      	adds	r5, #1
 8007590:	2301      	movs	r3, #1
 8007592:	1076      	asrs	r6, r6, #1
 8007594:	3708      	adds	r7, #8
 8007596:	e772      	b.n	800747e <_dtoa_r+0x396>
 8007598:	2502      	movs	r5, #2
 800759a:	e774      	b.n	8007486 <_dtoa_r+0x39e>
 800759c:	f8cd a020 	str.w	sl, [sp, #32]
 80075a0:	464f      	mov	r7, r9
 80075a2:	e791      	b.n	80074c8 <_dtoa_r+0x3e0>
 80075a4:	4b4d      	ldr	r3, [pc, #308]	; (80076dc <_dtoa_r+0x5f4>)
 80075a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80075ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d047      	beq.n	8007644 <_dtoa_r+0x55c>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	2000      	movs	r0, #0
 80075ba:	494e      	ldr	r1, [pc, #312]	; (80076f4 <_dtoa_r+0x60c>)
 80075bc:	f7f9 f956 	bl	800086c <__aeabi_ddiv>
 80075c0:	462a      	mov	r2, r5
 80075c2:	4633      	mov	r3, r6
 80075c4:	f7f8 fe70 	bl	80002a8 <__aeabi_dsub>
 80075c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80075cc:	465d      	mov	r5, fp
 80075ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075d2:	f7f9 fad1 	bl	8000b78 <__aeabi_d2iz>
 80075d6:	4606      	mov	r6, r0
 80075d8:	f7f8 ffb4 	bl	8000544 <__aeabi_i2d>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075e4:	f7f8 fe60 	bl	80002a8 <__aeabi_dsub>
 80075e8:	3630      	adds	r6, #48	; 0x30
 80075ea:	f805 6b01 	strb.w	r6, [r5], #1
 80075ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80075f2:	e9cd 0100 	strd	r0, r1, [sp]
 80075f6:	f7f9 fa81 	bl	8000afc <__aeabi_dcmplt>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d163      	bne.n	80076c6 <_dtoa_r+0x5de>
 80075fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007602:	2000      	movs	r0, #0
 8007604:	4937      	ldr	r1, [pc, #220]	; (80076e4 <_dtoa_r+0x5fc>)
 8007606:	f7f8 fe4f 	bl	80002a8 <__aeabi_dsub>
 800760a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800760e:	f7f9 fa75 	bl	8000afc <__aeabi_dcmplt>
 8007612:	2800      	cmp	r0, #0
 8007614:	f040 80b7 	bne.w	8007786 <_dtoa_r+0x69e>
 8007618:	eba5 030b 	sub.w	r3, r5, fp
 800761c:	429f      	cmp	r7, r3
 800761e:	f77f af7c 	ble.w	800751a <_dtoa_r+0x432>
 8007622:	2200      	movs	r2, #0
 8007624:	4b30      	ldr	r3, [pc, #192]	; (80076e8 <_dtoa_r+0x600>)
 8007626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800762a:	f7f8 fff5 	bl	8000618 <__aeabi_dmul>
 800762e:	2200      	movs	r2, #0
 8007630:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007634:	4b2c      	ldr	r3, [pc, #176]	; (80076e8 <_dtoa_r+0x600>)
 8007636:	e9dd 0100 	ldrd	r0, r1, [sp]
 800763a:	f7f8 ffed 	bl	8000618 <__aeabi_dmul>
 800763e:	e9cd 0100 	strd	r0, r1, [sp]
 8007642:	e7c4      	b.n	80075ce <_dtoa_r+0x4e6>
 8007644:	462a      	mov	r2, r5
 8007646:	4633      	mov	r3, r6
 8007648:	f7f8 ffe6 	bl	8000618 <__aeabi_dmul>
 800764c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007650:	eb0b 0507 	add.w	r5, fp, r7
 8007654:	465e      	mov	r6, fp
 8007656:	e9dd 0100 	ldrd	r0, r1, [sp]
 800765a:	f7f9 fa8d 	bl	8000b78 <__aeabi_d2iz>
 800765e:	4607      	mov	r7, r0
 8007660:	f7f8 ff70 	bl	8000544 <__aeabi_i2d>
 8007664:	3730      	adds	r7, #48	; 0x30
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800766e:	f7f8 fe1b 	bl	80002a8 <__aeabi_dsub>
 8007672:	f806 7b01 	strb.w	r7, [r6], #1
 8007676:	42ae      	cmp	r6, r5
 8007678:	e9cd 0100 	strd	r0, r1, [sp]
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	d126      	bne.n	80076d0 <_dtoa_r+0x5e8>
 8007682:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <_dtoa_r+0x60c>)
 8007684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007688:	f7f8 fe10 	bl	80002ac <__adddf3>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007694:	f7f9 fa50 	bl	8000b38 <__aeabi_dcmpgt>
 8007698:	2800      	cmp	r0, #0
 800769a:	d174      	bne.n	8007786 <_dtoa_r+0x69e>
 800769c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80076a0:	2000      	movs	r0, #0
 80076a2:	4914      	ldr	r1, [pc, #80]	; (80076f4 <_dtoa_r+0x60c>)
 80076a4:	f7f8 fe00 	bl	80002a8 <__aeabi_dsub>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076b0:	f7f9 fa24 	bl	8000afc <__aeabi_dcmplt>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f43f af30 	beq.w	800751a <_dtoa_r+0x432>
 80076ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076be:	2b30      	cmp	r3, #48	; 0x30
 80076c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80076c4:	d002      	beq.n	80076cc <_dtoa_r+0x5e4>
 80076c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80076ca:	e04a      	b.n	8007762 <_dtoa_r+0x67a>
 80076cc:	4615      	mov	r5, r2
 80076ce:	e7f4      	b.n	80076ba <_dtoa_r+0x5d2>
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <_dtoa_r+0x600>)
 80076d2:	f7f8 ffa1 	bl	8000618 <__aeabi_dmul>
 80076d6:	e9cd 0100 	strd	r0, r1, [sp]
 80076da:	e7bc      	b.n	8007656 <_dtoa_r+0x56e>
 80076dc:	08009e38 	.word	0x08009e38
 80076e0:	08009e10 	.word	0x08009e10
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	40240000 	.word	0x40240000
 80076ec:	401c0000 	.word	0x401c0000
 80076f0:	40140000 	.word	0x40140000
 80076f4:	3fe00000 	.word	0x3fe00000
 80076f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80076fc:	465d      	mov	r5, fp
 80076fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007702:	4630      	mov	r0, r6
 8007704:	4639      	mov	r1, r7
 8007706:	f7f9 f8b1 	bl	800086c <__aeabi_ddiv>
 800770a:	f7f9 fa35 	bl	8000b78 <__aeabi_d2iz>
 800770e:	4680      	mov	r8, r0
 8007710:	f7f8 ff18 	bl	8000544 <__aeabi_i2d>
 8007714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007718:	f7f8 ff7e 	bl	8000618 <__aeabi_dmul>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4630      	mov	r0, r6
 8007722:	4639      	mov	r1, r7
 8007724:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007728:	f7f8 fdbe 	bl	80002a8 <__aeabi_dsub>
 800772c:	f805 6b01 	strb.w	r6, [r5], #1
 8007730:	eba5 060b 	sub.w	r6, r5, fp
 8007734:	45b1      	cmp	r9, r6
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	d139      	bne.n	80077b0 <_dtoa_r+0x6c8>
 800773c:	f7f8 fdb6 	bl	80002ac <__adddf3>
 8007740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007744:	4606      	mov	r6, r0
 8007746:	460f      	mov	r7, r1
 8007748:	f7f9 f9f6 	bl	8000b38 <__aeabi_dcmpgt>
 800774c:	b9c8      	cbnz	r0, 8007782 <_dtoa_r+0x69a>
 800774e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f9 f9c7 	bl	8000ae8 <__aeabi_dcmpeq>
 800775a:	b110      	cbz	r0, 8007762 <_dtoa_r+0x67a>
 800775c:	f018 0f01 	tst.w	r8, #1
 8007760:	d10f      	bne.n	8007782 <_dtoa_r+0x69a>
 8007762:	9904      	ldr	r1, [sp, #16]
 8007764:	4620      	mov	r0, r4
 8007766:	f000 fdc2 	bl	80082ee <_Bfree>
 800776a:	2300      	movs	r3, #0
 800776c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800776e:	702b      	strb	r3, [r5, #0]
 8007770:	f10a 0301 	add.w	r3, sl, #1
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8241 	beq.w	8007c00 <_dtoa_r+0xb18>
 800777e:	601d      	str	r5, [r3, #0]
 8007780:	e23e      	b.n	8007c00 <_dtoa_r+0xb18>
 8007782:	f8cd a020 	str.w	sl, [sp, #32]
 8007786:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800778a:	2a39      	cmp	r2, #57	; 0x39
 800778c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007790:	d108      	bne.n	80077a4 <_dtoa_r+0x6bc>
 8007792:	459b      	cmp	fp, r3
 8007794:	d10a      	bne.n	80077ac <_dtoa_r+0x6c4>
 8007796:	9b08      	ldr	r3, [sp, #32]
 8007798:	3301      	adds	r3, #1
 800779a:	9308      	str	r3, [sp, #32]
 800779c:	2330      	movs	r3, #48	; 0x30
 800779e:	f88b 3000 	strb.w	r3, [fp]
 80077a2:	465b      	mov	r3, fp
 80077a4:	781a      	ldrb	r2, [r3, #0]
 80077a6:	3201      	adds	r2, #1
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	e78c      	b.n	80076c6 <_dtoa_r+0x5de>
 80077ac:	461d      	mov	r5, r3
 80077ae:	e7ea      	b.n	8007786 <_dtoa_r+0x69e>
 80077b0:	2200      	movs	r2, #0
 80077b2:	4b9b      	ldr	r3, [pc, #620]	; (8007a20 <_dtoa_r+0x938>)
 80077b4:	f7f8 ff30 	bl	8000618 <__aeabi_dmul>
 80077b8:	2200      	movs	r2, #0
 80077ba:	2300      	movs	r3, #0
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	f7f9 f992 	bl	8000ae8 <__aeabi_dcmpeq>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d09a      	beq.n	80076fe <_dtoa_r+0x616>
 80077c8:	e7cb      	b.n	8007762 <_dtoa_r+0x67a>
 80077ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077cc:	2a00      	cmp	r2, #0
 80077ce:	f000 808b 	beq.w	80078e8 <_dtoa_r+0x800>
 80077d2:	9a06      	ldr	r2, [sp, #24]
 80077d4:	2a01      	cmp	r2, #1
 80077d6:	dc6e      	bgt.n	80078b6 <_dtoa_r+0x7ce>
 80077d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077da:	2a00      	cmp	r2, #0
 80077dc:	d067      	beq.n	80078ae <_dtoa_r+0x7c6>
 80077de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077e2:	9f07      	ldr	r7, [sp, #28]
 80077e4:	9d05      	ldr	r5, [sp, #20]
 80077e6:	9a05      	ldr	r2, [sp, #20]
 80077e8:	2101      	movs	r1, #1
 80077ea:	441a      	add	r2, r3
 80077ec:	4620      	mov	r0, r4
 80077ee:	9205      	str	r2, [sp, #20]
 80077f0:	4498      	add	r8, r3
 80077f2:	f000 fe1c 	bl	800842e <__i2b>
 80077f6:	4606      	mov	r6, r0
 80077f8:	2d00      	cmp	r5, #0
 80077fa:	dd0c      	ble.n	8007816 <_dtoa_r+0x72e>
 80077fc:	f1b8 0f00 	cmp.w	r8, #0
 8007800:	dd09      	ble.n	8007816 <_dtoa_r+0x72e>
 8007802:	4545      	cmp	r5, r8
 8007804:	9a05      	ldr	r2, [sp, #20]
 8007806:	462b      	mov	r3, r5
 8007808:	bfa8      	it	ge
 800780a:	4643      	movge	r3, r8
 800780c:	1ad2      	subs	r2, r2, r3
 800780e:	9205      	str	r2, [sp, #20]
 8007810:	1aed      	subs	r5, r5, r3
 8007812:	eba8 0803 	sub.w	r8, r8, r3
 8007816:	9b07      	ldr	r3, [sp, #28]
 8007818:	b1eb      	cbz	r3, 8007856 <_dtoa_r+0x76e>
 800781a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781c:	2b00      	cmp	r3, #0
 800781e:	d067      	beq.n	80078f0 <_dtoa_r+0x808>
 8007820:	b18f      	cbz	r7, 8007846 <_dtoa_r+0x75e>
 8007822:	4631      	mov	r1, r6
 8007824:	463a      	mov	r2, r7
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fea0 	bl	800856c <__pow5mult>
 800782c:	9a04      	ldr	r2, [sp, #16]
 800782e:	4601      	mov	r1, r0
 8007830:	4606      	mov	r6, r0
 8007832:	4620      	mov	r0, r4
 8007834:	f000 fe04 	bl	8008440 <__multiply>
 8007838:	9904      	ldr	r1, [sp, #16]
 800783a:	9008      	str	r0, [sp, #32]
 800783c:	4620      	mov	r0, r4
 800783e:	f000 fd56 	bl	80082ee <_Bfree>
 8007842:	9b08      	ldr	r3, [sp, #32]
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	9b07      	ldr	r3, [sp, #28]
 8007848:	1bda      	subs	r2, r3, r7
 800784a:	d004      	beq.n	8007856 <_dtoa_r+0x76e>
 800784c:	9904      	ldr	r1, [sp, #16]
 800784e:	4620      	mov	r0, r4
 8007850:	f000 fe8c 	bl	800856c <__pow5mult>
 8007854:	9004      	str	r0, [sp, #16]
 8007856:	2101      	movs	r1, #1
 8007858:	4620      	mov	r0, r4
 800785a:	f000 fde8 	bl	800842e <__i2b>
 800785e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007860:	4607      	mov	r7, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 81d0 	beq.w	8007c08 <_dtoa_r+0xb20>
 8007868:	461a      	mov	r2, r3
 800786a:	4601      	mov	r1, r0
 800786c:	4620      	mov	r0, r4
 800786e:	f000 fe7d 	bl	800856c <__pow5mult>
 8007872:	9b06      	ldr	r3, [sp, #24]
 8007874:	2b01      	cmp	r3, #1
 8007876:	4607      	mov	r7, r0
 8007878:	dc40      	bgt.n	80078fc <_dtoa_r+0x814>
 800787a:	9b00      	ldr	r3, [sp, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d139      	bne.n	80078f4 <_dtoa_r+0x80c>
 8007880:	9b01      	ldr	r3, [sp, #4]
 8007882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007886:	2b00      	cmp	r3, #0
 8007888:	d136      	bne.n	80078f8 <_dtoa_r+0x810>
 800788a:	9b01      	ldr	r3, [sp, #4]
 800788c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007890:	0d1b      	lsrs	r3, r3, #20
 8007892:	051b      	lsls	r3, r3, #20
 8007894:	b12b      	cbz	r3, 80078a2 <_dtoa_r+0x7ba>
 8007896:	9b05      	ldr	r3, [sp, #20]
 8007898:	3301      	adds	r3, #1
 800789a:	9305      	str	r3, [sp, #20]
 800789c:	f108 0801 	add.w	r8, r8, #1
 80078a0:	2301      	movs	r3, #1
 80078a2:	9307      	str	r3, [sp, #28]
 80078a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d12a      	bne.n	8007900 <_dtoa_r+0x818>
 80078aa:	2001      	movs	r0, #1
 80078ac:	e030      	b.n	8007910 <_dtoa_r+0x828>
 80078ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078b4:	e795      	b.n	80077e2 <_dtoa_r+0x6fa>
 80078b6:	9b07      	ldr	r3, [sp, #28]
 80078b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80078bc:	42bb      	cmp	r3, r7
 80078be:	bfbf      	itttt	lt
 80078c0:	9b07      	ldrlt	r3, [sp, #28]
 80078c2:	9707      	strlt	r7, [sp, #28]
 80078c4:	1afa      	sublt	r2, r7, r3
 80078c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80078c8:	bfbb      	ittet	lt
 80078ca:	189b      	addlt	r3, r3, r2
 80078cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80078ce:	1bdf      	subge	r7, r3, r7
 80078d0:	2700      	movlt	r7, #0
 80078d2:	f1b9 0f00 	cmp.w	r9, #0
 80078d6:	bfb5      	itete	lt
 80078d8:	9b05      	ldrlt	r3, [sp, #20]
 80078da:	9d05      	ldrge	r5, [sp, #20]
 80078dc:	eba3 0509 	sublt.w	r5, r3, r9
 80078e0:	464b      	movge	r3, r9
 80078e2:	bfb8      	it	lt
 80078e4:	2300      	movlt	r3, #0
 80078e6:	e77e      	b.n	80077e6 <_dtoa_r+0x6fe>
 80078e8:	9f07      	ldr	r7, [sp, #28]
 80078ea:	9d05      	ldr	r5, [sp, #20]
 80078ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80078ee:	e783      	b.n	80077f8 <_dtoa_r+0x710>
 80078f0:	9a07      	ldr	r2, [sp, #28]
 80078f2:	e7ab      	b.n	800784c <_dtoa_r+0x764>
 80078f4:	2300      	movs	r3, #0
 80078f6:	e7d4      	b.n	80078a2 <_dtoa_r+0x7ba>
 80078f8:	9b00      	ldr	r3, [sp, #0]
 80078fa:	e7d2      	b.n	80078a2 <_dtoa_r+0x7ba>
 80078fc:	2300      	movs	r3, #0
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007906:	6918      	ldr	r0, [r3, #16]
 8007908:	f000 fd43 	bl	8008392 <__hi0bits>
 800790c:	f1c0 0020 	rsb	r0, r0, #32
 8007910:	4440      	add	r0, r8
 8007912:	f010 001f 	ands.w	r0, r0, #31
 8007916:	d047      	beq.n	80079a8 <_dtoa_r+0x8c0>
 8007918:	f1c0 0320 	rsb	r3, r0, #32
 800791c:	2b04      	cmp	r3, #4
 800791e:	dd3b      	ble.n	8007998 <_dtoa_r+0x8b0>
 8007920:	9b05      	ldr	r3, [sp, #20]
 8007922:	f1c0 001c 	rsb	r0, r0, #28
 8007926:	4403      	add	r3, r0
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	4405      	add	r5, r0
 800792c:	4480      	add	r8, r0
 800792e:	9b05      	ldr	r3, [sp, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	dd05      	ble.n	8007940 <_dtoa_r+0x858>
 8007934:	461a      	mov	r2, r3
 8007936:	9904      	ldr	r1, [sp, #16]
 8007938:	4620      	mov	r0, r4
 800793a:	f000 fe65 	bl	8008608 <__lshift>
 800793e:	9004      	str	r0, [sp, #16]
 8007940:	f1b8 0f00 	cmp.w	r8, #0
 8007944:	dd05      	ble.n	8007952 <_dtoa_r+0x86a>
 8007946:	4639      	mov	r1, r7
 8007948:	4642      	mov	r2, r8
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fe5c 	bl	8008608 <__lshift>
 8007950:	4607      	mov	r7, r0
 8007952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007954:	b353      	cbz	r3, 80079ac <_dtoa_r+0x8c4>
 8007956:	4639      	mov	r1, r7
 8007958:	9804      	ldr	r0, [sp, #16]
 800795a:	f000 fea9 	bl	80086b0 <__mcmp>
 800795e:	2800      	cmp	r0, #0
 8007960:	da24      	bge.n	80079ac <_dtoa_r+0x8c4>
 8007962:	2300      	movs	r3, #0
 8007964:	220a      	movs	r2, #10
 8007966:	9904      	ldr	r1, [sp, #16]
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fcd7 	bl	800831c <__multadd>
 800796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007970:	9004      	str	r0, [sp, #16]
 8007972:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 814d 	beq.w	8007c16 <_dtoa_r+0xb2e>
 800797c:	2300      	movs	r3, #0
 800797e:	4631      	mov	r1, r6
 8007980:	220a      	movs	r2, #10
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fcca 	bl	800831c <__multadd>
 8007988:	9b02      	ldr	r3, [sp, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	4606      	mov	r6, r0
 800798e:	dc4f      	bgt.n	8007a30 <_dtoa_r+0x948>
 8007990:	9b06      	ldr	r3, [sp, #24]
 8007992:	2b02      	cmp	r3, #2
 8007994:	dd4c      	ble.n	8007a30 <_dtoa_r+0x948>
 8007996:	e011      	b.n	80079bc <_dtoa_r+0x8d4>
 8007998:	d0c9      	beq.n	800792e <_dtoa_r+0x846>
 800799a:	9a05      	ldr	r2, [sp, #20]
 800799c:	331c      	adds	r3, #28
 800799e:	441a      	add	r2, r3
 80079a0:	9205      	str	r2, [sp, #20]
 80079a2:	441d      	add	r5, r3
 80079a4:	4498      	add	r8, r3
 80079a6:	e7c2      	b.n	800792e <_dtoa_r+0x846>
 80079a8:	4603      	mov	r3, r0
 80079aa:	e7f6      	b.n	800799a <_dtoa_r+0x8b2>
 80079ac:	f1b9 0f00 	cmp.w	r9, #0
 80079b0:	dc38      	bgt.n	8007a24 <_dtoa_r+0x93c>
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	dd35      	ble.n	8007a24 <_dtoa_r+0x93c>
 80079b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80079bc:	9b02      	ldr	r3, [sp, #8]
 80079be:	b963      	cbnz	r3, 80079da <_dtoa_r+0x8f2>
 80079c0:	4639      	mov	r1, r7
 80079c2:	2205      	movs	r2, #5
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fca9 	bl	800831c <__multadd>
 80079ca:	4601      	mov	r1, r0
 80079cc:	4607      	mov	r7, r0
 80079ce:	9804      	ldr	r0, [sp, #16]
 80079d0:	f000 fe6e 	bl	80086b0 <__mcmp>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f73f adcc 	bgt.w	8007572 <_dtoa_r+0x48a>
 80079da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079dc:	465d      	mov	r5, fp
 80079de:	ea6f 0a03 	mvn.w	sl, r3
 80079e2:	f04f 0900 	mov.w	r9, #0
 80079e6:	4639      	mov	r1, r7
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fc80 	bl	80082ee <_Bfree>
 80079ee:	2e00      	cmp	r6, #0
 80079f0:	f43f aeb7 	beq.w	8007762 <_dtoa_r+0x67a>
 80079f4:	f1b9 0f00 	cmp.w	r9, #0
 80079f8:	d005      	beq.n	8007a06 <_dtoa_r+0x91e>
 80079fa:	45b1      	cmp	r9, r6
 80079fc:	d003      	beq.n	8007a06 <_dtoa_r+0x91e>
 80079fe:	4649      	mov	r1, r9
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fc74 	bl	80082ee <_Bfree>
 8007a06:	4631      	mov	r1, r6
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 fc70 	bl	80082ee <_Bfree>
 8007a0e:	e6a8      	b.n	8007762 <_dtoa_r+0x67a>
 8007a10:	2700      	movs	r7, #0
 8007a12:	463e      	mov	r6, r7
 8007a14:	e7e1      	b.n	80079da <_dtoa_r+0x8f2>
 8007a16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007a1a:	463e      	mov	r6, r7
 8007a1c:	e5a9      	b.n	8007572 <_dtoa_r+0x48a>
 8007a1e:	bf00      	nop
 8007a20:	40240000 	.word	0x40240000
 8007a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a26:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80fa 	beq.w	8007c24 <_dtoa_r+0xb3c>
 8007a30:	2d00      	cmp	r5, #0
 8007a32:	dd05      	ble.n	8007a40 <_dtoa_r+0x958>
 8007a34:	4631      	mov	r1, r6
 8007a36:	462a      	mov	r2, r5
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 fde5 	bl	8008608 <__lshift>
 8007a3e:	4606      	mov	r6, r0
 8007a40:	9b07      	ldr	r3, [sp, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d04c      	beq.n	8007ae0 <_dtoa_r+0x9f8>
 8007a46:	6871      	ldr	r1, [r6, #4]
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fc1c 	bl	8008286 <_Balloc>
 8007a4e:	6932      	ldr	r2, [r6, #16]
 8007a50:	3202      	adds	r2, #2
 8007a52:	4605      	mov	r5, r0
 8007a54:	0092      	lsls	r2, r2, #2
 8007a56:	f106 010c 	add.w	r1, r6, #12
 8007a5a:	300c      	adds	r0, #12
 8007a5c:	f000 fc06 	bl	800826c <memcpy>
 8007a60:	2201      	movs	r2, #1
 8007a62:	4629      	mov	r1, r5
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fdcf 	bl	8008608 <__lshift>
 8007a6a:	9b00      	ldr	r3, [sp, #0]
 8007a6c:	f8cd b014 	str.w	fp, [sp, #20]
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	46b1      	mov	r9, r6
 8007a76:	9307      	str	r3, [sp, #28]
 8007a78:	4606      	mov	r6, r0
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	9804      	ldr	r0, [sp, #16]
 8007a7e:	f7ff faa7 	bl	8006fd0 <quorem>
 8007a82:	4649      	mov	r1, r9
 8007a84:	4605      	mov	r5, r0
 8007a86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a8a:	9804      	ldr	r0, [sp, #16]
 8007a8c:	f000 fe10 	bl	80086b0 <__mcmp>
 8007a90:	4632      	mov	r2, r6
 8007a92:	9000      	str	r0, [sp, #0]
 8007a94:	4639      	mov	r1, r7
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 fe24 	bl	80086e4 <__mdiff>
 8007a9c:	68c3      	ldr	r3, [r0, #12]
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	bb03      	cbnz	r3, 8007ae4 <_dtoa_r+0x9fc>
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	9008      	str	r0, [sp, #32]
 8007aa6:	9804      	ldr	r0, [sp, #16]
 8007aa8:	f000 fe02 	bl	80086b0 <__mcmp>
 8007aac:	9a08      	ldr	r2, [sp, #32]
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	9308      	str	r3, [sp, #32]
 8007ab6:	f000 fc1a 	bl	80082ee <_Bfree>
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	b9a3      	cbnz	r3, 8007ae8 <_dtoa_r+0xa00>
 8007abe:	9a06      	ldr	r2, [sp, #24]
 8007ac0:	b992      	cbnz	r2, 8007ae8 <_dtoa_r+0xa00>
 8007ac2:	9a07      	ldr	r2, [sp, #28]
 8007ac4:	b982      	cbnz	r2, 8007ae8 <_dtoa_r+0xa00>
 8007ac6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007aca:	d029      	beq.n	8007b20 <_dtoa_r+0xa38>
 8007acc:	9b00      	ldr	r3, [sp, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dd01      	ble.n	8007ad6 <_dtoa_r+0x9ee>
 8007ad2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ad6:	9b05      	ldr	r3, [sp, #20]
 8007ad8:	1c5d      	adds	r5, r3, #1
 8007ada:	f883 8000 	strb.w	r8, [r3]
 8007ade:	e782      	b.n	80079e6 <_dtoa_r+0x8fe>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	e7c2      	b.n	8007a6a <_dtoa_r+0x982>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e7e3      	b.n	8007ab0 <_dtoa_r+0x9c8>
 8007ae8:	9a00      	ldr	r2, [sp, #0]
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	db04      	blt.n	8007af8 <_dtoa_r+0xa10>
 8007aee:	d125      	bne.n	8007b3c <_dtoa_r+0xa54>
 8007af0:	9a06      	ldr	r2, [sp, #24]
 8007af2:	bb1a      	cbnz	r2, 8007b3c <_dtoa_r+0xa54>
 8007af4:	9a07      	ldr	r2, [sp, #28]
 8007af6:	bb0a      	cbnz	r2, 8007b3c <_dtoa_r+0xa54>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	ddec      	ble.n	8007ad6 <_dtoa_r+0x9ee>
 8007afc:	2201      	movs	r2, #1
 8007afe:	9904      	ldr	r1, [sp, #16]
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 fd81 	bl	8008608 <__lshift>
 8007b06:	4639      	mov	r1, r7
 8007b08:	9004      	str	r0, [sp, #16]
 8007b0a:	f000 fdd1 	bl	80086b0 <__mcmp>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	dc03      	bgt.n	8007b1a <_dtoa_r+0xa32>
 8007b12:	d1e0      	bne.n	8007ad6 <_dtoa_r+0x9ee>
 8007b14:	f018 0f01 	tst.w	r8, #1
 8007b18:	d0dd      	beq.n	8007ad6 <_dtoa_r+0x9ee>
 8007b1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007b1e:	d1d8      	bne.n	8007ad2 <_dtoa_r+0x9ea>
 8007b20:	9b05      	ldr	r3, [sp, #20]
 8007b22:	9a05      	ldr	r2, [sp, #20]
 8007b24:	1c5d      	adds	r5, r3, #1
 8007b26:	2339      	movs	r3, #57	; 0x39
 8007b28:	7013      	strb	r3, [r2, #0]
 8007b2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b2e:	2b39      	cmp	r3, #57	; 0x39
 8007b30:	f105 32ff 	add.w	r2, r5, #4294967295
 8007b34:	d04f      	beq.n	8007bd6 <_dtoa_r+0xaee>
 8007b36:	3301      	adds	r3, #1
 8007b38:	7013      	strb	r3, [r2, #0]
 8007b3a:	e754      	b.n	80079e6 <_dtoa_r+0x8fe>
 8007b3c:	9a05      	ldr	r2, [sp, #20]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f102 0501 	add.w	r5, r2, #1
 8007b44:	dd06      	ble.n	8007b54 <_dtoa_r+0xa6c>
 8007b46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007b4a:	d0e9      	beq.n	8007b20 <_dtoa_r+0xa38>
 8007b4c:	f108 0801 	add.w	r8, r8, #1
 8007b50:	9b05      	ldr	r3, [sp, #20]
 8007b52:	e7c2      	b.n	8007ada <_dtoa_r+0x9f2>
 8007b54:	9a02      	ldr	r2, [sp, #8]
 8007b56:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007b5a:	eba5 030b 	sub.w	r3, r5, fp
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d021      	beq.n	8007ba6 <_dtoa_r+0xabe>
 8007b62:	2300      	movs	r3, #0
 8007b64:	220a      	movs	r2, #10
 8007b66:	9904      	ldr	r1, [sp, #16]
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fbd7 	bl	800831c <__multadd>
 8007b6e:	45b1      	cmp	r9, r6
 8007b70:	9004      	str	r0, [sp, #16]
 8007b72:	f04f 0300 	mov.w	r3, #0
 8007b76:	f04f 020a 	mov.w	r2, #10
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	d105      	bne.n	8007b8c <_dtoa_r+0xaa4>
 8007b80:	f000 fbcc 	bl	800831c <__multadd>
 8007b84:	4681      	mov	r9, r0
 8007b86:	4606      	mov	r6, r0
 8007b88:	9505      	str	r5, [sp, #20]
 8007b8a:	e776      	b.n	8007a7a <_dtoa_r+0x992>
 8007b8c:	f000 fbc6 	bl	800831c <__multadd>
 8007b90:	4631      	mov	r1, r6
 8007b92:	4681      	mov	r9, r0
 8007b94:	2300      	movs	r3, #0
 8007b96:	220a      	movs	r2, #10
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 fbbf 	bl	800831c <__multadd>
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	e7f2      	b.n	8007b88 <_dtoa_r+0xaa0>
 8007ba2:	f04f 0900 	mov.w	r9, #0
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	9904      	ldr	r1, [sp, #16]
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 fd2c 	bl	8008608 <__lshift>
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	9004      	str	r0, [sp, #16]
 8007bb4:	f000 fd7c 	bl	80086b0 <__mcmp>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	dcb6      	bgt.n	8007b2a <_dtoa_r+0xa42>
 8007bbc:	d102      	bne.n	8007bc4 <_dtoa_r+0xadc>
 8007bbe:	f018 0f01 	tst.w	r8, #1
 8007bc2:	d1b2      	bne.n	8007b2a <_dtoa_r+0xa42>
 8007bc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bc8:	2b30      	cmp	r3, #48	; 0x30
 8007bca:	f105 32ff 	add.w	r2, r5, #4294967295
 8007bce:	f47f af0a 	bne.w	80079e6 <_dtoa_r+0x8fe>
 8007bd2:	4615      	mov	r5, r2
 8007bd4:	e7f6      	b.n	8007bc4 <_dtoa_r+0xadc>
 8007bd6:	4593      	cmp	fp, r2
 8007bd8:	d105      	bne.n	8007be6 <_dtoa_r+0xafe>
 8007bda:	2331      	movs	r3, #49	; 0x31
 8007bdc:	f10a 0a01 	add.w	sl, sl, #1
 8007be0:	f88b 3000 	strb.w	r3, [fp]
 8007be4:	e6ff      	b.n	80079e6 <_dtoa_r+0x8fe>
 8007be6:	4615      	mov	r5, r2
 8007be8:	e79f      	b.n	8007b2a <_dtoa_r+0xa42>
 8007bea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007c50 <_dtoa_r+0xb68>
 8007bee:	e007      	b.n	8007c00 <_dtoa_r+0xb18>
 8007bf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007c54 <_dtoa_r+0xb6c>
 8007bf6:	b11b      	cbz	r3, 8007c00 <_dtoa_r+0xb18>
 8007bf8:	f10b 0308 	add.w	r3, fp, #8
 8007bfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	4658      	mov	r0, fp
 8007c02:	b017      	add	sp, #92	; 0x5c
 8007c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c08:	9b06      	ldr	r3, [sp, #24]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	f77f ae35 	ble.w	800787a <_dtoa_r+0x792>
 8007c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c12:	9307      	str	r3, [sp, #28]
 8007c14:	e649      	b.n	80078aa <_dtoa_r+0x7c2>
 8007c16:	9b02      	ldr	r3, [sp, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dc03      	bgt.n	8007c24 <_dtoa_r+0xb3c>
 8007c1c:	9b06      	ldr	r3, [sp, #24]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	f73f aecc 	bgt.w	80079bc <_dtoa_r+0x8d4>
 8007c24:	465d      	mov	r5, fp
 8007c26:	4639      	mov	r1, r7
 8007c28:	9804      	ldr	r0, [sp, #16]
 8007c2a:	f7ff f9d1 	bl	8006fd0 <quorem>
 8007c2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007c32:	f805 8b01 	strb.w	r8, [r5], #1
 8007c36:	9a02      	ldr	r2, [sp, #8]
 8007c38:	eba5 030b 	sub.w	r3, r5, fp
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	ddb0      	ble.n	8007ba2 <_dtoa_r+0xaba>
 8007c40:	2300      	movs	r3, #0
 8007c42:	220a      	movs	r2, #10
 8007c44:	9904      	ldr	r1, [sp, #16]
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 fb68 	bl	800831c <__multadd>
 8007c4c:	9004      	str	r0, [sp, #16]
 8007c4e:	e7ea      	b.n	8007c26 <_dtoa_r+0xb3e>
 8007c50:	0800a034 	.word	0x0800a034
 8007c54:	08009d97 	.word	0x08009d97

08007c58 <__sflush_r>:
 8007c58:	898a      	ldrh	r2, [r1, #12]
 8007c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	4605      	mov	r5, r0
 8007c60:	0710      	lsls	r0, r2, #28
 8007c62:	460c      	mov	r4, r1
 8007c64:	d458      	bmi.n	8007d18 <__sflush_r+0xc0>
 8007c66:	684b      	ldr	r3, [r1, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dc05      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dc02      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d0f9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c84:	682f      	ldr	r7, [r5, #0]
 8007c86:	6a21      	ldr	r1, [r4, #32]
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	d032      	beq.n	8007cf2 <__sflush_r+0x9a>
 8007c8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	075a      	lsls	r2, r3, #29
 8007c92:	d505      	bpl.n	8007ca0 <__sflush_r+0x48>
 8007c94:	6863      	ldr	r3, [r4, #4]
 8007c96:	1ac0      	subs	r0, r0, r3
 8007c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c9a:	b10b      	cbz	r3, 8007ca0 <__sflush_r+0x48>
 8007c9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c9e:	1ac0      	subs	r0, r0, r3
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca6:	6a21      	ldr	r1, [r4, #32]
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b0      	blx	r6
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	d106      	bne.n	8007cc0 <__sflush_r+0x68>
 8007cb2:	6829      	ldr	r1, [r5, #0]
 8007cb4:	291d      	cmp	r1, #29
 8007cb6:	d848      	bhi.n	8007d4a <__sflush_r+0xf2>
 8007cb8:	4a29      	ldr	r2, [pc, #164]	; (8007d60 <__sflush_r+0x108>)
 8007cba:	40ca      	lsrs	r2, r1
 8007cbc:	07d6      	lsls	r6, r2, #31
 8007cbe:	d544      	bpl.n	8007d4a <__sflush_r+0xf2>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	6062      	str	r2, [r4, #4]
 8007cc4:	04d9      	lsls	r1, r3, #19
 8007cc6:	6922      	ldr	r2, [r4, #16]
 8007cc8:	6022      	str	r2, [r4, #0]
 8007cca:	d504      	bpl.n	8007cd6 <__sflush_r+0x7e>
 8007ccc:	1c42      	adds	r2, r0, #1
 8007cce:	d101      	bne.n	8007cd4 <__sflush_r+0x7c>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b903      	cbnz	r3, 8007cd6 <__sflush_r+0x7e>
 8007cd4:	6560      	str	r0, [r4, #84]	; 0x54
 8007cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cd8:	602f      	str	r7, [r5, #0]
 8007cda:	2900      	cmp	r1, #0
 8007cdc:	d0c9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007cde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce2:	4299      	cmp	r1, r3
 8007ce4:	d002      	beq.n	8007cec <__sflush_r+0x94>
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f7fd fa6e 	bl	80051c8 <_free_r>
 8007cec:	2000      	movs	r0, #0
 8007cee:	6360      	str	r0, [r4, #52]	; 0x34
 8007cf0:	e7c0      	b.n	8007c74 <__sflush_r+0x1c>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b0      	blx	r6
 8007cf8:	1c41      	adds	r1, r0, #1
 8007cfa:	d1c8      	bne.n	8007c8e <__sflush_r+0x36>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0c5      	beq.n	8007c8e <__sflush_r+0x36>
 8007d02:	2b1d      	cmp	r3, #29
 8007d04:	d001      	beq.n	8007d0a <__sflush_r+0xb2>
 8007d06:	2b16      	cmp	r3, #22
 8007d08:	d101      	bne.n	8007d0e <__sflush_r+0xb6>
 8007d0a:	602f      	str	r7, [r5, #0]
 8007d0c:	e7b1      	b.n	8007c72 <__sflush_r+0x1a>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	e7ad      	b.n	8007c74 <__sflush_r+0x1c>
 8007d18:	690f      	ldr	r7, [r1, #16]
 8007d1a:	2f00      	cmp	r7, #0
 8007d1c:	d0a9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007d1e:	0793      	lsls	r3, r2, #30
 8007d20:	680e      	ldr	r6, [r1, #0]
 8007d22:	bf08      	it	eq
 8007d24:	694b      	ldreq	r3, [r1, #20]
 8007d26:	600f      	str	r7, [r1, #0]
 8007d28:	bf18      	it	ne
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	eba6 0807 	sub.w	r8, r6, r7
 8007d30:	608b      	str	r3, [r1, #8]
 8007d32:	f1b8 0f00 	cmp.w	r8, #0
 8007d36:	dd9c      	ble.n	8007c72 <__sflush_r+0x1a>
 8007d38:	4643      	mov	r3, r8
 8007d3a:	463a      	mov	r2, r7
 8007d3c:	6a21      	ldr	r1, [r4, #32]
 8007d3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b0      	blx	r6
 8007d44:	2800      	cmp	r0, #0
 8007d46:	dc06      	bgt.n	8007d56 <__sflush_r+0xfe>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	e78e      	b.n	8007c74 <__sflush_r+0x1c>
 8007d56:	4407      	add	r7, r0
 8007d58:	eba8 0800 	sub.w	r8, r8, r0
 8007d5c:	e7e9      	b.n	8007d32 <__sflush_r+0xda>
 8007d5e:	bf00      	nop
 8007d60:	20400001 	.word	0x20400001

08007d64 <_fflush_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	690b      	ldr	r3, [r1, #16]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b1db      	cbz	r3, 8007da6 <_fflush_r+0x42>
 8007d6e:	b118      	cbz	r0, 8007d78 <_fflush_r+0x14>
 8007d70:	6983      	ldr	r3, [r0, #24]
 8007d72:	b90b      	cbnz	r3, 8007d78 <_fflush_r+0x14>
 8007d74:	f000 f860 	bl	8007e38 <__sinit>
 8007d78:	4b0c      	ldr	r3, [pc, #48]	; (8007dac <_fflush_r+0x48>)
 8007d7a:	429c      	cmp	r4, r3
 8007d7c:	d109      	bne.n	8007d92 <_fflush_r+0x2e>
 8007d7e:	686c      	ldr	r4, [r5, #4]
 8007d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d84:	b17b      	cbz	r3, 8007da6 <_fflush_r+0x42>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d8e:	f7ff bf63 	b.w	8007c58 <__sflush_r>
 8007d92:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <_fflush_r+0x4c>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	d101      	bne.n	8007d9c <_fflush_r+0x38>
 8007d98:	68ac      	ldr	r4, [r5, #8]
 8007d9a:	e7f1      	b.n	8007d80 <_fflush_r+0x1c>
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <_fflush_r+0x50>)
 8007d9e:	429c      	cmp	r4, r3
 8007da0:	bf08      	it	eq
 8007da2:	68ec      	ldreq	r4, [r5, #12]
 8007da4:	e7ec      	b.n	8007d80 <_fflush_r+0x1c>
 8007da6:	2000      	movs	r0, #0
 8007da8:	bd38      	pop	{r3, r4, r5, pc}
 8007daa:	bf00      	nop
 8007dac:	08009dc4 	.word	0x08009dc4
 8007db0:	08009de4 	.word	0x08009de4
 8007db4:	08009da4 	.word	0x08009da4

08007db8 <std>:
 8007db8:	2300      	movs	r3, #0
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007dc2:	6083      	str	r3, [r0, #8]
 8007dc4:	8181      	strh	r1, [r0, #12]
 8007dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8007dc8:	81c2      	strh	r2, [r0, #14]
 8007dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dce:	6183      	str	r3, [r0, #24]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	305c      	adds	r0, #92	; 0x5c
 8007dd6:	f7fc ff5a 	bl	8004c8e <memset>
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x38>)
 8007ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8007dde:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <std+0x3c>)
 8007de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <std+0x40>)
 8007de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <std+0x44>)
 8007de8:	6224      	str	r4, [r4, #32]
 8007dea:	6323      	str	r3, [r4, #48]	; 0x30
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	bf00      	nop
 8007df0:	08008b95 	.word	0x08008b95
 8007df4:	08008bbb 	.word	0x08008bbb
 8007df8:	08008bf3 	.word	0x08008bf3
 8007dfc:	08008c17 	.word	0x08008c17

08007e00 <_cleanup_r>:
 8007e00:	4901      	ldr	r1, [pc, #4]	; (8007e08 <_cleanup_r+0x8>)
 8007e02:	f000 b885 	b.w	8007f10 <_fwalk_reent>
 8007e06:	bf00      	nop
 8007e08:	08007d65 	.word	0x08007d65

08007e0c <__sfmoreglue>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	1e4a      	subs	r2, r1, #1
 8007e10:	2568      	movs	r5, #104	; 0x68
 8007e12:	4355      	muls	r5, r2
 8007e14:	460e      	mov	r6, r1
 8007e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e1a:	f7fd fa23 	bl	8005264 <_malloc_r>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	b140      	cbz	r0, 8007e34 <__sfmoreglue+0x28>
 8007e22:	2100      	movs	r1, #0
 8007e24:	e9c0 1600 	strd	r1, r6, [r0]
 8007e28:	300c      	adds	r0, #12
 8007e2a:	60a0      	str	r0, [r4, #8]
 8007e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e30:	f7fc ff2d 	bl	8004c8e <memset>
 8007e34:	4620      	mov	r0, r4
 8007e36:	bd70      	pop	{r4, r5, r6, pc}

08007e38 <__sinit>:
 8007e38:	6983      	ldr	r3, [r0, #24]
 8007e3a:	b510      	push	{r4, lr}
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	bb33      	cbnz	r3, 8007e8e <__sinit+0x56>
 8007e40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007e44:	6503      	str	r3, [r0, #80]	; 0x50
 8007e46:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <__sinit+0x58>)
 8007e48:	4a12      	ldr	r2, [pc, #72]	; (8007e94 <__sinit+0x5c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6282      	str	r2, [r0, #40]	; 0x28
 8007e4e:	4298      	cmp	r0, r3
 8007e50:	bf04      	itt	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	6183      	streq	r3, [r0, #24]
 8007e56:	f000 f81f 	bl	8007e98 <__sfp>
 8007e5a:	6060      	str	r0, [r4, #4]
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 f81b 	bl	8007e98 <__sfp>
 8007e62:	60a0      	str	r0, [r4, #8]
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 f817 	bl	8007e98 <__sfp>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	60e0      	str	r0, [r4, #12]
 8007e6e:	2104      	movs	r1, #4
 8007e70:	6860      	ldr	r0, [r4, #4]
 8007e72:	f7ff ffa1 	bl	8007db8 <std>
 8007e76:	2201      	movs	r2, #1
 8007e78:	2109      	movs	r1, #9
 8007e7a:	68a0      	ldr	r0, [r4, #8]
 8007e7c:	f7ff ff9c 	bl	8007db8 <std>
 8007e80:	2202      	movs	r2, #2
 8007e82:	2112      	movs	r1, #18
 8007e84:	68e0      	ldr	r0, [r4, #12]
 8007e86:	f7ff ff97 	bl	8007db8 <std>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	61a3      	str	r3, [r4, #24]
 8007e8e:	bd10      	pop	{r4, pc}
 8007e90:	080099e4 	.word	0x080099e4
 8007e94:	08007e01 	.word	0x08007e01

08007e98 <__sfp>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <__sfp+0x70>)
 8007e9c:	681e      	ldr	r6, [r3, #0]
 8007e9e:	69b3      	ldr	r3, [r6, #24]
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	b913      	cbnz	r3, 8007eaa <__sfp+0x12>
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff ffc7 	bl	8007e38 <__sinit>
 8007eaa:	3648      	adds	r6, #72	; 0x48
 8007eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	d503      	bpl.n	8007ebc <__sfp+0x24>
 8007eb4:	6833      	ldr	r3, [r6, #0]
 8007eb6:	b133      	cbz	r3, 8007ec6 <__sfp+0x2e>
 8007eb8:	6836      	ldr	r6, [r6, #0]
 8007eba:	e7f7      	b.n	8007eac <__sfp+0x14>
 8007ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ec0:	b16d      	cbz	r5, 8007ede <__sfp+0x46>
 8007ec2:	3468      	adds	r4, #104	; 0x68
 8007ec4:	e7f4      	b.n	8007eb0 <__sfp+0x18>
 8007ec6:	2104      	movs	r1, #4
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f7ff ff9f 	bl	8007e0c <__sfmoreglue>
 8007ece:	6030      	str	r0, [r6, #0]
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d1f1      	bne.n	8007eb8 <__sfp+0x20>
 8007ed4:	230c      	movs	r3, #12
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	4604      	mov	r4, r0
 8007eda:	4620      	mov	r0, r4
 8007edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <__sfp+0x74>)
 8007ee0:	6665      	str	r5, [r4, #100]	; 0x64
 8007ee2:	e9c4 5500 	strd	r5, r5, [r4]
 8007ee6:	60a5      	str	r5, [r4, #8]
 8007ee8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007eec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ef8:	f7fc fec9 	bl	8004c8e <memset>
 8007efc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f04:	e7e9      	b.n	8007eda <__sfp+0x42>
 8007f06:	bf00      	nop
 8007f08:	080099e4 	.word	0x080099e4
 8007f0c:	ffff0001 	.word	0xffff0001

08007f10 <_fwalk_reent>:
 8007f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f14:	4680      	mov	r8, r0
 8007f16:	4689      	mov	r9, r1
 8007f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	b914      	cbnz	r4, 8007f26 <_fwalk_reent+0x16>
 8007f20:	4630      	mov	r0, r6
 8007f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007f2a:	3f01      	subs	r7, #1
 8007f2c:	d501      	bpl.n	8007f32 <_fwalk_reent+0x22>
 8007f2e:	6824      	ldr	r4, [r4, #0]
 8007f30:	e7f5      	b.n	8007f1e <_fwalk_reent+0xe>
 8007f32:	89ab      	ldrh	r3, [r5, #12]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d907      	bls.n	8007f48 <_fwalk_reent+0x38>
 8007f38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	d003      	beq.n	8007f48 <_fwalk_reent+0x38>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4640      	mov	r0, r8
 8007f44:	47c8      	blx	r9
 8007f46:	4306      	orrs	r6, r0
 8007f48:	3568      	adds	r5, #104	; 0x68
 8007f4a:	e7ee      	b.n	8007f2a <_fwalk_reent+0x1a>

08007f4c <_findenv_r>:
 8007f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	4607      	mov	r7, r0
 8007f52:	468b      	mov	fp, r1
 8007f54:	4690      	mov	r8, r2
 8007f56:	f000 feab 	bl	8008cb0 <__env_lock>
 8007f5a:	4b19      	ldr	r3, [pc, #100]	; (8007fc0 <_findenv_r+0x74>)
 8007f5c:	681d      	ldr	r5, [r3, #0]
 8007f5e:	469a      	mov	sl, r3
 8007f60:	b13d      	cbz	r5, 8007f72 <_findenv_r+0x26>
 8007f62:	465c      	mov	r4, fp
 8007f64:	4623      	mov	r3, r4
 8007f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f6a:	b32a      	cbz	r2, 8007fb8 <_findenv_r+0x6c>
 8007f6c:	2a3d      	cmp	r2, #61	; 0x3d
 8007f6e:	461c      	mov	r4, r3
 8007f70:	d1f8      	bne.n	8007f64 <_findenv_r+0x18>
 8007f72:	4638      	mov	r0, r7
 8007f74:	f000 fe9d 	bl	8008cb2 <__env_unlock>
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	464d      	mov	r5, r9
 8007f80:	46a9      	mov	r9, r5
 8007f82:	f859 0b04 	ldr.w	r0, [r9], #4
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d0f3      	beq.n	8007f72 <_findenv_r+0x26>
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	f000 fe4e 	bl	8008c2e <strncmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d1f3      	bne.n	8007f7e <_findenv_r+0x32>
 8007f96:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8007f9a:	191e      	adds	r6, r3, r4
 8007f9c:	5d1b      	ldrb	r3, [r3, r4]
 8007f9e:	2b3d      	cmp	r3, #61	; 0x3d
 8007fa0:	d1ed      	bne.n	8007f7e <_findenv_r+0x32>
 8007fa2:	f8da 3000 	ldr.w	r3, [sl]
 8007fa6:	1aed      	subs	r5, r5, r3
 8007fa8:	10ad      	asrs	r5, r5, #2
 8007faa:	4638      	mov	r0, r7
 8007fac:	f8c8 5000 	str.w	r5, [r8]
 8007fb0:	f000 fe7f 	bl	8008cb2 <__env_unlock>
 8007fb4:	1c70      	adds	r0, r6, #1
 8007fb6:	e7e0      	b.n	8007f7a <_findenv_r+0x2e>
 8007fb8:	eba4 040b 	sub.w	r4, r4, fp
 8007fbc:	e7e0      	b.n	8007f80 <_findenv_r+0x34>
 8007fbe:	bf00      	nop
 8007fc0:	20000000 	.word	0x20000000

08007fc4 <_getenv_r>:
 8007fc4:	b507      	push	{r0, r1, r2, lr}
 8007fc6:	aa01      	add	r2, sp, #4
 8007fc8:	f7ff ffc0 	bl	8007f4c <_findenv_r>
 8007fcc:	b003      	add	sp, #12
 8007fce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007fd4 <__gettzinfo>:
 8007fd4:	4800      	ldr	r0, [pc, #0]	; (8007fd8 <__gettzinfo+0x4>)
 8007fd6:	4770      	bx	lr
 8007fd8:	20000080 	.word	0x20000080

08007fdc <gmtime_r>:
 8007fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe0:	e9d0 8900 	ldrd	r8, r9, [r0]
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	4a50      	ldr	r2, [pc, #320]	; (8008128 <gmtime_r+0x14c>)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4640      	mov	r0, r8
 8007fec:	4649      	mov	r1, r9
 8007fee:	f7f8 fdeb 	bl	8000bc8 <__aeabi_ldivmod>
 8007ff2:	4a4d      	ldr	r2, [pc, #308]	; (8008128 <gmtime_r+0x14c>)
 8007ff4:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	f7f8 fde3 	bl	8000bc8 <__aeabi_ldivmod>
 8008002:	2a00      	cmp	r2, #0
 8008004:	bfbc      	itt	lt
 8008006:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800800a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800800e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008012:	fb92 f3f1 	sdiv	r3, r2, r1
 8008016:	fb01 2213 	mls	r2, r1, r3, r2
 800801a:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800801e:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 8008022:	60a3      	str	r3, [r4, #8]
 8008024:	bfb8      	it	lt
 8008026:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 800802a:	fb92 f3f1 	sdiv	r3, r2, r1
 800802e:	fb01 2213 	mls	r2, r1, r3, r2
 8008032:	6063      	str	r3, [r4, #4]
 8008034:	6022      	str	r2, [r4, #0]
 8008036:	1ceb      	adds	r3, r5, #3
 8008038:	2207      	movs	r2, #7
 800803a:	fb93 f2f2 	sdiv	r2, r3, r2
 800803e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8008042:	1a9b      	subs	r3, r3, r2
 8008044:	bf48      	it	mi
 8008046:	3307      	addmi	r3, #7
 8008048:	2d00      	cmp	r5, #0
 800804a:	61a3      	str	r3, [r4, #24]
 800804c:	bfb8      	it	lt
 800804e:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 8008052:	4836      	ldr	r0, [pc, #216]	; (800812c <gmtime_r+0x150>)
 8008054:	bfae      	itee	ge
 8008056:	fb95 f0f0 	sdivge	r0, r5, r0
 800805a:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800805e:	fb93 f0f0 	sdivlt	r0, r3, r0
 8008062:	4b33      	ldr	r3, [pc, #204]	; (8008130 <gmtime_r+0x154>)
 8008064:	fb03 5300 	mla	r3, r3, r0, r5
 8008068:	f648 61ac 	movw	r1, #36524	; 0x8eac
 800806c:	fbb3 f1f1 	udiv	r1, r3, r1
 8008070:	4419      	add	r1, r3
 8008072:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8008076:	fbb3 f2f7 	udiv	r2, r3, r7
 800807a:	1a89      	subs	r1, r1, r2
 800807c:	4a2d      	ldr	r2, [pc, #180]	; (8008134 <gmtime_r+0x158>)
 800807e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008082:	1a8a      	subs	r2, r1, r2
 8008084:	f648 6194 	movw	r1, #36500	; 0x8e94
 8008088:	fbb2 f1f1 	udiv	r1, r2, r1
 800808c:	440b      	add	r3, r1
 800808e:	f240 166d 	movw	r6, #365	; 0x16d
 8008092:	fbb2 f5f6 	udiv	r5, r2, r6
 8008096:	fbb2 f2f7 	udiv	r2, r2, r7
 800809a:	1a9a      	subs	r2, r3, r2
 800809c:	fb06 2315 	mls	r3, r6, r5, r2
 80080a0:	2199      	movs	r1, #153	; 0x99
 80080a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80080a6:	1c5e      	adds	r6, r3, #1
 80080a8:	3202      	adds	r2, #2
 80080aa:	fbb2 f2f1 	udiv	r2, r2, r1
 80080ae:	2a0a      	cmp	r2, #10
 80080b0:	fb01 f102 	mul.w	r1, r1, r2
 80080b4:	f101 0102 	add.w	r1, r1, #2
 80080b8:	f04f 0705 	mov.w	r7, #5
 80080bc:	fbb1 f1f7 	udiv	r1, r1, r7
 80080c0:	eba6 0101 	sub.w	r1, r6, r1
 80080c4:	bf34      	ite	cc
 80080c6:	2602      	movcc	r6, #2
 80080c8:	f06f 0609 	mvncs.w	r6, #9
 80080cc:	4416      	add	r6, r2
 80080ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80080d2:	fb02 5000 	mla	r0, r2, r0, r5
 80080d6:	2e01      	cmp	r6, #1
 80080d8:	bf98      	it	ls
 80080da:	3001      	addls	r0, #1
 80080dc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80080e0:	d30c      	bcc.n	80080fc <gmtime_r+0x120>
 80080e2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80080e6:	61e3      	str	r3, [r4, #28]
 80080e8:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 80080ec:	2300      	movs	r3, #0
 80080ee:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80080f2:	60e1      	str	r1, [r4, #12]
 80080f4:	6223      	str	r3, [r4, #32]
 80080f6:	4620      	mov	r0, r4
 80080f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fc:	07aa      	lsls	r2, r5, #30
 80080fe:	d105      	bne.n	800810c <gmtime_r+0x130>
 8008100:	2764      	movs	r7, #100	; 0x64
 8008102:	fbb5 f2f7 	udiv	r2, r5, r7
 8008106:	fb07 5212 	mls	r2, r7, r2, r5
 800810a:	b95a      	cbnz	r2, 8008124 <gmtime_r+0x148>
 800810c:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8008110:	fbb5 f2f7 	udiv	r2, r5, r7
 8008114:	fb07 5212 	mls	r2, r7, r2, r5
 8008118:	fab2 f282 	clz	r2, r2
 800811c:	0952      	lsrs	r2, r2, #5
 800811e:	333b      	adds	r3, #59	; 0x3b
 8008120:	4413      	add	r3, r2
 8008122:	e7e0      	b.n	80080e6 <gmtime_r+0x10a>
 8008124:	2201      	movs	r2, #1
 8008126:	e7fa      	b.n	800811e <gmtime_r+0x142>
 8008128:	00015180 	.word	0x00015180
 800812c:	00023ab1 	.word	0x00023ab1
 8008130:	fffdc54f 	.word	0xfffdc54f
 8008134:	00023ab0 	.word	0x00023ab0

08008138 <labs>:
 8008138:	2800      	cmp	r0, #0
 800813a:	bfb8      	it	lt
 800813c:	4240      	neglt	r0, r0
 800813e:	4770      	bx	lr

08008140 <__locale_ctype_ptr_l>:
 8008140:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008144:	4770      	bx	lr
	...

08008148 <__locale_ctype_ptr>:
 8008148:	4b04      	ldr	r3, [pc, #16]	; (800815c <__locale_ctype_ptr+0x14>)
 800814a:	4a05      	ldr	r2, [pc, #20]	; (8008160 <__locale_ctype_ptr+0x18>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	2b00      	cmp	r3, #0
 8008152:	bf08      	it	eq
 8008154:	4613      	moveq	r3, r2
 8008156:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800815a:	4770      	bx	lr
 800815c:	20000014 	.word	0x20000014
 8008160:	200000d8 	.word	0x200000d8

08008164 <_localeconv_r>:
 8008164:	4b04      	ldr	r3, [pc, #16]	; (8008178 <_localeconv_r+0x14>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a18      	ldr	r0, [r3, #32]
 800816a:	4b04      	ldr	r3, [pc, #16]	; (800817c <_localeconv_r+0x18>)
 800816c:	2800      	cmp	r0, #0
 800816e:	bf08      	it	eq
 8008170:	4618      	moveq	r0, r3
 8008172:	30f0      	adds	r0, #240	; 0xf0
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	20000014 	.word	0x20000014
 800817c:	200000d8 	.word	0x200000d8

08008180 <__swhatbuf_r>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	460e      	mov	r6, r1
 8008184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008188:	2900      	cmp	r1, #0
 800818a:	b096      	sub	sp, #88	; 0x58
 800818c:	4614      	mov	r4, r2
 800818e:	461d      	mov	r5, r3
 8008190:	da07      	bge.n	80081a2 <__swhatbuf_r+0x22>
 8008192:	2300      	movs	r3, #0
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	89b3      	ldrh	r3, [r6, #12]
 8008198:	061a      	lsls	r2, r3, #24
 800819a:	d410      	bmi.n	80081be <__swhatbuf_r+0x3e>
 800819c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a0:	e00e      	b.n	80081c0 <__swhatbuf_r+0x40>
 80081a2:	466a      	mov	r2, sp
 80081a4:	f000 fd86 	bl	8008cb4 <_fstat_r>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	dbf2      	blt.n	8008192 <__swhatbuf_r+0x12>
 80081ac:	9a01      	ldr	r2, [sp, #4]
 80081ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081b6:	425a      	negs	r2, r3
 80081b8:	415a      	adcs	r2, r3
 80081ba:	602a      	str	r2, [r5, #0]
 80081bc:	e7ee      	b.n	800819c <__swhatbuf_r+0x1c>
 80081be:	2340      	movs	r3, #64	; 0x40
 80081c0:	2000      	movs	r0, #0
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	b016      	add	sp, #88	; 0x58
 80081c6:	bd70      	pop	{r4, r5, r6, pc}

080081c8 <__smakebuf_r>:
 80081c8:	898b      	ldrh	r3, [r1, #12]
 80081ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081cc:	079d      	lsls	r5, r3, #30
 80081ce:	4606      	mov	r6, r0
 80081d0:	460c      	mov	r4, r1
 80081d2:	d507      	bpl.n	80081e4 <__smakebuf_r+0x1c>
 80081d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	6123      	str	r3, [r4, #16]
 80081dc:	2301      	movs	r3, #1
 80081de:	6163      	str	r3, [r4, #20]
 80081e0:	b002      	add	sp, #8
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	ab01      	add	r3, sp, #4
 80081e6:	466a      	mov	r2, sp
 80081e8:	f7ff ffca 	bl	8008180 <__swhatbuf_r>
 80081ec:	9900      	ldr	r1, [sp, #0]
 80081ee:	4605      	mov	r5, r0
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7fd f837 	bl	8005264 <_malloc_r>
 80081f6:	b948      	cbnz	r0, 800820c <__smakebuf_r+0x44>
 80081f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fc:	059a      	lsls	r2, r3, #22
 80081fe:	d4ef      	bmi.n	80081e0 <__smakebuf_r+0x18>
 8008200:	f023 0303 	bic.w	r3, r3, #3
 8008204:	f043 0302 	orr.w	r3, r3, #2
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	e7e3      	b.n	80081d4 <__smakebuf_r+0xc>
 800820c:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <__smakebuf_r+0x7c>)
 800820e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	6020      	str	r0, [r4, #0]
 8008214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	9b00      	ldr	r3, [sp, #0]
 800821c:	6163      	str	r3, [r4, #20]
 800821e:	9b01      	ldr	r3, [sp, #4]
 8008220:	6120      	str	r0, [r4, #16]
 8008222:	b15b      	cbz	r3, 800823c <__smakebuf_r+0x74>
 8008224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008228:	4630      	mov	r0, r6
 800822a:	f000 fd55 	bl	8008cd8 <_isatty_r>
 800822e:	b128      	cbz	r0, 800823c <__smakebuf_r+0x74>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	f023 0303 	bic.w	r3, r3, #3
 8008236:	f043 0301 	orr.w	r3, r3, #1
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	431d      	orrs	r5, r3
 8008240:	81a5      	strh	r5, [r4, #12]
 8008242:	e7cd      	b.n	80081e0 <__smakebuf_r+0x18>
 8008244:	08007e01 	.word	0x08007e01

08008248 <__ascii_mbtowc>:
 8008248:	b082      	sub	sp, #8
 800824a:	b901      	cbnz	r1, 800824e <__ascii_mbtowc+0x6>
 800824c:	a901      	add	r1, sp, #4
 800824e:	b142      	cbz	r2, 8008262 <__ascii_mbtowc+0x1a>
 8008250:	b14b      	cbz	r3, 8008266 <__ascii_mbtowc+0x1e>
 8008252:	7813      	ldrb	r3, [r2, #0]
 8008254:	600b      	str	r3, [r1, #0]
 8008256:	7812      	ldrb	r2, [r2, #0]
 8008258:	1c10      	adds	r0, r2, #0
 800825a:	bf18      	it	ne
 800825c:	2001      	movne	r0, #1
 800825e:	b002      	add	sp, #8
 8008260:	4770      	bx	lr
 8008262:	4610      	mov	r0, r2
 8008264:	e7fb      	b.n	800825e <__ascii_mbtowc+0x16>
 8008266:	f06f 0001 	mvn.w	r0, #1
 800826a:	e7f8      	b.n	800825e <__ascii_mbtowc+0x16>

0800826c <memcpy>:
 800826c:	b510      	push	{r4, lr}
 800826e:	1e43      	subs	r3, r0, #1
 8008270:	440a      	add	r2, r1
 8008272:	4291      	cmp	r1, r2
 8008274:	d100      	bne.n	8008278 <memcpy+0xc>
 8008276:	bd10      	pop	{r4, pc}
 8008278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800827c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008280:	e7f7      	b.n	8008272 <memcpy+0x6>

08008282 <__malloc_lock>:
 8008282:	4770      	bx	lr

08008284 <__malloc_unlock>:
 8008284:	4770      	bx	lr

08008286 <_Balloc>:
 8008286:	b570      	push	{r4, r5, r6, lr}
 8008288:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800828a:	4604      	mov	r4, r0
 800828c:	460e      	mov	r6, r1
 800828e:	b93d      	cbnz	r5, 80082a0 <_Balloc+0x1a>
 8008290:	2010      	movs	r0, #16
 8008292:	f7fc fcdd 	bl	8004c50 <malloc>
 8008296:	6260      	str	r0, [r4, #36]	; 0x24
 8008298:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800829c:	6005      	str	r5, [r0, #0]
 800829e:	60c5      	str	r5, [r0, #12]
 80082a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80082a2:	68eb      	ldr	r3, [r5, #12]
 80082a4:	b183      	cbz	r3, 80082c8 <_Balloc+0x42>
 80082a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80082ae:	b9b8      	cbnz	r0, 80082e0 <_Balloc+0x5a>
 80082b0:	2101      	movs	r1, #1
 80082b2:	fa01 f506 	lsl.w	r5, r1, r6
 80082b6:	1d6a      	adds	r2, r5, #5
 80082b8:	0092      	lsls	r2, r2, #2
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fabe 	bl	800883c <_calloc_r>
 80082c0:	b160      	cbz	r0, 80082dc <_Balloc+0x56>
 80082c2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80082c6:	e00e      	b.n	80082e6 <_Balloc+0x60>
 80082c8:	2221      	movs	r2, #33	; 0x21
 80082ca:	2104      	movs	r1, #4
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 fab5 	bl	800883c <_calloc_r>
 80082d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082d4:	60e8      	str	r0, [r5, #12]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1e4      	bne.n	80082a6 <_Balloc+0x20>
 80082dc:	2000      	movs	r0, #0
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	6802      	ldr	r2, [r0, #0]
 80082e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80082e6:	2300      	movs	r3, #0
 80082e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082ec:	e7f7      	b.n	80082de <_Balloc+0x58>

080082ee <_Bfree>:
 80082ee:	b570      	push	{r4, r5, r6, lr}
 80082f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80082f2:	4606      	mov	r6, r0
 80082f4:	460d      	mov	r5, r1
 80082f6:	b93c      	cbnz	r4, 8008308 <_Bfree+0x1a>
 80082f8:	2010      	movs	r0, #16
 80082fa:	f7fc fca9 	bl	8004c50 <malloc>
 80082fe:	6270      	str	r0, [r6, #36]	; 0x24
 8008300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008304:	6004      	str	r4, [r0, #0]
 8008306:	60c4      	str	r4, [r0, #12]
 8008308:	b13d      	cbz	r5, 800831a <_Bfree+0x2c>
 800830a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800830c:	686a      	ldr	r2, [r5, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008314:	6029      	str	r1, [r5, #0]
 8008316:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800831a:	bd70      	pop	{r4, r5, r6, pc}

0800831c <__multadd>:
 800831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008320:	690d      	ldr	r5, [r1, #16]
 8008322:	461f      	mov	r7, r3
 8008324:	4606      	mov	r6, r0
 8008326:	460c      	mov	r4, r1
 8008328:	f101 0c14 	add.w	ip, r1, #20
 800832c:	2300      	movs	r3, #0
 800832e:	f8dc 0000 	ldr.w	r0, [ip]
 8008332:	b281      	uxth	r1, r0
 8008334:	fb02 7101 	mla	r1, r2, r1, r7
 8008338:	0c0f      	lsrs	r7, r1, #16
 800833a:	0c00      	lsrs	r0, r0, #16
 800833c:	fb02 7000 	mla	r0, r2, r0, r7
 8008340:	b289      	uxth	r1, r1
 8008342:	3301      	adds	r3, #1
 8008344:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008348:	429d      	cmp	r5, r3
 800834a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800834e:	f84c 1b04 	str.w	r1, [ip], #4
 8008352:	dcec      	bgt.n	800832e <__multadd+0x12>
 8008354:	b1d7      	cbz	r7, 800838c <__multadd+0x70>
 8008356:	68a3      	ldr	r3, [r4, #8]
 8008358:	42ab      	cmp	r3, r5
 800835a:	dc12      	bgt.n	8008382 <__multadd+0x66>
 800835c:	6861      	ldr	r1, [r4, #4]
 800835e:	4630      	mov	r0, r6
 8008360:	3101      	adds	r1, #1
 8008362:	f7ff ff90 	bl	8008286 <_Balloc>
 8008366:	6922      	ldr	r2, [r4, #16]
 8008368:	3202      	adds	r2, #2
 800836a:	f104 010c 	add.w	r1, r4, #12
 800836e:	4680      	mov	r8, r0
 8008370:	0092      	lsls	r2, r2, #2
 8008372:	300c      	adds	r0, #12
 8008374:	f7ff ff7a 	bl	800826c <memcpy>
 8008378:	4621      	mov	r1, r4
 800837a:	4630      	mov	r0, r6
 800837c:	f7ff ffb7 	bl	80082ee <_Bfree>
 8008380:	4644      	mov	r4, r8
 8008382:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008386:	3501      	adds	r5, #1
 8008388:	615f      	str	r7, [r3, #20]
 800838a:	6125      	str	r5, [r4, #16]
 800838c:	4620      	mov	r0, r4
 800838e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008392 <__hi0bits>:
 8008392:	0c02      	lsrs	r2, r0, #16
 8008394:	0412      	lsls	r2, r2, #16
 8008396:	4603      	mov	r3, r0
 8008398:	b9b2      	cbnz	r2, 80083c8 <__hi0bits+0x36>
 800839a:	0403      	lsls	r3, r0, #16
 800839c:	2010      	movs	r0, #16
 800839e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083a2:	bf04      	itt	eq
 80083a4:	021b      	lsleq	r3, r3, #8
 80083a6:	3008      	addeq	r0, #8
 80083a8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083ac:	bf04      	itt	eq
 80083ae:	011b      	lsleq	r3, r3, #4
 80083b0:	3004      	addeq	r0, #4
 80083b2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083b6:	bf04      	itt	eq
 80083b8:	009b      	lsleq	r3, r3, #2
 80083ba:	3002      	addeq	r0, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	db06      	blt.n	80083ce <__hi0bits+0x3c>
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	d503      	bpl.n	80083cc <__hi0bits+0x3a>
 80083c4:	3001      	adds	r0, #1
 80083c6:	4770      	bx	lr
 80083c8:	2000      	movs	r0, #0
 80083ca:	e7e8      	b.n	800839e <__hi0bits+0xc>
 80083cc:	2020      	movs	r0, #32
 80083ce:	4770      	bx	lr

080083d0 <__lo0bits>:
 80083d0:	6803      	ldr	r3, [r0, #0]
 80083d2:	f013 0207 	ands.w	r2, r3, #7
 80083d6:	4601      	mov	r1, r0
 80083d8:	d00b      	beq.n	80083f2 <__lo0bits+0x22>
 80083da:	07da      	lsls	r2, r3, #31
 80083dc:	d423      	bmi.n	8008426 <__lo0bits+0x56>
 80083de:	0798      	lsls	r0, r3, #30
 80083e0:	bf49      	itett	mi
 80083e2:	085b      	lsrmi	r3, r3, #1
 80083e4:	089b      	lsrpl	r3, r3, #2
 80083e6:	2001      	movmi	r0, #1
 80083e8:	600b      	strmi	r3, [r1, #0]
 80083ea:	bf5c      	itt	pl
 80083ec:	600b      	strpl	r3, [r1, #0]
 80083ee:	2002      	movpl	r0, #2
 80083f0:	4770      	bx	lr
 80083f2:	b298      	uxth	r0, r3
 80083f4:	b9a8      	cbnz	r0, 8008422 <__lo0bits+0x52>
 80083f6:	0c1b      	lsrs	r3, r3, #16
 80083f8:	2010      	movs	r0, #16
 80083fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80083fe:	bf04      	itt	eq
 8008400:	0a1b      	lsreq	r3, r3, #8
 8008402:	3008      	addeq	r0, #8
 8008404:	071a      	lsls	r2, r3, #28
 8008406:	bf04      	itt	eq
 8008408:	091b      	lsreq	r3, r3, #4
 800840a:	3004      	addeq	r0, #4
 800840c:	079a      	lsls	r2, r3, #30
 800840e:	bf04      	itt	eq
 8008410:	089b      	lsreq	r3, r3, #2
 8008412:	3002      	addeq	r0, #2
 8008414:	07da      	lsls	r2, r3, #31
 8008416:	d402      	bmi.n	800841e <__lo0bits+0x4e>
 8008418:	085b      	lsrs	r3, r3, #1
 800841a:	d006      	beq.n	800842a <__lo0bits+0x5a>
 800841c:	3001      	adds	r0, #1
 800841e:	600b      	str	r3, [r1, #0]
 8008420:	4770      	bx	lr
 8008422:	4610      	mov	r0, r2
 8008424:	e7e9      	b.n	80083fa <__lo0bits+0x2a>
 8008426:	2000      	movs	r0, #0
 8008428:	4770      	bx	lr
 800842a:	2020      	movs	r0, #32
 800842c:	4770      	bx	lr

0800842e <__i2b>:
 800842e:	b510      	push	{r4, lr}
 8008430:	460c      	mov	r4, r1
 8008432:	2101      	movs	r1, #1
 8008434:	f7ff ff27 	bl	8008286 <_Balloc>
 8008438:	2201      	movs	r2, #1
 800843a:	6144      	str	r4, [r0, #20]
 800843c:	6102      	str	r2, [r0, #16]
 800843e:	bd10      	pop	{r4, pc}

08008440 <__multiply>:
 8008440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	4614      	mov	r4, r2
 8008446:	690a      	ldr	r2, [r1, #16]
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	bfb8      	it	lt
 800844e:	460b      	movlt	r3, r1
 8008450:	4688      	mov	r8, r1
 8008452:	bfbc      	itt	lt
 8008454:	46a0      	movlt	r8, r4
 8008456:	461c      	movlt	r4, r3
 8008458:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800845c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008460:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008464:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008468:	eb07 0609 	add.w	r6, r7, r9
 800846c:	42b3      	cmp	r3, r6
 800846e:	bfb8      	it	lt
 8008470:	3101      	addlt	r1, #1
 8008472:	f7ff ff08 	bl	8008286 <_Balloc>
 8008476:	f100 0514 	add.w	r5, r0, #20
 800847a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800847e:	462b      	mov	r3, r5
 8008480:	2200      	movs	r2, #0
 8008482:	4573      	cmp	r3, lr
 8008484:	d316      	bcc.n	80084b4 <__multiply+0x74>
 8008486:	f104 0214 	add.w	r2, r4, #20
 800848a:	f108 0114 	add.w	r1, r8, #20
 800848e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008492:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	9b00      	ldr	r3, [sp, #0]
 800849a:	9201      	str	r2, [sp, #4]
 800849c:	4293      	cmp	r3, r2
 800849e:	d80c      	bhi.n	80084ba <__multiply+0x7a>
 80084a0:	2e00      	cmp	r6, #0
 80084a2:	dd03      	ble.n	80084ac <__multiply+0x6c>
 80084a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d05d      	beq.n	8008568 <__multiply+0x128>
 80084ac:	6106      	str	r6, [r0, #16]
 80084ae:	b003      	add	sp, #12
 80084b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	f843 2b04 	str.w	r2, [r3], #4
 80084b8:	e7e3      	b.n	8008482 <__multiply+0x42>
 80084ba:	f8b2 b000 	ldrh.w	fp, [r2]
 80084be:	f1bb 0f00 	cmp.w	fp, #0
 80084c2:	d023      	beq.n	800850c <__multiply+0xcc>
 80084c4:	4689      	mov	r9, r1
 80084c6:	46ac      	mov	ip, r5
 80084c8:	f04f 0800 	mov.w	r8, #0
 80084cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80084d0:	f8dc a000 	ldr.w	sl, [ip]
 80084d4:	b2a3      	uxth	r3, r4
 80084d6:	fa1f fa8a 	uxth.w	sl, sl
 80084da:	fb0b a303 	mla	r3, fp, r3, sl
 80084de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80084e2:	f8dc 4000 	ldr.w	r4, [ip]
 80084e6:	4443      	add	r3, r8
 80084e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80084ec:	fb0b 840a 	mla	r4, fp, sl, r8
 80084f0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80084f4:	46e2      	mov	sl, ip
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80084fc:	454f      	cmp	r7, r9
 80084fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008502:	f84a 3b04 	str.w	r3, [sl], #4
 8008506:	d82b      	bhi.n	8008560 <__multiply+0x120>
 8008508:	f8cc 8004 	str.w	r8, [ip, #4]
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008512:	3204      	adds	r2, #4
 8008514:	f1ba 0f00 	cmp.w	sl, #0
 8008518:	d020      	beq.n	800855c <__multiply+0x11c>
 800851a:	682b      	ldr	r3, [r5, #0]
 800851c:	4689      	mov	r9, r1
 800851e:	46a8      	mov	r8, r5
 8008520:	f04f 0b00 	mov.w	fp, #0
 8008524:	f8b9 c000 	ldrh.w	ip, [r9]
 8008528:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800852c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008530:	445c      	add	r4, fp
 8008532:	46c4      	mov	ip, r8
 8008534:	b29b      	uxth	r3, r3
 8008536:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800853a:	f84c 3b04 	str.w	r3, [ip], #4
 800853e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008542:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008546:	0c1b      	lsrs	r3, r3, #16
 8008548:	fb0a b303 	mla	r3, sl, r3, fp
 800854c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008550:	454f      	cmp	r7, r9
 8008552:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008556:	d805      	bhi.n	8008564 <__multiply+0x124>
 8008558:	f8c8 3004 	str.w	r3, [r8, #4]
 800855c:	3504      	adds	r5, #4
 800855e:	e79b      	b.n	8008498 <__multiply+0x58>
 8008560:	46d4      	mov	ip, sl
 8008562:	e7b3      	b.n	80084cc <__multiply+0x8c>
 8008564:	46e0      	mov	r8, ip
 8008566:	e7dd      	b.n	8008524 <__multiply+0xe4>
 8008568:	3e01      	subs	r6, #1
 800856a:	e799      	b.n	80084a0 <__multiply+0x60>

0800856c <__pow5mult>:
 800856c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008570:	4615      	mov	r5, r2
 8008572:	f012 0203 	ands.w	r2, r2, #3
 8008576:	4606      	mov	r6, r0
 8008578:	460f      	mov	r7, r1
 800857a:	d007      	beq.n	800858c <__pow5mult+0x20>
 800857c:	3a01      	subs	r2, #1
 800857e:	4c21      	ldr	r4, [pc, #132]	; (8008604 <__pow5mult+0x98>)
 8008580:	2300      	movs	r3, #0
 8008582:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008586:	f7ff fec9 	bl	800831c <__multadd>
 800858a:	4607      	mov	r7, r0
 800858c:	10ad      	asrs	r5, r5, #2
 800858e:	d035      	beq.n	80085fc <__pow5mult+0x90>
 8008590:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008592:	b93c      	cbnz	r4, 80085a4 <__pow5mult+0x38>
 8008594:	2010      	movs	r0, #16
 8008596:	f7fc fb5b 	bl	8004c50 <malloc>
 800859a:	6270      	str	r0, [r6, #36]	; 0x24
 800859c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085a0:	6004      	str	r4, [r0, #0]
 80085a2:	60c4      	str	r4, [r0, #12]
 80085a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085ac:	b94c      	cbnz	r4, 80085c2 <__pow5mult+0x56>
 80085ae:	f240 2171 	movw	r1, #625	; 0x271
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7ff ff3b 	bl	800842e <__i2b>
 80085b8:	2300      	movs	r3, #0
 80085ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80085be:	4604      	mov	r4, r0
 80085c0:	6003      	str	r3, [r0, #0]
 80085c2:	f04f 0800 	mov.w	r8, #0
 80085c6:	07eb      	lsls	r3, r5, #31
 80085c8:	d50a      	bpl.n	80085e0 <__pow5mult+0x74>
 80085ca:	4639      	mov	r1, r7
 80085cc:	4622      	mov	r2, r4
 80085ce:	4630      	mov	r0, r6
 80085d0:	f7ff ff36 	bl	8008440 <__multiply>
 80085d4:	4639      	mov	r1, r7
 80085d6:	4681      	mov	r9, r0
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff fe88 	bl	80082ee <_Bfree>
 80085de:	464f      	mov	r7, r9
 80085e0:	106d      	asrs	r5, r5, #1
 80085e2:	d00b      	beq.n	80085fc <__pow5mult+0x90>
 80085e4:	6820      	ldr	r0, [r4, #0]
 80085e6:	b938      	cbnz	r0, 80085f8 <__pow5mult+0x8c>
 80085e8:	4622      	mov	r2, r4
 80085ea:	4621      	mov	r1, r4
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff ff27 	bl	8008440 <__multiply>
 80085f2:	6020      	str	r0, [r4, #0]
 80085f4:	f8c0 8000 	str.w	r8, [r0]
 80085f8:	4604      	mov	r4, r0
 80085fa:	e7e4      	b.n	80085c6 <__pow5mult+0x5a>
 80085fc:	4638      	mov	r0, r7
 80085fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008602:	bf00      	nop
 8008604:	08009f00 	.word	0x08009f00

08008608 <__lshift>:
 8008608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800860c:	460c      	mov	r4, r1
 800860e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	6849      	ldr	r1, [r1, #4]
 8008616:	eb0a 0903 	add.w	r9, sl, r3
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	4607      	mov	r7, r0
 800861e:	4616      	mov	r6, r2
 8008620:	f109 0501 	add.w	r5, r9, #1
 8008624:	42ab      	cmp	r3, r5
 8008626:	db32      	blt.n	800868e <__lshift+0x86>
 8008628:	4638      	mov	r0, r7
 800862a:	f7ff fe2c 	bl	8008286 <_Balloc>
 800862e:	2300      	movs	r3, #0
 8008630:	4680      	mov	r8, r0
 8008632:	f100 0114 	add.w	r1, r0, #20
 8008636:	461a      	mov	r2, r3
 8008638:	4553      	cmp	r3, sl
 800863a:	db2b      	blt.n	8008694 <__lshift+0x8c>
 800863c:	6920      	ldr	r0, [r4, #16]
 800863e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008642:	f104 0314 	add.w	r3, r4, #20
 8008646:	f016 021f 	ands.w	r2, r6, #31
 800864a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800864e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008652:	d025      	beq.n	80086a0 <__lshift+0x98>
 8008654:	f1c2 0e20 	rsb	lr, r2, #32
 8008658:	2000      	movs	r0, #0
 800865a:	681e      	ldr	r6, [r3, #0]
 800865c:	468a      	mov	sl, r1
 800865e:	4096      	lsls	r6, r2
 8008660:	4330      	orrs	r0, r6
 8008662:	f84a 0b04 	str.w	r0, [sl], #4
 8008666:	f853 0b04 	ldr.w	r0, [r3], #4
 800866a:	459c      	cmp	ip, r3
 800866c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008670:	d814      	bhi.n	800869c <__lshift+0x94>
 8008672:	6048      	str	r0, [r1, #4]
 8008674:	b108      	cbz	r0, 800867a <__lshift+0x72>
 8008676:	f109 0502 	add.w	r5, r9, #2
 800867a:	3d01      	subs	r5, #1
 800867c:	4638      	mov	r0, r7
 800867e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008682:	4621      	mov	r1, r4
 8008684:	f7ff fe33 	bl	80082ee <_Bfree>
 8008688:	4640      	mov	r0, r8
 800868a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868e:	3101      	adds	r1, #1
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	e7c7      	b.n	8008624 <__lshift+0x1c>
 8008694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008698:	3301      	adds	r3, #1
 800869a:	e7cd      	b.n	8008638 <__lshift+0x30>
 800869c:	4651      	mov	r1, sl
 800869e:	e7dc      	b.n	800865a <__lshift+0x52>
 80086a0:	3904      	subs	r1, #4
 80086a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80086aa:	459c      	cmp	ip, r3
 80086ac:	d8f9      	bhi.n	80086a2 <__lshift+0x9a>
 80086ae:	e7e4      	b.n	800867a <__lshift+0x72>

080086b0 <__mcmp>:
 80086b0:	6903      	ldr	r3, [r0, #16]
 80086b2:	690a      	ldr	r2, [r1, #16]
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	b530      	push	{r4, r5, lr}
 80086b8:	d10c      	bne.n	80086d4 <__mcmp+0x24>
 80086ba:	0092      	lsls	r2, r2, #2
 80086bc:	3014      	adds	r0, #20
 80086be:	3114      	adds	r1, #20
 80086c0:	1884      	adds	r4, r0, r2
 80086c2:	4411      	add	r1, r2
 80086c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086cc:	4295      	cmp	r5, r2
 80086ce:	d003      	beq.n	80086d8 <__mcmp+0x28>
 80086d0:	d305      	bcc.n	80086de <__mcmp+0x2e>
 80086d2:	2301      	movs	r3, #1
 80086d4:	4618      	mov	r0, r3
 80086d6:	bd30      	pop	{r4, r5, pc}
 80086d8:	42a0      	cmp	r0, r4
 80086da:	d3f3      	bcc.n	80086c4 <__mcmp+0x14>
 80086dc:	e7fa      	b.n	80086d4 <__mcmp+0x24>
 80086de:	f04f 33ff 	mov.w	r3, #4294967295
 80086e2:	e7f7      	b.n	80086d4 <__mcmp+0x24>

080086e4 <__mdiff>:
 80086e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e8:	460d      	mov	r5, r1
 80086ea:	4607      	mov	r7, r0
 80086ec:	4611      	mov	r1, r2
 80086ee:	4628      	mov	r0, r5
 80086f0:	4614      	mov	r4, r2
 80086f2:	f7ff ffdd 	bl	80086b0 <__mcmp>
 80086f6:	1e06      	subs	r6, r0, #0
 80086f8:	d108      	bne.n	800870c <__mdiff+0x28>
 80086fa:	4631      	mov	r1, r6
 80086fc:	4638      	mov	r0, r7
 80086fe:	f7ff fdc2 	bl	8008286 <_Balloc>
 8008702:	2301      	movs	r3, #1
 8008704:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	bfa4      	itt	ge
 800870e:	4623      	movge	r3, r4
 8008710:	462c      	movge	r4, r5
 8008712:	4638      	mov	r0, r7
 8008714:	6861      	ldr	r1, [r4, #4]
 8008716:	bfa6      	itte	ge
 8008718:	461d      	movge	r5, r3
 800871a:	2600      	movge	r6, #0
 800871c:	2601      	movlt	r6, #1
 800871e:	f7ff fdb2 	bl	8008286 <_Balloc>
 8008722:	692b      	ldr	r3, [r5, #16]
 8008724:	60c6      	str	r6, [r0, #12]
 8008726:	6926      	ldr	r6, [r4, #16]
 8008728:	f105 0914 	add.w	r9, r5, #20
 800872c:	f104 0214 	add.w	r2, r4, #20
 8008730:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008734:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008738:	f100 0514 	add.w	r5, r0, #20
 800873c:	f04f 0e00 	mov.w	lr, #0
 8008740:	f852 ab04 	ldr.w	sl, [r2], #4
 8008744:	f859 4b04 	ldr.w	r4, [r9], #4
 8008748:	fa1e f18a 	uxtah	r1, lr, sl
 800874c:	b2a3      	uxth	r3, r4
 800874e:	1ac9      	subs	r1, r1, r3
 8008750:	0c23      	lsrs	r3, r4, #16
 8008752:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008756:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800875a:	b289      	uxth	r1, r1
 800875c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008760:	45c8      	cmp	r8, r9
 8008762:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008766:	4694      	mov	ip, r2
 8008768:	f845 3b04 	str.w	r3, [r5], #4
 800876c:	d8e8      	bhi.n	8008740 <__mdiff+0x5c>
 800876e:	45bc      	cmp	ip, r7
 8008770:	d304      	bcc.n	800877c <__mdiff+0x98>
 8008772:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008776:	b183      	cbz	r3, 800879a <__mdiff+0xb6>
 8008778:	6106      	str	r6, [r0, #16]
 800877a:	e7c5      	b.n	8008708 <__mdiff+0x24>
 800877c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008780:	fa1e f381 	uxtah	r3, lr, r1
 8008784:	141a      	asrs	r2, r3, #16
 8008786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800878a:	b29b      	uxth	r3, r3
 800878c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008790:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008794:	f845 3b04 	str.w	r3, [r5], #4
 8008798:	e7e9      	b.n	800876e <__mdiff+0x8a>
 800879a:	3e01      	subs	r6, #1
 800879c:	e7e9      	b.n	8008772 <__mdiff+0x8e>

0800879e <__d2b>:
 800879e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087a2:	460e      	mov	r6, r1
 80087a4:	2101      	movs	r1, #1
 80087a6:	ec59 8b10 	vmov	r8, r9, d0
 80087aa:	4615      	mov	r5, r2
 80087ac:	f7ff fd6b 	bl	8008286 <_Balloc>
 80087b0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80087b4:	4607      	mov	r7, r0
 80087b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087ba:	bb34      	cbnz	r4, 800880a <__d2b+0x6c>
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	f1b8 0300 	subs.w	r3, r8, #0
 80087c2:	d027      	beq.n	8008814 <__d2b+0x76>
 80087c4:	a802      	add	r0, sp, #8
 80087c6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80087ca:	f7ff fe01 	bl	80083d0 <__lo0bits>
 80087ce:	9900      	ldr	r1, [sp, #0]
 80087d0:	b1f0      	cbz	r0, 8008810 <__d2b+0x72>
 80087d2:	9a01      	ldr	r2, [sp, #4]
 80087d4:	f1c0 0320 	rsb	r3, r0, #32
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	430b      	orrs	r3, r1
 80087de:	40c2      	lsrs	r2, r0
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	9201      	str	r2, [sp, #4]
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	61bb      	str	r3, [r7, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bf14      	ite	ne
 80087ec:	2102      	movne	r1, #2
 80087ee:	2101      	moveq	r1, #1
 80087f0:	6139      	str	r1, [r7, #16]
 80087f2:	b1c4      	cbz	r4, 8008826 <__d2b+0x88>
 80087f4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80087f8:	4404      	add	r4, r0
 80087fa:	6034      	str	r4, [r6, #0]
 80087fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008800:	6028      	str	r0, [r5, #0]
 8008802:	4638      	mov	r0, r7
 8008804:	b003      	add	sp, #12
 8008806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800880a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800880e:	e7d5      	b.n	80087bc <__d2b+0x1e>
 8008810:	6179      	str	r1, [r7, #20]
 8008812:	e7e7      	b.n	80087e4 <__d2b+0x46>
 8008814:	a801      	add	r0, sp, #4
 8008816:	f7ff fddb 	bl	80083d0 <__lo0bits>
 800881a:	9b01      	ldr	r3, [sp, #4]
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	2101      	movs	r1, #1
 8008820:	6139      	str	r1, [r7, #16]
 8008822:	3020      	adds	r0, #32
 8008824:	e7e5      	b.n	80087f2 <__d2b+0x54>
 8008826:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800882a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800882e:	6030      	str	r0, [r6, #0]
 8008830:	6918      	ldr	r0, [r3, #16]
 8008832:	f7ff fdae 	bl	8008392 <__hi0bits>
 8008836:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800883a:	e7e1      	b.n	8008800 <__d2b+0x62>

0800883c <_calloc_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	fb02 f401 	mul.w	r4, r2, r1
 8008842:	4621      	mov	r1, r4
 8008844:	f7fc fd0e 	bl	8005264 <_malloc_r>
 8008848:	4605      	mov	r5, r0
 800884a:	b118      	cbz	r0, 8008854 <_calloc_r+0x18>
 800884c:	4622      	mov	r2, r4
 800884e:	2100      	movs	r1, #0
 8008850:	f7fc fa1d 	bl	8004c8e <memset>
 8008854:	4628      	mov	r0, r5
 8008856:	bd38      	pop	{r3, r4, r5, pc}

08008858 <__sfputc_r>:
 8008858:	6893      	ldr	r3, [r2, #8]
 800885a:	3b01      	subs	r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	b410      	push	{r4}
 8008860:	6093      	str	r3, [r2, #8]
 8008862:	da08      	bge.n	8008876 <__sfputc_r+0x1e>
 8008864:	6994      	ldr	r4, [r2, #24]
 8008866:	42a3      	cmp	r3, r4
 8008868:	db01      	blt.n	800886e <__sfputc_r+0x16>
 800886a:	290a      	cmp	r1, #10
 800886c:	d103      	bne.n	8008876 <__sfputc_r+0x1e>
 800886e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008872:	f7fe bad5 	b.w	8006e20 <__swbuf_r>
 8008876:	6813      	ldr	r3, [r2, #0]
 8008878:	1c58      	adds	r0, r3, #1
 800887a:	6010      	str	r0, [r2, #0]
 800887c:	7019      	strb	r1, [r3, #0]
 800887e:	4608      	mov	r0, r1
 8008880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008884:	4770      	bx	lr

08008886 <__sfputs_r>:
 8008886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008888:	4606      	mov	r6, r0
 800888a:	460f      	mov	r7, r1
 800888c:	4614      	mov	r4, r2
 800888e:	18d5      	adds	r5, r2, r3
 8008890:	42ac      	cmp	r4, r5
 8008892:	d101      	bne.n	8008898 <__sfputs_r+0x12>
 8008894:	2000      	movs	r0, #0
 8008896:	e007      	b.n	80088a8 <__sfputs_r+0x22>
 8008898:	463a      	mov	r2, r7
 800889a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff ffda 	bl	8008858 <__sfputc_r>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d1f3      	bne.n	8008890 <__sfputs_r+0xa>
 80088a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088ac <_vfiprintf_r>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	460c      	mov	r4, r1
 80088b2:	b09d      	sub	sp, #116	; 0x74
 80088b4:	4617      	mov	r7, r2
 80088b6:	461d      	mov	r5, r3
 80088b8:	4606      	mov	r6, r0
 80088ba:	b118      	cbz	r0, 80088c4 <_vfiprintf_r+0x18>
 80088bc:	6983      	ldr	r3, [r0, #24]
 80088be:	b90b      	cbnz	r3, 80088c4 <_vfiprintf_r+0x18>
 80088c0:	f7ff faba 	bl	8007e38 <__sinit>
 80088c4:	4b7c      	ldr	r3, [pc, #496]	; (8008ab8 <_vfiprintf_r+0x20c>)
 80088c6:	429c      	cmp	r4, r3
 80088c8:	d158      	bne.n	800897c <_vfiprintf_r+0xd0>
 80088ca:	6874      	ldr	r4, [r6, #4]
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	0718      	lsls	r0, r3, #28
 80088d0:	d55e      	bpl.n	8008990 <_vfiprintf_r+0xe4>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d05b      	beq.n	8008990 <_vfiprintf_r+0xe4>
 80088d8:	2300      	movs	r3, #0
 80088da:	9309      	str	r3, [sp, #36]	; 0x24
 80088dc:	2320      	movs	r3, #32
 80088de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088e2:	2330      	movs	r3, #48	; 0x30
 80088e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088e8:	9503      	str	r5, [sp, #12]
 80088ea:	f04f 0b01 	mov.w	fp, #1
 80088ee:	46b8      	mov	r8, r7
 80088f0:	4645      	mov	r5, r8
 80088f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088f6:	b10b      	cbz	r3, 80088fc <_vfiprintf_r+0x50>
 80088f8:	2b25      	cmp	r3, #37	; 0x25
 80088fa:	d154      	bne.n	80089a6 <_vfiprintf_r+0xfa>
 80088fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8008900:	d00b      	beq.n	800891a <_vfiprintf_r+0x6e>
 8008902:	4653      	mov	r3, sl
 8008904:	463a      	mov	r2, r7
 8008906:	4621      	mov	r1, r4
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff ffbc 	bl	8008886 <__sfputs_r>
 800890e:	3001      	adds	r0, #1
 8008910:	f000 80c2 	beq.w	8008a98 <_vfiprintf_r+0x1ec>
 8008914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008916:	4453      	add	r3, sl
 8008918:	9309      	str	r3, [sp, #36]	; 0x24
 800891a:	f898 3000 	ldrb.w	r3, [r8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80ba 	beq.w	8008a98 <_vfiprintf_r+0x1ec>
 8008924:	2300      	movs	r3, #0
 8008926:	f04f 32ff 	mov.w	r2, #4294967295
 800892a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800892e:	9304      	str	r3, [sp, #16]
 8008930:	9307      	str	r3, [sp, #28]
 8008932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008936:	931a      	str	r3, [sp, #104]	; 0x68
 8008938:	46a8      	mov	r8, r5
 800893a:	2205      	movs	r2, #5
 800893c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008940:	485e      	ldr	r0, [pc, #376]	; (8008abc <_vfiprintf_r+0x210>)
 8008942:	f7f7 fc5d 	bl	8000200 <memchr>
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	bb78      	cbnz	r0, 80089aa <_vfiprintf_r+0xfe>
 800894a:	06d9      	lsls	r1, r3, #27
 800894c:	bf44      	itt	mi
 800894e:	2220      	movmi	r2, #32
 8008950:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008954:	071a      	lsls	r2, r3, #28
 8008956:	bf44      	itt	mi
 8008958:	222b      	movmi	r2, #43	; 0x2b
 800895a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800895e:	782a      	ldrb	r2, [r5, #0]
 8008960:	2a2a      	cmp	r2, #42	; 0x2a
 8008962:	d02a      	beq.n	80089ba <_vfiprintf_r+0x10e>
 8008964:	9a07      	ldr	r2, [sp, #28]
 8008966:	46a8      	mov	r8, r5
 8008968:	2000      	movs	r0, #0
 800896a:	250a      	movs	r5, #10
 800896c:	4641      	mov	r1, r8
 800896e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008972:	3b30      	subs	r3, #48	; 0x30
 8008974:	2b09      	cmp	r3, #9
 8008976:	d969      	bls.n	8008a4c <_vfiprintf_r+0x1a0>
 8008978:	b360      	cbz	r0, 80089d4 <_vfiprintf_r+0x128>
 800897a:	e024      	b.n	80089c6 <_vfiprintf_r+0x11a>
 800897c:	4b50      	ldr	r3, [pc, #320]	; (8008ac0 <_vfiprintf_r+0x214>)
 800897e:	429c      	cmp	r4, r3
 8008980:	d101      	bne.n	8008986 <_vfiprintf_r+0xda>
 8008982:	68b4      	ldr	r4, [r6, #8]
 8008984:	e7a2      	b.n	80088cc <_vfiprintf_r+0x20>
 8008986:	4b4f      	ldr	r3, [pc, #316]	; (8008ac4 <_vfiprintf_r+0x218>)
 8008988:	429c      	cmp	r4, r3
 800898a:	bf08      	it	eq
 800898c:	68f4      	ldreq	r4, [r6, #12]
 800898e:	e79d      	b.n	80088cc <_vfiprintf_r+0x20>
 8008990:	4621      	mov	r1, r4
 8008992:	4630      	mov	r0, r6
 8008994:	f7fe fa96 	bl	8006ec4 <__swsetup_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	d09d      	beq.n	80088d8 <_vfiprintf_r+0x2c>
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	b01d      	add	sp, #116	; 0x74
 80089a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a6:	46a8      	mov	r8, r5
 80089a8:	e7a2      	b.n	80088f0 <_vfiprintf_r+0x44>
 80089aa:	4a44      	ldr	r2, [pc, #272]	; (8008abc <_vfiprintf_r+0x210>)
 80089ac:	1a80      	subs	r0, r0, r2
 80089ae:	fa0b f000 	lsl.w	r0, fp, r0
 80089b2:	4318      	orrs	r0, r3
 80089b4:	9004      	str	r0, [sp, #16]
 80089b6:	4645      	mov	r5, r8
 80089b8:	e7be      	b.n	8008938 <_vfiprintf_r+0x8c>
 80089ba:	9a03      	ldr	r2, [sp, #12]
 80089bc:	1d11      	adds	r1, r2, #4
 80089be:	6812      	ldr	r2, [r2, #0]
 80089c0:	9103      	str	r1, [sp, #12]
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	db01      	blt.n	80089ca <_vfiprintf_r+0x11e>
 80089c6:	9207      	str	r2, [sp, #28]
 80089c8:	e004      	b.n	80089d4 <_vfiprintf_r+0x128>
 80089ca:	4252      	negs	r2, r2
 80089cc:	f043 0302 	orr.w	r3, r3, #2
 80089d0:	9207      	str	r2, [sp, #28]
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	f898 3000 	ldrb.w	r3, [r8]
 80089d8:	2b2e      	cmp	r3, #46	; 0x2e
 80089da:	d10e      	bne.n	80089fa <_vfiprintf_r+0x14e>
 80089dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80089e0:	2b2a      	cmp	r3, #42	; 0x2a
 80089e2:	d138      	bne.n	8008a56 <_vfiprintf_r+0x1aa>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	1d1a      	adds	r2, r3, #4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	9203      	str	r2, [sp, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bfb8      	it	lt
 80089f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80089f4:	f108 0802 	add.w	r8, r8, #2
 80089f8:	9305      	str	r3, [sp, #20]
 80089fa:	4d33      	ldr	r5, [pc, #204]	; (8008ac8 <_vfiprintf_r+0x21c>)
 80089fc:	f898 1000 	ldrb.w	r1, [r8]
 8008a00:	2203      	movs	r2, #3
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7f7 fbfc 	bl	8000200 <memchr>
 8008a08:	b140      	cbz	r0, 8008a1c <_vfiprintf_r+0x170>
 8008a0a:	2340      	movs	r3, #64	; 0x40
 8008a0c:	1b40      	subs	r0, r0, r5
 8008a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a12:	9b04      	ldr	r3, [sp, #16]
 8008a14:	4303      	orrs	r3, r0
 8008a16:	f108 0801 	add.w	r8, r8, #1
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	f898 1000 	ldrb.w	r1, [r8]
 8008a20:	482a      	ldr	r0, [pc, #168]	; (8008acc <_vfiprintf_r+0x220>)
 8008a22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a26:	2206      	movs	r2, #6
 8008a28:	f108 0701 	add.w	r7, r8, #1
 8008a2c:	f7f7 fbe8 	bl	8000200 <memchr>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d037      	beq.n	8008aa4 <_vfiprintf_r+0x1f8>
 8008a34:	4b26      	ldr	r3, [pc, #152]	; (8008ad0 <_vfiprintf_r+0x224>)
 8008a36:	bb1b      	cbnz	r3, 8008a80 <_vfiprintf_r+0x1d4>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	3307      	adds	r3, #7
 8008a3c:	f023 0307 	bic.w	r3, r3, #7
 8008a40:	3308      	adds	r3, #8
 8008a42:	9303      	str	r3, [sp, #12]
 8008a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a46:	444b      	add	r3, r9
 8008a48:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4a:	e750      	b.n	80088ee <_vfiprintf_r+0x42>
 8008a4c:	fb05 3202 	mla	r2, r5, r2, r3
 8008a50:	2001      	movs	r0, #1
 8008a52:	4688      	mov	r8, r1
 8008a54:	e78a      	b.n	800896c <_vfiprintf_r+0xc0>
 8008a56:	2300      	movs	r3, #0
 8008a58:	f108 0801 	add.w	r8, r8, #1
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	250a      	movs	r5, #10
 8008a62:	4640      	mov	r0, r8
 8008a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a68:	3a30      	subs	r2, #48	; 0x30
 8008a6a:	2a09      	cmp	r2, #9
 8008a6c:	d903      	bls.n	8008a76 <_vfiprintf_r+0x1ca>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0c3      	beq.n	80089fa <_vfiprintf_r+0x14e>
 8008a72:	9105      	str	r1, [sp, #20]
 8008a74:	e7c1      	b.n	80089fa <_vfiprintf_r+0x14e>
 8008a76:	fb05 2101 	mla	r1, r5, r1, r2
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	e7f0      	b.n	8008a62 <_vfiprintf_r+0x1b6>
 8008a80:	ab03      	add	r3, sp, #12
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	4622      	mov	r2, r4
 8008a86:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <_vfiprintf_r+0x228>)
 8008a88:	a904      	add	r1, sp, #16
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7fc fcd8 	bl	8005440 <_printf_float>
 8008a90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a94:	4681      	mov	r9, r0
 8008a96:	d1d5      	bne.n	8008a44 <_vfiprintf_r+0x198>
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	065b      	lsls	r3, r3, #25
 8008a9c:	f53f af7e 	bmi.w	800899c <_vfiprintf_r+0xf0>
 8008aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aa2:	e77d      	b.n	80089a0 <_vfiprintf_r+0xf4>
 8008aa4:	ab03      	add	r3, sp, #12
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <_vfiprintf_r+0x228>)
 8008aac:	a904      	add	r1, sp, #16
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7fc ff7c 	bl	80059ac <_printf_i>
 8008ab4:	e7ec      	b.n	8008a90 <_vfiprintf_r+0x1e4>
 8008ab6:	bf00      	nop
 8008ab8:	08009dc4 	.word	0x08009dc4
 8008abc:	08009f0c 	.word	0x08009f0c
 8008ac0:	08009de4 	.word	0x08009de4
 8008ac4:	08009da4 	.word	0x08009da4
 8008ac8:	08009f12 	.word	0x08009f12
 8008acc:	08009f16 	.word	0x08009f16
 8008ad0:	08005441 	.word	0x08005441
 8008ad4:	08008887 	.word	0x08008887

08008ad8 <sniprintf>:
 8008ad8:	b40c      	push	{r2, r3}
 8008ada:	b530      	push	{r4, r5, lr}
 8008adc:	4b17      	ldr	r3, [pc, #92]	; (8008b3c <sniprintf+0x64>)
 8008ade:	1e0c      	subs	r4, r1, #0
 8008ae0:	b09d      	sub	sp, #116	; 0x74
 8008ae2:	681d      	ldr	r5, [r3, #0]
 8008ae4:	da08      	bge.n	8008af8 <sniprintf+0x20>
 8008ae6:	238b      	movs	r3, #139	; 0x8b
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	b01d      	add	sp, #116	; 0x74
 8008af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008af4:	b002      	add	sp, #8
 8008af6:	4770      	bx	lr
 8008af8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b00:	bf14      	ite	ne
 8008b02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b06:	4623      	moveq	r3, r4
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	9307      	str	r3, [sp, #28]
 8008b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b10:	9002      	str	r0, [sp, #8]
 8008b12:	9006      	str	r0, [sp, #24]
 8008b14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b1a:	ab21      	add	r3, sp, #132	; 0x84
 8008b1c:	a902      	add	r1, sp, #8
 8008b1e:	4628      	mov	r0, r5
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	f000 f995 	bl	8008e50 <_svfiprintf_r>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	bfbc      	itt	lt
 8008b2a:	238b      	movlt	r3, #139	; 0x8b
 8008b2c:	602b      	strlt	r3, [r5, #0]
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	d0dd      	beq.n	8008aee <sniprintf+0x16>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]
 8008b38:	e7d9      	b.n	8008aee <sniprintf+0x16>
 8008b3a:	bf00      	nop
 8008b3c:	20000014 	.word	0x20000014

08008b40 <siscanf>:
 8008b40:	b40e      	push	{r1, r2, r3}
 8008b42:	b530      	push	{r4, r5, lr}
 8008b44:	b09c      	sub	sp, #112	; 0x70
 8008b46:	ac1f      	add	r4, sp, #124	; 0x7c
 8008b48:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008b4c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008b50:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008b54:	9002      	str	r0, [sp, #8]
 8008b56:	9006      	str	r0, [sp, #24]
 8008b58:	f7f7 fb44 	bl	80001e4 <strlen>
 8008b5c:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <siscanf+0x4c>)
 8008b5e:	9003      	str	r0, [sp, #12]
 8008b60:	9007      	str	r0, [sp, #28]
 8008b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b64:	480a      	ldr	r0, [pc, #40]	; (8008b90 <siscanf+0x50>)
 8008b66:	9401      	str	r4, [sp, #4]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b6c:	9314      	str	r3, [sp, #80]	; 0x50
 8008b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b72:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b76:	462a      	mov	r2, r5
 8008b78:	4623      	mov	r3, r4
 8008b7a:	a902      	add	r1, sp, #8
 8008b7c:	6800      	ldr	r0, [r0, #0]
 8008b7e:	f000 fab9 	bl	80090f4 <__ssvfiscanf_r>
 8008b82:	b01c      	add	sp, #112	; 0x70
 8008b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b88:	b003      	add	sp, #12
 8008b8a:	4770      	bx	lr
 8008b8c:	08008bb7 	.word	0x08008bb7
 8008b90:	20000014 	.word	0x20000014

08008b94 <__sread>:
 8008b94:	b510      	push	{r4, lr}
 8008b96:	460c      	mov	r4, r1
 8008b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b9c:	f000 fd52 	bl	8009644 <_read_r>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	bfab      	itete	ge
 8008ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ba8:	181b      	addge	r3, r3, r0
 8008baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bae:	bfac      	ite	ge
 8008bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bb2:	81a3      	strhlt	r3, [r4, #12]
 8008bb4:	bd10      	pop	{r4, pc}

08008bb6 <__seofread>:
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	4770      	bx	lr

08008bba <__swrite>:
 8008bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbe:	461f      	mov	r7, r3
 8008bc0:	898b      	ldrh	r3, [r1, #12]
 8008bc2:	05db      	lsls	r3, r3, #23
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	4616      	mov	r6, r2
 8008bca:	d505      	bpl.n	8008bd8 <__swrite+0x1e>
 8008bcc:	2302      	movs	r3, #2
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd4:	f000 f890 	bl	8008cf8 <_lseek_r>
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008be2:	81a3      	strh	r3, [r4, #12]
 8008be4:	4632      	mov	r2, r6
 8008be6:	463b      	mov	r3, r7
 8008be8:	4628      	mov	r0, r5
 8008bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bee:	f000 b83d 	b.w	8008c6c <_write_r>

08008bf2 <__sseek>:
 8008bf2:	b510      	push	{r4, lr}
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfa:	f000 f87d 	bl	8008cf8 <_lseek_r>
 8008bfe:	1c43      	adds	r3, r0, #1
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	bf15      	itete	ne
 8008c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c0e:	81a3      	strheq	r3, [r4, #12]
 8008c10:	bf18      	it	ne
 8008c12:	81a3      	strhne	r3, [r4, #12]
 8008c14:	bd10      	pop	{r4, pc}

08008c16 <__sclose>:
 8008c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1a:	f000 b839 	b.w	8008c90 <_close_r>

08008c1e <strcpy>:
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c24:	f803 2b01 	strb.w	r2, [r3], #1
 8008c28:	2a00      	cmp	r2, #0
 8008c2a:	d1f9      	bne.n	8008c20 <strcpy+0x2>
 8008c2c:	4770      	bx	lr

08008c2e <strncmp>:
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	b16a      	cbz	r2, 8008c4e <strncmp+0x20>
 8008c32:	3901      	subs	r1, #1
 8008c34:	1884      	adds	r4, r0, r2
 8008c36:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d103      	bne.n	8008c4a <strncmp+0x1c>
 8008c42:	42a0      	cmp	r0, r4
 8008c44:	d001      	beq.n	8008c4a <strncmp+0x1c>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f5      	bne.n	8008c36 <strncmp+0x8>
 8008c4a:	1a98      	subs	r0, r3, r2
 8008c4c:	bd10      	pop	{r4, pc}
 8008c4e:	4610      	mov	r0, r2
 8008c50:	e7fc      	b.n	8008c4c <strncmp+0x1e>

08008c52 <__ascii_wctomb>:
 8008c52:	b149      	cbz	r1, 8008c68 <__ascii_wctomb+0x16>
 8008c54:	2aff      	cmp	r2, #255	; 0xff
 8008c56:	bf85      	ittet	hi
 8008c58:	238a      	movhi	r3, #138	; 0x8a
 8008c5a:	6003      	strhi	r3, [r0, #0]
 8008c5c:	700a      	strbls	r2, [r1, #0]
 8008c5e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c62:	bf98      	it	ls
 8008c64:	2001      	movls	r0, #1
 8008c66:	4770      	bx	lr
 8008c68:	4608      	mov	r0, r1
 8008c6a:	4770      	bx	lr

08008c6c <_write_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4c07      	ldr	r4, [pc, #28]	; (8008c8c <_write_r+0x20>)
 8008c70:	4605      	mov	r5, r0
 8008c72:	4608      	mov	r0, r1
 8008c74:	4611      	mov	r1, r2
 8008c76:	2200      	movs	r2, #0
 8008c78:	6022      	str	r2, [r4, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f7f8 fc4b 	bl	8001516 <_write>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_write_r+0x1e>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_write_r+0x1e>
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	2000046c 	.word	0x2000046c

08008c90 <_close_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4c06      	ldr	r4, [pc, #24]	; (8008cac <_close_r+0x1c>)
 8008c94:	2300      	movs	r3, #0
 8008c96:	4605      	mov	r5, r0
 8008c98:	4608      	mov	r0, r1
 8008c9a:	6023      	str	r3, [r4, #0]
 8008c9c:	f7f8 fc57 	bl	800154e <_close>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_close_r+0x1a>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_close_r+0x1a>
 8008ca8:	602b      	str	r3, [r5, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	2000046c 	.word	0x2000046c

08008cb0 <__env_lock>:
 8008cb0:	4770      	bx	lr

08008cb2 <__env_unlock>:
 8008cb2:	4770      	bx	lr

08008cb4 <_fstat_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4c07      	ldr	r4, [pc, #28]	; (8008cd4 <_fstat_r+0x20>)
 8008cb8:	2300      	movs	r3, #0
 8008cba:	4605      	mov	r5, r0
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	f7f8 fc50 	bl	8001566 <_fstat>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	d102      	bne.n	8008cd0 <_fstat_r+0x1c>
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	b103      	cbz	r3, 8008cd0 <_fstat_r+0x1c>
 8008cce:	602b      	str	r3, [r5, #0]
 8008cd0:	bd38      	pop	{r3, r4, r5, pc}
 8008cd2:	bf00      	nop
 8008cd4:	2000046c 	.word	0x2000046c

08008cd8 <_isatty_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4c06      	ldr	r4, [pc, #24]	; (8008cf4 <_isatty_r+0x1c>)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4605      	mov	r5, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	f7f8 fc4f 	bl	8001586 <_isatty>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_isatty_r+0x1a>
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_isatty_r+0x1a>
 8008cf0:	602b      	str	r3, [r5, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	2000046c 	.word	0x2000046c

08008cf8 <_lseek_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4c07      	ldr	r4, [pc, #28]	; (8008d18 <_lseek_r+0x20>)
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	4608      	mov	r0, r1
 8008d00:	4611      	mov	r1, r2
 8008d02:	2200      	movs	r2, #0
 8008d04:	6022      	str	r2, [r4, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f7f8 fc48 	bl	800159c <_lseek>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_lseek_r+0x1e>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_lseek_r+0x1e>
 8008d14:	602b      	str	r3, [r5, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	2000046c 	.word	0x2000046c

08008d1c <memmove>:
 8008d1c:	4288      	cmp	r0, r1
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	eb01 0302 	add.w	r3, r1, r2
 8008d24:	d807      	bhi.n	8008d36 <memmove+0x1a>
 8008d26:	1e42      	subs	r2, r0, #1
 8008d28:	4299      	cmp	r1, r3
 8008d2a:	d00a      	beq.n	8008d42 <memmove+0x26>
 8008d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d34:	e7f8      	b.n	8008d28 <memmove+0xc>
 8008d36:	4283      	cmp	r3, r0
 8008d38:	d9f5      	bls.n	8008d26 <memmove+0xa>
 8008d3a:	1881      	adds	r1, r0, r2
 8008d3c:	1ad2      	subs	r2, r2, r3
 8008d3e:	42d3      	cmn	r3, r2
 8008d40:	d100      	bne.n	8008d44 <memmove+0x28>
 8008d42:	bd10      	pop	{r4, pc}
 8008d44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d4c:	e7f7      	b.n	8008d3e <memmove+0x22>

08008d4e <_realloc_r>:
 8008d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d50:	4607      	mov	r7, r0
 8008d52:	4614      	mov	r4, r2
 8008d54:	460e      	mov	r6, r1
 8008d56:	b921      	cbnz	r1, 8008d62 <_realloc_r+0x14>
 8008d58:	4611      	mov	r1, r2
 8008d5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d5e:	f7fc ba81 	b.w	8005264 <_malloc_r>
 8008d62:	b922      	cbnz	r2, 8008d6e <_realloc_r+0x20>
 8008d64:	f7fc fa30 	bl	80051c8 <_free_r>
 8008d68:	4625      	mov	r5, r4
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d6e:	f000 fd75 	bl	800985c <_malloc_usable_size_r>
 8008d72:	42a0      	cmp	r0, r4
 8008d74:	d20f      	bcs.n	8008d96 <_realloc_r+0x48>
 8008d76:	4621      	mov	r1, r4
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7fc fa73 	bl	8005264 <_malloc_r>
 8008d7e:	4605      	mov	r5, r0
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d0f2      	beq.n	8008d6a <_realloc_r+0x1c>
 8008d84:	4631      	mov	r1, r6
 8008d86:	4622      	mov	r2, r4
 8008d88:	f7ff fa70 	bl	800826c <memcpy>
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4638      	mov	r0, r7
 8008d90:	f7fc fa1a 	bl	80051c8 <_free_r>
 8008d94:	e7e9      	b.n	8008d6a <_realloc_r+0x1c>
 8008d96:	4635      	mov	r5, r6
 8008d98:	e7e7      	b.n	8008d6a <_realloc_r+0x1c>

08008d9a <__ssputs_r>:
 8008d9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9e:	688e      	ldr	r6, [r1, #8]
 8008da0:	429e      	cmp	r6, r3
 8008da2:	4682      	mov	sl, r0
 8008da4:	460c      	mov	r4, r1
 8008da6:	4690      	mov	r8, r2
 8008da8:	4699      	mov	r9, r3
 8008daa:	d837      	bhi.n	8008e1c <__ssputs_r+0x82>
 8008dac:	898a      	ldrh	r2, [r1, #12]
 8008dae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008db2:	d031      	beq.n	8008e18 <__ssputs_r+0x7e>
 8008db4:	6825      	ldr	r5, [r4, #0]
 8008db6:	6909      	ldr	r1, [r1, #16]
 8008db8:	1a6f      	subs	r7, r5, r1
 8008dba:	6965      	ldr	r5, [r4, #20]
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dc2:	fb95 f5f3 	sdiv	r5, r5, r3
 8008dc6:	f109 0301 	add.w	r3, r9, #1
 8008dca:	443b      	add	r3, r7
 8008dcc:	429d      	cmp	r5, r3
 8008dce:	bf38      	it	cc
 8008dd0:	461d      	movcc	r5, r3
 8008dd2:	0553      	lsls	r3, r2, #21
 8008dd4:	d530      	bpl.n	8008e38 <__ssputs_r+0x9e>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7fc fa44 	bl	8005264 <_malloc_r>
 8008ddc:	4606      	mov	r6, r0
 8008dde:	b950      	cbnz	r0, 8008df6 <__ssputs_r+0x5c>
 8008de0:	230c      	movs	r3, #12
 8008de2:	f8ca 3000 	str.w	r3, [sl]
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dec:	81a3      	strh	r3, [r4, #12]
 8008dee:	f04f 30ff 	mov.w	r0, #4294967295
 8008df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df6:	463a      	mov	r2, r7
 8008df8:	6921      	ldr	r1, [r4, #16]
 8008dfa:	f7ff fa37 	bl	800826c <memcpy>
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	6126      	str	r6, [r4, #16]
 8008e0c:	6165      	str	r5, [r4, #20]
 8008e0e:	443e      	add	r6, r7
 8008e10:	1bed      	subs	r5, r5, r7
 8008e12:	6026      	str	r6, [r4, #0]
 8008e14:	60a5      	str	r5, [r4, #8]
 8008e16:	464e      	mov	r6, r9
 8008e18:	454e      	cmp	r6, r9
 8008e1a:	d900      	bls.n	8008e1e <__ssputs_r+0x84>
 8008e1c:	464e      	mov	r6, r9
 8008e1e:	4632      	mov	r2, r6
 8008e20:	4641      	mov	r1, r8
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	f7ff ff7a 	bl	8008d1c <memmove>
 8008e28:	68a3      	ldr	r3, [r4, #8]
 8008e2a:	1b9b      	subs	r3, r3, r6
 8008e2c:	60a3      	str	r3, [r4, #8]
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	441e      	add	r6, r3
 8008e32:	6026      	str	r6, [r4, #0]
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7dc      	b.n	8008df2 <__ssputs_r+0x58>
 8008e38:	462a      	mov	r2, r5
 8008e3a:	f7ff ff88 	bl	8008d4e <_realloc_r>
 8008e3e:	4606      	mov	r6, r0
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d1e2      	bne.n	8008e0a <__ssputs_r+0x70>
 8008e44:	6921      	ldr	r1, [r4, #16]
 8008e46:	4650      	mov	r0, sl
 8008e48:	f7fc f9be 	bl	80051c8 <_free_r>
 8008e4c:	e7c8      	b.n	8008de0 <__ssputs_r+0x46>
	...

08008e50 <_svfiprintf_r>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	461d      	mov	r5, r3
 8008e56:	898b      	ldrh	r3, [r1, #12]
 8008e58:	061f      	lsls	r7, r3, #24
 8008e5a:	b09d      	sub	sp, #116	; 0x74
 8008e5c:	4680      	mov	r8, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	4616      	mov	r6, r2
 8008e62:	d50f      	bpl.n	8008e84 <_svfiprintf_r+0x34>
 8008e64:	690b      	ldr	r3, [r1, #16]
 8008e66:	b96b      	cbnz	r3, 8008e84 <_svfiprintf_r+0x34>
 8008e68:	2140      	movs	r1, #64	; 0x40
 8008e6a:	f7fc f9fb 	bl	8005264 <_malloc_r>
 8008e6e:	6020      	str	r0, [r4, #0]
 8008e70:	6120      	str	r0, [r4, #16]
 8008e72:	b928      	cbnz	r0, 8008e80 <_svfiprintf_r+0x30>
 8008e74:	230c      	movs	r3, #12
 8008e76:	f8c8 3000 	str.w	r3, [r8]
 8008e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7e:	e0c8      	b.n	8009012 <_svfiprintf_r+0x1c2>
 8008e80:	2340      	movs	r3, #64	; 0x40
 8008e82:	6163      	str	r3, [r4, #20]
 8008e84:	2300      	movs	r3, #0
 8008e86:	9309      	str	r3, [sp, #36]	; 0x24
 8008e88:	2320      	movs	r3, #32
 8008e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e8e:	2330      	movs	r3, #48	; 0x30
 8008e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e94:	9503      	str	r5, [sp, #12]
 8008e96:	f04f 0b01 	mov.w	fp, #1
 8008e9a:	4637      	mov	r7, r6
 8008e9c:	463d      	mov	r5, r7
 8008e9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ea2:	b10b      	cbz	r3, 8008ea8 <_svfiprintf_r+0x58>
 8008ea4:	2b25      	cmp	r3, #37	; 0x25
 8008ea6:	d13e      	bne.n	8008f26 <_svfiprintf_r+0xd6>
 8008ea8:	ebb7 0a06 	subs.w	sl, r7, r6
 8008eac:	d00b      	beq.n	8008ec6 <_svfiprintf_r+0x76>
 8008eae:	4653      	mov	r3, sl
 8008eb0:	4632      	mov	r2, r6
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	f7ff ff70 	bl	8008d9a <__ssputs_r>
 8008eba:	3001      	adds	r0, #1
 8008ebc:	f000 80a4 	beq.w	8009008 <_svfiprintf_r+0x1b8>
 8008ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec2:	4453      	add	r3, sl
 8008ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec6:	783b      	ldrb	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 809d 	beq.w	8009008 <_svfiprintf_r+0x1b8>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	9307      	str	r3, [sp, #28]
 8008edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ee2:	462f      	mov	r7, r5
 8008ee4:	2205      	movs	r2, #5
 8008ee6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008eea:	4850      	ldr	r0, [pc, #320]	; (800902c <_svfiprintf_r+0x1dc>)
 8008eec:	f7f7 f988 	bl	8000200 <memchr>
 8008ef0:	9b04      	ldr	r3, [sp, #16]
 8008ef2:	b9d0      	cbnz	r0, 8008f2a <_svfiprintf_r+0xda>
 8008ef4:	06d9      	lsls	r1, r3, #27
 8008ef6:	bf44      	itt	mi
 8008ef8:	2220      	movmi	r2, #32
 8008efa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008efe:	071a      	lsls	r2, r3, #28
 8008f00:	bf44      	itt	mi
 8008f02:	222b      	movmi	r2, #43	; 0x2b
 8008f04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f08:	782a      	ldrb	r2, [r5, #0]
 8008f0a:	2a2a      	cmp	r2, #42	; 0x2a
 8008f0c:	d015      	beq.n	8008f3a <_svfiprintf_r+0xea>
 8008f0e:	9a07      	ldr	r2, [sp, #28]
 8008f10:	462f      	mov	r7, r5
 8008f12:	2000      	movs	r0, #0
 8008f14:	250a      	movs	r5, #10
 8008f16:	4639      	mov	r1, r7
 8008f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f1c:	3b30      	subs	r3, #48	; 0x30
 8008f1e:	2b09      	cmp	r3, #9
 8008f20:	d94d      	bls.n	8008fbe <_svfiprintf_r+0x16e>
 8008f22:	b1b8      	cbz	r0, 8008f54 <_svfiprintf_r+0x104>
 8008f24:	e00f      	b.n	8008f46 <_svfiprintf_r+0xf6>
 8008f26:	462f      	mov	r7, r5
 8008f28:	e7b8      	b.n	8008e9c <_svfiprintf_r+0x4c>
 8008f2a:	4a40      	ldr	r2, [pc, #256]	; (800902c <_svfiprintf_r+0x1dc>)
 8008f2c:	1a80      	subs	r0, r0, r2
 8008f2e:	fa0b f000 	lsl.w	r0, fp, r0
 8008f32:	4318      	orrs	r0, r3
 8008f34:	9004      	str	r0, [sp, #16]
 8008f36:	463d      	mov	r5, r7
 8008f38:	e7d3      	b.n	8008ee2 <_svfiprintf_r+0x92>
 8008f3a:	9a03      	ldr	r2, [sp, #12]
 8008f3c:	1d11      	adds	r1, r2, #4
 8008f3e:	6812      	ldr	r2, [r2, #0]
 8008f40:	9103      	str	r1, [sp, #12]
 8008f42:	2a00      	cmp	r2, #0
 8008f44:	db01      	blt.n	8008f4a <_svfiprintf_r+0xfa>
 8008f46:	9207      	str	r2, [sp, #28]
 8008f48:	e004      	b.n	8008f54 <_svfiprintf_r+0x104>
 8008f4a:	4252      	negs	r2, r2
 8008f4c:	f043 0302 	orr.w	r3, r3, #2
 8008f50:	9207      	str	r2, [sp, #28]
 8008f52:	9304      	str	r3, [sp, #16]
 8008f54:	783b      	ldrb	r3, [r7, #0]
 8008f56:	2b2e      	cmp	r3, #46	; 0x2e
 8008f58:	d10c      	bne.n	8008f74 <_svfiprintf_r+0x124>
 8008f5a:	787b      	ldrb	r3, [r7, #1]
 8008f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5e:	d133      	bne.n	8008fc8 <_svfiprintf_r+0x178>
 8008f60:	9b03      	ldr	r3, [sp, #12]
 8008f62:	1d1a      	adds	r2, r3, #4
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	9203      	str	r2, [sp, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	bfb8      	it	lt
 8008f6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f70:	3702      	adds	r7, #2
 8008f72:	9305      	str	r3, [sp, #20]
 8008f74:	4d2e      	ldr	r5, [pc, #184]	; (8009030 <_svfiprintf_r+0x1e0>)
 8008f76:	7839      	ldrb	r1, [r7, #0]
 8008f78:	2203      	movs	r2, #3
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f7f7 f940 	bl	8000200 <memchr>
 8008f80:	b138      	cbz	r0, 8008f92 <_svfiprintf_r+0x142>
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	1b40      	subs	r0, r0, r5
 8008f86:	fa03 f000 	lsl.w	r0, r3, r0
 8008f8a:	9b04      	ldr	r3, [sp, #16]
 8008f8c:	4303      	orrs	r3, r0
 8008f8e:	3701      	adds	r7, #1
 8008f90:	9304      	str	r3, [sp, #16]
 8008f92:	7839      	ldrb	r1, [r7, #0]
 8008f94:	4827      	ldr	r0, [pc, #156]	; (8009034 <_svfiprintf_r+0x1e4>)
 8008f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f9a:	2206      	movs	r2, #6
 8008f9c:	1c7e      	adds	r6, r7, #1
 8008f9e:	f7f7 f92f 	bl	8000200 <memchr>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d038      	beq.n	8009018 <_svfiprintf_r+0x1c8>
 8008fa6:	4b24      	ldr	r3, [pc, #144]	; (8009038 <_svfiprintf_r+0x1e8>)
 8008fa8:	bb13      	cbnz	r3, 8008ff0 <_svfiprintf_r+0x1a0>
 8008faa:	9b03      	ldr	r3, [sp, #12]
 8008fac:	3307      	adds	r3, #7
 8008fae:	f023 0307 	bic.w	r3, r3, #7
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	9303      	str	r3, [sp, #12]
 8008fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb8:	444b      	add	r3, r9
 8008fba:	9309      	str	r3, [sp, #36]	; 0x24
 8008fbc:	e76d      	b.n	8008e9a <_svfiprintf_r+0x4a>
 8008fbe:	fb05 3202 	mla	r2, r5, r2, r3
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	460f      	mov	r7, r1
 8008fc6:	e7a6      	b.n	8008f16 <_svfiprintf_r+0xc6>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	3701      	adds	r7, #1
 8008fcc:	9305      	str	r3, [sp, #20]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	250a      	movs	r5, #10
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd8:	3a30      	subs	r2, #48	; 0x30
 8008fda:	2a09      	cmp	r2, #9
 8008fdc:	d903      	bls.n	8008fe6 <_svfiprintf_r+0x196>
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0c8      	beq.n	8008f74 <_svfiprintf_r+0x124>
 8008fe2:	9105      	str	r1, [sp, #20]
 8008fe4:	e7c6      	b.n	8008f74 <_svfiprintf_r+0x124>
 8008fe6:	fb05 2101 	mla	r1, r5, r1, r2
 8008fea:	2301      	movs	r3, #1
 8008fec:	4607      	mov	r7, r0
 8008fee:	e7f0      	b.n	8008fd2 <_svfiprintf_r+0x182>
 8008ff0:	ab03      	add	r3, sp, #12
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4b11      	ldr	r3, [pc, #68]	; (800903c <_svfiprintf_r+0x1ec>)
 8008ff8:	a904      	add	r1, sp, #16
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	f7fc fa20 	bl	8005440 <_printf_float>
 8009000:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009004:	4681      	mov	r9, r0
 8009006:	d1d6      	bne.n	8008fb6 <_svfiprintf_r+0x166>
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	065b      	lsls	r3, r3, #25
 800900c:	f53f af35 	bmi.w	8008e7a <_svfiprintf_r+0x2a>
 8009010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009012:	b01d      	add	sp, #116	; 0x74
 8009014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009018:	ab03      	add	r3, sp, #12
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	4622      	mov	r2, r4
 800901e:	4b07      	ldr	r3, [pc, #28]	; (800903c <_svfiprintf_r+0x1ec>)
 8009020:	a904      	add	r1, sp, #16
 8009022:	4640      	mov	r0, r8
 8009024:	f7fc fcc2 	bl	80059ac <_printf_i>
 8009028:	e7ea      	b.n	8009000 <_svfiprintf_r+0x1b0>
 800902a:	bf00      	nop
 800902c:	08009f0c 	.word	0x08009f0c
 8009030:	08009f12 	.word	0x08009f12
 8009034:	08009f16 	.word	0x08009f16
 8009038:	08005441 	.word	0x08005441
 800903c:	08008d9b 	.word	0x08008d9b

08009040 <_sungetc_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	1c4b      	adds	r3, r1, #1
 8009044:	4614      	mov	r4, r2
 8009046:	d103      	bne.n	8009050 <_sungetc_r+0x10>
 8009048:	f04f 35ff 	mov.w	r5, #4294967295
 800904c:	4628      	mov	r0, r5
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	8993      	ldrh	r3, [r2, #12]
 8009052:	f023 0320 	bic.w	r3, r3, #32
 8009056:	8193      	strh	r3, [r2, #12]
 8009058:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800905a:	6852      	ldr	r2, [r2, #4]
 800905c:	b2cd      	uxtb	r5, r1
 800905e:	b18b      	cbz	r3, 8009084 <_sungetc_r+0x44>
 8009060:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009062:	4293      	cmp	r3, r2
 8009064:	dd08      	ble.n	8009078 <_sungetc_r+0x38>
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	1e5a      	subs	r2, r3, #1
 800906a:	6022      	str	r2, [r4, #0]
 800906c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	3301      	adds	r3, #1
 8009074:	6063      	str	r3, [r4, #4]
 8009076:	e7e9      	b.n	800904c <_sungetc_r+0xc>
 8009078:	4621      	mov	r1, r4
 800907a:	f000 fbb5 	bl	80097e8 <__submore>
 800907e:	2800      	cmp	r0, #0
 8009080:	d0f1      	beq.n	8009066 <_sungetc_r+0x26>
 8009082:	e7e1      	b.n	8009048 <_sungetc_r+0x8>
 8009084:	6921      	ldr	r1, [r4, #16]
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	b151      	cbz	r1, 80090a0 <_sungetc_r+0x60>
 800908a:	4299      	cmp	r1, r3
 800908c:	d208      	bcs.n	80090a0 <_sungetc_r+0x60>
 800908e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009092:	42a9      	cmp	r1, r5
 8009094:	d104      	bne.n	80090a0 <_sungetc_r+0x60>
 8009096:	3b01      	subs	r3, #1
 8009098:	3201      	adds	r2, #1
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	6062      	str	r2, [r4, #4]
 800909e:	e7d5      	b.n	800904c <_sungetc_r+0xc>
 80090a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80090a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a8:	6363      	str	r3, [r4, #52]	; 0x34
 80090aa:	2303      	movs	r3, #3
 80090ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80090ae:	4623      	mov	r3, r4
 80090b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	2301      	movs	r3, #1
 80090b8:	e7dc      	b.n	8009074 <_sungetc_r+0x34>

080090ba <__ssrefill_r>:
 80090ba:	b510      	push	{r4, lr}
 80090bc:	460c      	mov	r4, r1
 80090be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80090c0:	b169      	cbz	r1, 80090de <__ssrefill_r+0x24>
 80090c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090c6:	4299      	cmp	r1, r3
 80090c8:	d001      	beq.n	80090ce <__ssrefill_r+0x14>
 80090ca:	f7fc f87d 	bl	80051c8 <_free_r>
 80090ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090d0:	6063      	str	r3, [r4, #4]
 80090d2:	2000      	movs	r0, #0
 80090d4:	6360      	str	r0, [r4, #52]	; 0x34
 80090d6:	b113      	cbz	r3, 80090de <__ssrefill_r+0x24>
 80090d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	6923      	ldr	r3, [r4, #16]
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	2300      	movs	r3, #0
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	f043 0320 	orr.w	r3, r3, #32
 80090ec:	81a3      	strh	r3, [r4, #12]
 80090ee:	f04f 30ff 	mov.w	r0, #4294967295
 80090f2:	e7f3      	b.n	80090dc <__ssrefill_r+0x22>

080090f4 <__ssvfiscanf_r>:
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80090fc:	460c      	mov	r4, r1
 80090fe:	2100      	movs	r1, #0
 8009100:	9144      	str	r1, [sp, #272]	; 0x110
 8009102:	9145      	str	r1, [sp, #276]	; 0x114
 8009104:	499f      	ldr	r1, [pc, #636]	; (8009384 <__ssvfiscanf_r+0x290>)
 8009106:	91a0      	str	r1, [sp, #640]	; 0x280
 8009108:	f10d 0804 	add.w	r8, sp, #4
 800910c:	499e      	ldr	r1, [pc, #632]	; (8009388 <__ssvfiscanf_r+0x294>)
 800910e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800938c <__ssvfiscanf_r+0x298>
 8009112:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009116:	4606      	mov	r6, r0
 8009118:	4692      	mov	sl, r2
 800911a:	91a1      	str	r1, [sp, #644]	; 0x284
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	270a      	movs	r7, #10
 8009120:	f89a 3000 	ldrb.w	r3, [sl]
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 812a 	beq.w	800937e <__ssvfiscanf_r+0x28a>
 800912a:	4655      	mov	r5, sl
 800912c:	f7ff f80c 	bl	8008148 <__locale_ctype_ptr>
 8009130:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009134:	4458      	add	r0, fp
 8009136:	7843      	ldrb	r3, [r0, #1]
 8009138:	f013 0308 	ands.w	r3, r3, #8
 800913c:	d01c      	beq.n	8009178 <__ssvfiscanf_r+0x84>
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	dd12      	ble.n	800916a <__ssvfiscanf_r+0x76>
 8009144:	f7ff f800 	bl	8008148 <__locale_ctype_ptr>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	781a      	ldrb	r2, [r3, #0]
 800914c:	4410      	add	r0, r2
 800914e:	7842      	ldrb	r2, [r0, #1]
 8009150:	0712      	lsls	r2, r2, #28
 8009152:	d401      	bmi.n	8009158 <__ssvfiscanf_r+0x64>
 8009154:	46aa      	mov	sl, r5
 8009156:	e7e3      	b.n	8009120 <__ssvfiscanf_r+0x2c>
 8009158:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800915a:	3201      	adds	r2, #1
 800915c:	9245      	str	r2, [sp, #276]	; 0x114
 800915e:	6862      	ldr	r2, [r4, #4]
 8009160:	3301      	adds	r3, #1
 8009162:	3a01      	subs	r2, #1
 8009164:	6062      	str	r2, [r4, #4]
 8009166:	6023      	str	r3, [r4, #0]
 8009168:	e7e9      	b.n	800913e <__ssvfiscanf_r+0x4a>
 800916a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800916c:	4621      	mov	r1, r4
 800916e:	4630      	mov	r0, r6
 8009170:	4798      	blx	r3
 8009172:	2800      	cmp	r0, #0
 8009174:	d0e6      	beq.n	8009144 <__ssvfiscanf_r+0x50>
 8009176:	e7ed      	b.n	8009154 <__ssvfiscanf_r+0x60>
 8009178:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800917c:	f040 8082 	bne.w	8009284 <__ssvfiscanf_r+0x190>
 8009180:	9343      	str	r3, [sp, #268]	; 0x10c
 8009182:	9341      	str	r3, [sp, #260]	; 0x104
 8009184:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009188:	2b2a      	cmp	r3, #42	; 0x2a
 800918a:	d103      	bne.n	8009194 <__ssvfiscanf_r+0xa0>
 800918c:	2310      	movs	r3, #16
 800918e:	9341      	str	r3, [sp, #260]	; 0x104
 8009190:	f10a 0502 	add.w	r5, sl, #2
 8009194:	46aa      	mov	sl, r5
 8009196:	f815 1b01 	ldrb.w	r1, [r5], #1
 800919a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800919e:	2a09      	cmp	r2, #9
 80091a0:	d922      	bls.n	80091e8 <__ssvfiscanf_r+0xf4>
 80091a2:	2203      	movs	r2, #3
 80091a4:	4879      	ldr	r0, [pc, #484]	; (800938c <__ssvfiscanf_r+0x298>)
 80091a6:	f7f7 f82b 	bl	8000200 <memchr>
 80091aa:	b138      	cbz	r0, 80091bc <__ssvfiscanf_r+0xc8>
 80091ac:	eba0 0309 	sub.w	r3, r0, r9
 80091b0:	2001      	movs	r0, #1
 80091b2:	4098      	lsls	r0, r3
 80091b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091b6:	4318      	orrs	r0, r3
 80091b8:	9041      	str	r0, [sp, #260]	; 0x104
 80091ba:	46aa      	mov	sl, r5
 80091bc:	f89a 3000 	ldrb.w	r3, [sl]
 80091c0:	2b67      	cmp	r3, #103	; 0x67
 80091c2:	f10a 0501 	add.w	r5, sl, #1
 80091c6:	d82b      	bhi.n	8009220 <__ssvfiscanf_r+0x12c>
 80091c8:	2b65      	cmp	r3, #101	; 0x65
 80091ca:	f080 809f 	bcs.w	800930c <__ssvfiscanf_r+0x218>
 80091ce:	2b47      	cmp	r3, #71	; 0x47
 80091d0:	d810      	bhi.n	80091f4 <__ssvfiscanf_r+0x100>
 80091d2:	2b45      	cmp	r3, #69	; 0x45
 80091d4:	f080 809a 	bcs.w	800930c <__ssvfiscanf_r+0x218>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d06c      	beq.n	80092b6 <__ssvfiscanf_r+0x1c2>
 80091dc:	2b25      	cmp	r3, #37	; 0x25
 80091de:	d051      	beq.n	8009284 <__ssvfiscanf_r+0x190>
 80091e0:	2303      	movs	r3, #3
 80091e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80091e4:	9742      	str	r7, [sp, #264]	; 0x108
 80091e6:	e027      	b.n	8009238 <__ssvfiscanf_r+0x144>
 80091e8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80091ea:	fb07 1303 	mla	r3, r7, r3, r1
 80091ee:	3b30      	subs	r3, #48	; 0x30
 80091f0:	9343      	str	r3, [sp, #268]	; 0x10c
 80091f2:	e7cf      	b.n	8009194 <__ssvfiscanf_r+0xa0>
 80091f4:	2b5b      	cmp	r3, #91	; 0x5b
 80091f6:	d06a      	beq.n	80092ce <__ssvfiscanf_r+0x1da>
 80091f8:	d80c      	bhi.n	8009214 <__ssvfiscanf_r+0x120>
 80091fa:	2b58      	cmp	r3, #88	; 0x58
 80091fc:	d1f0      	bne.n	80091e0 <__ssvfiscanf_r+0xec>
 80091fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009204:	9241      	str	r2, [sp, #260]	; 0x104
 8009206:	2210      	movs	r2, #16
 8009208:	9242      	str	r2, [sp, #264]	; 0x108
 800920a:	2b6e      	cmp	r3, #110	; 0x6e
 800920c:	bf8c      	ite	hi
 800920e:	2304      	movhi	r3, #4
 8009210:	2303      	movls	r3, #3
 8009212:	e010      	b.n	8009236 <__ssvfiscanf_r+0x142>
 8009214:	2b63      	cmp	r3, #99	; 0x63
 8009216:	d065      	beq.n	80092e4 <__ssvfiscanf_r+0x1f0>
 8009218:	2b64      	cmp	r3, #100	; 0x64
 800921a:	d1e1      	bne.n	80091e0 <__ssvfiscanf_r+0xec>
 800921c:	9742      	str	r7, [sp, #264]	; 0x108
 800921e:	e7f4      	b.n	800920a <__ssvfiscanf_r+0x116>
 8009220:	2b70      	cmp	r3, #112	; 0x70
 8009222:	d04b      	beq.n	80092bc <__ssvfiscanf_r+0x1c8>
 8009224:	d826      	bhi.n	8009274 <__ssvfiscanf_r+0x180>
 8009226:	2b6e      	cmp	r3, #110	; 0x6e
 8009228:	d062      	beq.n	80092f0 <__ssvfiscanf_r+0x1fc>
 800922a:	d84c      	bhi.n	80092c6 <__ssvfiscanf_r+0x1d2>
 800922c:	2b69      	cmp	r3, #105	; 0x69
 800922e:	d1d7      	bne.n	80091e0 <__ssvfiscanf_r+0xec>
 8009230:	2300      	movs	r3, #0
 8009232:	9342      	str	r3, [sp, #264]	; 0x108
 8009234:	2303      	movs	r3, #3
 8009236:	9347      	str	r3, [sp, #284]	; 0x11c
 8009238:	6863      	ldr	r3, [r4, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	dd68      	ble.n	8009310 <__ssvfiscanf_r+0x21c>
 800923e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009240:	0659      	lsls	r1, r3, #25
 8009242:	d407      	bmi.n	8009254 <__ssvfiscanf_r+0x160>
 8009244:	f7fe ff80 	bl	8008148 <__locale_ctype_ptr>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	781a      	ldrb	r2, [r3, #0]
 800924c:	4410      	add	r0, r2
 800924e:	7842      	ldrb	r2, [r0, #1]
 8009250:	0712      	lsls	r2, r2, #28
 8009252:	d464      	bmi.n	800931e <__ssvfiscanf_r+0x22a>
 8009254:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009256:	2b02      	cmp	r3, #2
 8009258:	dc73      	bgt.n	8009342 <__ssvfiscanf_r+0x24e>
 800925a:	466b      	mov	r3, sp
 800925c:	4622      	mov	r2, r4
 800925e:	a941      	add	r1, sp, #260	; 0x104
 8009260:	4630      	mov	r0, r6
 8009262:	f000 f897 	bl	8009394 <_scanf_chars>
 8009266:	2801      	cmp	r0, #1
 8009268:	f000 8089 	beq.w	800937e <__ssvfiscanf_r+0x28a>
 800926c:	2802      	cmp	r0, #2
 800926e:	f47f af71 	bne.w	8009154 <__ssvfiscanf_r+0x60>
 8009272:	e01d      	b.n	80092b0 <__ssvfiscanf_r+0x1bc>
 8009274:	2b75      	cmp	r3, #117	; 0x75
 8009276:	d0d1      	beq.n	800921c <__ssvfiscanf_r+0x128>
 8009278:	2b78      	cmp	r3, #120	; 0x78
 800927a:	d0c0      	beq.n	80091fe <__ssvfiscanf_r+0x10a>
 800927c:	2b73      	cmp	r3, #115	; 0x73
 800927e:	d1af      	bne.n	80091e0 <__ssvfiscanf_r+0xec>
 8009280:	2302      	movs	r3, #2
 8009282:	e7d8      	b.n	8009236 <__ssvfiscanf_r+0x142>
 8009284:	6863      	ldr	r3, [r4, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd0c      	ble.n	80092a4 <__ssvfiscanf_r+0x1b0>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	781a      	ldrb	r2, [r3, #0]
 800928e:	455a      	cmp	r2, fp
 8009290:	d175      	bne.n	800937e <__ssvfiscanf_r+0x28a>
 8009292:	3301      	adds	r3, #1
 8009294:	6862      	ldr	r2, [r4, #4]
 8009296:	6023      	str	r3, [r4, #0]
 8009298:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800929a:	3a01      	subs	r2, #1
 800929c:	3301      	adds	r3, #1
 800929e:	6062      	str	r2, [r4, #4]
 80092a0:	9345      	str	r3, [sp, #276]	; 0x114
 80092a2:	e757      	b.n	8009154 <__ssvfiscanf_r+0x60>
 80092a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80092a6:	4621      	mov	r1, r4
 80092a8:	4630      	mov	r0, r6
 80092aa:	4798      	blx	r3
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d0ec      	beq.n	800928a <__ssvfiscanf_r+0x196>
 80092b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d159      	bne.n	800936a <__ssvfiscanf_r+0x276>
 80092b6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ba:	e05c      	b.n	8009376 <__ssvfiscanf_r+0x282>
 80092bc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80092be:	f042 0220 	orr.w	r2, r2, #32
 80092c2:	9241      	str	r2, [sp, #260]	; 0x104
 80092c4:	e79b      	b.n	80091fe <__ssvfiscanf_r+0x10a>
 80092c6:	2308      	movs	r3, #8
 80092c8:	9342      	str	r3, [sp, #264]	; 0x108
 80092ca:	2304      	movs	r3, #4
 80092cc:	e7b3      	b.n	8009236 <__ssvfiscanf_r+0x142>
 80092ce:	4629      	mov	r1, r5
 80092d0:	4640      	mov	r0, r8
 80092d2:	f000 f9c9 	bl	8009668 <__sccl>
 80092d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092dc:	9341      	str	r3, [sp, #260]	; 0x104
 80092de:	4605      	mov	r5, r0
 80092e0:	2301      	movs	r3, #1
 80092e2:	e7a8      	b.n	8009236 <__ssvfiscanf_r+0x142>
 80092e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ea:	9341      	str	r3, [sp, #260]	; 0x104
 80092ec:	2300      	movs	r3, #0
 80092ee:	e7a2      	b.n	8009236 <__ssvfiscanf_r+0x142>
 80092f0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80092f2:	06c3      	lsls	r3, r0, #27
 80092f4:	f53f af2e 	bmi.w	8009154 <__ssvfiscanf_r+0x60>
 80092f8:	9b00      	ldr	r3, [sp, #0]
 80092fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80092fc:	1d19      	adds	r1, r3, #4
 80092fe:	9100      	str	r1, [sp, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	07c0      	lsls	r0, r0, #31
 8009304:	bf4c      	ite	mi
 8009306:	801a      	strhmi	r2, [r3, #0]
 8009308:	601a      	strpl	r2, [r3, #0]
 800930a:	e723      	b.n	8009154 <__ssvfiscanf_r+0x60>
 800930c:	2305      	movs	r3, #5
 800930e:	e792      	b.n	8009236 <__ssvfiscanf_r+0x142>
 8009310:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009312:	4621      	mov	r1, r4
 8009314:	4630      	mov	r0, r6
 8009316:	4798      	blx	r3
 8009318:	2800      	cmp	r0, #0
 800931a:	d090      	beq.n	800923e <__ssvfiscanf_r+0x14a>
 800931c:	e7c8      	b.n	80092b0 <__ssvfiscanf_r+0x1bc>
 800931e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009320:	3201      	adds	r2, #1
 8009322:	9245      	str	r2, [sp, #276]	; 0x114
 8009324:	6862      	ldr	r2, [r4, #4]
 8009326:	3a01      	subs	r2, #1
 8009328:	2a00      	cmp	r2, #0
 800932a:	6062      	str	r2, [r4, #4]
 800932c:	dd02      	ble.n	8009334 <__ssvfiscanf_r+0x240>
 800932e:	3301      	adds	r3, #1
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	e787      	b.n	8009244 <__ssvfiscanf_r+0x150>
 8009334:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009336:	4621      	mov	r1, r4
 8009338:	4630      	mov	r0, r6
 800933a:	4798      	blx	r3
 800933c:	2800      	cmp	r0, #0
 800933e:	d081      	beq.n	8009244 <__ssvfiscanf_r+0x150>
 8009340:	e7b6      	b.n	80092b0 <__ssvfiscanf_r+0x1bc>
 8009342:	2b04      	cmp	r3, #4
 8009344:	dc06      	bgt.n	8009354 <__ssvfiscanf_r+0x260>
 8009346:	466b      	mov	r3, sp
 8009348:	4622      	mov	r2, r4
 800934a:	a941      	add	r1, sp, #260	; 0x104
 800934c:	4630      	mov	r0, r6
 800934e:	f000 f885 	bl	800945c <_scanf_i>
 8009352:	e788      	b.n	8009266 <__ssvfiscanf_r+0x172>
 8009354:	4b0e      	ldr	r3, [pc, #56]	; (8009390 <__ssvfiscanf_r+0x29c>)
 8009356:	2b00      	cmp	r3, #0
 8009358:	f43f aefc 	beq.w	8009154 <__ssvfiscanf_r+0x60>
 800935c:	466b      	mov	r3, sp
 800935e:	4622      	mov	r2, r4
 8009360:	a941      	add	r1, sp, #260	; 0x104
 8009362:	4630      	mov	r0, r6
 8009364:	f3af 8000 	nop.w
 8009368:	e77d      	b.n	8009266 <__ssvfiscanf_r+0x172>
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009370:	bf18      	it	ne
 8009372:	f04f 30ff 	movne.w	r0, #4294967295
 8009376:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009380:	e7f9      	b.n	8009376 <__ssvfiscanf_r+0x282>
 8009382:	bf00      	nop
 8009384:	08009041 	.word	0x08009041
 8009388:	080090bb 	.word	0x080090bb
 800938c:	08009f12 	.word	0x08009f12
 8009390:	00000000 	.word	0x00000000

08009394 <_scanf_chars>:
 8009394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009398:	4615      	mov	r5, r2
 800939a:	688a      	ldr	r2, [r1, #8]
 800939c:	4680      	mov	r8, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	b932      	cbnz	r2, 80093b0 <_scanf_chars+0x1c>
 80093a2:	698a      	ldr	r2, [r1, #24]
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	bf14      	ite	ne
 80093a8:	f04f 32ff 	movne.w	r2, #4294967295
 80093ac:	2201      	moveq	r2, #1
 80093ae:	608a      	str	r2, [r1, #8]
 80093b0:	6822      	ldr	r2, [r4, #0]
 80093b2:	06d1      	lsls	r1, r2, #27
 80093b4:	bf5f      	itttt	pl
 80093b6:	681a      	ldrpl	r2, [r3, #0]
 80093b8:	1d11      	addpl	r1, r2, #4
 80093ba:	6019      	strpl	r1, [r3, #0]
 80093bc:	6817      	ldrpl	r7, [r2, #0]
 80093be:	2600      	movs	r6, #0
 80093c0:	69a3      	ldr	r3, [r4, #24]
 80093c2:	b1db      	cbz	r3, 80093fc <_scanf_chars+0x68>
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d107      	bne.n	80093d8 <_scanf_chars+0x44>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	6962      	ldr	r2, [r4, #20]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	5cd3      	ldrb	r3, [r2, r3]
 80093d0:	b9a3      	cbnz	r3, 80093fc <_scanf_chars+0x68>
 80093d2:	2e00      	cmp	r6, #0
 80093d4:	d132      	bne.n	800943c <_scanf_chars+0xa8>
 80093d6:	e006      	b.n	80093e6 <_scanf_chars+0x52>
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d007      	beq.n	80093ec <_scanf_chars+0x58>
 80093dc:	2e00      	cmp	r6, #0
 80093de:	d12d      	bne.n	800943c <_scanf_chars+0xa8>
 80093e0:	69a3      	ldr	r3, [r4, #24]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d12a      	bne.n	800943c <_scanf_chars+0xa8>
 80093e6:	2001      	movs	r0, #1
 80093e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ec:	f7fe feac 	bl	8008148 <__locale_ctype_ptr>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	4418      	add	r0, r3
 80093f6:	7843      	ldrb	r3, [r0, #1]
 80093f8:	071b      	lsls	r3, r3, #28
 80093fa:	d4ef      	bmi.n	80093dc <_scanf_chars+0x48>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	06da      	lsls	r2, r3, #27
 8009400:	bf5e      	ittt	pl
 8009402:	682b      	ldrpl	r3, [r5, #0]
 8009404:	781b      	ldrbpl	r3, [r3, #0]
 8009406:	703b      	strbpl	r3, [r7, #0]
 8009408:	682a      	ldr	r2, [r5, #0]
 800940a:	686b      	ldr	r3, [r5, #4]
 800940c:	f102 0201 	add.w	r2, r2, #1
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	68a2      	ldr	r2, [r4, #8]
 8009414:	f103 33ff 	add.w	r3, r3, #4294967295
 8009418:	f102 32ff 	add.w	r2, r2, #4294967295
 800941c:	606b      	str	r3, [r5, #4]
 800941e:	f106 0601 	add.w	r6, r6, #1
 8009422:	bf58      	it	pl
 8009424:	3701      	addpl	r7, #1
 8009426:	60a2      	str	r2, [r4, #8]
 8009428:	b142      	cbz	r2, 800943c <_scanf_chars+0xa8>
 800942a:	2b00      	cmp	r3, #0
 800942c:	dcc8      	bgt.n	80093c0 <_scanf_chars+0x2c>
 800942e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009432:	4629      	mov	r1, r5
 8009434:	4640      	mov	r0, r8
 8009436:	4798      	blx	r3
 8009438:	2800      	cmp	r0, #0
 800943a:	d0c1      	beq.n	80093c0 <_scanf_chars+0x2c>
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	f013 0310 	ands.w	r3, r3, #16
 8009442:	d105      	bne.n	8009450 <_scanf_chars+0xbc>
 8009444:	68e2      	ldr	r2, [r4, #12]
 8009446:	3201      	adds	r2, #1
 8009448:	60e2      	str	r2, [r4, #12]
 800944a:	69a2      	ldr	r2, [r4, #24]
 800944c:	b102      	cbz	r2, 8009450 <_scanf_chars+0xbc>
 800944e:	703b      	strb	r3, [r7, #0]
 8009450:	6923      	ldr	r3, [r4, #16]
 8009452:	441e      	add	r6, r3
 8009454:	6126      	str	r6, [r4, #16]
 8009456:	2000      	movs	r0, #0
 8009458:	e7c6      	b.n	80093e8 <_scanf_chars+0x54>
	...

0800945c <_scanf_i>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	469a      	mov	sl, r3
 8009462:	4b74      	ldr	r3, [pc, #464]	; (8009634 <_scanf_i+0x1d8>)
 8009464:	460c      	mov	r4, r1
 8009466:	4683      	mov	fp, r0
 8009468:	4616      	mov	r6, r2
 800946a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800946e:	b087      	sub	sp, #28
 8009470:	ab03      	add	r3, sp, #12
 8009472:	68a7      	ldr	r7, [r4, #8]
 8009474:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009478:	4b6f      	ldr	r3, [pc, #444]	; (8009638 <_scanf_i+0x1dc>)
 800947a:	69a1      	ldr	r1, [r4, #24]
 800947c:	4a6f      	ldr	r2, [pc, #444]	; (800963c <_scanf_i+0x1e0>)
 800947e:	2903      	cmp	r1, #3
 8009480:	bf08      	it	eq
 8009482:	461a      	moveq	r2, r3
 8009484:	1e7b      	subs	r3, r7, #1
 8009486:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800948a:	bf84      	itt	hi
 800948c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009490:	60a3      	strhi	r3, [r4, #8]
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	9200      	str	r2, [sp, #0]
 8009496:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800949a:	bf88      	it	hi
 800949c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80094a0:	f104 091c 	add.w	r9, r4, #28
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bf8c      	ite	hi
 80094a8:	197f      	addhi	r7, r7, r5
 80094aa:	2700      	movls	r7, #0
 80094ac:	464b      	mov	r3, r9
 80094ae:	f04f 0800 	mov.w	r8, #0
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	6831      	ldr	r1, [r6, #0]
 80094b6:	ab03      	add	r3, sp, #12
 80094b8:	2202      	movs	r2, #2
 80094ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80094be:	7809      	ldrb	r1, [r1, #0]
 80094c0:	f7f6 fe9e 	bl	8000200 <memchr>
 80094c4:	9b01      	ldr	r3, [sp, #4]
 80094c6:	b330      	cbz	r0, 8009516 <_scanf_i+0xba>
 80094c8:	f1b8 0f01 	cmp.w	r8, #1
 80094cc:	d15a      	bne.n	8009584 <_scanf_i+0x128>
 80094ce:	6862      	ldr	r2, [r4, #4]
 80094d0:	b92a      	cbnz	r2, 80094de <_scanf_i+0x82>
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	2108      	movs	r1, #8
 80094d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094da:	6061      	str	r1, [r4, #4]
 80094dc:	6022      	str	r2, [r4, #0]
 80094de:	6822      	ldr	r2, [r4, #0]
 80094e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80094e4:	6022      	str	r2, [r4, #0]
 80094e6:	68a2      	ldr	r2, [r4, #8]
 80094e8:	1e51      	subs	r1, r2, #1
 80094ea:	60a1      	str	r1, [r4, #8]
 80094ec:	b19a      	cbz	r2, 8009516 <_scanf_i+0xba>
 80094ee:	6832      	ldr	r2, [r6, #0]
 80094f0:	1c51      	adds	r1, r2, #1
 80094f2:	6031      	str	r1, [r6, #0]
 80094f4:	7812      	ldrb	r2, [r2, #0]
 80094f6:	701a      	strb	r2, [r3, #0]
 80094f8:	1c5d      	adds	r5, r3, #1
 80094fa:	6873      	ldr	r3, [r6, #4]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	6073      	str	r3, [r6, #4]
 8009502:	dc07      	bgt.n	8009514 <_scanf_i+0xb8>
 8009504:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009508:	4631      	mov	r1, r6
 800950a:	4658      	mov	r0, fp
 800950c:	4798      	blx	r3
 800950e:	2800      	cmp	r0, #0
 8009510:	f040 8086 	bne.w	8009620 <_scanf_i+0x1c4>
 8009514:	462b      	mov	r3, r5
 8009516:	f108 0801 	add.w	r8, r8, #1
 800951a:	f1b8 0f03 	cmp.w	r8, #3
 800951e:	d1c8      	bne.n	80094b2 <_scanf_i+0x56>
 8009520:	6862      	ldr	r2, [r4, #4]
 8009522:	b90a      	cbnz	r2, 8009528 <_scanf_i+0xcc>
 8009524:	220a      	movs	r2, #10
 8009526:	6062      	str	r2, [r4, #4]
 8009528:	6862      	ldr	r2, [r4, #4]
 800952a:	4945      	ldr	r1, [pc, #276]	; (8009640 <_scanf_i+0x1e4>)
 800952c:	6960      	ldr	r0, [r4, #20]
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	1a89      	subs	r1, r1, r2
 8009532:	f000 f899 	bl	8009668 <__sccl>
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	f04f 0800 	mov.w	r8, #0
 800953c:	461d      	mov	r5, r3
 800953e:	68a3      	ldr	r3, [r4, #8]
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d03a      	beq.n	80095bc <_scanf_i+0x160>
 8009546:	6831      	ldr	r1, [r6, #0]
 8009548:	6960      	ldr	r0, [r4, #20]
 800954a:	f891 c000 	ldrb.w	ip, [r1]
 800954e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009552:	2800      	cmp	r0, #0
 8009554:	d032      	beq.n	80095bc <_scanf_i+0x160>
 8009556:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800955a:	d121      	bne.n	80095a0 <_scanf_i+0x144>
 800955c:	0510      	lsls	r0, r2, #20
 800955e:	d51f      	bpl.n	80095a0 <_scanf_i+0x144>
 8009560:	f108 0801 	add.w	r8, r8, #1
 8009564:	b117      	cbz	r7, 800956c <_scanf_i+0x110>
 8009566:	3301      	adds	r3, #1
 8009568:	3f01      	subs	r7, #1
 800956a:	60a3      	str	r3, [r4, #8]
 800956c:	6873      	ldr	r3, [r6, #4]
 800956e:	3b01      	subs	r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	6073      	str	r3, [r6, #4]
 8009574:	dd1b      	ble.n	80095ae <_scanf_i+0x152>
 8009576:	6833      	ldr	r3, [r6, #0]
 8009578:	3301      	adds	r3, #1
 800957a:	6033      	str	r3, [r6, #0]
 800957c:	68a3      	ldr	r3, [r4, #8]
 800957e:	3b01      	subs	r3, #1
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	e7dc      	b.n	800953e <_scanf_i+0xe2>
 8009584:	f1b8 0f02 	cmp.w	r8, #2
 8009588:	d1ad      	bne.n	80094e6 <_scanf_i+0x8a>
 800958a:	6822      	ldr	r2, [r4, #0]
 800958c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009590:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009594:	d1bf      	bne.n	8009516 <_scanf_i+0xba>
 8009596:	2110      	movs	r1, #16
 8009598:	6061      	str	r1, [r4, #4]
 800959a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800959e:	e7a1      	b.n	80094e4 <_scanf_i+0x88>
 80095a0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80095a4:	6022      	str	r2, [r4, #0]
 80095a6:	780b      	ldrb	r3, [r1, #0]
 80095a8:	702b      	strb	r3, [r5, #0]
 80095aa:	3501      	adds	r5, #1
 80095ac:	e7de      	b.n	800956c <_scanf_i+0x110>
 80095ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80095b2:	4631      	mov	r1, r6
 80095b4:	4658      	mov	r0, fp
 80095b6:	4798      	blx	r3
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d0df      	beq.n	800957c <_scanf_i+0x120>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	05d9      	lsls	r1, r3, #23
 80095c0:	d50c      	bpl.n	80095dc <_scanf_i+0x180>
 80095c2:	454d      	cmp	r5, r9
 80095c4:	d908      	bls.n	80095d8 <_scanf_i+0x17c>
 80095c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80095ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095ce:	4632      	mov	r2, r6
 80095d0:	4658      	mov	r0, fp
 80095d2:	4798      	blx	r3
 80095d4:	1e6f      	subs	r7, r5, #1
 80095d6:	463d      	mov	r5, r7
 80095d8:	454d      	cmp	r5, r9
 80095da:	d029      	beq.n	8009630 <_scanf_i+0x1d4>
 80095dc:	6822      	ldr	r2, [r4, #0]
 80095de:	f012 0210 	ands.w	r2, r2, #16
 80095e2:	d113      	bne.n	800960c <_scanf_i+0x1b0>
 80095e4:	702a      	strb	r2, [r5, #0]
 80095e6:	6863      	ldr	r3, [r4, #4]
 80095e8:	9e00      	ldr	r6, [sp, #0]
 80095ea:	4649      	mov	r1, r9
 80095ec:	4658      	mov	r0, fp
 80095ee:	47b0      	blx	r6
 80095f0:	f8da 3000 	ldr.w	r3, [sl]
 80095f4:	6821      	ldr	r1, [r4, #0]
 80095f6:	1d1a      	adds	r2, r3, #4
 80095f8:	f8ca 2000 	str.w	r2, [sl]
 80095fc:	f011 0f20 	tst.w	r1, #32
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	d010      	beq.n	8009626 <_scanf_i+0x1ca>
 8009604:	6018      	str	r0, [r3, #0]
 8009606:	68e3      	ldr	r3, [r4, #12]
 8009608:	3301      	adds	r3, #1
 800960a:	60e3      	str	r3, [r4, #12]
 800960c:	eba5 0509 	sub.w	r5, r5, r9
 8009610:	44a8      	add	r8, r5
 8009612:	6925      	ldr	r5, [r4, #16]
 8009614:	4445      	add	r5, r8
 8009616:	6125      	str	r5, [r4, #16]
 8009618:	2000      	movs	r0, #0
 800961a:	b007      	add	sp, #28
 800961c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009620:	f04f 0800 	mov.w	r8, #0
 8009624:	e7ca      	b.n	80095bc <_scanf_i+0x160>
 8009626:	07ca      	lsls	r2, r1, #31
 8009628:	bf4c      	ite	mi
 800962a:	8018      	strhmi	r0, [r3, #0]
 800962c:	6018      	strpl	r0, [r3, #0]
 800962e:	e7ea      	b.n	8009606 <_scanf_i+0x1aa>
 8009630:	2001      	movs	r0, #1
 8009632:	e7f2      	b.n	800961a <_scanf_i+0x1be>
 8009634:	08009988 	.word	0x08009988
 8009638:	080097c5 	.word	0x080097c5
 800963c:	08006975 	.word	0x08006975
 8009640:	0800a02e 	.word	0x0800a02e

08009644 <_read_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4c07      	ldr	r4, [pc, #28]	; (8009664 <_read_r+0x20>)
 8009648:	4605      	mov	r5, r0
 800964a:	4608      	mov	r0, r1
 800964c:	4611      	mov	r1, r2
 800964e:	2200      	movs	r2, #0
 8009650:	6022      	str	r2, [r4, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	f7f7 ff42 	bl	80014dc <_read>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_read_r+0x1e>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	b103      	cbz	r3, 8009662 <_read_r+0x1e>
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	2000046c 	.word	0x2000046c

08009668 <__sccl>:
 8009668:	b570      	push	{r4, r5, r6, lr}
 800966a:	780b      	ldrb	r3, [r1, #0]
 800966c:	2b5e      	cmp	r3, #94	; 0x5e
 800966e:	bf13      	iteet	ne
 8009670:	1c4a      	addne	r2, r1, #1
 8009672:	1c8a      	addeq	r2, r1, #2
 8009674:	784b      	ldrbeq	r3, [r1, #1]
 8009676:	2100      	movne	r1, #0
 8009678:	bf08      	it	eq
 800967a:	2101      	moveq	r1, #1
 800967c:	1e44      	subs	r4, r0, #1
 800967e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009682:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009686:	42ac      	cmp	r4, r5
 8009688:	d1fb      	bne.n	8009682 <__sccl+0x1a>
 800968a:	b913      	cbnz	r3, 8009692 <__sccl+0x2a>
 800968c:	3a01      	subs	r2, #1
 800968e:	4610      	mov	r0, r2
 8009690:	bd70      	pop	{r4, r5, r6, pc}
 8009692:	f081 0401 	eor.w	r4, r1, #1
 8009696:	54c4      	strb	r4, [r0, r3]
 8009698:	1c51      	adds	r1, r2, #1
 800969a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800969e:	2d2d      	cmp	r5, #45	; 0x2d
 80096a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80096a4:	460a      	mov	r2, r1
 80096a6:	d006      	beq.n	80096b6 <__sccl+0x4e>
 80096a8:	2d5d      	cmp	r5, #93	; 0x5d
 80096aa:	d0f0      	beq.n	800968e <__sccl+0x26>
 80096ac:	b90d      	cbnz	r5, 80096b2 <__sccl+0x4a>
 80096ae:	4632      	mov	r2, r6
 80096b0:	e7ed      	b.n	800968e <__sccl+0x26>
 80096b2:	462b      	mov	r3, r5
 80096b4:	e7ef      	b.n	8009696 <__sccl+0x2e>
 80096b6:	780e      	ldrb	r6, [r1, #0]
 80096b8:	2e5d      	cmp	r6, #93	; 0x5d
 80096ba:	d0fa      	beq.n	80096b2 <__sccl+0x4a>
 80096bc:	42b3      	cmp	r3, r6
 80096be:	dcf8      	bgt.n	80096b2 <__sccl+0x4a>
 80096c0:	3301      	adds	r3, #1
 80096c2:	429e      	cmp	r6, r3
 80096c4:	54c4      	strb	r4, [r0, r3]
 80096c6:	dcfb      	bgt.n	80096c0 <__sccl+0x58>
 80096c8:	3102      	adds	r1, #2
 80096ca:	e7e6      	b.n	800969a <__sccl+0x32>

080096cc <_strtol_l.isra.0>:
 80096cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	4680      	mov	r8, r0
 80096d2:	4689      	mov	r9, r1
 80096d4:	4692      	mov	sl, r2
 80096d6:	461e      	mov	r6, r3
 80096d8:	460f      	mov	r7, r1
 80096da:	463d      	mov	r5, r7
 80096dc:	9808      	ldr	r0, [sp, #32]
 80096de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096e2:	f7fe fd2d 	bl	8008140 <__locale_ctype_ptr_l>
 80096e6:	4420      	add	r0, r4
 80096e8:	7843      	ldrb	r3, [r0, #1]
 80096ea:	f013 0308 	ands.w	r3, r3, #8
 80096ee:	d132      	bne.n	8009756 <_strtol_l.isra.0+0x8a>
 80096f0:	2c2d      	cmp	r4, #45	; 0x2d
 80096f2:	d132      	bne.n	800975a <_strtol_l.isra.0+0x8e>
 80096f4:	787c      	ldrb	r4, [r7, #1]
 80096f6:	1cbd      	adds	r5, r7, #2
 80096f8:	2201      	movs	r2, #1
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	d05d      	beq.n	80097ba <_strtol_l.isra.0+0xee>
 80096fe:	2e10      	cmp	r6, #16
 8009700:	d109      	bne.n	8009716 <_strtol_l.isra.0+0x4a>
 8009702:	2c30      	cmp	r4, #48	; 0x30
 8009704:	d107      	bne.n	8009716 <_strtol_l.isra.0+0x4a>
 8009706:	782b      	ldrb	r3, [r5, #0]
 8009708:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800970c:	2b58      	cmp	r3, #88	; 0x58
 800970e:	d14f      	bne.n	80097b0 <_strtol_l.isra.0+0xe4>
 8009710:	786c      	ldrb	r4, [r5, #1]
 8009712:	2610      	movs	r6, #16
 8009714:	3502      	adds	r5, #2
 8009716:	2a00      	cmp	r2, #0
 8009718:	bf14      	ite	ne
 800971a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800971e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009722:	2700      	movs	r7, #0
 8009724:	fbb1 fcf6 	udiv	ip, r1, r6
 8009728:	4638      	mov	r0, r7
 800972a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800972e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009732:	2b09      	cmp	r3, #9
 8009734:	d817      	bhi.n	8009766 <_strtol_l.isra.0+0x9a>
 8009736:	461c      	mov	r4, r3
 8009738:	42a6      	cmp	r6, r4
 800973a:	dd23      	ble.n	8009784 <_strtol_l.isra.0+0xb8>
 800973c:	1c7b      	adds	r3, r7, #1
 800973e:	d007      	beq.n	8009750 <_strtol_l.isra.0+0x84>
 8009740:	4584      	cmp	ip, r0
 8009742:	d31c      	bcc.n	800977e <_strtol_l.isra.0+0xb2>
 8009744:	d101      	bne.n	800974a <_strtol_l.isra.0+0x7e>
 8009746:	45a6      	cmp	lr, r4
 8009748:	db19      	blt.n	800977e <_strtol_l.isra.0+0xb2>
 800974a:	fb00 4006 	mla	r0, r0, r6, r4
 800974e:	2701      	movs	r7, #1
 8009750:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009754:	e7eb      	b.n	800972e <_strtol_l.isra.0+0x62>
 8009756:	462f      	mov	r7, r5
 8009758:	e7bf      	b.n	80096da <_strtol_l.isra.0+0xe>
 800975a:	2c2b      	cmp	r4, #43	; 0x2b
 800975c:	bf04      	itt	eq
 800975e:	1cbd      	addeq	r5, r7, #2
 8009760:	787c      	ldrbeq	r4, [r7, #1]
 8009762:	461a      	mov	r2, r3
 8009764:	e7c9      	b.n	80096fa <_strtol_l.isra.0+0x2e>
 8009766:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800976a:	2b19      	cmp	r3, #25
 800976c:	d801      	bhi.n	8009772 <_strtol_l.isra.0+0xa6>
 800976e:	3c37      	subs	r4, #55	; 0x37
 8009770:	e7e2      	b.n	8009738 <_strtol_l.isra.0+0x6c>
 8009772:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009776:	2b19      	cmp	r3, #25
 8009778:	d804      	bhi.n	8009784 <_strtol_l.isra.0+0xb8>
 800977a:	3c57      	subs	r4, #87	; 0x57
 800977c:	e7dc      	b.n	8009738 <_strtol_l.isra.0+0x6c>
 800977e:	f04f 37ff 	mov.w	r7, #4294967295
 8009782:	e7e5      	b.n	8009750 <_strtol_l.isra.0+0x84>
 8009784:	1c7b      	adds	r3, r7, #1
 8009786:	d108      	bne.n	800979a <_strtol_l.isra.0+0xce>
 8009788:	2322      	movs	r3, #34	; 0x22
 800978a:	f8c8 3000 	str.w	r3, [r8]
 800978e:	4608      	mov	r0, r1
 8009790:	f1ba 0f00 	cmp.w	sl, #0
 8009794:	d107      	bne.n	80097a6 <_strtol_l.isra.0+0xda>
 8009796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979a:	b102      	cbz	r2, 800979e <_strtol_l.isra.0+0xd2>
 800979c:	4240      	negs	r0, r0
 800979e:	f1ba 0f00 	cmp.w	sl, #0
 80097a2:	d0f8      	beq.n	8009796 <_strtol_l.isra.0+0xca>
 80097a4:	b10f      	cbz	r7, 80097aa <_strtol_l.isra.0+0xde>
 80097a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80097aa:	f8ca 9000 	str.w	r9, [sl]
 80097ae:	e7f2      	b.n	8009796 <_strtol_l.isra.0+0xca>
 80097b0:	2430      	movs	r4, #48	; 0x30
 80097b2:	2e00      	cmp	r6, #0
 80097b4:	d1af      	bne.n	8009716 <_strtol_l.isra.0+0x4a>
 80097b6:	2608      	movs	r6, #8
 80097b8:	e7ad      	b.n	8009716 <_strtol_l.isra.0+0x4a>
 80097ba:	2c30      	cmp	r4, #48	; 0x30
 80097bc:	d0a3      	beq.n	8009706 <_strtol_l.isra.0+0x3a>
 80097be:	260a      	movs	r6, #10
 80097c0:	e7a9      	b.n	8009716 <_strtol_l.isra.0+0x4a>
	...

080097c4 <_strtol_r>:
 80097c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097c6:	4c06      	ldr	r4, [pc, #24]	; (80097e0 <_strtol_r+0x1c>)
 80097c8:	4d06      	ldr	r5, [pc, #24]	; (80097e4 <_strtol_r+0x20>)
 80097ca:	6824      	ldr	r4, [r4, #0]
 80097cc:	6a24      	ldr	r4, [r4, #32]
 80097ce:	2c00      	cmp	r4, #0
 80097d0:	bf08      	it	eq
 80097d2:	462c      	moveq	r4, r5
 80097d4:	9400      	str	r4, [sp, #0]
 80097d6:	f7ff ff79 	bl	80096cc <_strtol_l.isra.0>
 80097da:	b003      	add	sp, #12
 80097dc:	bd30      	pop	{r4, r5, pc}
 80097de:	bf00      	nop
 80097e0:	20000014 	.word	0x20000014
 80097e4:	200000d8 	.word	0x200000d8

080097e8 <__submore>:
 80097e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ec:	460c      	mov	r4, r1
 80097ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80097f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097f4:	4299      	cmp	r1, r3
 80097f6:	d11d      	bne.n	8009834 <__submore+0x4c>
 80097f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097fc:	f7fb fd32 	bl	8005264 <_malloc_r>
 8009800:	b918      	cbnz	r0, 800980a <__submore+0x22>
 8009802:	f04f 30ff 	mov.w	r0, #4294967295
 8009806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800980a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009810:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009814:	6360      	str	r0, [r4, #52]	; 0x34
 8009816:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800981a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800981e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009822:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009826:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800982a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800982e:	6020      	str	r0, [r4, #0]
 8009830:	2000      	movs	r0, #0
 8009832:	e7e8      	b.n	8009806 <__submore+0x1e>
 8009834:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009836:	0077      	lsls	r7, r6, #1
 8009838:	463a      	mov	r2, r7
 800983a:	f7ff fa88 	bl	8008d4e <_realloc_r>
 800983e:	4605      	mov	r5, r0
 8009840:	2800      	cmp	r0, #0
 8009842:	d0de      	beq.n	8009802 <__submore+0x1a>
 8009844:	eb00 0806 	add.w	r8, r0, r6
 8009848:	4601      	mov	r1, r0
 800984a:	4632      	mov	r2, r6
 800984c:	4640      	mov	r0, r8
 800984e:	f7fe fd0d 	bl	800826c <memcpy>
 8009852:	f8c4 8000 	str.w	r8, [r4]
 8009856:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800985a:	e7e9      	b.n	8009830 <__submore+0x48>

0800985c <_malloc_usable_size_r>:
 800985c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009860:	1f18      	subs	r0, r3, #4
 8009862:	2b00      	cmp	r3, #0
 8009864:	bfbc      	itt	lt
 8009866:	580b      	ldrlt	r3, [r1, r0]
 8009868:	18c0      	addlt	r0, r0, r3
 800986a:	4770      	bx	lr

0800986c <_init>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	bf00      	nop
 8009870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009872:	bc08      	pop	{r3}
 8009874:	469e      	mov	lr, r3
 8009876:	4770      	bx	lr

08009878 <_fini>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	bf00      	nop
 800987c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987e:	bc08      	pop	{r3}
 8009880:	469e      	mov	lr, r3
 8009882:	4770      	bx	lr
