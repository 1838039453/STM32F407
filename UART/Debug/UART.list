
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dcc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08005f58  08005f58  00015f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006318  08006318  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006320  08006320  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006320  08006320  00016320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001e0  08006508  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08006508  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b365  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f1b  00000000  00000000  0002b575  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002d490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000708  00000000  00000000  0002dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021dfc  00000000  00000000  0002e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c23  00000000  00000000  000501b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2892  00000000  00000000  00059dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c669  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf8  00000000  00000000  0011c6e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f3c 	.word	0x08005f3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	08005f3c 	.word	0x08005f3c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b972 	b.w	8000e10 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0803 	orr.w	r8, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b7c:	fa1f fc85 	uxth.w	ip, r5
 8000b80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b88:	fb07 f10c 	mul.w	r1, r7, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b96:	f080 811b 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8118 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb8:	45a4      	cmp	ip, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	192c      	adds	r4, r5, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc2:	f080 8107 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	f240 8104 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	442c      	add	r4, r5
 8000bd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd4:	eba4 040c 	sub.w	r4, r4, ip
 8000bd8:	2700      	movs	r7, #0
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80eb 	beq.w	8000dca <__udivmoddi4+0x286>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d147      	bne.n	8000c9a <__udivmoddi4+0x156>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fa 	bhi.w	8000e08 <__udivmoddi4+0x2c4>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4800 	strd	r4, r8, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	1b49      	subs	r1, r1, r5
 8000c38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3c:	fa1f f885 	uxth.w	r8, r5
 8000c40:	2701      	movs	r7, #1
 8000c42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb08 f10c 	mul.w	r1, r8, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x14c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x14a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80b6 	bhi.w	8000dfa <__udivmoddi4+0x2b6>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e79f      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9e:	40bb      	lsls	r3, r7
 8000ca0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb8:	4325      	orrs	r5, r4
 8000cba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cbe:	0c2c      	lsrs	r4, r5, #16
 8000cc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc4:	fa1f fa8e 	uxth.w	sl, lr
 8000cc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ccc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce4:	f080 8087 	bcs.w	8000df6 <__udivmoddi4+0x2b2>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f240 8084 	bls.w	8000df6 <__udivmoddi4+0x2b2>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4473      	add	r3, lr
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	b2ad      	uxth	r5, r5
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d08:	45a2      	cmp	sl, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d14:	d26b      	bcs.n	8000dee <__udivmoddi4+0x2aa>
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	d969      	bls.n	8000dee <__udivmoddi4+0x2aa>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4474      	add	r4, lr
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	eba4 040a 	sub.w	r4, r4, sl
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	46c2      	mov	sl, r8
 8000d2e:	464b      	mov	r3, r9
 8000d30:	d354      	bcc.n	8000ddc <__udivmoddi4+0x298>
 8000d32:	d051      	beq.n	8000dd8 <__udivmoddi4+0x294>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d069      	beq.n	8000e0c <__udivmoddi4+0x2c8>
 8000d38:	ebb1 050a 	subs.w	r5, r1, sl
 8000d3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	40fc      	lsrs	r4, r7
 8000d48:	ea4c 0505 	orr.w	r5, ip, r5
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f703 	lsr.w	r7, r0, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	fa21 f303 	lsr.w	r3, r1, r3
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	4338      	orrs	r0, r7
 8000d6c:	0c01      	lsrs	r1, r0, #16
 8000d6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d72:	fa1f f885 	uxth.w	r8, r5
 8000d76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb07 f308 	mul.w	r3, r7, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x256>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d90:	d22f      	bcs.n	8000df2 <__udivmoddi4+0x2ae>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d92d      	bls.n	8000df2 <__udivmoddi4+0x2ae>
 8000d96:	3f02      	subs	r7, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	b281      	uxth	r1, r0
 8000d9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb00 f308 	mul.w	r3, r0, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db8:	d217      	bcs.n	8000dea <__udivmoddi4+0x2a6>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d915      	bls.n	8000dea <__udivmoddi4+0x2a6>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc8:	e73b      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dca:	4637      	mov	r7, r6
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e709      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fb      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd8:	4541      	cmp	r1, r8
 8000dda:	d2ab      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000ddc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de0:	eb69 020e 	sbc.w	r2, r9, lr
 8000de4:	3801      	subs	r0, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	e7a4      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dea:	4660      	mov	r0, ip
 8000dec:	e7e9      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000dee:	4618      	mov	r0, r3
 8000df0:	e795      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df2:	4667      	mov	r7, ip
 8000df4:	e7d1      	b.n	8000d9a <__udivmoddi4+0x256>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e77c      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	442c      	add	r4, r5
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0x14c>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	442b      	add	r3, r5
 8000e06:	e72f      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0xa0>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_DMA_Init+0x3c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <MX_DMA_Init+0x3c>)
 8000e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_DMA_Init+0x3c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	203a      	movs	r0, #58	; 0x3a
 8000e3c:	f000 fdbf 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e40:	203a      	movs	r0, #58	; 0x3a
 8000e42:	f000 fdd8 	bl	80019f6 <HAL_NVIC_EnableIRQ>

}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800

08000e54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_GPIO_Init+0x68>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <MX_GPIO_Init+0x68>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_GPIO_Init+0x68>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_GPIO_Init+0x68>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <MX_GPIO_Init+0x68>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MX_GPIO_Init+0x68>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_GPIO_Init+0x68>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <MX_GPIO_Init+0x68>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_GPIO_Init+0x68>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fc2e 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f810 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f7ff ffc2 	bl	8000e54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed0:	f7ff ffa0 	bl	8000e14 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ed4:	f000 f9b8 	bl	8001248 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_Debug_Init();
 8000ed8:	f000 fb86 	bl	80015e8 <UART_Debug_Init>
  printf("uart init ok...\r\n");
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <main+0x28>)
 8000ede:	f003 fa5d 	bl	800439c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	UART_Debug_Process();
 8000ee2:	f000 fb9b 	bl	800161c <UART_Debug_Process>
 8000ee6:	e7fc      	b.n	8000ee2 <main+0x22>
 8000ee8:	08005f58 	.word	0x08005f58

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fe9f 	bl	8003c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f50:	2310      	movs	r3, #16
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f54:	2302      	movs	r3, #2
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f60:	23a8      	movs	r3, #168	; 0xa8
 8000f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fafd 	bl	8002570 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f7c:	f000 f820 	bl	8000fc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fd28 	bl	80029f4 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000faa:	f000 f809 	bl	8000fc0 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3750      	adds	r7, #80	; 0x50
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_MspInit+0x4c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <HAL_MspInit+0x4c>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x4c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 fba8 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  Uart_Debug_IDLE(&huart1);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <USART1_IRQHandler+0x14>)
 8001082:	f000 fae1 	bl	8001648 <Uart_Debug_IDLE>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001086:	4802      	ldr	r0, [pc, #8]	; (8001090 <USART1_IRQHandler+0x14>)
 8001088:	f002 f864 	bl	8003154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000036c 	.word	0x2000036c

08001094 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA2_Stream2_IRQHandler+0x10>)
 800109a:	f000 fe67 	bl	8001d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000030c 	.word	0x2000030c

080010a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00a      	b.n	80010d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ba:	f3af 8000 	nop.w
 80010be:	4601      	mov	r1, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf0      	blt.n	80010ba <_read+0x12>
	}

return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e009      	b.n	8001108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	60ba      	str	r2, [r7, #8]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f94f 	bl	80013a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf1      	blt.n	80010f4 <_write+0x12>
	}
	return len;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_close>:

int _close(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
	return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001142:	605a      	str	r2, [r3, #4]
	return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_isatty>:

int _isatty(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
	return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x50>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x16>
		heap_end = &end;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <_sbrk+0x50>)
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <_sbrk+0x54>)
 8001198:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <_sbrk+0x50>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <_sbrk+0x50>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	466a      	mov	r2, sp
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d907      	bls.n	80011be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ae:	f002 fd0d 	bl	8003bcc <__errno>
 80011b2:	4602      	mov	r2, r0
 80011b4:	230c      	movs	r3, #12
 80011b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	e006      	b.n	80011cc <_sbrk+0x48>
	}

	heap_end += incr;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <_sbrk+0x50>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <_sbrk+0x50>)
 80011c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200001fc 	.word	0x200001fc
 80011d8:	200003b8 	.word	0x200003b8

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <SystemInit+0x60>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <SystemInit+0x60>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <SystemInit+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a12      	ldr	r2, [pc, #72]	; (8001240 <SystemInit+0x64>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <SystemInit+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <SystemInit+0x64>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <SystemInit+0x64>)
 8001208:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800120c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <SystemInit+0x64>)
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <SystemInit+0x68>)
 8001216:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <SystemInit+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a08      	ldr	r2, [pc, #32]	; (8001240 <SystemInit+0x64>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001222:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <SystemInit+0x60>)
 800122c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001230:	609a      	str	r2, [r3, #8]
#endif
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	40023800 	.word	0x40023800
 8001244:	24003010 	.word	0x24003010

08001248 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <MX_USART1_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001280:	f001 fda6 	bl	8002dd0 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f7ff fe99 	bl	8000fc0 <Error_Handler>
  }

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000036c 	.word	0x2000036c
 8001298:	40011000 	.word	0x40011000

0800129c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a34      	ldr	r2, [pc, #208]	; (800138c <HAL_UART_MspInit+0xf0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d162      	bne.n	8001384 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_UART_MspInit+0xf4>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_UART_MspInit+0xf4>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_UART_MspInit+0xf4>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_UART_MspInit+0xf4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a2b      	ldr	r2, [pc, #172]	; (8001390 <HAL_UART_MspInit+0xf4>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <HAL_UART_MspInit+0xf4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001308:	2307      	movs	r3, #7
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4820      	ldr	r0, [pc, #128]	; (8001394 <HAL_UART_MspInit+0xf8>)
 8001314:	f000 ff92 	bl	800223c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_UART_MspInit+0xfc>)
 800131a:	4a20      	ldr	r2, [pc, #128]	; (800139c <HAL_UART_MspInit+0x100>)
 800131c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_UART_MspInit+0xfc>)
 8001320:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001324:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_UART_MspInit+0xfc>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_UART_MspInit+0xfc>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_UART_MspInit+0xfc>)
 8001334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_UART_MspInit+0xfc>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_MspInit+0xfc>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_UART_MspInit+0xfc>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_UART_MspInit+0xfc>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_UART_MspInit+0xfc>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001358:	480f      	ldr	r0, [pc, #60]	; (8001398 <HAL_UART_MspInit+0xfc>)
 800135a:	f000 fb67 	bl	8001a2c <HAL_DMA_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001364:	f7ff fe2c 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_UART_MspInit+0xfc>)
 800136c:	635a      	str	r2, [r3, #52]	; 0x34
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_UART_MspInit+0xfc>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2025      	movs	r0, #37	; 0x25
 800137a:	f000 fb20 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800137e:	2025      	movs	r0, #37	; 0x25
 8001380:	f000 fb39 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40011000 	.word	0x40011000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000
 8001398:	2000030c 	.word	0x2000030c
 800139c:	40026440 	.word	0x40026440

080013a0 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80013a8:	1d39      	adds	r1, r7, #4
 80013aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ae:	2201      	movs	r2, #1
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <__io_putchar+0x20>)
 80013b2:	f001 fd5a 	bl	8002e6a <HAL_UART_Transmit>

  return ch;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2000036c 	.word	0x2000036c

080013c4 <UART_Debug_Ifconfig>:
  {NULL, NULL, (void *) 0},
};

// ifconfig
static void UART_Debug_Ifconfig(uint8_t Argc, const char *Argv[])
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if(Argc == 1)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d103      	bne.n	80013de <UART_Debug_Ifconfig+0x1a>
  {
    printf("UART_Debug_Ifconfig Get...\r\n");
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <UART_Debug_Ifconfig+0x28>)
 80013d8:	f002 ffe0 	bl	800439c <puts>
  }
  else
  {
    printf("UART_Debug_Ifconfig Set...\r\n");
  }
}
 80013dc:	e002      	b.n	80013e4 <UART_Debug_Ifconfig+0x20>
    printf("UART_Debug_Ifconfig Set...\r\n");
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <UART_Debug_Ifconfig+0x2c>)
 80013e0:	f002 ffdc 	bl	800439c <puts>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	08005f84 	.word	0x08005f84
 80013f0:	08005fa0 	.word	0x08005fa0

080013f4 <UART_Debug_Ls>:

// ls
static void UART_Debug_Ls(uint8_t Argc, const char *Argv[])
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if(Argc == 1)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d103      	bne.n	800140e <UART_Debug_Ls+0x1a>
  {
    printf("UART_Debug_Ls Get...\r\n");
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <UART_Debug_Ls+0x28>)
 8001408:	f002 ffc8 	bl	800439c <puts>
  }
  else
  {
    printf("UART_Debug_Ls Set...\r\n");
  }
}
 800140c:	e002      	b.n	8001414 <UART_Debug_Ls+0x20>
    printf("UART_Debug_Ls Set...\r\n");
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <UART_Debug_Ls+0x2c>)
 8001410:	f002 ffc4 	bl	800439c <puts>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	08005fbc 	.word	0x08005fbc
 8001420:	08005fd4 	.word	0x08005fd4

08001424 <UART_Debug_Ping>:

static void UART_Debug_Ping(uint8_t Argc, const char *Argv[])
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if(Argc == 1)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d103      	bne.n	800143e <UART_Debug_Ping+0x1a>
  {
    printf("UART_Debug_Ping Get...\r\n");
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <UART_Debug_Ping+0x28>)
 8001438:	f002 ffb0 	bl	800439c <puts>
  }
  else
  {
    printf("UART_Debug_Ping Set...\r\n");
  }
}
 800143c:	e002      	b.n	8001444 <UART_Debug_Ping+0x20>
    printf("UART_Debug_Ping Set...\r\n");
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <UART_Debug_Ping+0x2c>)
 8001440:	f002 ffac 	bl	800439c <puts>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	08005fec 	.word	0x08005fec
 8001450:	08006004 	.word	0x08006004

08001454 <UART_Debug_Ifconfig_Ack>:

static void UART_Debug_Ifconfig_Ack(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <UART_Debug_Ls_Ack>:

static void UART_Debug_Ls_Ack(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <UART_Debug_Ping_Ack>:

static void UART_Debug_Ping_Ack(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <UART_Debug_Read_Frame>:

#define UART_DEBUG_SEPARATE  " "
static uint8_t UART_Debug_Read_Frame(uint8_t *Buffer, const char *argv[])
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint8_t argc = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
  char *token;

  token = strtok((char *)Buffer, UART_DEBUG_SEPARATE);
 800148e:	4914      	ldr	r1, [pc, #80]	; (80014e0 <UART_Debug_Read_Frame+0x60>)
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f002 ff8b 	bl	80043ac <strtok>
 8001496:	60b8      	str	r0, [r7, #8]
  while(token)
 8001498:	e019      	b.n	80014ce <UART_Debug_Read_Frame+0x4e>
  {
    if(strcmp(token, UART_DEBUG_SEPARATE) == 0)
 800149a:	4911      	ldr	r1, [pc, #68]	; (80014e0 <UART_Debug_Read_Frame+0x60>)
 800149c:	68b8      	ldr	r0, [r7, #8]
 800149e:	f7fe fe93 	bl	80001c8 <strcmp>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <UART_Debug_Read_Frame+0x34>
    {
      token = strtok(NULL, UART_DEBUG_SEPARATE);
 80014a8:	490d      	ldr	r1, [pc, #52]	; (80014e0 <UART_Debug_Read_Frame+0x60>)
 80014aa:	2000      	movs	r0, #0
 80014ac:	f002 ff7e 	bl	80043ac <strtok>
 80014b0:	60b8      	str	r0, [r7, #8]
      continue;
 80014b2:	e00c      	b.n	80014ce <UART_Debug_Read_Frame+0x4e>
    }

    argv[argc++] = token;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	73fa      	strb	r2, [r7, #15]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	601a      	str	r2, [r3, #0]
    token = strtok(NULL, UART_DEBUG_SEPARATE);
 80014c4:	4906      	ldr	r1, [pc, #24]	; (80014e0 <UART_Debug_Read_Frame+0x60>)
 80014c6:	2000      	movs	r0, #0
 80014c8:	f002 ff70 	bl	80043ac <strtok>
 80014cc:	60b8      	str	r0, [r7, #8]
  while(token)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e2      	bne.n	800149a <UART_Debug_Read_Frame+0x1a>
  }

  return argc;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	0800601c 	.word	0x0800601c

080014e4 <UART_Debug_Parse>:

void UART_Debug_Parse(uint8_t *Buffer, uint16_t Length)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	6018      	str	r0, [r3, #0]
 80014f0:	460a      	mov	r2, r1
 80014f2:	1cbb      	adds	r3, r7, #2
 80014f4:	801a      	strh	r2, [r3, #0]
  uint8_t argc;
  const char *argv[UART_RECV_BUFFER_MAX];
  const char *cmd;

  if(Length == 1)
 80014f6:	1cbb      	adds	r3, r7, #2
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d06a      	beq.n	80015d4 <UART_Debug_Parse+0xf0>
  {
    return;
  }

  argc = UART_Debug_Read_Frame(Buffer, argv);
 80014fe:	f107 0208 	add.w	r2, r7, #8
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4611      	mov	r1, r2
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	f7ff ffba 	bl	8001480 <UART_Debug_Read_Frame>
 800150c:	4603      	mov	r3, r0
 800150e:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d

  cmd = argv[0];
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

  uint16_t i;
  for(i = 0; i < ARRAY_SIZE(UART_Debug_Items); ++i)
 800151c:	2300      	movs	r3, #0
 800151e:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8001522:	e04b      	b.n	80015bc <UART_Debug_Parse+0xd8>
  {
    if((strlen(UART_Debug_Items[i].Cmd) == strlen((const char *) cmd))
 8001524:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8001528:	492d      	ldr	r1, [pc, #180]	; (80015e0 <UART_Debug_Parse+0xfc>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fe50 	bl	80001dc <strlen>
 800153c:	4604      	mov	r4, r0
 800153e:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8001542:	f7fe fe4b 	bl	80001dc <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	429c      	cmp	r4, r3
 800154a:	d132      	bne.n	80015b2 <UART_Debug_Parse+0xce>
        && (memcmp(UART_Debug_Items[i].Cmd, cmd, strlen(cmd)) == 0))
 800154c:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8001550:	4923      	ldr	r1, [pc, #140]	; (80015e0 <UART_Debug_Parse+0xfc>)
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	681c      	ldr	r4, [r3, #0]
 800155e:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8001562:	f7fe fe3b 	bl	80001dc <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 800156e:	4620      	mov	r0, r4
 8001570:	f002 fb56 	bl	8003c20 <memcmp>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d11b      	bne.n	80015b2 <UART_Debug_Parse+0xce>
    {
      UART_Debug_Items[i].UART_Debug_ParseCallback(argc, argv);
 800157a:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 800157e:	4918      	ldr	r1, [pc, #96]	; (80015e0 <UART_Debug_Parse+0xfc>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3304      	adds	r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f107 0108 	add.w	r1, r7, #8
 8001592:	f897 240d 	ldrb.w	r2, [r7, #1037]	; 0x40d
 8001596:	4610      	mov	r0, r2
 8001598:	4798      	blx	r3
      UART_Debug_Items[i].UART_Debug_AckCallback();
 800159a:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 800159e:	4910      	ldr	r1, [pc, #64]	; (80015e0 <UART_Debug_Parse+0xfc>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	3308      	adds	r3, #8
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4798      	blx	r3
      break;
 80015b0:	e008      	b.n	80015c4 <UART_Debug_Parse+0xe0>
  for(i = 0; i < ARRAY_SIZE(UART_Debug_Items); ++i)
 80015b2:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80015b6:	3301      	adds	r3, #1
 80015b8:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 80015bc:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d9af      	bls.n	8001524 <UART_Debug_Parse+0x40>
    }
  }

  if(i == ARRAY_SIZE(UART_Debug_Items))
 80015c4:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d104      	bne.n	80015d6 <UART_Debug_Parse+0xf2>
  {
    printf("cmd is not found...\r\n");
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <UART_Debug_Parse+0x100>)
 80015ce:	f002 fee5 	bl	800439c <puts>
 80015d2:	e000      	b.n	80015d6 <UART_Debug_Parse+0xf2>
    return;
 80015d4:	bf00      	nop
  }
}
 80015d6:	f207 4714 	addw	r7, r7, #1044	; 0x414
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	08006050 	.word	0x08006050
 80015e4:	08006020 	.word	0x08006020

080015e8 <UART_Debug_Init>:

static UART_HandleTypeDef *UART_Debug_Handle = &huart1;
static UART_FrameTypeDef UART_Debug_Frame;

void UART_Debug_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  __HAL_UART_ENABLE_IT(UART_Debug_Handle, UART_IT_IDLE);
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <UART_Debug_Init+0x2c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <UART_Debug_Init+0x2c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0210 	orr.w	r2, r2, #16
 80015fe:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(UART_Debug_Handle, UART_Debug_Frame.Buffer, UART_RECV_BUFFER_MAX);
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <UART_Debug_Init+0x2c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001608:	4903      	ldr	r1, [pc, #12]	; (8001618 <UART_Debug_Init+0x30>)
 800160a:	4618      	mov	r0, r3
 800160c:	f001 fcc6 	bl	8002f9c <HAL_UART_Receive_DMA>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000004 	.word	0x20000004
 8001618:	20000200 	.word	0x20000200

0800161c <UART_Debug_Process>:

void UART_Debug_Process(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  if(UART_Debug_Frame.Ret)
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <UART_Debug_Process+0x28>)
 8001622:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <UART_Debug_Process+0x24>
  {
    UART_Debug_Frame.Ret = 0;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <UART_Debug_Process+0x28>)
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    UART_Debug_Parse(UART_Debug_Frame.Buffer, UART_Debug_Frame.Length);
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <UART_Debug_Process+0x28>)
 8001634:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001638:	4619      	mov	r1, r3
 800163a:	4802      	ldr	r0, [pc, #8]	; (8001644 <UART_Debug_Process+0x28>)
 800163c:	f7ff ff52 	bl	80014e4 <UART_Debug_Parse>
  }
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000200 	.word	0x20000200

08001648 <Uart_Debug_IDLE>:

void Uart_Debug_IDLE(UART_HandleTypeDef *huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  if(huart == UART_Debug_Handle)
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <Uart_Debug_IDLE+0x80>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	d132      	bne.n	80016c0 <Uart_Debug_IDLE+0x78>
  {
    if((__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b10      	cmp	r3, #16
 8001666:	d12b      	bne.n	80016c0 <Uart_Debug_IDLE+0x78>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
      HAL_UART_DMAStop(huart);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f001 fd0c 	bl	800309c <HAL_UART_DMAStop>
      temp = huart->hdmarx->Instance->NDTR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	60fb      	str	r3, [r7, #12]
      UART_Debug_Frame.Length = UART_RECV_BUFFER_MAX - temp;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	b29b      	uxth	r3, r3
 8001692:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001696:	b29a      	uxth	r2, r3
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <Uart_Debug_IDLE+0x84>)
 800169a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      UART_Debug_Frame.Ret = 1;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <Uart_Debug_IDLE+0x84>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
      HAL_UART_Receive_DMA(huart, UART_Debug_Frame.Buffer, UART_RECV_BUFFER_MAX);
 80016a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <Uart_Debug_IDLE+0x84>)
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f001 fc75 	bl	8002f9c <HAL_UART_Receive_DMA>
      UART_Debug_Frame.Buffer[UART_Debug_Frame.Length] = '\0';
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <Uart_Debug_IDLE+0x84>)
 80016b4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <Uart_Debug_IDLE+0x84>)
 80016bc:	2100      	movs	r1, #0
 80016be:	5499      	strb	r1, [r3, r2]
    }
  }
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000004 	.word	0x20000004
 80016cc:	20000200 	.word	0x20000200

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016d6:	e003      	b.n	80016e0 <LoopCopyDataInit>

080016d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016de:	3104      	adds	r1, #4

080016e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016e8:	d3f6      	bcc.n	80016d8 <CopyDataInit>
  ldr  r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016ec:	e002      	b.n	80016f4 <LoopFillZerobss>

080016ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016f0:	f842 3b04 	str.w	r3, [r2], #4

080016f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016f8:	d3f9      	bcc.n	80016ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016fa:	f7ff fd6f 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f002 fa6b 	bl	8003bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7ff fbdd 	bl	8000ec0 <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800170c:	08006328 	.word	0x08006328
  ldr  r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001714:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001718:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800171c:	200003b4 	.word	0x200003b4

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f92b 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fc3a 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f943 	bl	8001a12 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f90b 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000000 	.word	0x20000000
 80017c0:	2000000c 	.word	0x2000000c
 80017c4:	20000008 	.word	0x20000008

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	200003ac 	.word	0x200003ac

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200003ac 	.word	0x200003ac

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff29 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff3e 	bl	8001850 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff8e 	bl	80018fc <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff31 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffa2 	bl	8001964 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff feda 	bl	80017f0 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e099      	b.n	8001b7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a68:	e00f      	b.n	8001a8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a6a:	f7ff fec1 	bl	80017f0 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d908      	bls.n	8001a8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e078      	b.n	8001b7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e8      	bne.n	8001a6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_DMA_Init+0x158>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d107      	bne.n	8001af4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	4313      	orrs	r3, r2
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f023 0307 	bic.w	r3, r3, #7
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d117      	bne.n	8001b4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00e      	beq.n	8001b4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fb09 	bl	8002148 <DMA_CheckFifoParam>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2240      	movs	r2, #64	; 0x40
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e016      	b.n	8001b7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fac0 	bl	80020dc <DMA_CalcBaseAndBitshift>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b64:	223f      	movs	r2, #63	; 0x3f
 8001b66:	409a      	lsls	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	f010803f 	.word	0xf010803f

08001b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_DMA_Start_IT+0x26>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e048      	b.n	8001c40 <HAL_DMA_Start_IT+0xb8>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d137      	bne.n	8001c32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fa52 	bl	8002080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	223f      	movs	r2, #63	; 0x3f
 8001be2:	409a      	lsls	r2, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0216 	orr.w	r2, r2, #22
 8001bf6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c06:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0208 	orr.w	r2, r2, #8
 8001c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e005      	b.n	8001c3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c56:	f7ff fdcb 	bl	80017f0 <HAL_GetTick>
 8001c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d008      	beq.n	8001c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e052      	b.n	8001d20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0216 	bic.w	r2, r2, #22
 8001c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <HAL_DMA_Abort+0x62>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0208 	bic.w	r2, r2, #8
 8001cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cca:	e013      	b.n	8001cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ccc:	f7ff fd90 	bl	80017f0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d90c      	bls.n	8001cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e015      	b.n	8001d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1e4      	bne.n	8001ccc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	223f      	movs	r2, #63	; 0x3f
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d004      	beq.n	8001d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00c      	b.n	8001d60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2205      	movs	r2, #5
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d78:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_DMA_IRQHandler+0x258>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a92      	ldr	r2, [pc, #584]	; (8001fc8 <HAL_DMA_IRQHandler+0x25c>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0a9b      	lsrs	r3, r3, #10
 8001d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2208      	movs	r2, #8
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d01a      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0204 	bic.w	r2, r2, #4
 8001dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2201      	movs	r2, #1
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d012      	beq.n	8001e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	f043 0202 	orr.w	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2204      	movs	r2, #4
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d012      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	2204      	movs	r2, #4
 8001e32:	409a      	lsls	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2210      	movs	r2, #16
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d043      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03c      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	2210      	movs	r2, #16
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d018      	beq.n	8001eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d024      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
 8001e9a:	e01f      	b.n	8001edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
 8001eac:	e016      	b.n	8001edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0208 	bic.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 808e 	beq.w	800200a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8086 	beq.w	800200a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2220      	movs	r2, #32
 8001f04:	409a      	lsls	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d136      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0216 	bic.w	r2, r2, #22
 8001f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x1da>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0208 	bic.w	r2, r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	223f      	movs	r2, #63	; 0x3f
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d07d      	beq.n	8002076 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
        }
        return;
 8001f82:	e078      	b.n	8002076 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01c      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d108      	bne.n	8001fb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d030      	beq.n	800200a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	e02b      	b.n	800200a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d027      	beq.n	800200a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
 8001fc2:	e022      	b.n	800200a <HAL_DMA_IRQHandler+0x29e>
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0210 	bic.w	r2, r2, #16
 8001fe8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	2b00      	cmp	r3, #0
 8002010:	d032      	beq.n	8002078 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d022      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2205      	movs	r2, #5
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3301      	adds	r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	429a      	cmp	r2, r3
 8002040:	d307      	bcc.n	8002052 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f2      	bne.n	8002036 <HAL_DMA_IRQHandler+0x2ca>
 8002050:	e000      	b.n	8002054 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002052:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
 8002074:	e000      	b.n	8002078 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002076:	bf00      	nop
    }
  }
}
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop

08002080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800209c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b40      	cmp	r3, #64	; 0x40
 80020ac:	d108      	bne.n	80020c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020be:	e007      	b.n	80020d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	60da      	str	r2, [r3, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	3b10      	subs	r3, #16
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <DMA_CalcBaseAndBitshift+0x64>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020f6:	4a13      	ldr	r2, [pc, #76]	; (8002144 <DMA_CalcBaseAndBitshift+0x68>)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d909      	bls.n	800211e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	1d1a      	adds	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	; 0x58
 800211c:	e007      	b.n	800212e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	aaaaaaab 	.word	0xaaaaaaab
 8002144:	08006080 	.word	0x08006080

08002148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11f      	bne.n	80021a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d855      	bhi.n	8002214 <DMA_CheckFifoParam+0xcc>
 8002168:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <DMA_CheckFifoParam+0x28>)
 800216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216e:	bf00      	nop
 8002170:	08002181 	.word	0x08002181
 8002174:	08002193 	.word	0x08002193
 8002178:	08002181 	.word	0x08002181
 800217c:	08002215 	.word	0x08002215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d045      	beq.n	8002218 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002190:	e042      	b.n	8002218 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800219a:	d13f      	bne.n	800221c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a0:	e03c      	b.n	800221c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021aa:	d121      	bne.n	80021f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d836      	bhi.n	8002220 <DMA_CheckFifoParam+0xd8>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <DMA_CheckFifoParam+0x70>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021cf 	.word	0x080021cf
 80021c0:	080021c9 	.word	0x080021c9
 80021c4:	080021e1 	.word	0x080021e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      break;
 80021cc:	e02f      	b.n	800222e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d024      	beq.n	8002224 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021de:	e021      	b.n	8002224 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021e8:	d11e      	bne.n	8002228 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ee:	e01b      	b.n	8002228 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d902      	bls.n	80021fc <DMA_CheckFifoParam+0xb4>
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d003      	beq.n	8002202 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021fa:	e018      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002200:	e015      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00e      	beq.n	800222c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
      break;
 8002212:	e00b      	b.n	800222c <DMA_CheckFifoParam+0xe4>
      break;
 8002214:	bf00      	nop
 8002216:	e00a      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      break;
 8002218:	bf00      	nop
 800221a:	e008      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      break;
 800221c:	bf00      	nop
 800221e:	e006      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      break;
 8002220:	bf00      	nop
 8002222:	e004      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      break;
 8002224:	bf00      	nop
 8002226:	e002      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      break;   
 8002228:	bf00      	nop
 800222a:	e000      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      break;
 800222c:	bf00      	nop
    }
  } 
  
  return status; 
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	e16b      	b.n	8002530 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	f040 815a 	bne.w	800252a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x4a>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b12      	cmp	r3, #18
 8002284:	d123      	bne.n	80022ce <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	69b9      	ldr	r1, [r7, #24]
 80022ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0203 	and.w	r2, r3, #3
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d00b      	beq.n	8002322 <HAL_GPIO_Init+0xe6>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002316:	2b11      	cmp	r3, #17
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b12      	cmp	r3, #18
 8002320:	d130      	bne.n	8002384 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2203      	movs	r2, #3
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80b4 	beq.w	800252a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <HAL_GPIO_Init+0x308>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a5e      	ldr	r2, [pc, #376]	; (8002544 <HAL_GPIO_Init+0x308>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <HAL_GPIO_Init+0x308>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023de:	4a5a      	ldr	r2, [pc, #360]	; (8002548 <HAL_GPIO_Init+0x30c>)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a51      	ldr	r2, [pc, #324]	; (800254c <HAL_GPIO_Init+0x310>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d02b      	beq.n	8002462 <HAL_GPIO_Init+0x226>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a50      	ldr	r2, [pc, #320]	; (8002550 <HAL_GPIO_Init+0x314>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d025      	beq.n	800245e <HAL_GPIO_Init+0x222>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4f      	ldr	r2, [pc, #316]	; (8002554 <HAL_GPIO_Init+0x318>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01f      	beq.n	800245a <HAL_GPIO_Init+0x21e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4e      	ldr	r2, [pc, #312]	; (8002558 <HAL_GPIO_Init+0x31c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d019      	beq.n	8002456 <HAL_GPIO_Init+0x21a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4d      	ldr	r2, [pc, #308]	; (800255c <HAL_GPIO_Init+0x320>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x216>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4c      	ldr	r2, [pc, #304]	; (8002560 <HAL_GPIO_Init+0x324>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x212>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4b      	ldr	r2, [pc, #300]	; (8002564 <HAL_GPIO_Init+0x328>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x20e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4a      	ldr	r2, [pc, #296]	; (8002568 <HAL_GPIO_Init+0x32c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x20a>
 8002442:	2307      	movs	r3, #7
 8002444:	e00e      	b.n	8002464 <HAL_GPIO_Init+0x228>
 8002446:	2308      	movs	r3, #8
 8002448:	e00c      	b.n	8002464 <HAL_GPIO_Init+0x228>
 800244a:	2306      	movs	r3, #6
 800244c:	e00a      	b.n	8002464 <HAL_GPIO_Init+0x228>
 800244e:	2305      	movs	r3, #5
 8002450:	e008      	b.n	8002464 <HAL_GPIO_Init+0x228>
 8002452:	2304      	movs	r3, #4
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x228>
 8002456:	2303      	movs	r3, #3
 8002458:	e004      	b.n	8002464 <HAL_GPIO_Init+0x228>
 800245a:	2302      	movs	r3, #2
 800245c:	e002      	b.n	8002464 <HAL_GPIO_Init+0x228>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_GPIO_Init+0x228>
 8002462:	2300      	movs	r3, #0
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	f002 0203 	and.w	r2, r2, #3
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	4093      	lsls	r3, r2
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002474:	4934      	ldr	r1, [pc, #208]	; (8002548 <HAL_GPIO_Init+0x30c>)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002482:	4b3a      	ldr	r3, [pc, #232]	; (800256c <HAL_GPIO_Init+0x330>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a6:	4a31      	ldr	r2, [pc, #196]	; (800256c <HAL_GPIO_Init+0x330>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_GPIO_Init+0x330>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d0:	4a26      	ldr	r2, [pc, #152]	; (800256c <HAL_GPIO_Init+0x330>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d6:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_GPIO_Init+0x330>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fa:	4a1c      	ldr	r2, [pc, #112]	; (800256c <HAL_GPIO_Init+0x330>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_GPIO_Init+0x330>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002524:	4a11      	ldr	r2, [pc, #68]	; (800256c <HAL_GPIO_Init+0x330>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3301      	adds	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b0f      	cmp	r3, #15
 8002534:	f67f ae90 	bls.w	8002258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002538:	bf00      	nop
 800253a:	3724      	adds	r7, #36	; 0x24
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40023800 	.word	0x40023800
 8002548:	40013800 	.word	0x40013800
 800254c:	40020000 	.word	0x40020000
 8002550:	40020400 	.word	0x40020400
 8002554:	40020800 	.word	0x40020800
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40021000 	.word	0x40021000
 8002560:	40021400 	.word	0x40021400
 8002564:	40021800 	.word	0x40021800
 8002568:	40021c00 	.word	0x40021c00
 800256c:	40013c00 	.word	0x40013c00

08002570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e22d      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d075      	beq.n	800267a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258e:	4ba3      	ldr	r3, [pc, #652]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d00c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259a:	4ba0      	ldr	r3, [pc, #640]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d112      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a6:	4b9d      	ldr	r3, [pc, #628]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b2:	d10b      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	4b99      	ldr	r3, [pc, #612]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d05b      	beq.n	8002678 <HAL_RCC_OscConfig+0x108>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d157      	bne.n	8002678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e208      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d106      	bne.n	80025e4 <HAL_RCC_OscConfig+0x74>
 80025d6:	4b91      	ldr	r3, [pc, #580]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a90      	ldr	r2, [pc, #576]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e01d      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x98>
 80025ee:	4b8b      	ldr	r3, [pc, #556]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a8a      	ldr	r2, [pc, #552]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b88      	ldr	r3, [pc, #544]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a87      	ldr	r2, [pc, #540]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 8002608:	4b84      	ldr	r3, [pc, #528]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a83      	ldr	r2, [pc, #524]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b81      	ldr	r3, [pc, #516]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a80      	ldr	r2, [pc, #512]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7ff f8e2 	bl	80017f0 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002630:	f7ff f8de 	bl	80017f0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1cd      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0xc0>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff f8ce 	bl	80017f0 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002658:	f7ff f8ca 	bl	80017f0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1b9      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0xe8>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b62      	ldr	r3, [pc, #392]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269a:	2b08      	cmp	r3, #8
 800269c:	d11c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269e:	4b5f      	ldr	r3, [pc, #380]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d116      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	4b5c      	ldr	r3, [pc, #368]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e18d      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b56      	ldr	r3, [pc, #344]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4952      	ldr	r1, [pc, #328]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	e03a      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e0:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <HAL_RCC_OscConfig+0x2b0>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7ff f883 	bl	80017f0 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ee:	f7ff f87f 	bl	80017f0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e16e      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	4b46      	ldr	r3, [pc, #280]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b43      	ldr	r3, [pc, #268]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4940      	ldr	r1, [pc, #256]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_RCC_OscConfig+0x2b0>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7ff f862 	bl	80017f0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002730:	f7ff f85e 	bl	80017f0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e14d      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d030      	beq.n	80027bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_RCC_OscConfig+0x2b4>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7ff f842 	bl	80017f0 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002770:	f7ff f83e 	bl	80017f0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e12d      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x200>
 800278e:	e015      	b.n	80027bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_OscConfig+0x2b4>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7ff f82b 	bl	80017f0 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279e:	f7ff f827 	bl	80017f0 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e116      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a0 	beq.w	800290a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a0e      	ldr	r2, [pc, #56]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_OscConfig+0x2b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d121      	bne.n	800284a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_RCC_OscConfig+0x2b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_RCC_OscConfig+0x2b8>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002812:	f7fe ffed 	bl	80017f0 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	e011      	b.n	800283e <HAL_RCC_OscConfig+0x2ce>
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	42470000 	.word	0x42470000
 8002824:	42470e80 	.word	0x42470e80
 8002828:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282c:	f7fe ffe0 	bl	80017f0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0cf      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283e:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <HAL_RCC_OscConfig+0x478>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x2f0>
 8002852:	4b66      	ldr	r3, [pc, #408]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a65      	ldr	r2, [pc, #404]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	e01c      	b.n	800289a <HAL_RCC_OscConfig+0x32a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d10c      	bne.n	8002882 <HAL_RCC_OscConfig+0x312>
 8002868:	4b60      	ldr	r3, [pc, #384]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	4a5f      	ldr	r2, [pc, #380]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
 8002874:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a5c      	ldr	r2, [pc, #368]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
 8002880:	e00b      	b.n	800289a <HAL_RCC_OscConfig+0x32a>
 8002882:	4b5a      	ldr	r3, [pc, #360]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a59      	ldr	r2, [pc, #356]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	4b57      	ldr	r3, [pc, #348]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a56      	ldr	r2, [pc, #344]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d015      	beq.n	80028ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7fe ffa5 	bl	80017f0 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe ffa1 	bl	80017f0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e08e      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ee      	beq.n	80028aa <HAL_RCC_OscConfig+0x33a>
 80028cc:	e014      	b.n	80028f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe ff8f 	bl	80017f0 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe ff8b 	bl	80017f0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e078      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ec:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a3a      	ldr	r2, [pc, #232]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d064      	beq.n	80029dc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b08      	cmp	r3, #8
 800291c:	d05c      	beq.n	80029d8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d141      	bne.n	80029aa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <HAL_RCC_OscConfig+0x480>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe ff60 	bl	80017f0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe ff5c 	bl	80017f0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e04b      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	019b      	lsls	r3, r3, #6
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	491d      	ldr	r1, [pc, #116]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800297c:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <HAL_RCC_OscConfig+0x480>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe ff35 	bl	80017f0 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298a:	f7fe ff31 	bl	80017f0 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e020      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x41a>
 80029a8:	e018      	b.n	80029dc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_RCC_OscConfig+0x480>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe ff1e 	bl	80017f0 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe ff1a 	bl	80017f0 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e009      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCC_OscConfig+0x47c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x448>
 80029d6:	e001      	b.n	80029dc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40007000 	.word	0x40007000
 80029ec:	40023800 	.word	0x40023800
 80029f0:	42470060 	.word	0x42470060

080029f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0ca      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d90c      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b6      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	4b58      	ldr	r3, [pc, #352]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a57      	ldr	r2, [pc, #348]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a60:	4b52      	ldr	r3, [pc, #328]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a51      	ldr	r2, [pc, #324]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	494c      	ldr	r1, [pc, #304]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d044      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b46      	ldr	r3, [pc, #280]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d119      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07d      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e06d      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e065      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4933      	ldr	r1, [pc, #204]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fe84 	bl	80017f0 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe fe80 	bl	80017f0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e04d      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d20c      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e030      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4915      	ldr	r1, [pc, #84]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	490d      	ldr	r1, [pc, #52]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b7a:	f000 f81d 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fe fde6 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023c00 	.word	0x40023c00
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	08006038 	.word	0x08006038
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bce:	4b63      	ldr	r3, [pc, #396]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d007      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x32>
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d008      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x38>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 80b4 	bne.w	8002d4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002be6:	60bb      	str	r3, [r7, #8]
       break;
 8002be8:	e0b3      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bea:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002bec:	60bb      	str	r3, [r7, #8]
      break;
 8002bee:	e0b0      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf0:	4b5a      	ldr	r3, [pc, #360]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bfa:	4b58      	ldr	r3, [pc, #352]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d04a      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b55      	ldr	r3, [pc, #340]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	f04f 0400 	mov.w	r4, #0
 8002c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	ea03 0501 	and.w	r5, r3, r1
 8002c1c:	ea04 0602 	and.w	r6, r4, r2
 8002c20:	4629      	mov	r1, r5
 8002c22:	4632      	mov	r2, r6
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	f04f 0400 	mov.w	r4, #0
 8002c2c:	0154      	lsls	r4, r2, #5
 8002c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c32:	014b      	lsls	r3, r1, #5
 8002c34:	4619      	mov	r1, r3
 8002c36:	4622      	mov	r2, r4
 8002c38:	1b49      	subs	r1, r1, r5
 8002c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	f04f 0400 	mov.w	r4, #0
 8002c46:	0194      	lsls	r4, r2, #6
 8002c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c4c:	018b      	lsls	r3, r1, #6
 8002c4e:	1a5b      	subs	r3, r3, r1
 8002c50:	eb64 0402 	sbc.w	r4, r4, r2
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	00e2      	lsls	r2, r4, #3
 8002c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c62:	00d9      	lsls	r1, r3, #3
 8002c64:	460b      	mov	r3, r1
 8002c66:	4614      	mov	r4, r2
 8002c68:	195b      	adds	r3, r3, r5
 8002c6a:	eb44 0406 	adc.w	r4, r4, r6
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	0262      	lsls	r2, r4, #9
 8002c78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c7c:	0259      	lsls	r1, r3, #9
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4614      	mov	r4, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	4621      	mov	r1, r4
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f04f 0400 	mov.w	r4, #0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4623      	mov	r3, r4
 8002c90:	f7fd ff40 	bl	8000b14 <__aeabi_uldivmod>
 8002c94:	4603      	mov	r3, r0
 8002c96:	460c      	mov	r4, r1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e049      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	f04f 0400 	mov.w	r4, #0
 8002ca6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	ea03 0501 	and.w	r5, r3, r1
 8002cb2:	ea04 0602 	and.w	r6, r4, r2
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	4632      	mov	r2, r6
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	f04f 0400 	mov.w	r4, #0
 8002cc2:	0154      	lsls	r4, r2, #5
 8002cc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cc8:	014b      	lsls	r3, r1, #5
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4622      	mov	r2, r4
 8002cce:	1b49      	subs	r1, r1, r5
 8002cd0:	eb62 0206 	sbc.w	r2, r2, r6
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	f04f 0400 	mov.w	r4, #0
 8002cdc:	0194      	lsls	r4, r2, #6
 8002cde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ce2:	018b      	lsls	r3, r1, #6
 8002ce4:	1a5b      	subs	r3, r3, r1
 8002ce6:	eb64 0402 	sbc.w	r4, r4, r2
 8002cea:	f04f 0100 	mov.w	r1, #0
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	00e2      	lsls	r2, r4, #3
 8002cf4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cf8:	00d9      	lsls	r1, r3, #3
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4614      	mov	r4, r2
 8002cfe:	195b      	adds	r3, r3, r5
 8002d00:	eb44 0406 	adc.w	r4, r4, r6
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	02a2      	lsls	r2, r4, #10
 8002d0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d12:	0299      	lsls	r1, r3, #10
 8002d14:	460b      	mov	r3, r1
 8002d16:	4614      	mov	r4, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f04f 0400 	mov.w	r4, #0
 8002d22:	461a      	mov	r2, r3
 8002d24:	4623      	mov	r3, r4
 8002d26:	f7fd fef5 	bl	8000b14 <__aeabi_uldivmod>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	60bb      	str	r3, [r7, #8]
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d4e:	60bb      	str	r3, [r7, #8]
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	68bb      	ldr	r3, [r7, #8]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	007a1200 	.word	0x007a1200

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000000 	.word	0x20000000

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d88:	4601      	mov	r1, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0a9b      	lsrs	r3, r3, #10
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4a03      	ldr	r2, [pc, #12]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	08006048 	.word	0x08006048

08002da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dac:	f7ff ffdc 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002db0:	4601      	mov	r1, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0b5b      	lsrs	r3, r3, #13
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4a03      	ldr	r2, [pc, #12]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	08006048 	.word	0x08006048

08002dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e03f      	b.n	8002e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fa50 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fccf 	bl	80037b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b088      	sub	sp, #32
 8002e6e:	af02      	add	r7, sp, #8
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	f040 8083 	bne.w	8002f92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_UART_Transmit+0x2e>
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e07b      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Transmit+0x40>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e074      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2221      	movs	r2, #33	; 0x21
 8002ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fc96 	bl	80017f0 <HAL_GetTick>
 8002ec4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ed2:	e042      	b.n	8002f5a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eea:	d122      	bne.n	8002f32 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fadc 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e046      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f18:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3302      	adds	r3, #2
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	e017      	b.n	8002f5a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	e013      	b.n	8002f5a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fab9 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e023      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	60ba      	str	r2, [r7, #8]
 8002f52:	781a      	ldrb	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1b7      	bne.n	8002ed4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 faa0 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e00a      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d166      	bne.n	8003084 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_UART_Receive_DMA+0x26>
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e05f      	b.n	8003086 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_UART_Receive_DMA+0x38>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e058      	b.n	8003086 <HAL_UART_Receive_DMA+0xea>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	88fa      	ldrh	r2, [r7, #6]
 8002fe6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2222      	movs	r2, #34	; 0x22
 8002ff2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	4a25      	ldr	r2, [pc, #148]	; (8003090 <HAL_UART_Receive_DMA+0xf4>)
 8002ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	4a24      	ldr	r2, [pc, #144]	; (8003094 <HAL_UART_Receive_DMA+0xf8>)
 8003004:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	4a23      	ldr	r2, [pc, #140]	; (8003098 <HAL_UART_Receive_DMA+0xfc>)
 800300c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003012:	2200      	movs	r2, #0
 8003014:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3304      	adds	r3, #4
 8003026:	4619      	mov	r1, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	f7fe fdab 	bl	8001b88 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	0800339d 	.word	0x0800339d
 8003094:	08003405 	.word	0x08003405
 8003098:	08003421 	.word	0x08003421

0800309c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b2:	2b80      	cmp	r3, #128	; 0x80
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b21      	cmp	r3, #33	; 0x21
 80030c8:	d116      	bne.n	80030f8 <HAL_UART_DMAStop+0x5c>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030de:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe fdab 	bl	8001c48 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa28 	bl	8003548 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	bf0c      	ite	eq
 8003106:	2301      	moveq	r3, #1
 8003108:	2300      	movne	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b22      	cmp	r3, #34	; 0x22
 8003118:	d116      	bne.n	8003148 <HAL_UART_DMAStop+0xac>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fd83 	bl	8001c48 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fa16 	bl	8003574 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_UART_IRQHandler+0x52>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fa88 	bl	80036b4 <UART_Receive_IT>
      return;
 80031a4:	e0cc      	b.n	8003340 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80ab 	beq.w	8003304 <HAL_UART_IRQHandler+0x1b0>
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_UART_IRQHandler+0x70>
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80a0 	beq.w	8003304 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_UART_IRQHandler+0x90>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_UART_IRQHandler+0xb0>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fc:	f043 0202 	orr.w	r2, r3, #2
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_UART_IRQHandler+0xd0>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	f043 0204 	orr.w	r2, r3, #4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_UART_IRQHandler+0xf0>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	f043 0208 	orr.w	r2, r3, #8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d078      	beq.n	800333e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_UART_IRQHandler+0x112>
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fa27 	bl	80036b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <HAL_UART_IRQHandler+0x13a>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d031      	beq.n	80032f2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f970 	bl	8003574 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d123      	bne.n	80032ea <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d013      	beq.n	80032e2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	4a22      	ldr	r2, [pc, #136]	; (8003348 <HAL_UART_IRQHandler+0x1f4>)
 80032c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fd2e 	bl	8001d28 <HAL_DMA_Abort_IT>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032dc:	4610      	mov	r0, r2
 80032de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e00e      	b.n	8003300 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f850 	bl	8003388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e00a      	b.n	8003300 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f84c 	bl	8003388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	e006      	b.n	8003300 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f848 	bl	8003388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032fe:	e01e      	b.n	800333e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	bf00      	nop
    return;
 8003302:	e01c      	b.n	800333e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <HAL_UART_IRQHandler+0x1cc>
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f95d 	bl	80035d8 <UART_Transmit_IT>
    return;
 800331e:	e00f      	b.n	8003340 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_UART_IRQHandler+0x1ec>
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f9a5 	bl	8003684 <UART_EndTransmit_IT>
    return;
 800333a:	bf00      	nop
 800333c:	e000      	b.n	8003340 <HAL_UART_IRQHandler+0x1ec>
    return;
 800333e:	bf00      	nop
  }
}
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	080035b1 	.word	0x080035b1

0800334c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d11e      	bne.n	80033f6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033cc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ec:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff ffb2 	bl	8003360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff ffae 	bl	8003374 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b21      	cmp	r3, #33	; 0x21
 8003452:	d108      	bne.n	8003466 <UART_DMAError+0x46>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2200      	movs	r2, #0
 800345e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003460:	68b8      	ldr	r0, [r7, #8]
 8003462:	f000 f871 	bl	8003548 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b22      	cmp	r3, #34	; 0x22
 8003486:	d108      	bne.n	800349a <UART_DMAError+0x7a>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2200      	movs	r2, #0
 8003492:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003494:	68b8      	ldr	r0, [r7, #8]
 8003496:	f000 f86d 	bl	8003574 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034a6:	68b8      	ldr	r0, [r7, #8]
 80034a8:	f7ff ff6e 	bl	8003388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c4:	e02c      	b.n	8003520 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d028      	beq.n	8003520 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034d4:	f7fe f98c 	bl	80017f0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d21d      	bcs.n	8003520 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e00f      	b.n	8003540 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4013      	ands	r3, r2
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	429a      	cmp	r2, r3
 800353c:	d0c3      	beq.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800355e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800358a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f7ff fedc 	bl	8003388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b21      	cmp	r3, #33	; 0x21
 80035ea:	d144      	bne.n	8003676 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f4:	d11a      	bne.n	800362c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800360a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	1c9a      	adds	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]
 800361e:	e00e      	b.n	800363e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]
 800362a:	e008      	b.n	800363e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	1c59      	adds	r1, r3, #1
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6211      	str	r1, [r2, #32]
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29b      	uxth	r3, r3
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4619      	mov	r1, r3
 800364c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003660:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003670:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fe51 	bl	800334c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b22      	cmp	r3, #34	; 0x22
 80036c6:	d171      	bne.n	80037ac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d0:	d123      	bne.n	800371a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10e      	bne.n	80036fe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	1c9a      	adds	r2, r3, #2
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28
 80036fc:	e029      	b.n	8003752 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	b29b      	uxth	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	629a      	str	r2, [r3, #40]	; 0x28
 8003718:	e01b      	b.n	8003752 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6858      	ldr	r0, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	1c59      	adds	r1, r3, #1
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6291      	str	r1, [r2, #40]	; 0x28
 8003732:	b2c2      	uxtb	r2, r0
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e00c      	b.n	8003752 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	1c58      	adds	r0, r3, #1
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	6288      	str	r0, [r1, #40]	; 0x28
 800374a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29b      	uxth	r3, r3
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4619      	mov	r1, r3
 8003760:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003762:	2b00      	cmp	r3, #0
 8003764:	d120      	bne.n	80037a8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0220 	bic.w	r2, r2, #32
 8003774:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003784:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fdde 	bl	8003360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e002      	b.n	80037ae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037f8:	f023 030c 	bic.w	r3, r3, #12
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	68f9      	ldr	r1, [r7, #12]
 8003802:	430b      	orrs	r3, r1
 8003804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003824:	f040 80e4 	bne.w	80039f0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4aab      	ldr	r2, [pc, #684]	; (8003adc <UART_SetConfig+0x324>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <UART_SetConfig+0x84>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4aaa      	ldr	r2, [pc, #680]	; (8003ae0 <UART_SetConfig+0x328>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d16c      	bne.n	8003916 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800383c:	f7ff fab4 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8003840:	4602      	mov	r2, r0
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	441a      	add	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	4aa3      	ldr	r2, [pc, #652]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	011c      	lsls	r4, r3, #4
 8003860:	f7ff faa2 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8003864:	4602      	mov	r2, r0
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009a      	lsls	r2, r3, #2
 800386e:	441a      	add	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fbb2 f5f3 	udiv	r5, r2, r3
 800387a:	f7ff fa95 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 800387e:	4602      	mov	r2, r0
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	4a93      	ldr	r2, [pc, #588]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2264      	movs	r2, #100	; 0x64
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	1aeb      	subs	r3, r5, r3
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	3332      	adds	r3, #50	; 0x32
 80038a8:	4a8e      	ldr	r2, [pc, #568]	; (8003ae4 <UART_SetConfig+0x32c>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038b6:	441c      	add	r4, r3
 80038b8:	f7ff fa76 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009a      	lsls	r2, r3, #2
 80038c6:	441a      	add	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80038d2:	f7ff fa69 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	4a7d      	ldr	r2, [pc, #500]	; (8003ae4 <UART_SetConfig+0x32c>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2264      	movs	r2, #100	; 0x64
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	1aeb      	subs	r3, r5, r3
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	3332      	adds	r3, #50	; 0x32
 8003900:	4a78      	ldr	r2, [pc, #480]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	f003 0207 	and.w	r2, r3, #7
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4422      	add	r2, r4
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	e154      	b.n	8003bc0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003916:	f7ff fa33 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 800391a:	4602      	mov	r2, r0
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	4a6c      	ldr	r2, [pc, #432]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	011c      	lsls	r4, r3, #4
 800393a:	f7ff fa21 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 800393e:	4602      	mov	r2, r0
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009a      	lsls	r2, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fbb2 f5f3 	udiv	r5, r2, r3
 8003954:	f7ff fa14 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003958:	4602      	mov	r2, r0
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	009a      	lsls	r2, r3, #2
 8003962:	441a      	add	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	4a5d      	ldr	r2, [pc, #372]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	2264      	movs	r2, #100	; 0x64
 8003978:	fb02 f303 	mul.w	r3, r2, r3
 800397c:	1aeb      	subs	r3, r5, r3
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	3332      	adds	r3, #50	; 0x32
 8003982:	4a58      	ldr	r2, [pc, #352]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003990:	441c      	add	r4, r3
 8003992:	f7ff f9f5 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003996:	4602      	mov	r2, r0
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fbb2 f5f3 	udiv	r5, r2, r3
 80039ac:	f7ff f9e8 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	441a      	add	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	4a47      	ldr	r2, [pc, #284]	; (8003ae4 <UART_SetConfig+0x32c>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	2264      	movs	r2, #100	; 0x64
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	1aeb      	subs	r3, r5, r3
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	3332      	adds	r3, #50	; 0x32
 80039da:	4a42      	ldr	r2, [pc, #264]	; (8003ae4 <UART_SetConfig+0x32c>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	f003 0207 	and.w	r2, r3, #7
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4422      	add	r2, r4
 80039ec:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80039ee:	e0e7      	b.n	8003bc0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a39      	ldr	r2, [pc, #228]	; (8003adc <UART_SetConfig+0x324>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <UART_SetConfig+0x24c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a38      	ldr	r2, [pc, #224]	; (8003ae0 <UART_SetConfig+0x328>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d171      	bne.n	8003ae8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003a04:	f7ff f9d0 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009a      	lsls	r2, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	4a31      	ldr	r2, [pc, #196]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	011c      	lsls	r4, r3, #4
 8003a28:	f7ff f9be 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009a      	lsls	r2, r3, #2
 8003a36:	441a      	add	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a42:	f7ff f9b1 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009a      	lsls	r2, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2264      	movs	r2, #100	; 0x64
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	1aeb      	subs	r3, r5, r3
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	3332      	adds	r3, #50	; 0x32
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a7c:	441c      	add	r4, r3
 8003a7e:	f7ff f993 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8003a82:	4602      	mov	r2, r0
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	009a      	lsls	r2, r3, #2
 8003a8c:	441a      	add	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a98:	f7ff f986 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009a      	lsls	r2, r3, #2
 8003aa6:	441a      	add	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	2264      	movs	r2, #100	; 0x64
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	1aeb      	subs	r3, r5, r3
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	3332      	adds	r3, #50	; 0x32
 8003ac6:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <UART_SetConfig+0x32c>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	f003 020f 	and.w	r2, r3, #15
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4422      	add	r2, r4
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	e071      	b.n	8003bc0 <UART_SetConfig+0x408>
 8003adc:	40011000 	.word	0x40011000
 8003ae0:	40011400 	.word	0x40011400
 8003ae4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ae8:	f7ff f94a 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b02:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <UART_SetConfig+0x410>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	011c      	lsls	r4, r3, #4
 8003b0c:	f7ff f938 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	009a      	lsls	r2, r3, #2
 8003b1a:	441a      	add	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b26:	f7ff f92b 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009a      	lsls	r2, r3, #2
 8003b34:	441a      	add	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <UART_SetConfig+0x410>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2264      	movs	r2, #100	; 0x64
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	1aeb      	subs	r3, r5, r3
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	3332      	adds	r3, #50	; 0x32
 8003b54:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <UART_SetConfig+0x410>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b60:	441c      	add	r4, r3
 8003b62:	f7ff f90d 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009a      	lsls	r2, r3, #2
 8003b70:	441a      	add	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b7c:	f7ff f900 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009a      	lsls	r2, r3, #2
 8003b8a:	441a      	add	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <UART_SetConfig+0x410>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	2264      	movs	r2, #100	; 0x64
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	1aeb      	subs	r3, r5, r3
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	3332      	adds	r3, #50	; 0x32
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <UART_SetConfig+0x410>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	f003 020f 	and.w	r2, r3, #15
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4422      	add	r2, r4
 8003bbc:	609a      	str	r2, [r3, #8]
}
 8003bbe:	e7ff      	b.n	8003bc0 <UART_SetConfig+0x408>
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc8:	51eb851f 	.word	0x51eb851f

08003bcc <__errno>:
 8003bcc:	4b01      	ldr	r3, [pc, #4]	; (8003bd4 <__errno+0x8>)
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000010 	.word	0x20000010

08003bd8 <__libc_init_array>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4e0d      	ldr	r6, [pc, #52]	; (8003c10 <__libc_init_array+0x38>)
 8003bdc:	4c0d      	ldr	r4, [pc, #52]	; (8003c14 <__libc_init_array+0x3c>)
 8003bde:	1ba4      	subs	r4, r4, r6
 8003be0:	10a4      	asrs	r4, r4, #2
 8003be2:	2500      	movs	r5, #0
 8003be4:	42a5      	cmp	r5, r4
 8003be6:	d109      	bne.n	8003bfc <__libc_init_array+0x24>
 8003be8:	4e0b      	ldr	r6, [pc, #44]	; (8003c18 <__libc_init_array+0x40>)
 8003bea:	4c0c      	ldr	r4, [pc, #48]	; (8003c1c <__libc_init_array+0x44>)
 8003bec:	f002 f9a6 	bl	8005f3c <_init>
 8003bf0:	1ba4      	subs	r4, r4, r6
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	2500      	movs	r5, #0
 8003bf6:	42a5      	cmp	r5, r4
 8003bf8:	d105      	bne.n	8003c06 <__libc_init_array+0x2e>
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c00:	4798      	blx	r3
 8003c02:	3501      	adds	r5, #1
 8003c04:	e7ee      	b.n	8003be4 <__libc_init_array+0xc>
 8003c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c0a:	4798      	blx	r3
 8003c0c:	3501      	adds	r5, #1
 8003c0e:	e7f2      	b.n	8003bf6 <__libc_init_array+0x1e>
 8003c10:	08006320 	.word	0x08006320
 8003c14:	08006320 	.word	0x08006320
 8003c18:	08006320 	.word	0x08006320
 8003c1c:	08006324 	.word	0x08006324

08003c20 <memcmp>:
 8003c20:	b530      	push	{r4, r5, lr}
 8003c22:	2400      	movs	r4, #0
 8003c24:	42a2      	cmp	r2, r4
 8003c26:	d101      	bne.n	8003c2c <memcmp+0xc>
 8003c28:	2000      	movs	r0, #0
 8003c2a:	e007      	b.n	8003c3c <memcmp+0x1c>
 8003c2c:	5d03      	ldrb	r3, [r0, r4]
 8003c2e:	3401      	adds	r4, #1
 8003c30:	190d      	adds	r5, r1, r4
 8003c32:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003c36:	42ab      	cmp	r3, r5
 8003c38:	d0f4      	beq.n	8003c24 <memcmp+0x4>
 8003c3a:	1b58      	subs	r0, r3, r5
 8003c3c:	bd30      	pop	{r4, r5, pc}

08003c3e <memset>:
 8003c3e:	4402      	add	r2, r0
 8003c40:	4603      	mov	r3, r0
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d100      	bne.n	8003c48 <memset+0xa>
 8003c46:	4770      	bx	lr
 8003c48:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4c:	e7f9      	b.n	8003c42 <memset+0x4>

08003c4e <__cvt>:
 8003c4e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c52:	ec55 4b10 	vmov	r4, r5, d0
 8003c56:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003c58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003c5c:	2d00      	cmp	r5, #0
 8003c5e:	460e      	mov	r6, r1
 8003c60:	4691      	mov	r9, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	bfb8      	it	lt
 8003c66:	4622      	movlt	r2, r4
 8003c68:	462b      	mov	r3, r5
 8003c6a:	f027 0720 	bic.w	r7, r7, #32
 8003c6e:	bfbb      	ittet	lt
 8003c70:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003c74:	461d      	movlt	r5, r3
 8003c76:	2300      	movge	r3, #0
 8003c78:	232d      	movlt	r3, #45	; 0x2d
 8003c7a:	bfb8      	it	lt
 8003c7c:	4614      	movlt	r4, r2
 8003c7e:	2f46      	cmp	r7, #70	; 0x46
 8003c80:	700b      	strb	r3, [r1, #0]
 8003c82:	d004      	beq.n	8003c8e <__cvt+0x40>
 8003c84:	2f45      	cmp	r7, #69	; 0x45
 8003c86:	d100      	bne.n	8003c8a <__cvt+0x3c>
 8003c88:	3601      	adds	r6, #1
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	e000      	b.n	8003c90 <__cvt+0x42>
 8003c8e:	2103      	movs	r1, #3
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	ab02      	add	r3, sp, #8
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4632      	mov	r2, r6
 8003c9a:	4653      	mov	r3, sl
 8003c9c:	ec45 4b10 	vmov	d0, r4, r5
 8003ca0:	f000 fd26 	bl	80046f0 <_dtoa_r>
 8003ca4:	2f47      	cmp	r7, #71	; 0x47
 8003ca6:	4680      	mov	r8, r0
 8003ca8:	d102      	bne.n	8003cb0 <__cvt+0x62>
 8003caa:	f019 0f01 	tst.w	r9, #1
 8003cae:	d026      	beq.n	8003cfe <__cvt+0xb0>
 8003cb0:	2f46      	cmp	r7, #70	; 0x46
 8003cb2:	eb08 0906 	add.w	r9, r8, r6
 8003cb6:	d111      	bne.n	8003cdc <__cvt+0x8e>
 8003cb8:	f898 3000 	ldrb.w	r3, [r8]
 8003cbc:	2b30      	cmp	r3, #48	; 0x30
 8003cbe:	d10a      	bne.n	8003cd6 <__cvt+0x88>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f7fc feb4 	bl	8000a34 <__aeabi_dcmpeq>
 8003ccc:	b918      	cbnz	r0, 8003cd6 <__cvt+0x88>
 8003cce:	f1c6 0601 	rsb	r6, r6, #1
 8003cd2:	f8ca 6000 	str.w	r6, [sl]
 8003cd6:	f8da 3000 	ldr.w	r3, [sl]
 8003cda:	4499      	add	r9, r3
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2300      	movs	r3, #0
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	f7fc fea6 	bl	8000a34 <__aeabi_dcmpeq>
 8003ce8:	b938      	cbnz	r0, 8003cfa <__cvt+0xac>
 8003cea:	2230      	movs	r2, #48	; 0x30
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	454b      	cmp	r3, r9
 8003cf0:	d205      	bcs.n	8003cfe <__cvt+0xb0>
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	9103      	str	r1, [sp, #12]
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e7f8      	b.n	8003cec <__cvt+0x9e>
 8003cfa:	f8cd 900c 	str.w	r9, [sp, #12]
 8003cfe:	9b03      	ldr	r3, [sp, #12]
 8003d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d02:	eba3 0308 	sub.w	r3, r3, r8
 8003d06:	4640      	mov	r0, r8
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	b004      	add	sp, #16
 8003d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d10 <__exponent>:
 8003d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d12:	2900      	cmp	r1, #0
 8003d14:	4604      	mov	r4, r0
 8003d16:	bfba      	itte	lt
 8003d18:	4249      	neglt	r1, r1
 8003d1a:	232d      	movlt	r3, #45	; 0x2d
 8003d1c:	232b      	movge	r3, #43	; 0x2b
 8003d1e:	2909      	cmp	r1, #9
 8003d20:	f804 2b02 	strb.w	r2, [r4], #2
 8003d24:	7043      	strb	r3, [r0, #1]
 8003d26:	dd20      	ble.n	8003d6a <__exponent+0x5a>
 8003d28:	f10d 0307 	add.w	r3, sp, #7
 8003d2c:	461f      	mov	r7, r3
 8003d2e:	260a      	movs	r6, #10
 8003d30:	fb91 f5f6 	sdiv	r5, r1, r6
 8003d34:	fb06 1115 	mls	r1, r6, r5, r1
 8003d38:	3130      	adds	r1, #48	; 0x30
 8003d3a:	2d09      	cmp	r5, #9
 8003d3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d40:	f103 32ff 	add.w	r2, r3, #4294967295
 8003d44:	4629      	mov	r1, r5
 8003d46:	dc09      	bgt.n	8003d5c <__exponent+0x4c>
 8003d48:	3130      	adds	r1, #48	; 0x30
 8003d4a:	3b02      	subs	r3, #2
 8003d4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003d50:	42bb      	cmp	r3, r7
 8003d52:	4622      	mov	r2, r4
 8003d54:	d304      	bcc.n	8003d60 <__exponent+0x50>
 8003d56:	1a10      	subs	r0, r2, r0
 8003d58:	b003      	add	sp, #12
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	e7e7      	b.n	8003d30 <__exponent+0x20>
 8003d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d64:	f804 2b01 	strb.w	r2, [r4], #1
 8003d68:	e7f2      	b.n	8003d50 <__exponent+0x40>
 8003d6a:	2330      	movs	r3, #48	; 0x30
 8003d6c:	4419      	add	r1, r3
 8003d6e:	7083      	strb	r3, [r0, #2]
 8003d70:	1d02      	adds	r2, r0, #4
 8003d72:	70c1      	strb	r1, [r0, #3]
 8003d74:	e7ef      	b.n	8003d56 <__exponent+0x46>
	...

08003d78 <_printf_float>:
 8003d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7c:	b08d      	sub	sp, #52	; 0x34
 8003d7e:	460c      	mov	r4, r1
 8003d80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003d84:	4616      	mov	r6, r2
 8003d86:	461f      	mov	r7, r3
 8003d88:	4605      	mov	r5, r0
 8003d8a:	f001 fbe3 	bl	8005554 <_localeconv_r>
 8003d8e:	6803      	ldr	r3, [r0, #0]
 8003d90:	9304      	str	r3, [sp, #16]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fa22 	bl	80001dc <strlen>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003da0:	9005      	str	r0, [sp, #20]
 8003da2:	3307      	adds	r3, #7
 8003da4:	f023 0307 	bic.w	r3, r3, #7
 8003da8:	f103 0208 	add.w	r2, r3, #8
 8003dac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003db0:	f8d4 b000 	ldr.w	fp, [r4]
 8003db4:	f8c8 2000 	str.w	r2, [r8]
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003dc0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003dc4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003dc8:	9307      	str	r3, [sp, #28]
 8003dca:	f8cd 8018 	str.w	r8, [sp, #24]
 8003dce:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd2:	4ba7      	ldr	r3, [pc, #668]	; (8004070 <_printf_float+0x2f8>)
 8003dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dd8:	f7fc fe5e 	bl	8000a98 <__aeabi_dcmpun>
 8003ddc:	bb70      	cbnz	r0, 8003e3c <_printf_float+0xc4>
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295
 8003de2:	4ba3      	ldr	r3, [pc, #652]	; (8004070 <_printf_float+0x2f8>)
 8003de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003de8:	f7fc fe38 	bl	8000a5c <__aeabi_dcmple>
 8003dec:	bb30      	cbnz	r0, 8003e3c <_printf_float+0xc4>
 8003dee:	2200      	movs	r2, #0
 8003df0:	2300      	movs	r3, #0
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	f7fc fe27 	bl	8000a48 <__aeabi_dcmplt>
 8003dfa:	b110      	cbz	r0, 8003e02 <_printf_float+0x8a>
 8003dfc:	232d      	movs	r3, #45	; 0x2d
 8003dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e02:	4a9c      	ldr	r2, [pc, #624]	; (8004074 <_printf_float+0x2fc>)
 8003e04:	4b9c      	ldr	r3, [pc, #624]	; (8004078 <_printf_float+0x300>)
 8003e06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003e0a:	bf8c      	ite	hi
 8003e0c:	4690      	movhi	r8, r2
 8003e0e:	4698      	movls	r8, r3
 8003e10:	2303      	movs	r3, #3
 8003e12:	f02b 0204 	bic.w	r2, fp, #4
 8003e16:	6123      	str	r3, [r4, #16]
 8003e18:	6022      	str	r2, [r4, #0]
 8003e1a:	f04f 0900 	mov.w	r9, #0
 8003e1e:	9700      	str	r7, [sp, #0]
 8003e20:	4633      	mov	r3, r6
 8003e22:	aa0b      	add	r2, sp, #44	; 0x2c
 8003e24:	4621      	mov	r1, r4
 8003e26:	4628      	mov	r0, r5
 8003e28:	f000 f9e6 	bl	80041f8 <_printf_common>
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	f040 808d 	bne.w	8003f4c <_printf_float+0x1d4>
 8003e32:	f04f 30ff 	mov.w	r0, #4294967295
 8003e36:	b00d      	add	sp, #52	; 0x34
 8003e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	4640      	mov	r0, r8
 8003e42:	4649      	mov	r1, r9
 8003e44:	f7fc fe28 	bl	8000a98 <__aeabi_dcmpun>
 8003e48:	b110      	cbz	r0, 8003e50 <_printf_float+0xd8>
 8003e4a:	4a8c      	ldr	r2, [pc, #560]	; (800407c <_printf_float+0x304>)
 8003e4c:	4b8c      	ldr	r3, [pc, #560]	; (8004080 <_printf_float+0x308>)
 8003e4e:	e7da      	b.n	8003e06 <_printf_float+0x8e>
 8003e50:	6861      	ldr	r1, [r4, #4]
 8003e52:	1c4b      	adds	r3, r1, #1
 8003e54:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003e58:	a80a      	add	r0, sp, #40	; 0x28
 8003e5a:	d13e      	bne.n	8003eda <_printf_float+0x162>
 8003e5c:	2306      	movs	r3, #6
 8003e5e:	6063      	str	r3, [r4, #4]
 8003e60:	2300      	movs	r3, #0
 8003e62:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003e66:	ab09      	add	r3, sp, #36	; 0x24
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	ec49 8b10 	vmov	d0, r8, r9
 8003e6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e72:	6022      	str	r2, [r4, #0]
 8003e74:	f8cd a004 	str.w	sl, [sp, #4]
 8003e78:	6861      	ldr	r1, [r4, #4]
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7ff fee7 	bl	8003c4e <__cvt>
 8003e80:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003e84:	2b47      	cmp	r3, #71	; 0x47
 8003e86:	4680      	mov	r8, r0
 8003e88:	d109      	bne.n	8003e9e <_printf_float+0x126>
 8003e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e8c:	1cd8      	adds	r0, r3, #3
 8003e8e:	db02      	blt.n	8003e96 <_printf_float+0x11e>
 8003e90:	6862      	ldr	r2, [r4, #4]
 8003e92:	4293      	cmp	r3, r2
 8003e94:	dd47      	ble.n	8003f26 <_printf_float+0x1ae>
 8003e96:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e9a:	fa5f fa8a 	uxtb.w	sl, sl
 8003e9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ea4:	d824      	bhi.n	8003ef0 <_printf_float+0x178>
 8003ea6:	3901      	subs	r1, #1
 8003ea8:	4652      	mov	r2, sl
 8003eaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003eae:	9109      	str	r1, [sp, #36]	; 0x24
 8003eb0:	f7ff ff2e 	bl	8003d10 <__exponent>
 8003eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003eb6:	1813      	adds	r3, r2, r0
 8003eb8:	2a01      	cmp	r2, #1
 8003eba:	4681      	mov	r9, r0
 8003ebc:	6123      	str	r3, [r4, #16]
 8003ebe:	dc02      	bgt.n	8003ec6 <_printf_float+0x14e>
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	07d1      	lsls	r1, r2, #31
 8003ec4:	d501      	bpl.n	8003eca <_printf_float+0x152>
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	6123      	str	r3, [r4, #16]
 8003eca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0a5      	beq.n	8003e1e <_printf_float+0xa6>
 8003ed2:	232d      	movs	r3, #45	; 0x2d
 8003ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ed8:	e7a1      	b.n	8003e1e <_printf_float+0xa6>
 8003eda:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003ede:	f000 8177 	beq.w	80041d0 <_printf_float+0x458>
 8003ee2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003ee6:	d1bb      	bne.n	8003e60 <_printf_float+0xe8>
 8003ee8:	2900      	cmp	r1, #0
 8003eea:	d1b9      	bne.n	8003e60 <_printf_float+0xe8>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e7b6      	b.n	8003e5e <_printf_float+0xe6>
 8003ef0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003ef4:	d119      	bne.n	8003f2a <_printf_float+0x1b2>
 8003ef6:	2900      	cmp	r1, #0
 8003ef8:	6863      	ldr	r3, [r4, #4]
 8003efa:	dd0c      	ble.n	8003f16 <_printf_float+0x19e>
 8003efc:	6121      	str	r1, [r4, #16]
 8003efe:	b913      	cbnz	r3, 8003f06 <_printf_float+0x18e>
 8003f00:	6822      	ldr	r2, [r4, #0]
 8003f02:	07d2      	lsls	r2, r2, #31
 8003f04:	d502      	bpl.n	8003f0c <_printf_float+0x194>
 8003f06:	3301      	adds	r3, #1
 8003f08:	440b      	add	r3, r1
 8003f0a:	6123      	str	r3, [r4, #16]
 8003f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f10:	f04f 0900 	mov.w	r9, #0
 8003f14:	e7d9      	b.n	8003eca <_printf_float+0x152>
 8003f16:	b913      	cbnz	r3, 8003f1e <_printf_float+0x1a6>
 8003f18:	6822      	ldr	r2, [r4, #0]
 8003f1a:	07d0      	lsls	r0, r2, #31
 8003f1c:	d501      	bpl.n	8003f22 <_printf_float+0x1aa>
 8003f1e:	3302      	adds	r3, #2
 8003f20:	e7f3      	b.n	8003f0a <_printf_float+0x192>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e7f1      	b.n	8003f0a <_printf_float+0x192>
 8003f26:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003f2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	db05      	blt.n	8003f3e <_printf_float+0x1c6>
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	6123      	str	r3, [r4, #16]
 8003f36:	07d1      	lsls	r1, r2, #31
 8003f38:	d5e8      	bpl.n	8003f0c <_printf_float+0x194>
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	e7e5      	b.n	8003f0a <_printf_float+0x192>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bfd4      	ite	le
 8003f42:	f1c3 0302 	rsble	r3, r3, #2
 8003f46:	2301      	movgt	r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	e7de      	b.n	8003f0a <_printf_float+0x192>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	055a      	lsls	r2, r3, #21
 8003f50:	d407      	bmi.n	8003f62 <_printf_float+0x1ea>
 8003f52:	6923      	ldr	r3, [r4, #16]
 8003f54:	4642      	mov	r2, r8
 8003f56:	4631      	mov	r1, r6
 8003f58:	4628      	mov	r0, r5
 8003f5a:	47b8      	blx	r7
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d12b      	bne.n	8003fb8 <_printf_float+0x240>
 8003f60:	e767      	b.n	8003e32 <_printf_float+0xba>
 8003f62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003f66:	f240 80dc 	bls.w	8004122 <_printf_float+0x3aa>
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f72:	f7fc fd5f 	bl	8000a34 <__aeabi_dcmpeq>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d033      	beq.n	8003fe2 <_printf_float+0x26a>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4a41      	ldr	r2, [pc, #260]	; (8004084 <_printf_float+0x30c>)
 8003f7e:	4631      	mov	r1, r6
 8003f80:	4628      	mov	r0, r5
 8003f82:	47b8      	blx	r7
 8003f84:	3001      	adds	r0, #1
 8003f86:	f43f af54 	beq.w	8003e32 <_printf_float+0xba>
 8003f8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	db02      	blt.n	8003f98 <_printf_float+0x220>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	07d8      	lsls	r0, r3, #31
 8003f96:	d50f      	bpl.n	8003fb8 <_printf_float+0x240>
 8003f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	47b8      	blx	r7
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	f43f af45 	beq.w	8003e32 <_printf_float+0xba>
 8003fa8:	f04f 0800 	mov.w	r8, #0
 8003fac:	f104 091a 	add.w	r9, r4, #26
 8003fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	4543      	cmp	r3, r8
 8003fb6:	dc09      	bgt.n	8003fcc <_printf_float+0x254>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	079b      	lsls	r3, r3, #30
 8003fbc:	f100 8103 	bmi.w	80041c6 <_printf_float+0x44e>
 8003fc0:	68e0      	ldr	r0, [r4, #12]
 8003fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fc4:	4298      	cmp	r0, r3
 8003fc6:	bfb8      	it	lt
 8003fc8:	4618      	movlt	r0, r3
 8003fca:	e734      	b.n	8003e36 <_printf_float+0xbe>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	464a      	mov	r2, r9
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	47b8      	blx	r7
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	f43f af2b 	beq.w	8003e32 <_printf_float+0xba>
 8003fdc:	f108 0801 	add.w	r8, r8, #1
 8003fe0:	e7e6      	b.n	8003fb0 <_printf_float+0x238>
 8003fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	dc2b      	bgt.n	8004040 <_printf_float+0x2c8>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4a26      	ldr	r2, [pc, #152]	; (8004084 <_printf_float+0x30c>)
 8003fec:	4631      	mov	r1, r6
 8003fee:	4628      	mov	r0, r5
 8003ff0:	47b8      	blx	r7
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	f43f af1d 	beq.w	8003e32 <_printf_float+0xba>
 8003ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffa:	b923      	cbnz	r3, 8004006 <_printf_float+0x28e>
 8003ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ffe:	b913      	cbnz	r3, 8004006 <_printf_float+0x28e>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	07d9      	lsls	r1, r3, #31
 8004004:	d5d8      	bpl.n	8003fb8 <_printf_float+0x240>
 8004006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800400a:	4631      	mov	r1, r6
 800400c:	4628      	mov	r0, r5
 800400e:	47b8      	blx	r7
 8004010:	3001      	adds	r0, #1
 8004012:	f43f af0e 	beq.w	8003e32 <_printf_float+0xba>
 8004016:	f04f 0900 	mov.w	r9, #0
 800401a:	f104 0a1a 	add.w	sl, r4, #26
 800401e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004020:	425b      	negs	r3, r3
 8004022:	454b      	cmp	r3, r9
 8004024:	dc01      	bgt.n	800402a <_printf_float+0x2b2>
 8004026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004028:	e794      	b.n	8003f54 <_printf_float+0x1dc>
 800402a:	2301      	movs	r3, #1
 800402c:	4652      	mov	r2, sl
 800402e:	4631      	mov	r1, r6
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	f43f aefc 	beq.w	8003e32 <_printf_float+0xba>
 800403a:	f109 0901 	add.w	r9, r9, #1
 800403e:	e7ee      	b.n	800401e <_printf_float+0x2a6>
 8004040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004042:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004044:	429a      	cmp	r2, r3
 8004046:	bfa8      	it	ge
 8004048:	461a      	movge	r2, r3
 800404a:	2a00      	cmp	r2, #0
 800404c:	4691      	mov	r9, r2
 800404e:	dd07      	ble.n	8004060 <_printf_float+0x2e8>
 8004050:	4613      	mov	r3, r2
 8004052:	4631      	mov	r1, r6
 8004054:	4642      	mov	r2, r8
 8004056:	4628      	mov	r0, r5
 8004058:	47b8      	blx	r7
 800405a:	3001      	adds	r0, #1
 800405c:	f43f aee9 	beq.w	8003e32 <_printf_float+0xba>
 8004060:	f104 031a 	add.w	r3, r4, #26
 8004064:	f04f 0b00 	mov.w	fp, #0
 8004068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800406c:	9306      	str	r3, [sp, #24]
 800406e:	e015      	b.n	800409c <_printf_float+0x324>
 8004070:	7fefffff 	.word	0x7fefffff
 8004074:	08006090 	.word	0x08006090
 8004078:	0800608c 	.word	0x0800608c
 800407c:	08006098 	.word	0x08006098
 8004080:	08006094 	.word	0x08006094
 8004084:	0800609c 	.word	0x0800609c
 8004088:	2301      	movs	r3, #1
 800408a:	9a06      	ldr	r2, [sp, #24]
 800408c:	4631      	mov	r1, r6
 800408e:	4628      	mov	r0, r5
 8004090:	47b8      	blx	r7
 8004092:	3001      	adds	r0, #1
 8004094:	f43f aecd 	beq.w	8003e32 <_printf_float+0xba>
 8004098:	f10b 0b01 	add.w	fp, fp, #1
 800409c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040a0:	ebaa 0309 	sub.w	r3, sl, r9
 80040a4:	455b      	cmp	r3, fp
 80040a6:	dcef      	bgt.n	8004088 <_printf_float+0x310>
 80040a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ac:	429a      	cmp	r2, r3
 80040ae:	44d0      	add	r8, sl
 80040b0:	db15      	blt.n	80040de <_printf_float+0x366>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	07da      	lsls	r2, r3, #31
 80040b6:	d412      	bmi.n	80040de <_printf_float+0x366>
 80040b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040bc:	eba3 020a 	sub.w	r2, r3, sl
 80040c0:	eba3 0a01 	sub.w	sl, r3, r1
 80040c4:	4592      	cmp	sl, r2
 80040c6:	bfa8      	it	ge
 80040c8:	4692      	movge	sl, r2
 80040ca:	f1ba 0f00 	cmp.w	sl, #0
 80040ce:	dc0e      	bgt.n	80040ee <_printf_float+0x376>
 80040d0:	f04f 0800 	mov.w	r8, #0
 80040d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80040d8:	f104 091a 	add.w	r9, r4, #26
 80040dc:	e019      	b.n	8004112 <_printf_float+0x39a>
 80040de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040e2:	4631      	mov	r1, r6
 80040e4:	4628      	mov	r0, r5
 80040e6:	47b8      	blx	r7
 80040e8:	3001      	adds	r0, #1
 80040ea:	d1e5      	bne.n	80040b8 <_printf_float+0x340>
 80040ec:	e6a1      	b.n	8003e32 <_printf_float+0xba>
 80040ee:	4653      	mov	r3, sl
 80040f0:	4642      	mov	r2, r8
 80040f2:	4631      	mov	r1, r6
 80040f4:	4628      	mov	r0, r5
 80040f6:	47b8      	blx	r7
 80040f8:	3001      	adds	r0, #1
 80040fa:	d1e9      	bne.n	80040d0 <_printf_float+0x358>
 80040fc:	e699      	b.n	8003e32 <_printf_float+0xba>
 80040fe:	2301      	movs	r3, #1
 8004100:	464a      	mov	r2, r9
 8004102:	4631      	mov	r1, r6
 8004104:	4628      	mov	r0, r5
 8004106:	47b8      	blx	r7
 8004108:	3001      	adds	r0, #1
 800410a:	f43f ae92 	beq.w	8003e32 <_printf_float+0xba>
 800410e:	f108 0801 	add.w	r8, r8, #1
 8004112:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	eba3 030a 	sub.w	r3, r3, sl
 800411c:	4543      	cmp	r3, r8
 800411e:	dcee      	bgt.n	80040fe <_printf_float+0x386>
 8004120:	e74a      	b.n	8003fb8 <_printf_float+0x240>
 8004122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004124:	2a01      	cmp	r2, #1
 8004126:	dc01      	bgt.n	800412c <_printf_float+0x3b4>
 8004128:	07db      	lsls	r3, r3, #31
 800412a:	d53a      	bpl.n	80041a2 <_printf_float+0x42a>
 800412c:	2301      	movs	r3, #1
 800412e:	4642      	mov	r2, r8
 8004130:	4631      	mov	r1, r6
 8004132:	4628      	mov	r0, r5
 8004134:	47b8      	blx	r7
 8004136:	3001      	adds	r0, #1
 8004138:	f43f ae7b 	beq.w	8003e32 <_printf_float+0xba>
 800413c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f108 0801 	add.w	r8, r8, #1
 800414c:	f43f ae71 	beq.w	8003e32 <_printf_float+0xba>
 8004150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004152:	2200      	movs	r2, #0
 8004154:	f103 3aff 	add.w	sl, r3, #4294967295
 8004158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800415c:	2300      	movs	r3, #0
 800415e:	f7fc fc69 	bl	8000a34 <__aeabi_dcmpeq>
 8004162:	b9c8      	cbnz	r0, 8004198 <_printf_float+0x420>
 8004164:	4653      	mov	r3, sl
 8004166:	4642      	mov	r2, r8
 8004168:	4631      	mov	r1, r6
 800416a:	4628      	mov	r0, r5
 800416c:	47b8      	blx	r7
 800416e:	3001      	adds	r0, #1
 8004170:	d10e      	bne.n	8004190 <_printf_float+0x418>
 8004172:	e65e      	b.n	8003e32 <_printf_float+0xba>
 8004174:	2301      	movs	r3, #1
 8004176:	4652      	mov	r2, sl
 8004178:	4631      	mov	r1, r6
 800417a:	4628      	mov	r0, r5
 800417c:	47b8      	blx	r7
 800417e:	3001      	adds	r0, #1
 8004180:	f43f ae57 	beq.w	8003e32 <_printf_float+0xba>
 8004184:	f108 0801 	add.w	r8, r8, #1
 8004188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800418a:	3b01      	subs	r3, #1
 800418c:	4543      	cmp	r3, r8
 800418e:	dcf1      	bgt.n	8004174 <_printf_float+0x3fc>
 8004190:	464b      	mov	r3, r9
 8004192:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004196:	e6de      	b.n	8003f56 <_printf_float+0x1de>
 8004198:	f04f 0800 	mov.w	r8, #0
 800419c:	f104 0a1a 	add.w	sl, r4, #26
 80041a0:	e7f2      	b.n	8004188 <_printf_float+0x410>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e7df      	b.n	8004166 <_printf_float+0x3ee>
 80041a6:	2301      	movs	r3, #1
 80041a8:	464a      	mov	r2, r9
 80041aa:	4631      	mov	r1, r6
 80041ac:	4628      	mov	r0, r5
 80041ae:	47b8      	blx	r7
 80041b0:	3001      	adds	r0, #1
 80041b2:	f43f ae3e 	beq.w	8003e32 <_printf_float+0xba>
 80041b6:	f108 0801 	add.w	r8, r8, #1
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	4543      	cmp	r3, r8
 80041c2:	dcf0      	bgt.n	80041a6 <_printf_float+0x42e>
 80041c4:	e6fc      	b.n	8003fc0 <_printf_float+0x248>
 80041c6:	f04f 0800 	mov.w	r8, #0
 80041ca:	f104 0919 	add.w	r9, r4, #25
 80041ce:	e7f4      	b.n	80041ba <_printf_float+0x442>
 80041d0:	2900      	cmp	r1, #0
 80041d2:	f43f ae8b 	beq.w	8003eec <_printf_float+0x174>
 80041d6:	2300      	movs	r3, #0
 80041d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80041dc:	ab09      	add	r3, sp, #36	; 0x24
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	ec49 8b10 	vmov	d0, r8, r9
 80041e4:	6022      	str	r2, [r4, #0]
 80041e6:	f8cd a004 	str.w	sl, [sp, #4]
 80041ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041ee:	4628      	mov	r0, r5
 80041f0:	f7ff fd2d 	bl	8003c4e <__cvt>
 80041f4:	4680      	mov	r8, r0
 80041f6:	e648      	b.n	8003e8a <_printf_float+0x112>

080041f8 <_printf_common>:
 80041f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041fc:	4691      	mov	r9, r2
 80041fe:	461f      	mov	r7, r3
 8004200:	688a      	ldr	r2, [r1, #8]
 8004202:	690b      	ldr	r3, [r1, #16]
 8004204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004208:	4293      	cmp	r3, r2
 800420a:	bfb8      	it	lt
 800420c:	4613      	movlt	r3, r2
 800420e:	f8c9 3000 	str.w	r3, [r9]
 8004212:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004216:	4606      	mov	r6, r0
 8004218:	460c      	mov	r4, r1
 800421a:	b112      	cbz	r2, 8004222 <_printf_common+0x2a>
 800421c:	3301      	adds	r3, #1
 800421e:	f8c9 3000 	str.w	r3, [r9]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	0699      	lsls	r1, r3, #26
 8004226:	bf42      	ittt	mi
 8004228:	f8d9 3000 	ldrmi.w	r3, [r9]
 800422c:	3302      	addmi	r3, #2
 800422e:	f8c9 3000 	strmi.w	r3, [r9]
 8004232:	6825      	ldr	r5, [r4, #0]
 8004234:	f015 0506 	ands.w	r5, r5, #6
 8004238:	d107      	bne.n	800424a <_printf_common+0x52>
 800423a:	f104 0a19 	add.w	sl, r4, #25
 800423e:	68e3      	ldr	r3, [r4, #12]
 8004240:	f8d9 2000 	ldr.w	r2, [r9]
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	42ab      	cmp	r3, r5
 8004248:	dc28      	bgt.n	800429c <_printf_common+0xa4>
 800424a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800424e:	6822      	ldr	r2, [r4, #0]
 8004250:	3300      	adds	r3, #0
 8004252:	bf18      	it	ne
 8004254:	2301      	movne	r3, #1
 8004256:	0692      	lsls	r2, r2, #26
 8004258:	d42d      	bmi.n	80042b6 <_printf_common+0xbe>
 800425a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800425e:	4639      	mov	r1, r7
 8004260:	4630      	mov	r0, r6
 8004262:	47c0      	blx	r8
 8004264:	3001      	adds	r0, #1
 8004266:	d020      	beq.n	80042aa <_printf_common+0xb2>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	68e5      	ldr	r5, [r4, #12]
 800426c:	f8d9 2000 	ldr.w	r2, [r9]
 8004270:	f003 0306 	and.w	r3, r3, #6
 8004274:	2b04      	cmp	r3, #4
 8004276:	bf08      	it	eq
 8004278:	1aad      	subeq	r5, r5, r2
 800427a:	68a3      	ldr	r3, [r4, #8]
 800427c:	6922      	ldr	r2, [r4, #16]
 800427e:	bf0c      	ite	eq
 8004280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004284:	2500      	movne	r5, #0
 8004286:	4293      	cmp	r3, r2
 8004288:	bfc4      	itt	gt
 800428a:	1a9b      	subgt	r3, r3, r2
 800428c:	18ed      	addgt	r5, r5, r3
 800428e:	f04f 0900 	mov.w	r9, #0
 8004292:	341a      	adds	r4, #26
 8004294:	454d      	cmp	r5, r9
 8004296:	d11a      	bne.n	80042ce <_printf_common+0xd6>
 8004298:	2000      	movs	r0, #0
 800429a:	e008      	b.n	80042ae <_printf_common+0xb6>
 800429c:	2301      	movs	r3, #1
 800429e:	4652      	mov	r2, sl
 80042a0:	4639      	mov	r1, r7
 80042a2:	4630      	mov	r0, r6
 80042a4:	47c0      	blx	r8
 80042a6:	3001      	adds	r0, #1
 80042a8:	d103      	bne.n	80042b2 <_printf_common+0xba>
 80042aa:	f04f 30ff 	mov.w	r0, #4294967295
 80042ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b2:	3501      	adds	r5, #1
 80042b4:	e7c3      	b.n	800423e <_printf_common+0x46>
 80042b6:	18e1      	adds	r1, r4, r3
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	2030      	movs	r0, #48	; 0x30
 80042bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042c0:	4422      	add	r2, r4
 80042c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ca:	3302      	adds	r3, #2
 80042cc:	e7c5      	b.n	800425a <_printf_common+0x62>
 80042ce:	2301      	movs	r3, #1
 80042d0:	4622      	mov	r2, r4
 80042d2:	4639      	mov	r1, r7
 80042d4:	4630      	mov	r0, r6
 80042d6:	47c0      	blx	r8
 80042d8:	3001      	adds	r0, #1
 80042da:	d0e6      	beq.n	80042aa <_printf_common+0xb2>
 80042dc:	f109 0901 	add.w	r9, r9, #1
 80042e0:	e7d8      	b.n	8004294 <_printf_common+0x9c>
	...

080042e4 <_puts_r>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	460e      	mov	r6, r1
 80042e8:	4605      	mov	r5, r0
 80042ea:	b118      	cbz	r0, 80042f4 <_puts_r+0x10>
 80042ec:	6983      	ldr	r3, [r0, #24]
 80042ee:	b90b      	cbnz	r3, 80042f4 <_puts_r+0x10>
 80042f0:	f001 f8a6 	bl	8005440 <__sinit>
 80042f4:	69ab      	ldr	r3, [r5, #24]
 80042f6:	68ac      	ldr	r4, [r5, #8]
 80042f8:	b913      	cbnz	r3, 8004300 <_puts_r+0x1c>
 80042fa:	4628      	mov	r0, r5
 80042fc:	f001 f8a0 	bl	8005440 <__sinit>
 8004300:	4b23      	ldr	r3, [pc, #140]	; (8004390 <_puts_r+0xac>)
 8004302:	429c      	cmp	r4, r3
 8004304:	d117      	bne.n	8004336 <_puts_r+0x52>
 8004306:	686c      	ldr	r4, [r5, #4]
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	071b      	lsls	r3, r3, #28
 800430c:	d51d      	bpl.n	800434a <_puts_r+0x66>
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	b1db      	cbz	r3, 800434a <_puts_r+0x66>
 8004312:	3e01      	subs	r6, #1
 8004314:	68a3      	ldr	r3, [r4, #8]
 8004316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800431a:	3b01      	subs	r3, #1
 800431c:	60a3      	str	r3, [r4, #8]
 800431e:	b9e9      	cbnz	r1, 800435c <_puts_r+0x78>
 8004320:	2b00      	cmp	r3, #0
 8004322:	da2e      	bge.n	8004382 <_puts_r+0x9e>
 8004324:	4622      	mov	r2, r4
 8004326:	210a      	movs	r1, #10
 8004328:	4628      	mov	r0, r5
 800432a:	f000 f893 	bl	8004454 <__swbuf_r>
 800432e:	3001      	adds	r0, #1
 8004330:	d011      	beq.n	8004356 <_puts_r+0x72>
 8004332:	200a      	movs	r0, #10
 8004334:	e011      	b.n	800435a <_puts_r+0x76>
 8004336:	4b17      	ldr	r3, [pc, #92]	; (8004394 <_puts_r+0xb0>)
 8004338:	429c      	cmp	r4, r3
 800433a:	d101      	bne.n	8004340 <_puts_r+0x5c>
 800433c:	68ac      	ldr	r4, [r5, #8]
 800433e:	e7e3      	b.n	8004308 <_puts_r+0x24>
 8004340:	4b15      	ldr	r3, [pc, #84]	; (8004398 <_puts_r+0xb4>)
 8004342:	429c      	cmp	r4, r3
 8004344:	bf08      	it	eq
 8004346:	68ec      	ldreq	r4, [r5, #12]
 8004348:	e7de      	b.n	8004308 <_puts_r+0x24>
 800434a:	4621      	mov	r1, r4
 800434c:	4628      	mov	r0, r5
 800434e:	f000 f8d3 	bl	80044f8 <__swsetup_r>
 8004352:	2800      	cmp	r0, #0
 8004354:	d0dd      	beq.n	8004312 <_puts_r+0x2e>
 8004356:	f04f 30ff 	mov.w	r0, #4294967295
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	2b00      	cmp	r3, #0
 800435e:	da04      	bge.n	800436a <_puts_r+0x86>
 8004360:	69a2      	ldr	r2, [r4, #24]
 8004362:	429a      	cmp	r2, r3
 8004364:	dc06      	bgt.n	8004374 <_puts_r+0x90>
 8004366:	290a      	cmp	r1, #10
 8004368:	d004      	beq.n	8004374 <_puts_r+0x90>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	6022      	str	r2, [r4, #0]
 8004370:	7019      	strb	r1, [r3, #0]
 8004372:	e7cf      	b.n	8004314 <_puts_r+0x30>
 8004374:	4622      	mov	r2, r4
 8004376:	4628      	mov	r0, r5
 8004378:	f000 f86c 	bl	8004454 <__swbuf_r>
 800437c:	3001      	adds	r0, #1
 800437e:	d1c9      	bne.n	8004314 <_puts_r+0x30>
 8004380:	e7e9      	b.n	8004356 <_puts_r+0x72>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	200a      	movs	r0, #10
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	6022      	str	r2, [r4, #0]
 800438a:	7018      	strb	r0, [r3, #0]
 800438c:	e7e5      	b.n	800435a <_puts_r+0x76>
 800438e:	bf00      	nop
 8004390:	080060cc 	.word	0x080060cc
 8004394:	080060ec 	.word	0x080060ec
 8004398:	080060ac 	.word	0x080060ac

0800439c <puts>:
 800439c:	4b02      	ldr	r3, [pc, #8]	; (80043a8 <puts+0xc>)
 800439e:	4601      	mov	r1, r0
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	f7ff bf9f 	b.w	80042e4 <_puts_r>
 80043a6:	bf00      	nop
 80043a8:	20000010 	.word	0x20000010

080043ac <strtok>:
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <strtok+0x50>)
 80043ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b2:	681d      	ldr	r5, [r3, #0]
 80043b4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80043b6:	4606      	mov	r6, r0
 80043b8:	460f      	mov	r7, r1
 80043ba:	b9b4      	cbnz	r4, 80043ea <strtok+0x3e>
 80043bc:	2050      	movs	r0, #80	; 0x50
 80043be:	f001 f93b 	bl	8005638 <malloc>
 80043c2:	65a8      	str	r0, [r5, #88]	; 0x58
 80043c4:	e9c0 4400 	strd	r4, r4, [r0]
 80043c8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80043cc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80043d0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80043d4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80043d8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80043dc:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80043e0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80043e4:	6184      	str	r4, [r0, #24]
 80043e6:	7704      	strb	r4, [r0, #28]
 80043e8:	6244      	str	r4, [r0, #36]	; 0x24
 80043ea:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80043ec:	4639      	mov	r1, r7
 80043ee:	4630      	mov	r0, r6
 80043f0:	2301      	movs	r3, #1
 80043f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043f6:	f000 b803 	b.w	8004400 <__strtok_r>
 80043fa:	bf00      	nop
 80043fc:	20000010 	.word	0x20000010

08004400 <__strtok_r>:
 8004400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004402:	b918      	cbnz	r0, 800440c <__strtok_r+0xc>
 8004404:	6810      	ldr	r0, [r2, #0]
 8004406:	b908      	cbnz	r0, 800440c <__strtok_r+0xc>
 8004408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440a:	4620      	mov	r0, r4
 800440c:	4604      	mov	r4, r0
 800440e:	460f      	mov	r7, r1
 8004410:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004414:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004418:	b91e      	cbnz	r6, 8004422 <__strtok_r+0x22>
 800441a:	b96d      	cbnz	r5, 8004438 <__strtok_r+0x38>
 800441c:	6015      	str	r5, [r2, #0]
 800441e:	4628      	mov	r0, r5
 8004420:	e7f2      	b.n	8004408 <__strtok_r+0x8>
 8004422:	42b5      	cmp	r5, r6
 8004424:	d1f6      	bne.n	8004414 <__strtok_r+0x14>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1ef      	bne.n	800440a <__strtok_r+0xa>
 800442a:	6014      	str	r4, [r2, #0]
 800442c:	7003      	strb	r3, [r0, #0]
 800442e:	e7eb      	b.n	8004408 <__strtok_r+0x8>
 8004430:	462b      	mov	r3, r5
 8004432:	e00d      	b.n	8004450 <__strtok_r+0x50>
 8004434:	b926      	cbnz	r6, 8004440 <__strtok_r+0x40>
 8004436:	461c      	mov	r4, r3
 8004438:	4623      	mov	r3, r4
 800443a:	460f      	mov	r7, r1
 800443c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004440:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004444:	42b5      	cmp	r5, r6
 8004446:	d1f5      	bne.n	8004434 <__strtok_r+0x34>
 8004448:	2d00      	cmp	r5, #0
 800444a:	d0f1      	beq.n	8004430 <__strtok_r+0x30>
 800444c:	2100      	movs	r1, #0
 800444e:	7021      	strb	r1, [r4, #0]
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e7d9      	b.n	8004408 <__strtok_r+0x8>

08004454 <__swbuf_r>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	460e      	mov	r6, r1
 8004458:	4614      	mov	r4, r2
 800445a:	4605      	mov	r5, r0
 800445c:	b118      	cbz	r0, 8004466 <__swbuf_r+0x12>
 800445e:	6983      	ldr	r3, [r0, #24]
 8004460:	b90b      	cbnz	r3, 8004466 <__swbuf_r+0x12>
 8004462:	f000 ffed 	bl	8005440 <__sinit>
 8004466:	4b21      	ldr	r3, [pc, #132]	; (80044ec <__swbuf_r+0x98>)
 8004468:	429c      	cmp	r4, r3
 800446a:	d12a      	bne.n	80044c2 <__swbuf_r+0x6e>
 800446c:	686c      	ldr	r4, [r5, #4]
 800446e:	69a3      	ldr	r3, [r4, #24]
 8004470:	60a3      	str	r3, [r4, #8]
 8004472:	89a3      	ldrh	r3, [r4, #12]
 8004474:	071a      	lsls	r2, r3, #28
 8004476:	d52e      	bpl.n	80044d6 <__swbuf_r+0x82>
 8004478:	6923      	ldr	r3, [r4, #16]
 800447a:	b363      	cbz	r3, 80044d6 <__swbuf_r+0x82>
 800447c:	6923      	ldr	r3, [r4, #16]
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	1ac0      	subs	r0, r0, r3
 8004482:	6963      	ldr	r3, [r4, #20]
 8004484:	b2f6      	uxtb	r6, r6
 8004486:	4283      	cmp	r3, r0
 8004488:	4637      	mov	r7, r6
 800448a:	dc04      	bgt.n	8004496 <__swbuf_r+0x42>
 800448c:	4621      	mov	r1, r4
 800448e:	4628      	mov	r0, r5
 8004490:	f000 ff6c 	bl	800536c <_fflush_r>
 8004494:	bb28      	cbnz	r0, 80044e2 <__swbuf_r+0x8e>
 8004496:	68a3      	ldr	r3, [r4, #8]
 8004498:	3b01      	subs	r3, #1
 800449a:	60a3      	str	r3, [r4, #8]
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	6022      	str	r2, [r4, #0]
 80044a2:	701e      	strb	r6, [r3, #0]
 80044a4:	6963      	ldr	r3, [r4, #20]
 80044a6:	3001      	adds	r0, #1
 80044a8:	4283      	cmp	r3, r0
 80044aa:	d004      	beq.n	80044b6 <__swbuf_r+0x62>
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	07db      	lsls	r3, r3, #31
 80044b0:	d519      	bpl.n	80044e6 <__swbuf_r+0x92>
 80044b2:	2e0a      	cmp	r6, #10
 80044b4:	d117      	bne.n	80044e6 <__swbuf_r+0x92>
 80044b6:	4621      	mov	r1, r4
 80044b8:	4628      	mov	r0, r5
 80044ba:	f000 ff57 	bl	800536c <_fflush_r>
 80044be:	b190      	cbz	r0, 80044e6 <__swbuf_r+0x92>
 80044c0:	e00f      	b.n	80044e2 <__swbuf_r+0x8e>
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <__swbuf_r+0x9c>)
 80044c4:	429c      	cmp	r4, r3
 80044c6:	d101      	bne.n	80044cc <__swbuf_r+0x78>
 80044c8:	68ac      	ldr	r4, [r5, #8]
 80044ca:	e7d0      	b.n	800446e <__swbuf_r+0x1a>
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <__swbuf_r+0xa0>)
 80044ce:	429c      	cmp	r4, r3
 80044d0:	bf08      	it	eq
 80044d2:	68ec      	ldreq	r4, [r5, #12]
 80044d4:	e7cb      	b.n	800446e <__swbuf_r+0x1a>
 80044d6:	4621      	mov	r1, r4
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 f80d 	bl	80044f8 <__swsetup_r>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d0cc      	beq.n	800447c <__swbuf_r+0x28>
 80044e2:	f04f 37ff 	mov.w	r7, #4294967295
 80044e6:	4638      	mov	r0, r7
 80044e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ea:	bf00      	nop
 80044ec:	080060cc 	.word	0x080060cc
 80044f0:	080060ec 	.word	0x080060ec
 80044f4:	080060ac 	.word	0x080060ac

080044f8 <__swsetup_r>:
 80044f8:	4b32      	ldr	r3, [pc, #200]	; (80045c4 <__swsetup_r+0xcc>)
 80044fa:	b570      	push	{r4, r5, r6, lr}
 80044fc:	681d      	ldr	r5, [r3, #0]
 80044fe:	4606      	mov	r6, r0
 8004500:	460c      	mov	r4, r1
 8004502:	b125      	cbz	r5, 800450e <__swsetup_r+0x16>
 8004504:	69ab      	ldr	r3, [r5, #24]
 8004506:	b913      	cbnz	r3, 800450e <__swsetup_r+0x16>
 8004508:	4628      	mov	r0, r5
 800450a:	f000 ff99 	bl	8005440 <__sinit>
 800450e:	4b2e      	ldr	r3, [pc, #184]	; (80045c8 <__swsetup_r+0xd0>)
 8004510:	429c      	cmp	r4, r3
 8004512:	d10f      	bne.n	8004534 <__swsetup_r+0x3c>
 8004514:	686c      	ldr	r4, [r5, #4]
 8004516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451a:	b29a      	uxth	r2, r3
 800451c:	0715      	lsls	r5, r2, #28
 800451e:	d42c      	bmi.n	800457a <__swsetup_r+0x82>
 8004520:	06d0      	lsls	r0, r2, #27
 8004522:	d411      	bmi.n	8004548 <__swsetup_r+0x50>
 8004524:	2209      	movs	r2, #9
 8004526:	6032      	str	r2, [r6, #0]
 8004528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800452c:	81a3      	strh	r3, [r4, #12]
 800452e:	f04f 30ff 	mov.w	r0, #4294967295
 8004532:	e03e      	b.n	80045b2 <__swsetup_r+0xba>
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <__swsetup_r+0xd4>)
 8004536:	429c      	cmp	r4, r3
 8004538:	d101      	bne.n	800453e <__swsetup_r+0x46>
 800453a:	68ac      	ldr	r4, [r5, #8]
 800453c:	e7eb      	b.n	8004516 <__swsetup_r+0x1e>
 800453e:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <__swsetup_r+0xd8>)
 8004540:	429c      	cmp	r4, r3
 8004542:	bf08      	it	eq
 8004544:	68ec      	ldreq	r4, [r5, #12]
 8004546:	e7e6      	b.n	8004516 <__swsetup_r+0x1e>
 8004548:	0751      	lsls	r1, r2, #29
 800454a:	d512      	bpl.n	8004572 <__swsetup_r+0x7a>
 800454c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800454e:	b141      	cbz	r1, 8004562 <__swsetup_r+0x6a>
 8004550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004554:	4299      	cmp	r1, r3
 8004556:	d002      	beq.n	800455e <__swsetup_r+0x66>
 8004558:	4630      	mov	r0, r6
 800455a:	f001 fb69 	bl	8005c30 <_free_r>
 800455e:	2300      	movs	r3, #0
 8004560:	6363      	str	r3, [r4, #52]	; 0x34
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004568:	81a3      	strh	r3, [r4, #12]
 800456a:	2300      	movs	r3, #0
 800456c:	6063      	str	r3, [r4, #4]
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	f043 0308 	orr.w	r3, r3, #8
 8004578:	81a3      	strh	r3, [r4, #12]
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	b94b      	cbnz	r3, 8004592 <__swsetup_r+0x9a>
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004588:	d003      	beq.n	8004592 <__swsetup_r+0x9a>
 800458a:	4621      	mov	r1, r4
 800458c:	4630      	mov	r0, r6
 800458e:	f001 f813 	bl	80055b8 <__smakebuf_r>
 8004592:	89a2      	ldrh	r2, [r4, #12]
 8004594:	f012 0301 	ands.w	r3, r2, #1
 8004598:	d00c      	beq.n	80045b4 <__swsetup_r+0xbc>
 800459a:	2300      	movs	r3, #0
 800459c:	60a3      	str	r3, [r4, #8]
 800459e:	6963      	ldr	r3, [r4, #20]
 80045a0:	425b      	negs	r3, r3
 80045a2:	61a3      	str	r3, [r4, #24]
 80045a4:	6923      	ldr	r3, [r4, #16]
 80045a6:	b953      	cbnz	r3, 80045be <__swsetup_r+0xc6>
 80045a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80045b0:	d1ba      	bne.n	8004528 <__swsetup_r+0x30>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	0792      	lsls	r2, r2, #30
 80045b6:	bf58      	it	pl
 80045b8:	6963      	ldrpl	r3, [r4, #20]
 80045ba:	60a3      	str	r3, [r4, #8]
 80045bc:	e7f2      	b.n	80045a4 <__swsetup_r+0xac>
 80045be:	2000      	movs	r0, #0
 80045c0:	e7f7      	b.n	80045b2 <__swsetup_r+0xba>
 80045c2:	bf00      	nop
 80045c4:	20000010 	.word	0x20000010
 80045c8:	080060cc 	.word	0x080060cc
 80045cc:	080060ec 	.word	0x080060ec
 80045d0:	080060ac 	.word	0x080060ac

080045d4 <quorem>:
 80045d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d8:	6903      	ldr	r3, [r0, #16]
 80045da:	690c      	ldr	r4, [r1, #16]
 80045dc:	42a3      	cmp	r3, r4
 80045de:	4680      	mov	r8, r0
 80045e0:	f2c0 8082 	blt.w	80046e8 <quorem+0x114>
 80045e4:	3c01      	subs	r4, #1
 80045e6:	f101 0714 	add.w	r7, r1, #20
 80045ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80045ee:	f100 0614 	add.w	r6, r0, #20
 80045f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80045f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80045fa:	eb06 030c 	add.w	r3, r6, ip
 80045fe:	3501      	adds	r5, #1
 8004600:	eb07 090c 	add.w	r9, r7, ip
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	fbb0 f5f5 	udiv	r5, r0, r5
 800460a:	b395      	cbz	r5, 8004672 <quorem+0x9e>
 800460c:	f04f 0a00 	mov.w	sl, #0
 8004610:	4638      	mov	r0, r7
 8004612:	46b6      	mov	lr, r6
 8004614:	46d3      	mov	fp, sl
 8004616:	f850 2b04 	ldr.w	r2, [r0], #4
 800461a:	b293      	uxth	r3, r2
 800461c:	fb05 a303 	mla	r3, r5, r3, sl
 8004620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004624:	b29b      	uxth	r3, r3
 8004626:	ebab 0303 	sub.w	r3, fp, r3
 800462a:	0c12      	lsrs	r2, r2, #16
 800462c:	f8de b000 	ldr.w	fp, [lr]
 8004630:	fb05 a202 	mla	r2, r5, r2, sl
 8004634:	fa13 f38b 	uxtah	r3, r3, fp
 8004638:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800463c:	fa1f fb82 	uxth.w	fp, r2
 8004640:	f8de 2000 	ldr.w	r2, [lr]
 8004644:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004648:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800464c:	b29b      	uxth	r3, r3
 800464e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004652:	4581      	cmp	r9, r0
 8004654:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004658:	f84e 3b04 	str.w	r3, [lr], #4
 800465c:	d2db      	bcs.n	8004616 <quorem+0x42>
 800465e:	f856 300c 	ldr.w	r3, [r6, ip]
 8004662:	b933      	cbnz	r3, 8004672 <quorem+0x9e>
 8004664:	9b01      	ldr	r3, [sp, #4]
 8004666:	3b04      	subs	r3, #4
 8004668:	429e      	cmp	r6, r3
 800466a:	461a      	mov	r2, r3
 800466c:	d330      	bcc.n	80046d0 <quorem+0xfc>
 800466e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004672:	4640      	mov	r0, r8
 8004674:	f001 fa08 	bl	8005a88 <__mcmp>
 8004678:	2800      	cmp	r0, #0
 800467a:	db25      	blt.n	80046c8 <quorem+0xf4>
 800467c:	3501      	adds	r5, #1
 800467e:	4630      	mov	r0, r6
 8004680:	f04f 0c00 	mov.w	ip, #0
 8004684:	f857 2b04 	ldr.w	r2, [r7], #4
 8004688:	f8d0 e000 	ldr.w	lr, [r0]
 800468c:	b293      	uxth	r3, r2
 800468e:	ebac 0303 	sub.w	r3, ip, r3
 8004692:	0c12      	lsrs	r2, r2, #16
 8004694:	fa13 f38e 	uxtah	r3, r3, lr
 8004698:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800469c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046a6:	45b9      	cmp	r9, r7
 80046a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80046ac:	f840 3b04 	str.w	r3, [r0], #4
 80046b0:	d2e8      	bcs.n	8004684 <quorem+0xb0>
 80046b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80046b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80046ba:	b92a      	cbnz	r2, 80046c8 <quorem+0xf4>
 80046bc:	3b04      	subs	r3, #4
 80046be:	429e      	cmp	r6, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	d30b      	bcc.n	80046dc <quorem+0x108>
 80046c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80046c8:	4628      	mov	r0, r5
 80046ca:	b003      	add	sp, #12
 80046cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	3b04      	subs	r3, #4
 80046d4:	2a00      	cmp	r2, #0
 80046d6:	d1ca      	bne.n	800466e <quorem+0x9a>
 80046d8:	3c01      	subs	r4, #1
 80046da:	e7c5      	b.n	8004668 <quorem+0x94>
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	3b04      	subs	r3, #4
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	d1ef      	bne.n	80046c4 <quorem+0xf0>
 80046e4:	3c01      	subs	r4, #1
 80046e6:	e7ea      	b.n	80046be <quorem+0xea>
 80046e8:	2000      	movs	r0, #0
 80046ea:	e7ee      	b.n	80046ca <quorem+0xf6>
 80046ec:	0000      	movs	r0, r0
	...

080046f0 <_dtoa_r>:
 80046f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f4:	ec57 6b10 	vmov	r6, r7, d0
 80046f8:	b097      	sub	sp, #92	; 0x5c
 80046fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80046fc:	9106      	str	r1, [sp, #24]
 80046fe:	4604      	mov	r4, r0
 8004700:	920b      	str	r2, [sp, #44]	; 0x2c
 8004702:	9312      	str	r3, [sp, #72]	; 0x48
 8004704:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004708:	e9cd 6700 	strd	r6, r7, [sp]
 800470c:	b93d      	cbnz	r5, 800471e <_dtoa_r+0x2e>
 800470e:	2010      	movs	r0, #16
 8004710:	f000 ff92 	bl	8005638 <malloc>
 8004714:	6260      	str	r0, [r4, #36]	; 0x24
 8004716:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800471a:	6005      	str	r5, [r0, #0]
 800471c:	60c5      	str	r5, [r0, #12]
 800471e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	b151      	cbz	r1, 800473a <_dtoa_r+0x4a>
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	604a      	str	r2, [r1, #4]
 8004728:	2301      	movs	r3, #1
 800472a:	4093      	lsls	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
 800472e:	4620      	mov	r0, r4
 8004730:	f000 ffc9 	bl	80056c6 <_Bfree>
 8004734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	1e3b      	subs	r3, r7, #0
 800473c:	bfbb      	ittet	lt
 800473e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004742:	9301      	strlt	r3, [sp, #4]
 8004744:	2300      	movge	r3, #0
 8004746:	2201      	movlt	r2, #1
 8004748:	bfac      	ite	ge
 800474a:	f8c8 3000 	strge.w	r3, [r8]
 800474e:	f8c8 2000 	strlt.w	r2, [r8]
 8004752:	4baf      	ldr	r3, [pc, #700]	; (8004a10 <_dtoa_r+0x320>)
 8004754:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004758:	ea33 0308 	bics.w	r3, r3, r8
 800475c:	d114      	bne.n	8004788 <_dtoa_r+0x98>
 800475e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004760:	f242 730f 	movw	r3, #9999	; 0x270f
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	9b00      	ldr	r3, [sp, #0]
 8004768:	b923      	cbnz	r3, 8004774 <_dtoa_r+0x84>
 800476a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800476e:	2800      	cmp	r0, #0
 8004770:	f000 8542 	beq.w	80051f8 <_dtoa_r+0xb08>
 8004774:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004776:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004a24 <_dtoa_r+0x334>
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8544 	beq.w	8005208 <_dtoa_r+0xb18>
 8004780:	f10b 0303 	add.w	r3, fp, #3
 8004784:	f000 bd3e 	b.w	8005204 <_dtoa_r+0xb14>
 8004788:	e9dd 6700 	ldrd	r6, r7, [sp]
 800478c:	2200      	movs	r2, #0
 800478e:	2300      	movs	r3, #0
 8004790:	4630      	mov	r0, r6
 8004792:	4639      	mov	r1, r7
 8004794:	f7fc f94e 	bl	8000a34 <__aeabi_dcmpeq>
 8004798:	4681      	mov	r9, r0
 800479a:	b168      	cbz	r0, 80047b8 <_dtoa_r+0xc8>
 800479c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800479e:	2301      	movs	r3, #1
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8524 	beq.w	80051f2 <_dtoa_r+0xb02>
 80047aa:	4b9a      	ldr	r3, [pc, #616]	; (8004a14 <_dtoa_r+0x324>)
 80047ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	f000 bd28 	b.w	8005208 <_dtoa_r+0xb18>
 80047b8:	aa14      	add	r2, sp, #80	; 0x50
 80047ba:	a915      	add	r1, sp, #84	; 0x54
 80047bc:	ec47 6b10 	vmov	d0, r6, r7
 80047c0:	4620      	mov	r0, r4
 80047c2:	f001 f9d8 	bl	8005b76 <__d2b>
 80047c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80047ca:	9004      	str	r0, [sp, #16]
 80047cc:	2d00      	cmp	r5, #0
 80047ce:	d07c      	beq.n	80048ca <_dtoa_r+0x1da>
 80047d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80047d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80047d8:	46b2      	mov	sl, r6
 80047da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80047de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80047e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80047e6:	2200      	movs	r2, #0
 80047e8:	4b8b      	ldr	r3, [pc, #556]	; (8004a18 <_dtoa_r+0x328>)
 80047ea:	4650      	mov	r0, sl
 80047ec:	4659      	mov	r1, fp
 80047ee:	f7fb fd01 	bl	80001f4 <__aeabi_dsub>
 80047f2:	a381      	add	r3, pc, #516	; (adr r3, 80049f8 <_dtoa_r+0x308>)
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f7fb feb4 	bl	8000564 <__aeabi_dmul>
 80047fc:	a380      	add	r3, pc, #512	; (adr r3, 8004a00 <_dtoa_r+0x310>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f7fb fcf9 	bl	80001f8 <__adddf3>
 8004806:	4606      	mov	r6, r0
 8004808:	4628      	mov	r0, r5
 800480a:	460f      	mov	r7, r1
 800480c:	f7fb fe40 	bl	8000490 <__aeabi_i2d>
 8004810:	a37d      	add	r3, pc, #500	; (adr r3, 8004a08 <_dtoa_r+0x318>)
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	f7fb fea5 	bl	8000564 <__aeabi_dmul>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4630      	mov	r0, r6
 8004820:	4639      	mov	r1, r7
 8004822:	f7fb fce9 	bl	80001f8 <__adddf3>
 8004826:	4606      	mov	r6, r0
 8004828:	460f      	mov	r7, r1
 800482a:	f7fc f94b 	bl	8000ac4 <__aeabi_d2iz>
 800482e:	2200      	movs	r2, #0
 8004830:	4682      	mov	sl, r0
 8004832:	2300      	movs	r3, #0
 8004834:	4630      	mov	r0, r6
 8004836:	4639      	mov	r1, r7
 8004838:	f7fc f906 	bl	8000a48 <__aeabi_dcmplt>
 800483c:	b148      	cbz	r0, 8004852 <_dtoa_r+0x162>
 800483e:	4650      	mov	r0, sl
 8004840:	f7fb fe26 	bl	8000490 <__aeabi_i2d>
 8004844:	4632      	mov	r2, r6
 8004846:	463b      	mov	r3, r7
 8004848:	f7fc f8f4 	bl	8000a34 <__aeabi_dcmpeq>
 800484c:	b908      	cbnz	r0, 8004852 <_dtoa_r+0x162>
 800484e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004852:	f1ba 0f16 	cmp.w	sl, #22
 8004856:	d859      	bhi.n	800490c <_dtoa_r+0x21c>
 8004858:	4970      	ldr	r1, [pc, #448]	; (8004a1c <_dtoa_r+0x32c>)
 800485a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800485e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004862:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004866:	f7fc f90d 	bl	8000a84 <__aeabi_dcmpgt>
 800486a:	2800      	cmp	r0, #0
 800486c:	d050      	beq.n	8004910 <_dtoa_r+0x220>
 800486e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004872:	2300      	movs	r3, #0
 8004874:	930f      	str	r3, [sp, #60]	; 0x3c
 8004876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004878:	1b5d      	subs	r5, r3, r5
 800487a:	f1b5 0801 	subs.w	r8, r5, #1
 800487e:	bf49      	itett	mi
 8004880:	f1c5 0301 	rsbmi	r3, r5, #1
 8004884:	2300      	movpl	r3, #0
 8004886:	9305      	strmi	r3, [sp, #20]
 8004888:	f04f 0800 	movmi.w	r8, #0
 800488c:	bf58      	it	pl
 800488e:	9305      	strpl	r3, [sp, #20]
 8004890:	f1ba 0f00 	cmp.w	sl, #0
 8004894:	db3e      	blt.n	8004914 <_dtoa_r+0x224>
 8004896:	2300      	movs	r3, #0
 8004898:	44d0      	add	r8, sl
 800489a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800489e:	9307      	str	r3, [sp, #28]
 80048a0:	9b06      	ldr	r3, [sp, #24]
 80048a2:	2b09      	cmp	r3, #9
 80048a4:	f200 8090 	bhi.w	80049c8 <_dtoa_r+0x2d8>
 80048a8:	2b05      	cmp	r3, #5
 80048aa:	bfc4      	itt	gt
 80048ac:	3b04      	subgt	r3, #4
 80048ae:	9306      	strgt	r3, [sp, #24]
 80048b0:	9b06      	ldr	r3, [sp, #24]
 80048b2:	f1a3 0302 	sub.w	r3, r3, #2
 80048b6:	bfcc      	ite	gt
 80048b8:	2500      	movgt	r5, #0
 80048ba:	2501      	movle	r5, #1
 80048bc:	2b03      	cmp	r3, #3
 80048be:	f200 808f 	bhi.w	80049e0 <_dtoa_r+0x2f0>
 80048c2:	e8df f003 	tbb	[pc, r3]
 80048c6:	7f7d      	.short	0x7f7d
 80048c8:	7131      	.short	0x7131
 80048ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80048ce:	441d      	add	r5, r3
 80048d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80048d4:	2820      	cmp	r0, #32
 80048d6:	dd13      	ble.n	8004900 <_dtoa_r+0x210>
 80048d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80048dc:	9b00      	ldr	r3, [sp, #0]
 80048de:	fa08 f800 	lsl.w	r8, r8, r0
 80048e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80048e6:	fa23 f000 	lsr.w	r0, r3, r0
 80048ea:	ea48 0000 	orr.w	r0, r8, r0
 80048ee:	f7fb fdbf 	bl	8000470 <__aeabi_ui2d>
 80048f2:	2301      	movs	r3, #1
 80048f4:	4682      	mov	sl, r0
 80048f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80048fa:	3d01      	subs	r5, #1
 80048fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80048fe:	e772      	b.n	80047e6 <_dtoa_r+0xf6>
 8004900:	9b00      	ldr	r3, [sp, #0]
 8004902:	f1c0 0020 	rsb	r0, r0, #32
 8004906:	fa03 f000 	lsl.w	r0, r3, r0
 800490a:	e7f0      	b.n	80048ee <_dtoa_r+0x1fe>
 800490c:	2301      	movs	r3, #1
 800490e:	e7b1      	b.n	8004874 <_dtoa_r+0x184>
 8004910:	900f      	str	r0, [sp, #60]	; 0x3c
 8004912:	e7b0      	b.n	8004876 <_dtoa_r+0x186>
 8004914:	9b05      	ldr	r3, [sp, #20]
 8004916:	eba3 030a 	sub.w	r3, r3, sl
 800491a:	9305      	str	r3, [sp, #20]
 800491c:	f1ca 0300 	rsb	r3, sl, #0
 8004920:	9307      	str	r3, [sp, #28]
 8004922:	2300      	movs	r3, #0
 8004924:	930e      	str	r3, [sp, #56]	; 0x38
 8004926:	e7bb      	b.n	80048a0 <_dtoa_r+0x1b0>
 8004928:	2301      	movs	r3, #1
 800492a:	930a      	str	r3, [sp, #40]	; 0x28
 800492c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800492e:	2b00      	cmp	r3, #0
 8004930:	dd59      	ble.n	80049e6 <_dtoa_r+0x2f6>
 8004932:	9302      	str	r3, [sp, #8]
 8004934:	4699      	mov	r9, r3
 8004936:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004938:	2200      	movs	r2, #0
 800493a:	6072      	str	r2, [r6, #4]
 800493c:	2204      	movs	r2, #4
 800493e:	f102 0014 	add.w	r0, r2, #20
 8004942:	4298      	cmp	r0, r3
 8004944:	6871      	ldr	r1, [r6, #4]
 8004946:	d953      	bls.n	80049f0 <_dtoa_r+0x300>
 8004948:	4620      	mov	r0, r4
 800494a:	f000 fe88 	bl	800565e <_Balloc>
 800494e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004950:	6030      	str	r0, [r6, #0]
 8004952:	f1b9 0f0e 	cmp.w	r9, #14
 8004956:	f8d3 b000 	ldr.w	fp, [r3]
 800495a:	f200 80e6 	bhi.w	8004b2a <_dtoa_r+0x43a>
 800495e:	2d00      	cmp	r5, #0
 8004960:	f000 80e3 	beq.w	8004b2a <_dtoa_r+0x43a>
 8004964:	ed9d 7b00 	vldr	d7, [sp]
 8004968:	f1ba 0f00 	cmp.w	sl, #0
 800496c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004970:	dd74      	ble.n	8004a5c <_dtoa_r+0x36c>
 8004972:	4a2a      	ldr	r2, [pc, #168]	; (8004a1c <_dtoa_r+0x32c>)
 8004974:	f00a 030f 	and.w	r3, sl, #15
 8004978:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800497c:	ed93 7b00 	vldr	d7, [r3]
 8004980:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004984:	06f0      	lsls	r0, r6, #27
 8004986:	ed8d 7b08 	vstr	d7, [sp, #32]
 800498a:	d565      	bpl.n	8004a58 <_dtoa_r+0x368>
 800498c:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <_dtoa_r+0x330>)
 800498e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004992:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004996:	f7fb ff0f 	bl	80007b8 <__aeabi_ddiv>
 800499a:	e9cd 0100 	strd	r0, r1, [sp]
 800499e:	f006 060f 	and.w	r6, r6, #15
 80049a2:	2503      	movs	r5, #3
 80049a4:	4f1e      	ldr	r7, [pc, #120]	; (8004a20 <_dtoa_r+0x330>)
 80049a6:	e04c      	b.n	8004a42 <_dtoa_r+0x352>
 80049a8:	2301      	movs	r3, #1
 80049aa:	930a      	str	r3, [sp, #40]	; 0x28
 80049ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ae:	4453      	add	r3, sl
 80049b0:	f103 0901 	add.w	r9, r3, #1
 80049b4:	9302      	str	r3, [sp, #8]
 80049b6:	464b      	mov	r3, r9
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	bfb8      	it	lt
 80049bc:	2301      	movlt	r3, #1
 80049be:	e7ba      	b.n	8004936 <_dtoa_r+0x246>
 80049c0:	2300      	movs	r3, #0
 80049c2:	e7b2      	b.n	800492a <_dtoa_r+0x23a>
 80049c4:	2300      	movs	r3, #0
 80049c6:	e7f0      	b.n	80049aa <_dtoa_r+0x2ba>
 80049c8:	2501      	movs	r5, #1
 80049ca:	2300      	movs	r3, #0
 80049cc:	9306      	str	r3, [sp, #24]
 80049ce:	950a      	str	r5, [sp, #40]	; 0x28
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	9302      	str	r3, [sp, #8]
 80049d6:	4699      	mov	r9, r3
 80049d8:	2200      	movs	r2, #0
 80049da:	2312      	movs	r3, #18
 80049dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80049de:	e7aa      	b.n	8004936 <_dtoa_r+0x246>
 80049e0:	2301      	movs	r3, #1
 80049e2:	930a      	str	r3, [sp, #40]	; 0x28
 80049e4:	e7f4      	b.n	80049d0 <_dtoa_r+0x2e0>
 80049e6:	2301      	movs	r3, #1
 80049e8:	9302      	str	r3, [sp, #8]
 80049ea:	4699      	mov	r9, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	e7f5      	b.n	80049dc <_dtoa_r+0x2ec>
 80049f0:	3101      	adds	r1, #1
 80049f2:	6071      	str	r1, [r6, #4]
 80049f4:	0052      	lsls	r2, r2, #1
 80049f6:	e7a2      	b.n	800493e <_dtoa_r+0x24e>
 80049f8:	636f4361 	.word	0x636f4361
 80049fc:	3fd287a7 	.word	0x3fd287a7
 8004a00:	8b60c8b3 	.word	0x8b60c8b3
 8004a04:	3fc68a28 	.word	0x3fc68a28
 8004a08:	509f79fb 	.word	0x509f79fb
 8004a0c:	3fd34413 	.word	0x3fd34413
 8004a10:	7ff00000 	.word	0x7ff00000
 8004a14:	0800609d 	.word	0x0800609d
 8004a18:	3ff80000 	.word	0x3ff80000
 8004a1c:	08006138 	.word	0x08006138
 8004a20:	08006110 	.word	0x08006110
 8004a24:	080060a7 	.word	0x080060a7
 8004a28:	07f1      	lsls	r1, r6, #31
 8004a2a:	d508      	bpl.n	8004a3e <_dtoa_r+0x34e>
 8004a2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a34:	f7fb fd96 	bl	8000564 <__aeabi_dmul>
 8004a38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a3c:	3501      	adds	r5, #1
 8004a3e:	1076      	asrs	r6, r6, #1
 8004a40:	3708      	adds	r7, #8
 8004a42:	2e00      	cmp	r6, #0
 8004a44:	d1f0      	bne.n	8004a28 <_dtoa_r+0x338>
 8004a46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a4e:	f7fb feb3 	bl	80007b8 <__aeabi_ddiv>
 8004a52:	e9cd 0100 	strd	r0, r1, [sp]
 8004a56:	e01a      	b.n	8004a8e <_dtoa_r+0x39e>
 8004a58:	2502      	movs	r5, #2
 8004a5a:	e7a3      	b.n	80049a4 <_dtoa_r+0x2b4>
 8004a5c:	f000 80a0 	beq.w	8004ba0 <_dtoa_r+0x4b0>
 8004a60:	f1ca 0600 	rsb	r6, sl, #0
 8004a64:	4b9f      	ldr	r3, [pc, #636]	; (8004ce4 <_dtoa_r+0x5f4>)
 8004a66:	4fa0      	ldr	r7, [pc, #640]	; (8004ce8 <_dtoa_r+0x5f8>)
 8004a68:	f006 020f 	and.w	r2, r6, #15
 8004a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a78:	f7fb fd74 	bl	8000564 <__aeabi_dmul>
 8004a7c:	e9cd 0100 	strd	r0, r1, [sp]
 8004a80:	1136      	asrs	r6, r6, #4
 8004a82:	2300      	movs	r3, #0
 8004a84:	2502      	movs	r5, #2
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	d17f      	bne.n	8004b8a <_dtoa_r+0x49a>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e1      	bne.n	8004a52 <_dtoa_r+0x362>
 8004a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8087 	beq.w	8004ba4 <_dtoa_r+0x4b4>
 8004a96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	4b93      	ldr	r3, [pc, #588]	; (8004cec <_dtoa_r+0x5fc>)
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	4639      	mov	r1, r7
 8004aa2:	f7fb ffd1 	bl	8000a48 <__aeabi_dcmplt>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d07c      	beq.n	8004ba4 <_dtoa_r+0x4b4>
 8004aaa:	f1b9 0f00 	cmp.w	r9, #0
 8004aae:	d079      	beq.n	8004ba4 <_dtoa_r+0x4b4>
 8004ab0:	9b02      	ldr	r3, [sp, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	dd35      	ble.n	8004b22 <_dtoa_r+0x432>
 8004ab6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004aba:	9308      	str	r3, [sp, #32]
 8004abc:	4639      	mov	r1, r7
 8004abe:	2200      	movs	r2, #0
 8004ac0:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <_dtoa_r+0x600>)
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7fb fd4e 	bl	8000564 <__aeabi_dmul>
 8004ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8004acc:	9f02      	ldr	r7, [sp, #8]
 8004ace:	3501      	adds	r5, #1
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f7fb fcdd 	bl	8000490 <__aeabi_i2d>
 8004ad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ada:	f7fb fd43 	bl	8000564 <__aeabi_dmul>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4b84      	ldr	r3, [pc, #528]	; (8004cf4 <_dtoa_r+0x604>)
 8004ae2:	f7fb fb89 	bl	80001f8 <__adddf3>
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004aec:	2f00      	cmp	r7, #0
 8004aee:	d15d      	bne.n	8004bac <_dtoa_r+0x4bc>
 8004af0:	2200      	movs	r2, #0
 8004af2:	4b81      	ldr	r3, [pc, #516]	; (8004cf8 <_dtoa_r+0x608>)
 8004af4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004af8:	f7fb fb7c 	bl	80001f4 <__aeabi_dsub>
 8004afc:	462a      	mov	r2, r5
 8004afe:	4633      	mov	r3, r6
 8004b00:	e9cd 0100 	strd	r0, r1, [sp]
 8004b04:	f7fb ffbe 	bl	8000a84 <__aeabi_dcmpgt>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	f040 8288 	bne.w	800501e <_dtoa_r+0x92e>
 8004b0e:	462a      	mov	r2, r5
 8004b10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b18:	f7fb ff96 	bl	8000a48 <__aeabi_dcmplt>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f040 827c 	bne.w	800501a <_dtoa_r+0x92a>
 8004b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b26:	e9cd 2300 	strd	r2, r3, [sp]
 8004b2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f2c0 8150 	blt.w	8004dd2 <_dtoa_r+0x6e2>
 8004b32:	f1ba 0f0e 	cmp.w	sl, #14
 8004b36:	f300 814c 	bgt.w	8004dd2 <_dtoa_r+0x6e2>
 8004b3a:	4b6a      	ldr	r3, [pc, #424]	; (8004ce4 <_dtoa_r+0x5f4>)
 8004b3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b40:	ed93 7b00 	vldr	d7, [r3]
 8004b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b4c:	f280 80d8 	bge.w	8004d00 <_dtoa_r+0x610>
 8004b50:	f1b9 0f00 	cmp.w	r9, #0
 8004b54:	f300 80d4 	bgt.w	8004d00 <_dtoa_r+0x610>
 8004b58:	f040 825e 	bne.w	8005018 <_dtoa_r+0x928>
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4b66      	ldr	r3, [pc, #408]	; (8004cf8 <_dtoa_r+0x608>)
 8004b60:	ec51 0b17 	vmov	r0, r1, d7
 8004b64:	f7fb fcfe 	bl	8000564 <__aeabi_dmul>
 8004b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b6c:	f7fb ff80 	bl	8000a70 <__aeabi_dcmpge>
 8004b70:	464f      	mov	r7, r9
 8004b72:	464e      	mov	r6, r9
 8004b74:	2800      	cmp	r0, #0
 8004b76:	f040 8234 	bne.w	8004fe2 <_dtoa_r+0x8f2>
 8004b7a:	2331      	movs	r3, #49	; 0x31
 8004b7c:	f10b 0501 	add.w	r5, fp, #1
 8004b80:	f88b 3000 	strb.w	r3, [fp]
 8004b84:	f10a 0a01 	add.w	sl, sl, #1
 8004b88:	e22f      	b.n	8004fea <_dtoa_r+0x8fa>
 8004b8a:	07f2      	lsls	r2, r6, #31
 8004b8c:	d505      	bpl.n	8004b9a <_dtoa_r+0x4aa>
 8004b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b92:	f7fb fce7 	bl	8000564 <__aeabi_dmul>
 8004b96:	3501      	adds	r5, #1
 8004b98:	2301      	movs	r3, #1
 8004b9a:	1076      	asrs	r6, r6, #1
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	e772      	b.n	8004a86 <_dtoa_r+0x396>
 8004ba0:	2502      	movs	r5, #2
 8004ba2:	e774      	b.n	8004a8e <_dtoa_r+0x39e>
 8004ba4:	f8cd a020 	str.w	sl, [sp, #32]
 8004ba8:	464f      	mov	r7, r9
 8004baa:	e791      	b.n	8004ad0 <_dtoa_r+0x3e0>
 8004bac:	4b4d      	ldr	r3, [pc, #308]	; (8004ce4 <_dtoa_r+0x5f4>)
 8004bae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d047      	beq.n	8004c4c <_dtoa_r+0x55c>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	494e      	ldr	r1, [pc, #312]	; (8004cfc <_dtoa_r+0x60c>)
 8004bc4:	f7fb fdf8 	bl	80007b8 <__aeabi_ddiv>
 8004bc8:	462a      	mov	r2, r5
 8004bca:	4633      	mov	r3, r6
 8004bcc:	f7fb fb12 	bl	80001f4 <__aeabi_dsub>
 8004bd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004bd4:	465d      	mov	r5, fp
 8004bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bda:	f7fb ff73 	bl	8000ac4 <__aeabi_d2iz>
 8004bde:	4606      	mov	r6, r0
 8004be0:	f7fb fc56 	bl	8000490 <__aeabi_i2d>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bec:	f7fb fb02 	bl	80001f4 <__aeabi_dsub>
 8004bf0:	3630      	adds	r6, #48	; 0x30
 8004bf2:	f805 6b01 	strb.w	r6, [r5], #1
 8004bf6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004bfa:	e9cd 0100 	strd	r0, r1, [sp]
 8004bfe:	f7fb ff23 	bl	8000a48 <__aeabi_dcmplt>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d163      	bne.n	8004cce <_dtoa_r+0x5de>
 8004c06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	4937      	ldr	r1, [pc, #220]	; (8004cec <_dtoa_r+0x5fc>)
 8004c0e:	f7fb faf1 	bl	80001f4 <__aeabi_dsub>
 8004c12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c16:	f7fb ff17 	bl	8000a48 <__aeabi_dcmplt>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	f040 80b7 	bne.w	8004d8e <_dtoa_r+0x69e>
 8004c20:	eba5 030b 	sub.w	r3, r5, fp
 8004c24:	429f      	cmp	r7, r3
 8004c26:	f77f af7c 	ble.w	8004b22 <_dtoa_r+0x432>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <_dtoa_r+0x600>)
 8004c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c32:	f7fb fc97 	bl	8000564 <__aeabi_dmul>
 8004c36:	2200      	movs	r2, #0
 8004c38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004c3c:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <_dtoa_r+0x600>)
 8004c3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c42:	f7fb fc8f 	bl	8000564 <__aeabi_dmul>
 8004c46:	e9cd 0100 	strd	r0, r1, [sp]
 8004c4a:	e7c4      	b.n	8004bd6 <_dtoa_r+0x4e6>
 8004c4c:	462a      	mov	r2, r5
 8004c4e:	4633      	mov	r3, r6
 8004c50:	f7fb fc88 	bl	8000564 <__aeabi_dmul>
 8004c54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004c58:	eb0b 0507 	add.w	r5, fp, r7
 8004c5c:	465e      	mov	r6, fp
 8004c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c62:	f7fb ff2f 	bl	8000ac4 <__aeabi_d2iz>
 8004c66:	4607      	mov	r7, r0
 8004c68:	f7fb fc12 	bl	8000490 <__aeabi_i2d>
 8004c6c:	3730      	adds	r7, #48	; 0x30
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c76:	f7fb fabd 	bl	80001f4 <__aeabi_dsub>
 8004c7a:	f806 7b01 	strb.w	r7, [r6], #1
 8004c7e:	42ae      	cmp	r6, r5
 8004c80:	e9cd 0100 	strd	r0, r1, [sp]
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	d126      	bne.n	8004cd8 <_dtoa_r+0x5e8>
 8004c8a:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <_dtoa_r+0x60c>)
 8004c8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c90:	f7fb fab2 	bl	80001f8 <__adddf3>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c9c:	f7fb fef2 	bl	8000a84 <__aeabi_dcmpgt>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d174      	bne.n	8004d8e <_dtoa_r+0x69e>
 8004ca4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ca8:	2000      	movs	r0, #0
 8004caa:	4914      	ldr	r1, [pc, #80]	; (8004cfc <_dtoa_r+0x60c>)
 8004cac:	f7fb faa2 	bl	80001f4 <__aeabi_dsub>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cb8:	f7fb fec6 	bl	8000a48 <__aeabi_dcmplt>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	f43f af30 	beq.w	8004b22 <_dtoa_r+0x432>
 8004cc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004cc6:	2b30      	cmp	r3, #48	; 0x30
 8004cc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8004ccc:	d002      	beq.n	8004cd4 <_dtoa_r+0x5e4>
 8004cce:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004cd2:	e04a      	b.n	8004d6a <_dtoa_r+0x67a>
 8004cd4:	4615      	mov	r5, r2
 8004cd6:	e7f4      	b.n	8004cc2 <_dtoa_r+0x5d2>
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <_dtoa_r+0x600>)
 8004cda:	f7fb fc43 	bl	8000564 <__aeabi_dmul>
 8004cde:	e9cd 0100 	strd	r0, r1, [sp]
 8004ce2:	e7bc      	b.n	8004c5e <_dtoa_r+0x56e>
 8004ce4:	08006138 	.word	0x08006138
 8004ce8:	08006110 	.word	0x08006110
 8004cec:	3ff00000 	.word	0x3ff00000
 8004cf0:	40240000 	.word	0x40240000
 8004cf4:	401c0000 	.word	0x401c0000
 8004cf8:	40140000 	.word	0x40140000
 8004cfc:	3fe00000 	.word	0x3fe00000
 8004d00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d04:	465d      	mov	r5, fp
 8004d06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	4639      	mov	r1, r7
 8004d0e:	f7fb fd53 	bl	80007b8 <__aeabi_ddiv>
 8004d12:	f7fb fed7 	bl	8000ac4 <__aeabi_d2iz>
 8004d16:	4680      	mov	r8, r0
 8004d18:	f7fb fbba 	bl	8000490 <__aeabi_i2d>
 8004d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d20:	f7fb fc20 	bl	8000564 <__aeabi_dmul>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4630      	mov	r0, r6
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004d30:	f7fb fa60 	bl	80001f4 <__aeabi_dsub>
 8004d34:	f805 6b01 	strb.w	r6, [r5], #1
 8004d38:	eba5 060b 	sub.w	r6, r5, fp
 8004d3c:	45b1      	cmp	r9, r6
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	d139      	bne.n	8004db8 <_dtoa_r+0x6c8>
 8004d44:	f7fb fa58 	bl	80001f8 <__adddf3>
 8004d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	460f      	mov	r7, r1
 8004d50:	f7fb fe98 	bl	8000a84 <__aeabi_dcmpgt>
 8004d54:	b9c8      	cbnz	r0, 8004d8a <_dtoa_r+0x69a>
 8004d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	4639      	mov	r1, r7
 8004d5e:	f7fb fe69 	bl	8000a34 <__aeabi_dcmpeq>
 8004d62:	b110      	cbz	r0, 8004d6a <_dtoa_r+0x67a>
 8004d64:	f018 0f01 	tst.w	r8, #1
 8004d68:	d10f      	bne.n	8004d8a <_dtoa_r+0x69a>
 8004d6a:	9904      	ldr	r1, [sp, #16]
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f000 fcaa 	bl	80056c6 <_Bfree>
 8004d72:	2300      	movs	r3, #0
 8004d74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d76:	702b      	strb	r3, [r5, #0]
 8004d78:	f10a 0301 	add.w	r3, sl, #1
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8241 	beq.w	8005208 <_dtoa_r+0xb18>
 8004d86:	601d      	str	r5, [r3, #0]
 8004d88:	e23e      	b.n	8005208 <_dtoa_r+0xb18>
 8004d8a:	f8cd a020 	str.w	sl, [sp, #32]
 8004d8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d92:	2a39      	cmp	r2, #57	; 0x39
 8004d94:	f105 33ff 	add.w	r3, r5, #4294967295
 8004d98:	d108      	bne.n	8004dac <_dtoa_r+0x6bc>
 8004d9a:	459b      	cmp	fp, r3
 8004d9c:	d10a      	bne.n	8004db4 <_dtoa_r+0x6c4>
 8004d9e:	9b08      	ldr	r3, [sp, #32]
 8004da0:	3301      	adds	r3, #1
 8004da2:	9308      	str	r3, [sp, #32]
 8004da4:	2330      	movs	r3, #48	; 0x30
 8004da6:	f88b 3000 	strb.w	r3, [fp]
 8004daa:	465b      	mov	r3, fp
 8004dac:	781a      	ldrb	r2, [r3, #0]
 8004dae:	3201      	adds	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e78c      	b.n	8004cce <_dtoa_r+0x5de>
 8004db4:	461d      	mov	r5, r3
 8004db6:	e7ea      	b.n	8004d8e <_dtoa_r+0x69e>
 8004db8:	2200      	movs	r2, #0
 8004dba:	4b9b      	ldr	r3, [pc, #620]	; (8005028 <_dtoa_r+0x938>)
 8004dbc:	f7fb fbd2 	bl	8000564 <__aeabi_dmul>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	460f      	mov	r7, r1
 8004dc8:	f7fb fe34 	bl	8000a34 <__aeabi_dcmpeq>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d09a      	beq.n	8004d06 <_dtoa_r+0x616>
 8004dd0:	e7cb      	b.n	8004d6a <_dtoa_r+0x67a>
 8004dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	f000 808b 	beq.w	8004ef0 <_dtoa_r+0x800>
 8004dda:	9a06      	ldr	r2, [sp, #24]
 8004ddc:	2a01      	cmp	r2, #1
 8004dde:	dc6e      	bgt.n	8004ebe <_dtoa_r+0x7ce>
 8004de0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004de2:	2a00      	cmp	r2, #0
 8004de4:	d067      	beq.n	8004eb6 <_dtoa_r+0x7c6>
 8004de6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004dea:	9f07      	ldr	r7, [sp, #28]
 8004dec:	9d05      	ldr	r5, [sp, #20]
 8004dee:	9a05      	ldr	r2, [sp, #20]
 8004df0:	2101      	movs	r1, #1
 8004df2:	441a      	add	r2, r3
 8004df4:	4620      	mov	r0, r4
 8004df6:	9205      	str	r2, [sp, #20]
 8004df8:	4498      	add	r8, r3
 8004dfa:	f000 fd04 	bl	8005806 <__i2b>
 8004dfe:	4606      	mov	r6, r0
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	dd0c      	ble.n	8004e1e <_dtoa_r+0x72e>
 8004e04:	f1b8 0f00 	cmp.w	r8, #0
 8004e08:	dd09      	ble.n	8004e1e <_dtoa_r+0x72e>
 8004e0a:	4545      	cmp	r5, r8
 8004e0c:	9a05      	ldr	r2, [sp, #20]
 8004e0e:	462b      	mov	r3, r5
 8004e10:	bfa8      	it	ge
 8004e12:	4643      	movge	r3, r8
 8004e14:	1ad2      	subs	r2, r2, r3
 8004e16:	9205      	str	r2, [sp, #20]
 8004e18:	1aed      	subs	r5, r5, r3
 8004e1a:	eba8 0803 	sub.w	r8, r8, r3
 8004e1e:	9b07      	ldr	r3, [sp, #28]
 8004e20:	b1eb      	cbz	r3, 8004e5e <_dtoa_r+0x76e>
 8004e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d067      	beq.n	8004ef8 <_dtoa_r+0x808>
 8004e28:	b18f      	cbz	r7, 8004e4e <_dtoa_r+0x75e>
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	463a      	mov	r2, r7
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f000 fd88 	bl	8005944 <__pow5mult>
 8004e34:	9a04      	ldr	r2, [sp, #16]
 8004e36:	4601      	mov	r1, r0
 8004e38:	4606      	mov	r6, r0
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f000 fcec 	bl	8005818 <__multiply>
 8004e40:	9904      	ldr	r1, [sp, #16]
 8004e42:	9008      	str	r0, [sp, #32]
 8004e44:	4620      	mov	r0, r4
 8004e46:	f000 fc3e 	bl	80056c6 <_Bfree>
 8004e4a:	9b08      	ldr	r3, [sp, #32]
 8004e4c:	9304      	str	r3, [sp, #16]
 8004e4e:	9b07      	ldr	r3, [sp, #28]
 8004e50:	1bda      	subs	r2, r3, r7
 8004e52:	d004      	beq.n	8004e5e <_dtoa_r+0x76e>
 8004e54:	9904      	ldr	r1, [sp, #16]
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 fd74 	bl	8005944 <__pow5mult>
 8004e5c:	9004      	str	r0, [sp, #16]
 8004e5e:	2101      	movs	r1, #1
 8004e60:	4620      	mov	r0, r4
 8004e62:	f000 fcd0 	bl	8005806 <__i2b>
 8004e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e68:	4607      	mov	r7, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 81d0 	beq.w	8005210 <_dtoa_r+0xb20>
 8004e70:	461a      	mov	r2, r3
 8004e72:	4601      	mov	r1, r0
 8004e74:	4620      	mov	r0, r4
 8004e76:	f000 fd65 	bl	8005944 <__pow5mult>
 8004e7a:	9b06      	ldr	r3, [sp, #24]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	4607      	mov	r7, r0
 8004e80:	dc40      	bgt.n	8004f04 <_dtoa_r+0x814>
 8004e82:	9b00      	ldr	r3, [sp, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d139      	bne.n	8004efc <_dtoa_r+0x80c>
 8004e88:	9b01      	ldr	r3, [sp, #4]
 8004e8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d136      	bne.n	8004f00 <_dtoa_r+0x810>
 8004e92:	9b01      	ldr	r3, [sp, #4]
 8004e94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e98:	0d1b      	lsrs	r3, r3, #20
 8004e9a:	051b      	lsls	r3, r3, #20
 8004e9c:	b12b      	cbz	r3, 8004eaa <_dtoa_r+0x7ba>
 8004e9e:	9b05      	ldr	r3, [sp, #20]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	9305      	str	r3, [sp, #20]
 8004ea4:	f108 0801 	add.w	r8, r8, #1
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	9307      	str	r3, [sp, #28]
 8004eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d12a      	bne.n	8004f08 <_dtoa_r+0x818>
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	e030      	b.n	8004f18 <_dtoa_r+0x828>
 8004eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004eb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ebc:	e795      	b.n	8004dea <_dtoa_r+0x6fa>
 8004ebe:	9b07      	ldr	r3, [sp, #28]
 8004ec0:	f109 37ff 	add.w	r7, r9, #4294967295
 8004ec4:	42bb      	cmp	r3, r7
 8004ec6:	bfbf      	itttt	lt
 8004ec8:	9b07      	ldrlt	r3, [sp, #28]
 8004eca:	9707      	strlt	r7, [sp, #28]
 8004ecc:	1afa      	sublt	r2, r7, r3
 8004ece:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004ed0:	bfbb      	ittet	lt
 8004ed2:	189b      	addlt	r3, r3, r2
 8004ed4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004ed6:	1bdf      	subge	r7, r3, r7
 8004ed8:	2700      	movlt	r7, #0
 8004eda:	f1b9 0f00 	cmp.w	r9, #0
 8004ede:	bfb5      	itete	lt
 8004ee0:	9b05      	ldrlt	r3, [sp, #20]
 8004ee2:	9d05      	ldrge	r5, [sp, #20]
 8004ee4:	eba3 0509 	sublt.w	r5, r3, r9
 8004ee8:	464b      	movge	r3, r9
 8004eea:	bfb8      	it	lt
 8004eec:	2300      	movlt	r3, #0
 8004eee:	e77e      	b.n	8004dee <_dtoa_r+0x6fe>
 8004ef0:	9f07      	ldr	r7, [sp, #28]
 8004ef2:	9d05      	ldr	r5, [sp, #20]
 8004ef4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004ef6:	e783      	b.n	8004e00 <_dtoa_r+0x710>
 8004ef8:	9a07      	ldr	r2, [sp, #28]
 8004efa:	e7ab      	b.n	8004e54 <_dtoa_r+0x764>
 8004efc:	2300      	movs	r3, #0
 8004efe:	e7d4      	b.n	8004eaa <_dtoa_r+0x7ba>
 8004f00:	9b00      	ldr	r3, [sp, #0]
 8004f02:	e7d2      	b.n	8004eaa <_dtoa_r+0x7ba>
 8004f04:	2300      	movs	r3, #0
 8004f06:	9307      	str	r3, [sp, #28]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004f0e:	6918      	ldr	r0, [r3, #16]
 8004f10:	f000 fc2b 	bl	800576a <__hi0bits>
 8004f14:	f1c0 0020 	rsb	r0, r0, #32
 8004f18:	4440      	add	r0, r8
 8004f1a:	f010 001f 	ands.w	r0, r0, #31
 8004f1e:	d047      	beq.n	8004fb0 <_dtoa_r+0x8c0>
 8004f20:	f1c0 0320 	rsb	r3, r0, #32
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	dd3b      	ble.n	8004fa0 <_dtoa_r+0x8b0>
 8004f28:	9b05      	ldr	r3, [sp, #20]
 8004f2a:	f1c0 001c 	rsb	r0, r0, #28
 8004f2e:	4403      	add	r3, r0
 8004f30:	9305      	str	r3, [sp, #20]
 8004f32:	4405      	add	r5, r0
 8004f34:	4480      	add	r8, r0
 8004f36:	9b05      	ldr	r3, [sp, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dd05      	ble.n	8004f48 <_dtoa_r+0x858>
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	9904      	ldr	r1, [sp, #16]
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 fd4d 	bl	80059e0 <__lshift>
 8004f46:	9004      	str	r0, [sp, #16]
 8004f48:	f1b8 0f00 	cmp.w	r8, #0
 8004f4c:	dd05      	ble.n	8004f5a <_dtoa_r+0x86a>
 8004f4e:	4639      	mov	r1, r7
 8004f50:	4642      	mov	r2, r8
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 fd44 	bl	80059e0 <__lshift>
 8004f58:	4607      	mov	r7, r0
 8004f5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f5c:	b353      	cbz	r3, 8004fb4 <_dtoa_r+0x8c4>
 8004f5e:	4639      	mov	r1, r7
 8004f60:	9804      	ldr	r0, [sp, #16]
 8004f62:	f000 fd91 	bl	8005a88 <__mcmp>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	da24      	bge.n	8004fb4 <_dtoa_r+0x8c4>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	220a      	movs	r2, #10
 8004f6e:	9904      	ldr	r1, [sp, #16]
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 fbbf 	bl	80056f4 <__multadd>
 8004f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f78:	9004      	str	r0, [sp, #16]
 8004f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 814d 	beq.w	800521e <_dtoa_r+0xb2e>
 8004f84:	2300      	movs	r3, #0
 8004f86:	4631      	mov	r1, r6
 8004f88:	220a      	movs	r2, #10
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f000 fbb2 	bl	80056f4 <__multadd>
 8004f90:	9b02      	ldr	r3, [sp, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	4606      	mov	r6, r0
 8004f96:	dc4f      	bgt.n	8005038 <_dtoa_r+0x948>
 8004f98:	9b06      	ldr	r3, [sp, #24]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	dd4c      	ble.n	8005038 <_dtoa_r+0x948>
 8004f9e:	e011      	b.n	8004fc4 <_dtoa_r+0x8d4>
 8004fa0:	d0c9      	beq.n	8004f36 <_dtoa_r+0x846>
 8004fa2:	9a05      	ldr	r2, [sp, #20]
 8004fa4:	331c      	adds	r3, #28
 8004fa6:	441a      	add	r2, r3
 8004fa8:	9205      	str	r2, [sp, #20]
 8004faa:	441d      	add	r5, r3
 8004fac:	4498      	add	r8, r3
 8004fae:	e7c2      	b.n	8004f36 <_dtoa_r+0x846>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	e7f6      	b.n	8004fa2 <_dtoa_r+0x8b2>
 8004fb4:	f1b9 0f00 	cmp.w	r9, #0
 8004fb8:	dc38      	bgt.n	800502c <_dtoa_r+0x93c>
 8004fba:	9b06      	ldr	r3, [sp, #24]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	dd35      	ble.n	800502c <_dtoa_r+0x93c>
 8004fc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fc4:	9b02      	ldr	r3, [sp, #8]
 8004fc6:	b963      	cbnz	r3, 8004fe2 <_dtoa_r+0x8f2>
 8004fc8:	4639      	mov	r1, r7
 8004fca:	2205      	movs	r2, #5
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f000 fb91 	bl	80056f4 <__multadd>
 8004fd2:	4601      	mov	r1, r0
 8004fd4:	4607      	mov	r7, r0
 8004fd6:	9804      	ldr	r0, [sp, #16]
 8004fd8:	f000 fd56 	bl	8005a88 <__mcmp>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	f73f adcc 	bgt.w	8004b7a <_dtoa_r+0x48a>
 8004fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fe4:	465d      	mov	r5, fp
 8004fe6:	ea6f 0a03 	mvn.w	sl, r3
 8004fea:	f04f 0900 	mov.w	r9, #0
 8004fee:	4639      	mov	r1, r7
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 fb68 	bl	80056c6 <_Bfree>
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	f43f aeb7 	beq.w	8004d6a <_dtoa_r+0x67a>
 8004ffc:	f1b9 0f00 	cmp.w	r9, #0
 8005000:	d005      	beq.n	800500e <_dtoa_r+0x91e>
 8005002:	45b1      	cmp	r9, r6
 8005004:	d003      	beq.n	800500e <_dtoa_r+0x91e>
 8005006:	4649      	mov	r1, r9
 8005008:	4620      	mov	r0, r4
 800500a:	f000 fb5c 	bl	80056c6 <_Bfree>
 800500e:	4631      	mov	r1, r6
 8005010:	4620      	mov	r0, r4
 8005012:	f000 fb58 	bl	80056c6 <_Bfree>
 8005016:	e6a8      	b.n	8004d6a <_dtoa_r+0x67a>
 8005018:	2700      	movs	r7, #0
 800501a:	463e      	mov	r6, r7
 800501c:	e7e1      	b.n	8004fe2 <_dtoa_r+0x8f2>
 800501e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005022:	463e      	mov	r6, r7
 8005024:	e5a9      	b.n	8004b7a <_dtoa_r+0x48a>
 8005026:	bf00      	nop
 8005028:	40240000 	.word	0x40240000
 800502c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80fa 	beq.w	800522c <_dtoa_r+0xb3c>
 8005038:	2d00      	cmp	r5, #0
 800503a:	dd05      	ble.n	8005048 <_dtoa_r+0x958>
 800503c:	4631      	mov	r1, r6
 800503e:	462a      	mov	r2, r5
 8005040:	4620      	mov	r0, r4
 8005042:	f000 fccd 	bl	80059e0 <__lshift>
 8005046:	4606      	mov	r6, r0
 8005048:	9b07      	ldr	r3, [sp, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d04c      	beq.n	80050e8 <_dtoa_r+0x9f8>
 800504e:	6871      	ldr	r1, [r6, #4]
 8005050:	4620      	mov	r0, r4
 8005052:	f000 fb04 	bl	800565e <_Balloc>
 8005056:	6932      	ldr	r2, [r6, #16]
 8005058:	3202      	adds	r2, #2
 800505a:	4605      	mov	r5, r0
 800505c:	0092      	lsls	r2, r2, #2
 800505e:	f106 010c 	add.w	r1, r6, #12
 8005062:	300c      	adds	r0, #12
 8005064:	f000 faf0 	bl	8005648 <memcpy>
 8005068:	2201      	movs	r2, #1
 800506a:	4629      	mov	r1, r5
 800506c:	4620      	mov	r0, r4
 800506e:	f000 fcb7 	bl	80059e0 <__lshift>
 8005072:	9b00      	ldr	r3, [sp, #0]
 8005074:	f8cd b014 	str.w	fp, [sp, #20]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	46b1      	mov	r9, r6
 800507e:	9307      	str	r3, [sp, #28]
 8005080:	4606      	mov	r6, r0
 8005082:	4639      	mov	r1, r7
 8005084:	9804      	ldr	r0, [sp, #16]
 8005086:	f7ff faa5 	bl	80045d4 <quorem>
 800508a:	4649      	mov	r1, r9
 800508c:	4605      	mov	r5, r0
 800508e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005092:	9804      	ldr	r0, [sp, #16]
 8005094:	f000 fcf8 	bl	8005a88 <__mcmp>
 8005098:	4632      	mov	r2, r6
 800509a:	9000      	str	r0, [sp, #0]
 800509c:	4639      	mov	r1, r7
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 fd0c 	bl	8005abc <__mdiff>
 80050a4:	68c3      	ldr	r3, [r0, #12]
 80050a6:	4602      	mov	r2, r0
 80050a8:	bb03      	cbnz	r3, 80050ec <_dtoa_r+0x9fc>
 80050aa:	4601      	mov	r1, r0
 80050ac:	9008      	str	r0, [sp, #32]
 80050ae:	9804      	ldr	r0, [sp, #16]
 80050b0:	f000 fcea 	bl	8005a88 <__mcmp>
 80050b4:	9a08      	ldr	r2, [sp, #32]
 80050b6:	4603      	mov	r3, r0
 80050b8:	4611      	mov	r1, r2
 80050ba:	4620      	mov	r0, r4
 80050bc:	9308      	str	r3, [sp, #32]
 80050be:	f000 fb02 	bl	80056c6 <_Bfree>
 80050c2:	9b08      	ldr	r3, [sp, #32]
 80050c4:	b9a3      	cbnz	r3, 80050f0 <_dtoa_r+0xa00>
 80050c6:	9a06      	ldr	r2, [sp, #24]
 80050c8:	b992      	cbnz	r2, 80050f0 <_dtoa_r+0xa00>
 80050ca:	9a07      	ldr	r2, [sp, #28]
 80050cc:	b982      	cbnz	r2, 80050f0 <_dtoa_r+0xa00>
 80050ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80050d2:	d029      	beq.n	8005128 <_dtoa_r+0xa38>
 80050d4:	9b00      	ldr	r3, [sp, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	dd01      	ble.n	80050de <_dtoa_r+0x9ee>
 80050da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80050de:	9b05      	ldr	r3, [sp, #20]
 80050e0:	1c5d      	adds	r5, r3, #1
 80050e2:	f883 8000 	strb.w	r8, [r3]
 80050e6:	e782      	b.n	8004fee <_dtoa_r+0x8fe>
 80050e8:	4630      	mov	r0, r6
 80050ea:	e7c2      	b.n	8005072 <_dtoa_r+0x982>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e7e3      	b.n	80050b8 <_dtoa_r+0x9c8>
 80050f0:	9a00      	ldr	r2, [sp, #0]
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	db04      	blt.n	8005100 <_dtoa_r+0xa10>
 80050f6:	d125      	bne.n	8005144 <_dtoa_r+0xa54>
 80050f8:	9a06      	ldr	r2, [sp, #24]
 80050fa:	bb1a      	cbnz	r2, 8005144 <_dtoa_r+0xa54>
 80050fc:	9a07      	ldr	r2, [sp, #28]
 80050fe:	bb0a      	cbnz	r2, 8005144 <_dtoa_r+0xa54>
 8005100:	2b00      	cmp	r3, #0
 8005102:	ddec      	ble.n	80050de <_dtoa_r+0x9ee>
 8005104:	2201      	movs	r2, #1
 8005106:	9904      	ldr	r1, [sp, #16]
 8005108:	4620      	mov	r0, r4
 800510a:	f000 fc69 	bl	80059e0 <__lshift>
 800510e:	4639      	mov	r1, r7
 8005110:	9004      	str	r0, [sp, #16]
 8005112:	f000 fcb9 	bl	8005a88 <__mcmp>
 8005116:	2800      	cmp	r0, #0
 8005118:	dc03      	bgt.n	8005122 <_dtoa_r+0xa32>
 800511a:	d1e0      	bne.n	80050de <_dtoa_r+0x9ee>
 800511c:	f018 0f01 	tst.w	r8, #1
 8005120:	d0dd      	beq.n	80050de <_dtoa_r+0x9ee>
 8005122:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005126:	d1d8      	bne.n	80050da <_dtoa_r+0x9ea>
 8005128:	9b05      	ldr	r3, [sp, #20]
 800512a:	9a05      	ldr	r2, [sp, #20]
 800512c:	1c5d      	adds	r5, r3, #1
 800512e:	2339      	movs	r3, #57	; 0x39
 8005130:	7013      	strb	r3, [r2, #0]
 8005132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005136:	2b39      	cmp	r3, #57	; 0x39
 8005138:	f105 32ff 	add.w	r2, r5, #4294967295
 800513c:	d04f      	beq.n	80051de <_dtoa_r+0xaee>
 800513e:	3301      	adds	r3, #1
 8005140:	7013      	strb	r3, [r2, #0]
 8005142:	e754      	b.n	8004fee <_dtoa_r+0x8fe>
 8005144:	9a05      	ldr	r2, [sp, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f102 0501 	add.w	r5, r2, #1
 800514c:	dd06      	ble.n	800515c <_dtoa_r+0xa6c>
 800514e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005152:	d0e9      	beq.n	8005128 <_dtoa_r+0xa38>
 8005154:	f108 0801 	add.w	r8, r8, #1
 8005158:	9b05      	ldr	r3, [sp, #20]
 800515a:	e7c2      	b.n	80050e2 <_dtoa_r+0x9f2>
 800515c:	9a02      	ldr	r2, [sp, #8]
 800515e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005162:	eba5 030b 	sub.w	r3, r5, fp
 8005166:	4293      	cmp	r3, r2
 8005168:	d021      	beq.n	80051ae <_dtoa_r+0xabe>
 800516a:	2300      	movs	r3, #0
 800516c:	220a      	movs	r2, #10
 800516e:	9904      	ldr	r1, [sp, #16]
 8005170:	4620      	mov	r0, r4
 8005172:	f000 fabf 	bl	80056f4 <__multadd>
 8005176:	45b1      	cmp	r9, r6
 8005178:	9004      	str	r0, [sp, #16]
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	f04f 020a 	mov.w	r2, #10
 8005182:	4649      	mov	r1, r9
 8005184:	4620      	mov	r0, r4
 8005186:	d105      	bne.n	8005194 <_dtoa_r+0xaa4>
 8005188:	f000 fab4 	bl	80056f4 <__multadd>
 800518c:	4681      	mov	r9, r0
 800518e:	4606      	mov	r6, r0
 8005190:	9505      	str	r5, [sp, #20]
 8005192:	e776      	b.n	8005082 <_dtoa_r+0x992>
 8005194:	f000 faae 	bl	80056f4 <__multadd>
 8005198:	4631      	mov	r1, r6
 800519a:	4681      	mov	r9, r0
 800519c:	2300      	movs	r3, #0
 800519e:	220a      	movs	r2, #10
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 faa7 	bl	80056f4 <__multadd>
 80051a6:	4606      	mov	r6, r0
 80051a8:	e7f2      	b.n	8005190 <_dtoa_r+0xaa0>
 80051aa:	f04f 0900 	mov.w	r9, #0
 80051ae:	2201      	movs	r2, #1
 80051b0:	9904      	ldr	r1, [sp, #16]
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 fc14 	bl	80059e0 <__lshift>
 80051b8:	4639      	mov	r1, r7
 80051ba:	9004      	str	r0, [sp, #16]
 80051bc:	f000 fc64 	bl	8005a88 <__mcmp>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	dcb6      	bgt.n	8005132 <_dtoa_r+0xa42>
 80051c4:	d102      	bne.n	80051cc <_dtoa_r+0xadc>
 80051c6:	f018 0f01 	tst.w	r8, #1
 80051ca:	d1b2      	bne.n	8005132 <_dtoa_r+0xa42>
 80051cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051d0:	2b30      	cmp	r3, #48	; 0x30
 80051d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80051d6:	f47f af0a 	bne.w	8004fee <_dtoa_r+0x8fe>
 80051da:	4615      	mov	r5, r2
 80051dc:	e7f6      	b.n	80051cc <_dtoa_r+0xadc>
 80051de:	4593      	cmp	fp, r2
 80051e0:	d105      	bne.n	80051ee <_dtoa_r+0xafe>
 80051e2:	2331      	movs	r3, #49	; 0x31
 80051e4:	f10a 0a01 	add.w	sl, sl, #1
 80051e8:	f88b 3000 	strb.w	r3, [fp]
 80051ec:	e6ff      	b.n	8004fee <_dtoa_r+0x8fe>
 80051ee:	4615      	mov	r5, r2
 80051f0:	e79f      	b.n	8005132 <_dtoa_r+0xa42>
 80051f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005258 <_dtoa_r+0xb68>
 80051f6:	e007      	b.n	8005208 <_dtoa_r+0xb18>
 80051f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800525c <_dtoa_r+0xb6c>
 80051fe:	b11b      	cbz	r3, 8005208 <_dtoa_r+0xb18>
 8005200:	f10b 0308 	add.w	r3, fp, #8
 8005204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	4658      	mov	r0, fp
 800520a:	b017      	add	sp, #92	; 0x5c
 800520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005210:	9b06      	ldr	r3, [sp, #24]
 8005212:	2b01      	cmp	r3, #1
 8005214:	f77f ae35 	ble.w	8004e82 <_dtoa_r+0x792>
 8005218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800521a:	9307      	str	r3, [sp, #28]
 800521c:	e649      	b.n	8004eb2 <_dtoa_r+0x7c2>
 800521e:	9b02      	ldr	r3, [sp, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	dc03      	bgt.n	800522c <_dtoa_r+0xb3c>
 8005224:	9b06      	ldr	r3, [sp, #24]
 8005226:	2b02      	cmp	r3, #2
 8005228:	f73f aecc 	bgt.w	8004fc4 <_dtoa_r+0x8d4>
 800522c:	465d      	mov	r5, fp
 800522e:	4639      	mov	r1, r7
 8005230:	9804      	ldr	r0, [sp, #16]
 8005232:	f7ff f9cf 	bl	80045d4 <quorem>
 8005236:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800523a:	f805 8b01 	strb.w	r8, [r5], #1
 800523e:	9a02      	ldr	r2, [sp, #8]
 8005240:	eba5 030b 	sub.w	r3, r5, fp
 8005244:	429a      	cmp	r2, r3
 8005246:	ddb0      	ble.n	80051aa <_dtoa_r+0xaba>
 8005248:	2300      	movs	r3, #0
 800524a:	220a      	movs	r2, #10
 800524c:	9904      	ldr	r1, [sp, #16]
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fa50 	bl	80056f4 <__multadd>
 8005254:	9004      	str	r0, [sp, #16]
 8005256:	e7ea      	b.n	800522e <_dtoa_r+0xb3e>
 8005258:	0800609c 	.word	0x0800609c
 800525c:	0800609e 	.word	0x0800609e

08005260 <__sflush_r>:
 8005260:	898a      	ldrh	r2, [r1, #12]
 8005262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005266:	4605      	mov	r5, r0
 8005268:	0710      	lsls	r0, r2, #28
 800526a:	460c      	mov	r4, r1
 800526c:	d458      	bmi.n	8005320 <__sflush_r+0xc0>
 800526e:	684b      	ldr	r3, [r1, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	dc05      	bgt.n	8005280 <__sflush_r+0x20>
 8005274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	dc02      	bgt.n	8005280 <__sflush_r+0x20>
 800527a:	2000      	movs	r0, #0
 800527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005282:	2e00      	cmp	r6, #0
 8005284:	d0f9      	beq.n	800527a <__sflush_r+0x1a>
 8005286:	2300      	movs	r3, #0
 8005288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800528c:	682f      	ldr	r7, [r5, #0]
 800528e:	6a21      	ldr	r1, [r4, #32]
 8005290:	602b      	str	r3, [r5, #0]
 8005292:	d032      	beq.n	80052fa <__sflush_r+0x9a>
 8005294:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	075a      	lsls	r2, r3, #29
 800529a:	d505      	bpl.n	80052a8 <__sflush_r+0x48>
 800529c:	6863      	ldr	r3, [r4, #4]
 800529e:	1ac0      	subs	r0, r0, r3
 80052a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052a2:	b10b      	cbz	r3, 80052a8 <__sflush_r+0x48>
 80052a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052a6:	1ac0      	subs	r0, r0, r3
 80052a8:	2300      	movs	r3, #0
 80052aa:	4602      	mov	r2, r0
 80052ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ae:	6a21      	ldr	r1, [r4, #32]
 80052b0:	4628      	mov	r0, r5
 80052b2:	47b0      	blx	r6
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	d106      	bne.n	80052c8 <__sflush_r+0x68>
 80052ba:	6829      	ldr	r1, [r5, #0]
 80052bc:	291d      	cmp	r1, #29
 80052be:	d848      	bhi.n	8005352 <__sflush_r+0xf2>
 80052c0:	4a29      	ldr	r2, [pc, #164]	; (8005368 <__sflush_r+0x108>)
 80052c2:	40ca      	lsrs	r2, r1
 80052c4:	07d6      	lsls	r6, r2, #31
 80052c6:	d544      	bpl.n	8005352 <__sflush_r+0xf2>
 80052c8:	2200      	movs	r2, #0
 80052ca:	6062      	str	r2, [r4, #4]
 80052cc:	04d9      	lsls	r1, r3, #19
 80052ce:	6922      	ldr	r2, [r4, #16]
 80052d0:	6022      	str	r2, [r4, #0]
 80052d2:	d504      	bpl.n	80052de <__sflush_r+0x7e>
 80052d4:	1c42      	adds	r2, r0, #1
 80052d6:	d101      	bne.n	80052dc <__sflush_r+0x7c>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b903      	cbnz	r3, 80052de <__sflush_r+0x7e>
 80052dc:	6560      	str	r0, [r4, #84]	; 0x54
 80052de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052e0:	602f      	str	r7, [r5, #0]
 80052e2:	2900      	cmp	r1, #0
 80052e4:	d0c9      	beq.n	800527a <__sflush_r+0x1a>
 80052e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052ea:	4299      	cmp	r1, r3
 80052ec:	d002      	beq.n	80052f4 <__sflush_r+0x94>
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fc9e 	bl	8005c30 <_free_r>
 80052f4:	2000      	movs	r0, #0
 80052f6:	6360      	str	r0, [r4, #52]	; 0x34
 80052f8:	e7c0      	b.n	800527c <__sflush_r+0x1c>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b0      	blx	r6
 8005300:	1c41      	adds	r1, r0, #1
 8005302:	d1c8      	bne.n	8005296 <__sflush_r+0x36>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0c5      	beq.n	8005296 <__sflush_r+0x36>
 800530a:	2b1d      	cmp	r3, #29
 800530c:	d001      	beq.n	8005312 <__sflush_r+0xb2>
 800530e:	2b16      	cmp	r3, #22
 8005310:	d101      	bne.n	8005316 <__sflush_r+0xb6>
 8005312:	602f      	str	r7, [r5, #0]
 8005314:	e7b1      	b.n	800527a <__sflush_r+0x1a>
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800531c:	81a3      	strh	r3, [r4, #12]
 800531e:	e7ad      	b.n	800527c <__sflush_r+0x1c>
 8005320:	690f      	ldr	r7, [r1, #16]
 8005322:	2f00      	cmp	r7, #0
 8005324:	d0a9      	beq.n	800527a <__sflush_r+0x1a>
 8005326:	0793      	lsls	r3, r2, #30
 8005328:	680e      	ldr	r6, [r1, #0]
 800532a:	bf08      	it	eq
 800532c:	694b      	ldreq	r3, [r1, #20]
 800532e:	600f      	str	r7, [r1, #0]
 8005330:	bf18      	it	ne
 8005332:	2300      	movne	r3, #0
 8005334:	eba6 0807 	sub.w	r8, r6, r7
 8005338:	608b      	str	r3, [r1, #8]
 800533a:	f1b8 0f00 	cmp.w	r8, #0
 800533e:	dd9c      	ble.n	800527a <__sflush_r+0x1a>
 8005340:	4643      	mov	r3, r8
 8005342:	463a      	mov	r2, r7
 8005344:	6a21      	ldr	r1, [r4, #32]
 8005346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005348:	4628      	mov	r0, r5
 800534a:	47b0      	blx	r6
 800534c:	2800      	cmp	r0, #0
 800534e:	dc06      	bgt.n	800535e <__sflush_r+0xfe>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005356:	81a3      	strh	r3, [r4, #12]
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	e78e      	b.n	800527c <__sflush_r+0x1c>
 800535e:	4407      	add	r7, r0
 8005360:	eba8 0800 	sub.w	r8, r8, r0
 8005364:	e7e9      	b.n	800533a <__sflush_r+0xda>
 8005366:	bf00      	nop
 8005368:	20400001 	.word	0x20400001

0800536c <_fflush_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	690b      	ldr	r3, [r1, #16]
 8005370:	4605      	mov	r5, r0
 8005372:	460c      	mov	r4, r1
 8005374:	b1db      	cbz	r3, 80053ae <_fflush_r+0x42>
 8005376:	b118      	cbz	r0, 8005380 <_fflush_r+0x14>
 8005378:	6983      	ldr	r3, [r0, #24]
 800537a:	b90b      	cbnz	r3, 8005380 <_fflush_r+0x14>
 800537c:	f000 f860 	bl	8005440 <__sinit>
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <_fflush_r+0x48>)
 8005382:	429c      	cmp	r4, r3
 8005384:	d109      	bne.n	800539a <_fflush_r+0x2e>
 8005386:	686c      	ldr	r4, [r5, #4]
 8005388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538c:	b17b      	cbz	r3, 80053ae <_fflush_r+0x42>
 800538e:	4621      	mov	r1, r4
 8005390:	4628      	mov	r0, r5
 8005392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005396:	f7ff bf63 	b.w	8005260 <__sflush_r>
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <_fflush_r+0x4c>)
 800539c:	429c      	cmp	r4, r3
 800539e:	d101      	bne.n	80053a4 <_fflush_r+0x38>
 80053a0:	68ac      	ldr	r4, [r5, #8]
 80053a2:	e7f1      	b.n	8005388 <_fflush_r+0x1c>
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <_fflush_r+0x50>)
 80053a6:	429c      	cmp	r4, r3
 80053a8:	bf08      	it	eq
 80053aa:	68ec      	ldreq	r4, [r5, #12]
 80053ac:	e7ec      	b.n	8005388 <_fflush_r+0x1c>
 80053ae:	2000      	movs	r0, #0
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
 80053b2:	bf00      	nop
 80053b4:	080060cc 	.word	0x080060cc
 80053b8:	080060ec 	.word	0x080060ec
 80053bc:	080060ac 	.word	0x080060ac

080053c0 <std>:
 80053c0:	2300      	movs	r3, #0
 80053c2:	b510      	push	{r4, lr}
 80053c4:	4604      	mov	r4, r0
 80053c6:	e9c0 3300 	strd	r3, r3, [r0]
 80053ca:	6083      	str	r3, [r0, #8]
 80053cc:	8181      	strh	r1, [r0, #12]
 80053ce:	6643      	str	r3, [r0, #100]	; 0x64
 80053d0:	81c2      	strh	r2, [r0, #14]
 80053d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053d6:	6183      	str	r3, [r0, #24]
 80053d8:	4619      	mov	r1, r3
 80053da:	2208      	movs	r2, #8
 80053dc:	305c      	adds	r0, #92	; 0x5c
 80053de:	f7fe fc2e 	bl	8003c3e <memset>
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <std+0x38>)
 80053e4:	6263      	str	r3, [r4, #36]	; 0x24
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <std+0x3c>)
 80053e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <std+0x40>)
 80053ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <std+0x44>)
 80053f0:	6224      	str	r4, [r4, #32]
 80053f2:	6323      	str	r3, [r4, #48]	; 0x30
 80053f4:	bd10      	pop	{r4, pc}
 80053f6:	bf00      	nop
 80053f8:	08005da1 	.word	0x08005da1
 80053fc:	08005dc3 	.word	0x08005dc3
 8005400:	08005dfb 	.word	0x08005dfb
 8005404:	08005e1f 	.word	0x08005e1f

08005408 <_cleanup_r>:
 8005408:	4901      	ldr	r1, [pc, #4]	; (8005410 <_cleanup_r+0x8>)
 800540a:	f000 b885 	b.w	8005518 <_fwalk_reent>
 800540e:	bf00      	nop
 8005410:	0800536d 	.word	0x0800536d

08005414 <__sfmoreglue>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	1e4a      	subs	r2, r1, #1
 8005418:	2568      	movs	r5, #104	; 0x68
 800541a:	4355      	muls	r5, r2
 800541c:	460e      	mov	r6, r1
 800541e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005422:	f000 fc53 	bl	8005ccc <_malloc_r>
 8005426:	4604      	mov	r4, r0
 8005428:	b140      	cbz	r0, 800543c <__sfmoreglue+0x28>
 800542a:	2100      	movs	r1, #0
 800542c:	e9c0 1600 	strd	r1, r6, [r0]
 8005430:	300c      	adds	r0, #12
 8005432:	60a0      	str	r0, [r4, #8]
 8005434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005438:	f7fe fc01 	bl	8003c3e <memset>
 800543c:	4620      	mov	r0, r4
 800543e:	bd70      	pop	{r4, r5, r6, pc}

08005440 <__sinit>:
 8005440:	6983      	ldr	r3, [r0, #24]
 8005442:	b510      	push	{r4, lr}
 8005444:	4604      	mov	r4, r0
 8005446:	bb33      	cbnz	r3, 8005496 <__sinit+0x56>
 8005448:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800544c:	6503      	str	r3, [r0, #80]	; 0x50
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <__sinit+0x58>)
 8005450:	4a12      	ldr	r2, [pc, #72]	; (800549c <__sinit+0x5c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6282      	str	r2, [r0, #40]	; 0x28
 8005456:	4298      	cmp	r0, r3
 8005458:	bf04      	itt	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	6183      	streq	r3, [r0, #24]
 800545e:	f000 f81f 	bl	80054a0 <__sfp>
 8005462:	6060      	str	r0, [r4, #4]
 8005464:	4620      	mov	r0, r4
 8005466:	f000 f81b 	bl	80054a0 <__sfp>
 800546a:	60a0      	str	r0, [r4, #8]
 800546c:	4620      	mov	r0, r4
 800546e:	f000 f817 	bl	80054a0 <__sfp>
 8005472:	2200      	movs	r2, #0
 8005474:	60e0      	str	r0, [r4, #12]
 8005476:	2104      	movs	r1, #4
 8005478:	6860      	ldr	r0, [r4, #4]
 800547a:	f7ff ffa1 	bl	80053c0 <std>
 800547e:	2201      	movs	r2, #1
 8005480:	2109      	movs	r1, #9
 8005482:	68a0      	ldr	r0, [r4, #8]
 8005484:	f7ff ff9c 	bl	80053c0 <std>
 8005488:	2202      	movs	r2, #2
 800548a:	2112      	movs	r1, #18
 800548c:	68e0      	ldr	r0, [r4, #12]
 800548e:	f7ff ff97 	bl	80053c0 <std>
 8005492:	2301      	movs	r3, #1
 8005494:	61a3      	str	r3, [r4, #24]
 8005496:	bd10      	pop	{r4, pc}
 8005498:	08006088 	.word	0x08006088
 800549c:	08005409 	.word	0x08005409

080054a0 <__sfp>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <__sfp+0x70>)
 80054a4:	681e      	ldr	r6, [r3, #0]
 80054a6:	69b3      	ldr	r3, [r6, #24]
 80054a8:	4607      	mov	r7, r0
 80054aa:	b913      	cbnz	r3, 80054b2 <__sfp+0x12>
 80054ac:	4630      	mov	r0, r6
 80054ae:	f7ff ffc7 	bl	8005440 <__sinit>
 80054b2:	3648      	adds	r6, #72	; 0x48
 80054b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	d503      	bpl.n	80054c4 <__sfp+0x24>
 80054bc:	6833      	ldr	r3, [r6, #0]
 80054be:	b133      	cbz	r3, 80054ce <__sfp+0x2e>
 80054c0:	6836      	ldr	r6, [r6, #0]
 80054c2:	e7f7      	b.n	80054b4 <__sfp+0x14>
 80054c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054c8:	b16d      	cbz	r5, 80054e6 <__sfp+0x46>
 80054ca:	3468      	adds	r4, #104	; 0x68
 80054cc:	e7f4      	b.n	80054b8 <__sfp+0x18>
 80054ce:	2104      	movs	r1, #4
 80054d0:	4638      	mov	r0, r7
 80054d2:	f7ff ff9f 	bl	8005414 <__sfmoreglue>
 80054d6:	6030      	str	r0, [r6, #0]
 80054d8:	2800      	cmp	r0, #0
 80054da:	d1f1      	bne.n	80054c0 <__sfp+0x20>
 80054dc:	230c      	movs	r3, #12
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4604      	mov	r4, r0
 80054e2:	4620      	mov	r0, r4
 80054e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e6:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <__sfp+0x74>)
 80054e8:	6665      	str	r5, [r4, #100]	; 0x64
 80054ea:	e9c4 5500 	strd	r5, r5, [r4]
 80054ee:	60a5      	str	r5, [r4, #8]
 80054f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80054f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80054f8:	2208      	movs	r2, #8
 80054fa:	4629      	mov	r1, r5
 80054fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005500:	f7fe fb9d 	bl	8003c3e <memset>
 8005504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800550c:	e7e9      	b.n	80054e2 <__sfp+0x42>
 800550e:	bf00      	nop
 8005510:	08006088 	.word	0x08006088
 8005514:	ffff0001 	.word	0xffff0001

08005518 <_fwalk_reent>:
 8005518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800551c:	4680      	mov	r8, r0
 800551e:	4689      	mov	r9, r1
 8005520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005524:	2600      	movs	r6, #0
 8005526:	b914      	cbnz	r4, 800552e <_fwalk_reent+0x16>
 8005528:	4630      	mov	r0, r6
 800552a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800552e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005532:	3f01      	subs	r7, #1
 8005534:	d501      	bpl.n	800553a <_fwalk_reent+0x22>
 8005536:	6824      	ldr	r4, [r4, #0]
 8005538:	e7f5      	b.n	8005526 <_fwalk_reent+0xe>
 800553a:	89ab      	ldrh	r3, [r5, #12]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d907      	bls.n	8005550 <_fwalk_reent+0x38>
 8005540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005544:	3301      	adds	r3, #1
 8005546:	d003      	beq.n	8005550 <_fwalk_reent+0x38>
 8005548:	4629      	mov	r1, r5
 800554a:	4640      	mov	r0, r8
 800554c:	47c8      	blx	r9
 800554e:	4306      	orrs	r6, r0
 8005550:	3568      	adds	r5, #104	; 0x68
 8005552:	e7ee      	b.n	8005532 <_fwalk_reent+0x1a>

08005554 <_localeconv_r>:
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <_localeconv_r+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6a18      	ldr	r0, [r3, #32]
 800555a:	4b04      	ldr	r3, [pc, #16]	; (800556c <_localeconv_r+0x18>)
 800555c:	2800      	cmp	r0, #0
 800555e:	bf08      	it	eq
 8005560:	4618      	moveq	r0, r3
 8005562:	30f0      	adds	r0, #240	; 0xf0
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000010 	.word	0x20000010
 800556c:	20000074 	.word	0x20000074

08005570 <__swhatbuf_r>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	460e      	mov	r6, r1
 8005574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005578:	2900      	cmp	r1, #0
 800557a:	b096      	sub	sp, #88	; 0x58
 800557c:	4614      	mov	r4, r2
 800557e:	461d      	mov	r5, r3
 8005580:	da07      	bge.n	8005592 <__swhatbuf_r+0x22>
 8005582:	2300      	movs	r3, #0
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	89b3      	ldrh	r3, [r6, #12]
 8005588:	061a      	lsls	r2, r3, #24
 800558a:	d410      	bmi.n	80055ae <__swhatbuf_r+0x3e>
 800558c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005590:	e00e      	b.n	80055b0 <__swhatbuf_r+0x40>
 8005592:	466a      	mov	r2, sp
 8005594:	f000 fc6a 	bl	8005e6c <_fstat_r>
 8005598:	2800      	cmp	r0, #0
 800559a:	dbf2      	blt.n	8005582 <__swhatbuf_r+0x12>
 800559c:	9a01      	ldr	r2, [sp, #4]
 800559e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055a6:	425a      	negs	r2, r3
 80055a8:	415a      	adcs	r2, r3
 80055aa:	602a      	str	r2, [r5, #0]
 80055ac:	e7ee      	b.n	800558c <__swhatbuf_r+0x1c>
 80055ae:	2340      	movs	r3, #64	; 0x40
 80055b0:	2000      	movs	r0, #0
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	b016      	add	sp, #88	; 0x58
 80055b6:	bd70      	pop	{r4, r5, r6, pc}

080055b8 <__smakebuf_r>:
 80055b8:	898b      	ldrh	r3, [r1, #12]
 80055ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055bc:	079d      	lsls	r5, r3, #30
 80055be:	4606      	mov	r6, r0
 80055c0:	460c      	mov	r4, r1
 80055c2:	d507      	bpl.n	80055d4 <__smakebuf_r+0x1c>
 80055c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	6123      	str	r3, [r4, #16]
 80055cc:	2301      	movs	r3, #1
 80055ce:	6163      	str	r3, [r4, #20]
 80055d0:	b002      	add	sp, #8
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	ab01      	add	r3, sp, #4
 80055d6:	466a      	mov	r2, sp
 80055d8:	f7ff ffca 	bl	8005570 <__swhatbuf_r>
 80055dc:	9900      	ldr	r1, [sp, #0]
 80055de:	4605      	mov	r5, r0
 80055e0:	4630      	mov	r0, r6
 80055e2:	f000 fb73 	bl	8005ccc <_malloc_r>
 80055e6:	b948      	cbnz	r0, 80055fc <__smakebuf_r+0x44>
 80055e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ec:	059a      	lsls	r2, r3, #22
 80055ee:	d4ef      	bmi.n	80055d0 <__smakebuf_r+0x18>
 80055f0:	f023 0303 	bic.w	r3, r3, #3
 80055f4:	f043 0302 	orr.w	r3, r3, #2
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	e7e3      	b.n	80055c4 <__smakebuf_r+0xc>
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <__smakebuf_r+0x7c>)
 80055fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	6020      	str	r0, [r4, #0]
 8005604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005608:	81a3      	strh	r3, [r4, #12]
 800560a:	9b00      	ldr	r3, [sp, #0]
 800560c:	6163      	str	r3, [r4, #20]
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	6120      	str	r0, [r4, #16]
 8005612:	b15b      	cbz	r3, 800562c <__smakebuf_r+0x74>
 8005614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005618:	4630      	mov	r0, r6
 800561a:	f000 fc39 	bl	8005e90 <_isatty_r>
 800561e:	b128      	cbz	r0, 800562c <__smakebuf_r+0x74>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	431d      	orrs	r5, r3
 8005630:	81a5      	strh	r5, [r4, #12]
 8005632:	e7cd      	b.n	80055d0 <__smakebuf_r+0x18>
 8005634:	08005409 	.word	0x08005409

08005638 <malloc>:
 8005638:	4b02      	ldr	r3, [pc, #8]	; (8005644 <malloc+0xc>)
 800563a:	4601      	mov	r1, r0
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	f000 bb45 	b.w	8005ccc <_malloc_r>
 8005642:	bf00      	nop
 8005644:	20000010 	.word	0x20000010

08005648 <memcpy>:
 8005648:	b510      	push	{r4, lr}
 800564a:	1e43      	subs	r3, r0, #1
 800564c:	440a      	add	r2, r1
 800564e:	4291      	cmp	r1, r2
 8005650:	d100      	bne.n	8005654 <memcpy+0xc>
 8005652:	bd10      	pop	{r4, pc}
 8005654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800565c:	e7f7      	b.n	800564e <memcpy+0x6>

0800565e <_Balloc>:
 800565e:	b570      	push	{r4, r5, r6, lr}
 8005660:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005662:	4604      	mov	r4, r0
 8005664:	460e      	mov	r6, r1
 8005666:	b93d      	cbnz	r5, 8005678 <_Balloc+0x1a>
 8005668:	2010      	movs	r0, #16
 800566a:	f7ff ffe5 	bl	8005638 <malloc>
 800566e:	6260      	str	r0, [r4, #36]	; 0x24
 8005670:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005674:	6005      	str	r5, [r0, #0]
 8005676:	60c5      	str	r5, [r0, #12]
 8005678:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800567a:	68eb      	ldr	r3, [r5, #12]
 800567c:	b183      	cbz	r3, 80056a0 <_Balloc+0x42>
 800567e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005686:	b9b8      	cbnz	r0, 80056b8 <_Balloc+0x5a>
 8005688:	2101      	movs	r1, #1
 800568a:	fa01 f506 	lsl.w	r5, r1, r6
 800568e:	1d6a      	adds	r2, r5, #5
 8005690:	0092      	lsls	r2, r2, #2
 8005692:	4620      	mov	r0, r4
 8005694:	f000 fabe 	bl	8005c14 <_calloc_r>
 8005698:	b160      	cbz	r0, 80056b4 <_Balloc+0x56>
 800569a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800569e:	e00e      	b.n	80056be <_Balloc+0x60>
 80056a0:	2221      	movs	r2, #33	; 0x21
 80056a2:	2104      	movs	r1, #4
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 fab5 	bl	8005c14 <_calloc_r>
 80056aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ac:	60e8      	str	r0, [r5, #12]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e4      	bne.n	800567e <_Balloc+0x20>
 80056b4:	2000      	movs	r0, #0
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	6802      	ldr	r2, [r0, #0]
 80056ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80056be:	2300      	movs	r3, #0
 80056c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056c4:	e7f7      	b.n	80056b6 <_Balloc+0x58>

080056c6 <_Bfree>:
 80056c6:	b570      	push	{r4, r5, r6, lr}
 80056c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80056ca:	4606      	mov	r6, r0
 80056cc:	460d      	mov	r5, r1
 80056ce:	b93c      	cbnz	r4, 80056e0 <_Bfree+0x1a>
 80056d0:	2010      	movs	r0, #16
 80056d2:	f7ff ffb1 	bl	8005638 <malloc>
 80056d6:	6270      	str	r0, [r6, #36]	; 0x24
 80056d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056dc:	6004      	str	r4, [r0, #0]
 80056de:	60c4      	str	r4, [r0, #12]
 80056e0:	b13d      	cbz	r5, 80056f2 <_Bfree+0x2c>
 80056e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80056e4:	686a      	ldr	r2, [r5, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056ec:	6029      	str	r1, [r5, #0]
 80056ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056f2:	bd70      	pop	{r4, r5, r6, pc}

080056f4 <__multadd>:
 80056f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f8:	690d      	ldr	r5, [r1, #16]
 80056fa:	461f      	mov	r7, r3
 80056fc:	4606      	mov	r6, r0
 80056fe:	460c      	mov	r4, r1
 8005700:	f101 0c14 	add.w	ip, r1, #20
 8005704:	2300      	movs	r3, #0
 8005706:	f8dc 0000 	ldr.w	r0, [ip]
 800570a:	b281      	uxth	r1, r0
 800570c:	fb02 7101 	mla	r1, r2, r1, r7
 8005710:	0c0f      	lsrs	r7, r1, #16
 8005712:	0c00      	lsrs	r0, r0, #16
 8005714:	fb02 7000 	mla	r0, r2, r0, r7
 8005718:	b289      	uxth	r1, r1
 800571a:	3301      	adds	r3, #1
 800571c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005720:	429d      	cmp	r5, r3
 8005722:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005726:	f84c 1b04 	str.w	r1, [ip], #4
 800572a:	dcec      	bgt.n	8005706 <__multadd+0x12>
 800572c:	b1d7      	cbz	r7, 8005764 <__multadd+0x70>
 800572e:	68a3      	ldr	r3, [r4, #8]
 8005730:	42ab      	cmp	r3, r5
 8005732:	dc12      	bgt.n	800575a <__multadd+0x66>
 8005734:	6861      	ldr	r1, [r4, #4]
 8005736:	4630      	mov	r0, r6
 8005738:	3101      	adds	r1, #1
 800573a:	f7ff ff90 	bl	800565e <_Balloc>
 800573e:	6922      	ldr	r2, [r4, #16]
 8005740:	3202      	adds	r2, #2
 8005742:	f104 010c 	add.w	r1, r4, #12
 8005746:	4680      	mov	r8, r0
 8005748:	0092      	lsls	r2, r2, #2
 800574a:	300c      	adds	r0, #12
 800574c:	f7ff ff7c 	bl	8005648 <memcpy>
 8005750:	4621      	mov	r1, r4
 8005752:	4630      	mov	r0, r6
 8005754:	f7ff ffb7 	bl	80056c6 <_Bfree>
 8005758:	4644      	mov	r4, r8
 800575a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800575e:	3501      	adds	r5, #1
 8005760:	615f      	str	r7, [r3, #20]
 8005762:	6125      	str	r5, [r4, #16]
 8005764:	4620      	mov	r0, r4
 8005766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800576a <__hi0bits>:
 800576a:	0c02      	lsrs	r2, r0, #16
 800576c:	0412      	lsls	r2, r2, #16
 800576e:	4603      	mov	r3, r0
 8005770:	b9b2      	cbnz	r2, 80057a0 <__hi0bits+0x36>
 8005772:	0403      	lsls	r3, r0, #16
 8005774:	2010      	movs	r0, #16
 8005776:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800577a:	bf04      	itt	eq
 800577c:	021b      	lsleq	r3, r3, #8
 800577e:	3008      	addeq	r0, #8
 8005780:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005784:	bf04      	itt	eq
 8005786:	011b      	lsleq	r3, r3, #4
 8005788:	3004      	addeq	r0, #4
 800578a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800578e:	bf04      	itt	eq
 8005790:	009b      	lsleq	r3, r3, #2
 8005792:	3002      	addeq	r0, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	db06      	blt.n	80057a6 <__hi0bits+0x3c>
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	d503      	bpl.n	80057a4 <__hi0bits+0x3a>
 800579c:	3001      	adds	r0, #1
 800579e:	4770      	bx	lr
 80057a0:	2000      	movs	r0, #0
 80057a2:	e7e8      	b.n	8005776 <__hi0bits+0xc>
 80057a4:	2020      	movs	r0, #32
 80057a6:	4770      	bx	lr

080057a8 <__lo0bits>:
 80057a8:	6803      	ldr	r3, [r0, #0]
 80057aa:	f013 0207 	ands.w	r2, r3, #7
 80057ae:	4601      	mov	r1, r0
 80057b0:	d00b      	beq.n	80057ca <__lo0bits+0x22>
 80057b2:	07da      	lsls	r2, r3, #31
 80057b4:	d423      	bmi.n	80057fe <__lo0bits+0x56>
 80057b6:	0798      	lsls	r0, r3, #30
 80057b8:	bf49      	itett	mi
 80057ba:	085b      	lsrmi	r3, r3, #1
 80057bc:	089b      	lsrpl	r3, r3, #2
 80057be:	2001      	movmi	r0, #1
 80057c0:	600b      	strmi	r3, [r1, #0]
 80057c2:	bf5c      	itt	pl
 80057c4:	600b      	strpl	r3, [r1, #0]
 80057c6:	2002      	movpl	r0, #2
 80057c8:	4770      	bx	lr
 80057ca:	b298      	uxth	r0, r3
 80057cc:	b9a8      	cbnz	r0, 80057fa <__lo0bits+0x52>
 80057ce:	0c1b      	lsrs	r3, r3, #16
 80057d0:	2010      	movs	r0, #16
 80057d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057d6:	bf04      	itt	eq
 80057d8:	0a1b      	lsreq	r3, r3, #8
 80057da:	3008      	addeq	r0, #8
 80057dc:	071a      	lsls	r2, r3, #28
 80057de:	bf04      	itt	eq
 80057e0:	091b      	lsreq	r3, r3, #4
 80057e2:	3004      	addeq	r0, #4
 80057e4:	079a      	lsls	r2, r3, #30
 80057e6:	bf04      	itt	eq
 80057e8:	089b      	lsreq	r3, r3, #2
 80057ea:	3002      	addeq	r0, #2
 80057ec:	07da      	lsls	r2, r3, #31
 80057ee:	d402      	bmi.n	80057f6 <__lo0bits+0x4e>
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	d006      	beq.n	8005802 <__lo0bits+0x5a>
 80057f4:	3001      	adds	r0, #1
 80057f6:	600b      	str	r3, [r1, #0]
 80057f8:	4770      	bx	lr
 80057fa:	4610      	mov	r0, r2
 80057fc:	e7e9      	b.n	80057d2 <__lo0bits+0x2a>
 80057fe:	2000      	movs	r0, #0
 8005800:	4770      	bx	lr
 8005802:	2020      	movs	r0, #32
 8005804:	4770      	bx	lr

08005806 <__i2b>:
 8005806:	b510      	push	{r4, lr}
 8005808:	460c      	mov	r4, r1
 800580a:	2101      	movs	r1, #1
 800580c:	f7ff ff27 	bl	800565e <_Balloc>
 8005810:	2201      	movs	r2, #1
 8005812:	6144      	str	r4, [r0, #20]
 8005814:	6102      	str	r2, [r0, #16]
 8005816:	bd10      	pop	{r4, pc}

08005818 <__multiply>:
 8005818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581c:	4614      	mov	r4, r2
 800581e:	690a      	ldr	r2, [r1, #16]
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	429a      	cmp	r2, r3
 8005824:	bfb8      	it	lt
 8005826:	460b      	movlt	r3, r1
 8005828:	4688      	mov	r8, r1
 800582a:	bfbc      	itt	lt
 800582c:	46a0      	movlt	r8, r4
 800582e:	461c      	movlt	r4, r3
 8005830:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005834:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005838:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800583c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005840:	eb07 0609 	add.w	r6, r7, r9
 8005844:	42b3      	cmp	r3, r6
 8005846:	bfb8      	it	lt
 8005848:	3101      	addlt	r1, #1
 800584a:	f7ff ff08 	bl	800565e <_Balloc>
 800584e:	f100 0514 	add.w	r5, r0, #20
 8005852:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005856:	462b      	mov	r3, r5
 8005858:	2200      	movs	r2, #0
 800585a:	4573      	cmp	r3, lr
 800585c:	d316      	bcc.n	800588c <__multiply+0x74>
 800585e:	f104 0214 	add.w	r2, r4, #20
 8005862:	f108 0114 	add.w	r1, r8, #20
 8005866:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800586a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	9b00      	ldr	r3, [sp, #0]
 8005872:	9201      	str	r2, [sp, #4]
 8005874:	4293      	cmp	r3, r2
 8005876:	d80c      	bhi.n	8005892 <__multiply+0x7a>
 8005878:	2e00      	cmp	r6, #0
 800587a:	dd03      	ble.n	8005884 <__multiply+0x6c>
 800587c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005880:	2b00      	cmp	r3, #0
 8005882:	d05d      	beq.n	8005940 <__multiply+0x128>
 8005884:	6106      	str	r6, [r0, #16]
 8005886:	b003      	add	sp, #12
 8005888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588c:	f843 2b04 	str.w	r2, [r3], #4
 8005890:	e7e3      	b.n	800585a <__multiply+0x42>
 8005892:	f8b2 b000 	ldrh.w	fp, [r2]
 8005896:	f1bb 0f00 	cmp.w	fp, #0
 800589a:	d023      	beq.n	80058e4 <__multiply+0xcc>
 800589c:	4689      	mov	r9, r1
 800589e:	46ac      	mov	ip, r5
 80058a0:	f04f 0800 	mov.w	r8, #0
 80058a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80058a8:	f8dc a000 	ldr.w	sl, [ip]
 80058ac:	b2a3      	uxth	r3, r4
 80058ae:	fa1f fa8a 	uxth.w	sl, sl
 80058b2:	fb0b a303 	mla	r3, fp, r3, sl
 80058b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80058ba:	f8dc 4000 	ldr.w	r4, [ip]
 80058be:	4443      	add	r3, r8
 80058c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058c4:	fb0b 840a 	mla	r4, fp, sl, r8
 80058c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80058cc:	46e2      	mov	sl, ip
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058d4:	454f      	cmp	r7, r9
 80058d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058da:	f84a 3b04 	str.w	r3, [sl], #4
 80058de:	d82b      	bhi.n	8005938 <__multiply+0x120>
 80058e0:	f8cc 8004 	str.w	r8, [ip, #4]
 80058e4:	9b01      	ldr	r3, [sp, #4]
 80058e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80058ea:	3204      	adds	r2, #4
 80058ec:	f1ba 0f00 	cmp.w	sl, #0
 80058f0:	d020      	beq.n	8005934 <__multiply+0x11c>
 80058f2:	682b      	ldr	r3, [r5, #0]
 80058f4:	4689      	mov	r9, r1
 80058f6:	46a8      	mov	r8, r5
 80058f8:	f04f 0b00 	mov.w	fp, #0
 80058fc:	f8b9 c000 	ldrh.w	ip, [r9]
 8005900:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005904:	fb0a 440c 	mla	r4, sl, ip, r4
 8005908:	445c      	add	r4, fp
 800590a:	46c4      	mov	ip, r8
 800590c:	b29b      	uxth	r3, r3
 800590e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005912:	f84c 3b04 	str.w	r3, [ip], #4
 8005916:	f859 3b04 	ldr.w	r3, [r9], #4
 800591a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	fb0a b303 	mla	r3, sl, r3, fp
 8005924:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005928:	454f      	cmp	r7, r9
 800592a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800592e:	d805      	bhi.n	800593c <__multiply+0x124>
 8005930:	f8c8 3004 	str.w	r3, [r8, #4]
 8005934:	3504      	adds	r5, #4
 8005936:	e79b      	b.n	8005870 <__multiply+0x58>
 8005938:	46d4      	mov	ip, sl
 800593a:	e7b3      	b.n	80058a4 <__multiply+0x8c>
 800593c:	46e0      	mov	r8, ip
 800593e:	e7dd      	b.n	80058fc <__multiply+0xe4>
 8005940:	3e01      	subs	r6, #1
 8005942:	e799      	b.n	8005878 <__multiply+0x60>

08005944 <__pow5mult>:
 8005944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005948:	4615      	mov	r5, r2
 800594a:	f012 0203 	ands.w	r2, r2, #3
 800594e:	4606      	mov	r6, r0
 8005950:	460f      	mov	r7, r1
 8005952:	d007      	beq.n	8005964 <__pow5mult+0x20>
 8005954:	3a01      	subs	r2, #1
 8005956:	4c21      	ldr	r4, [pc, #132]	; (80059dc <__pow5mult+0x98>)
 8005958:	2300      	movs	r3, #0
 800595a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800595e:	f7ff fec9 	bl	80056f4 <__multadd>
 8005962:	4607      	mov	r7, r0
 8005964:	10ad      	asrs	r5, r5, #2
 8005966:	d035      	beq.n	80059d4 <__pow5mult+0x90>
 8005968:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800596a:	b93c      	cbnz	r4, 800597c <__pow5mult+0x38>
 800596c:	2010      	movs	r0, #16
 800596e:	f7ff fe63 	bl	8005638 <malloc>
 8005972:	6270      	str	r0, [r6, #36]	; 0x24
 8005974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005978:	6004      	str	r4, [r0, #0]
 800597a:	60c4      	str	r4, [r0, #12]
 800597c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005984:	b94c      	cbnz	r4, 800599a <__pow5mult+0x56>
 8005986:	f240 2171 	movw	r1, #625	; 0x271
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff ff3b 	bl	8005806 <__i2b>
 8005990:	2300      	movs	r3, #0
 8005992:	f8c8 0008 	str.w	r0, [r8, #8]
 8005996:	4604      	mov	r4, r0
 8005998:	6003      	str	r3, [r0, #0]
 800599a:	f04f 0800 	mov.w	r8, #0
 800599e:	07eb      	lsls	r3, r5, #31
 80059a0:	d50a      	bpl.n	80059b8 <__pow5mult+0x74>
 80059a2:	4639      	mov	r1, r7
 80059a4:	4622      	mov	r2, r4
 80059a6:	4630      	mov	r0, r6
 80059a8:	f7ff ff36 	bl	8005818 <__multiply>
 80059ac:	4639      	mov	r1, r7
 80059ae:	4681      	mov	r9, r0
 80059b0:	4630      	mov	r0, r6
 80059b2:	f7ff fe88 	bl	80056c6 <_Bfree>
 80059b6:	464f      	mov	r7, r9
 80059b8:	106d      	asrs	r5, r5, #1
 80059ba:	d00b      	beq.n	80059d4 <__pow5mult+0x90>
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	b938      	cbnz	r0, 80059d0 <__pow5mult+0x8c>
 80059c0:	4622      	mov	r2, r4
 80059c2:	4621      	mov	r1, r4
 80059c4:	4630      	mov	r0, r6
 80059c6:	f7ff ff27 	bl	8005818 <__multiply>
 80059ca:	6020      	str	r0, [r4, #0]
 80059cc:	f8c0 8000 	str.w	r8, [r0]
 80059d0:	4604      	mov	r4, r0
 80059d2:	e7e4      	b.n	800599e <__pow5mult+0x5a>
 80059d4:	4638      	mov	r0, r7
 80059d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059da:	bf00      	nop
 80059dc:	08006200 	.word	0x08006200

080059e0 <__lshift>:
 80059e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	460c      	mov	r4, r1
 80059e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	6849      	ldr	r1, [r1, #4]
 80059ee:	eb0a 0903 	add.w	r9, sl, r3
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	4607      	mov	r7, r0
 80059f6:	4616      	mov	r6, r2
 80059f8:	f109 0501 	add.w	r5, r9, #1
 80059fc:	42ab      	cmp	r3, r5
 80059fe:	db32      	blt.n	8005a66 <__lshift+0x86>
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff fe2c 	bl	800565e <_Balloc>
 8005a06:	2300      	movs	r3, #0
 8005a08:	4680      	mov	r8, r0
 8005a0a:	f100 0114 	add.w	r1, r0, #20
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4553      	cmp	r3, sl
 8005a12:	db2b      	blt.n	8005a6c <__lshift+0x8c>
 8005a14:	6920      	ldr	r0, [r4, #16]
 8005a16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a1a:	f104 0314 	add.w	r3, r4, #20
 8005a1e:	f016 021f 	ands.w	r2, r6, #31
 8005a22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a2a:	d025      	beq.n	8005a78 <__lshift+0x98>
 8005a2c:	f1c2 0e20 	rsb	lr, r2, #32
 8005a30:	2000      	movs	r0, #0
 8005a32:	681e      	ldr	r6, [r3, #0]
 8005a34:	468a      	mov	sl, r1
 8005a36:	4096      	lsls	r6, r2
 8005a38:	4330      	orrs	r0, r6
 8005a3a:	f84a 0b04 	str.w	r0, [sl], #4
 8005a3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a42:	459c      	cmp	ip, r3
 8005a44:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a48:	d814      	bhi.n	8005a74 <__lshift+0x94>
 8005a4a:	6048      	str	r0, [r1, #4]
 8005a4c:	b108      	cbz	r0, 8005a52 <__lshift+0x72>
 8005a4e:	f109 0502 	add.w	r5, r9, #2
 8005a52:	3d01      	subs	r5, #1
 8005a54:	4638      	mov	r0, r7
 8005a56:	f8c8 5010 	str.w	r5, [r8, #16]
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	f7ff fe33 	bl	80056c6 <_Bfree>
 8005a60:	4640      	mov	r0, r8
 8005a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a66:	3101      	adds	r1, #1
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	e7c7      	b.n	80059fc <__lshift+0x1c>
 8005a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a70:	3301      	adds	r3, #1
 8005a72:	e7cd      	b.n	8005a10 <__lshift+0x30>
 8005a74:	4651      	mov	r1, sl
 8005a76:	e7dc      	b.n	8005a32 <__lshift+0x52>
 8005a78:	3904      	subs	r1, #4
 8005a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a82:	459c      	cmp	ip, r3
 8005a84:	d8f9      	bhi.n	8005a7a <__lshift+0x9a>
 8005a86:	e7e4      	b.n	8005a52 <__lshift+0x72>

08005a88 <__mcmp>:
 8005a88:	6903      	ldr	r3, [r0, #16]
 8005a8a:	690a      	ldr	r2, [r1, #16]
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	b530      	push	{r4, r5, lr}
 8005a90:	d10c      	bne.n	8005aac <__mcmp+0x24>
 8005a92:	0092      	lsls	r2, r2, #2
 8005a94:	3014      	adds	r0, #20
 8005a96:	3114      	adds	r1, #20
 8005a98:	1884      	adds	r4, r0, r2
 8005a9a:	4411      	add	r1, r2
 8005a9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005aa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005aa4:	4295      	cmp	r5, r2
 8005aa6:	d003      	beq.n	8005ab0 <__mcmp+0x28>
 8005aa8:	d305      	bcc.n	8005ab6 <__mcmp+0x2e>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd30      	pop	{r4, r5, pc}
 8005ab0:	42a0      	cmp	r0, r4
 8005ab2:	d3f3      	bcc.n	8005a9c <__mcmp+0x14>
 8005ab4:	e7fa      	b.n	8005aac <__mcmp+0x24>
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	e7f7      	b.n	8005aac <__mcmp+0x24>

08005abc <__mdiff>:
 8005abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	460d      	mov	r5, r1
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	4614      	mov	r4, r2
 8005aca:	f7ff ffdd 	bl	8005a88 <__mcmp>
 8005ace:	1e06      	subs	r6, r0, #0
 8005ad0:	d108      	bne.n	8005ae4 <__mdiff+0x28>
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	f7ff fdc2 	bl	800565e <_Balloc>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae4:	bfa4      	itt	ge
 8005ae6:	4623      	movge	r3, r4
 8005ae8:	462c      	movge	r4, r5
 8005aea:	4638      	mov	r0, r7
 8005aec:	6861      	ldr	r1, [r4, #4]
 8005aee:	bfa6      	itte	ge
 8005af0:	461d      	movge	r5, r3
 8005af2:	2600      	movge	r6, #0
 8005af4:	2601      	movlt	r6, #1
 8005af6:	f7ff fdb2 	bl	800565e <_Balloc>
 8005afa:	692b      	ldr	r3, [r5, #16]
 8005afc:	60c6      	str	r6, [r0, #12]
 8005afe:	6926      	ldr	r6, [r4, #16]
 8005b00:	f105 0914 	add.w	r9, r5, #20
 8005b04:	f104 0214 	add.w	r2, r4, #20
 8005b08:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005b0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005b10:	f100 0514 	add.w	r5, r0, #20
 8005b14:	f04f 0e00 	mov.w	lr, #0
 8005b18:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b1c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b20:	fa1e f18a 	uxtah	r1, lr, sl
 8005b24:	b2a3      	uxth	r3, r4
 8005b26:	1ac9      	subs	r1, r1, r3
 8005b28:	0c23      	lsrs	r3, r4, #16
 8005b2a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005b2e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b32:	b289      	uxth	r1, r1
 8005b34:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005b38:	45c8      	cmp	r8, r9
 8005b3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005b3e:	4694      	mov	ip, r2
 8005b40:	f845 3b04 	str.w	r3, [r5], #4
 8005b44:	d8e8      	bhi.n	8005b18 <__mdiff+0x5c>
 8005b46:	45bc      	cmp	ip, r7
 8005b48:	d304      	bcc.n	8005b54 <__mdiff+0x98>
 8005b4a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005b4e:	b183      	cbz	r3, 8005b72 <__mdiff+0xb6>
 8005b50:	6106      	str	r6, [r0, #16]
 8005b52:	e7c5      	b.n	8005ae0 <__mdiff+0x24>
 8005b54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005b58:	fa1e f381 	uxtah	r3, lr, r1
 8005b5c:	141a      	asrs	r2, r3, #16
 8005b5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b68:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005b6c:	f845 3b04 	str.w	r3, [r5], #4
 8005b70:	e7e9      	b.n	8005b46 <__mdiff+0x8a>
 8005b72:	3e01      	subs	r6, #1
 8005b74:	e7e9      	b.n	8005b4a <__mdiff+0x8e>

08005b76 <__d2b>:
 8005b76:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b7a:	460e      	mov	r6, r1
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	ec59 8b10 	vmov	r8, r9, d0
 8005b82:	4615      	mov	r5, r2
 8005b84:	f7ff fd6b 	bl	800565e <_Balloc>
 8005b88:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b92:	bb34      	cbnz	r4, 8005be2 <__d2b+0x6c>
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	f1b8 0300 	subs.w	r3, r8, #0
 8005b9a:	d027      	beq.n	8005bec <__d2b+0x76>
 8005b9c:	a802      	add	r0, sp, #8
 8005b9e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005ba2:	f7ff fe01 	bl	80057a8 <__lo0bits>
 8005ba6:	9900      	ldr	r1, [sp, #0]
 8005ba8:	b1f0      	cbz	r0, 8005be8 <__d2b+0x72>
 8005baa:	9a01      	ldr	r2, [sp, #4]
 8005bac:	f1c0 0320 	rsb	r3, r0, #32
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	40c2      	lsrs	r2, r0
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	9201      	str	r2, [sp, #4]
 8005bbc:	9b01      	ldr	r3, [sp, #4]
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bf14      	ite	ne
 8005bc4:	2102      	movne	r1, #2
 8005bc6:	2101      	moveq	r1, #1
 8005bc8:	6139      	str	r1, [r7, #16]
 8005bca:	b1c4      	cbz	r4, 8005bfe <__d2b+0x88>
 8005bcc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005bd0:	4404      	add	r4, r0
 8005bd2:	6034      	str	r4, [r6, #0]
 8005bd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005bd8:	6028      	str	r0, [r5, #0]
 8005bda:	4638      	mov	r0, r7
 8005bdc:	b003      	add	sp, #12
 8005bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be6:	e7d5      	b.n	8005b94 <__d2b+0x1e>
 8005be8:	6179      	str	r1, [r7, #20]
 8005bea:	e7e7      	b.n	8005bbc <__d2b+0x46>
 8005bec:	a801      	add	r0, sp, #4
 8005bee:	f7ff fddb 	bl	80057a8 <__lo0bits>
 8005bf2:	9b01      	ldr	r3, [sp, #4]
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	6139      	str	r1, [r7, #16]
 8005bfa:	3020      	adds	r0, #32
 8005bfc:	e7e5      	b.n	8005bca <__d2b+0x54>
 8005bfe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c06:	6030      	str	r0, [r6, #0]
 8005c08:	6918      	ldr	r0, [r3, #16]
 8005c0a:	f7ff fdae 	bl	800576a <__hi0bits>
 8005c0e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c12:	e7e1      	b.n	8005bd8 <__d2b+0x62>

08005c14 <_calloc_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	fb02 f401 	mul.w	r4, r2, r1
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	f000 f856 	bl	8005ccc <_malloc_r>
 8005c20:	4605      	mov	r5, r0
 8005c22:	b118      	cbz	r0, 8005c2c <_calloc_r+0x18>
 8005c24:	4622      	mov	r2, r4
 8005c26:	2100      	movs	r1, #0
 8005c28:	f7fe f809 	bl	8003c3e <memset>
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}

08005c30 <_free_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4605      	mov	r5, r0
 8005c34:	2900      	cmp	r1, #0
 8005c36:	d045      	beq.n	8005cc4 <_free_r+0x94>
 8005c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3c:	1f0c      	subs	r4, r1, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bfb8      	it	lt
 8005c42:	18e4      	addlt	r4, r4, r3
 8005c44:	f000 f958 	bl	8005ef8 <__malloc_lock>
 8005c48:	4a1f      	ldr	r2, [pc, #124]	; (8005cc8 <_free_r+0x98>)
 8005c4a:	6813      	ldr	r3, [r2, #0]
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	b933      	cbnz	r3, 8005c5e <_free_r+0x2e>
 8005c50:	6063      	str	r3, [r4, #4]
 8005c52:	6014      	str	r4, [r2, #0]
 8005c54:	4628      	mov	r0, r5
 8005c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c5a:	f000 b94e 	b.w	8005efa <__malloc_unlock>
 8005c5e:	42a3      	cmp	r3, r4
 8005c60:	d90c      	bls.n	8005c7c <_free_r+0x4c>
 8005c62:	6821      	ldr	r1, [r4, #0]
 8005c64:	1862      	adds	r2, r4, r1
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bf04      	itt	eq
 8005c6a:	681a      	ldreq	r2, [r3, #0]
 8005c6c:	685b      	ldreq	r3, [r3, #4]
 8005c6e:	6063      	str	r3, [r4, #4]
 8005c70:	bf04      	itt	eq
 8005c72:	1852      	addeq	r2, r2, r1
 8005c74:	6022      	streq	r2, [r4, #0]
 8005c76:	6004      	str	r4, [r0, #0]
 8005c78:	e7ec      	b.n	8005c54 <_free_r+0x24>
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	b10a      	cbz	r2, 8005c84 <_free_r+0x54>
 8005c80:	42a2      	cmp	r2, r4
 8005c82:	d9fa      	bls.n	8005c7a <_free_r+0x4a>
 8005c84:	6819      	ldr	r1, [r3, #0]
 8005c86:	1858      	adds	r0, r3, r1
 8005c88:	42a0      	cmp	r0, r4
 8005c8a:	d10b      	bne.n	8005ca4 <_free_r+0x74>
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	4401      	add	r1, r0
 8005c90:	1858      	adds	r0, r3, r1
 8005c92:	4282      	cmp	r2, r0
 8005c94:	6019      	str	r1, [r3, #0]
 8005c96:	d1dd      	bne.n	8005c54 <_free_r+0x24>
 8005c98:	6810      	ldr	r0, [r2, #0]
 8005c9a:	6852      	ldr	r2, [r2, #4]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	4401      	add	r1, r0
 8005ca0:	6019      	str	r1, [r3, #0]
 8005ca2:	e7d7      	b.n	8005c54 <_free_r+0x24>
 8005ca4:	d902      	bls.n	8005cac <_free_r+0x7c>
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	602b      	str	r3, [r5, #0]
 8005caa:	e7d3      	b.n	8005c54 <_free_r+0x24>
 8005cac:	6820      	ldr	r0, [r4, #0]
 8005cae:	1821      	adds	r1, r4, r0
 8005cb0:	428a      	cmp	r2, r1
 8005cb2:	bf04      	itt	eq
 8005cb4:	6811      	ldreq	r1, [r2, #0]
 8005cb6:	6852      	ldreq	r2, [r2, #4]
 8005cb8:	6062      	str	r2, [r4, #4]
 8005cba:	bf04      	itt	eq
 8005cbc:	1809      	addeq	r1, r1, r0
 8005cbe:	6021      	streq	r1, [r4, #0]
 8005cc0:	605c      	str	r4, [r3, #4]
 8005cc2:	e7c7      	b.n	8005c54 <_free_r+0x24>
 8005cc4:	bd38      	pop	{r3, r4, r5, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000304 	.word	0x20000304

08005ccc <_malloc_r>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	1ccd      	adds	r5, r1, #3
 8005cd0:	f025 0503 	bic.w	r5, r5, #3
 8005cd4:	3508      	adds	r5, #8
 8005cd6:	2d0c      	cmp	r5, #12
 8005cd8:	bf38      	it	cc
 8005cda:	250c      	movcc	r5, #12
 8005cdc:	2d00      	cmp	r5, #0
 8005cde:	4606      	mov	r6, r0
 8005ce0:	db01      	blt.n	8005ce6 <_malloc_r+0x1a>
 8005ce2:	42a9      	cmp	r1, r5
 8005ce4:	d903      	bls.n	8005cee <_malloc_r+0x22>
 8005ce6:	230c      	movs	r3, #12
 8005ce8:	6033      	str	r3, [r6, #0]
 8005cea:	2000      	movs	r0, #0
 8005cec:	bd70      	pop	{r4, r5, r6, pc}
 8005cee:	f000 f903 	bl	8005ef8 <__malloc_lock>
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <_malloc_r+0xac>)
 8005cf4:	6814      	ldr	r4, [r2, #0]
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	b991      	cbnz	r1, 8005d20 <_malloc_r+0x54>
 8005cfa:	4c20      	ldr	r4, [pc, #128]	; (8005d7c <_malloc_r+0xb0>)
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	b91b      	cbnz	r3, 8005d08 <_malloc_r+0x3c>
 8005d00:	4630      	mov	r0, r6
 8005d02:	f000 f83d 	bl	8005d80 <_sbrk_r>
 8005d06:	6020      	str	r0, [r4, #0]
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f000 f838 	bl	8005d80 <_sbrk_r>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d124      	bne.n	8005d5e <_malloc_r+0x92>
 8005d14:	230c      	movs	r3, #12
 8005d16:	6033      	str	r3, [r6, #0]
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f8ee 	bl	8005efa <__malloc_unlock>
 8005d1e:	e7e4      	b.n	8005cea <_malloc_r+0x1e>
 8005d20:	680b      	ldr	r3, [r1, #0]
 8005d22:	1b5b      	subs	r3, r3, r5
 8005d24:	d418      	bmi.n	8005d58 <_malloc_r+0x8c>
 8005d26:	2b0b      	cmp	r3, #11
 8005d28:	d90f      	bls.n	8005d4a <_malloc_r+0x7e>
 8005d2a:	600b      	str	r3, [r1, #0]
 8005d2c:	50cd      	str	r5, [r1, r3]
 8005d2e:	18cc      	adds	r4, r1, r3
 8005d30:	4630      	mov	r0, r6
 8005d32:	f000 f8e2 	bl	8005efa <__malloc_unlock>
 8005d36:	f104 000b 	add.w	r0, r4, #11
 8005d3a:	1d23      	adds	r3, r4, #4
 8005d3c:	f020 0007 	bic.w	r0, r0, #7
 8005d40:	1ac3      	subs	r3, r0, r3
 8005d42:	d0d3      	beq.n	8005cec <_malloc_r+0x20>
 8005d44:	425a      	negs	r2, r3
 8005d46:	50e2      	str	r2, [r4, r3]
 8005d48:	e7d0      	b.n	8005cec <_malloc_r+0x20>
 8005d4a:	428c      	cmp	r4, r1
 8005d4c:	684b      	ldr	r3, [r1, #4]
 8005d4e:	bf16      	itet	ne
 8005d50:	6063      	strne	r3, [r4, #4]
 8005d52:	6013      	streq	r3, [r2, #0]
 8005d54:	460c      	movne	r4, r1
 8005d56:	e7eb      	b.n	8005d30 <_malloc_r+0x64>
 8005d58:	460c      	mov	r4, r1
 8005d5a:	6849      	ldr	r1, [r1, #4]
 8005d5c:	e7cc      	b.n	8005cf8 <_malloc_r+0x2c>
 8005d5e:	1cc4      	adds	r4, r0, #3
 8005d60:	f024 0403 	bic.w	r4, r4, #3
 8005d64:	42a0      	cmp	r0, r4
 8005d66:	d005      	beq.n	8005d74 <_malloc_r+0xa8>
 8005d68:	1a21      	subs	r1, r4, r0
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f000 f808 	bl	8005d80 <_sbrk_r>
 8005d70:	3001      	adds	r0, #1
 8005d72:	d0cf      	beq.n	8005d14 <_malloc_r+0x48>
 8005d74:	6025      	str	r5, [r4, #0]
 8005d76:	e7db      	b.n	8005d30 <_malloc_r+0x64>
 8005d78:	20000304 	.word	0x20000304
 8005d7c:	20000308 	.word	0x20000308

08005d80 <_sbrk_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4c06      	ldr	r4, [pc, #24]	; (8005d9c <_sbrk_r+0x1c>)
 8005d84:	2300      	movs	r3, #0
 8005d86:	4605      	mov	r5, r0
 8005d88:	4608      	mov	r0, r1
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	f7fb f9fa 	bl	8001184 <_sbrk>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d102      	bne.n	8005d9a <_sbrk_r+0x1a>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	b103      	cbz	r3, 8005d9a <_sbrk_r+0x1a>
 8005d98:	602b      	str	r3, [r5, #0]
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	200003b0 	.word	0x200003b0

08005da0 <__sread>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	460c      	mov	r4, r1
 8005da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da8:	f000 f8a8 	bl	8005efc <_read_r>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	bfab      	itete	ge
 8005db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005db2:	89a3      	ldrhlt	r3, [r4, #12]
 8005db4:	181b      	addge	r3, r3, r0
 8005db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dba:	bfac      	ite	ge
 8005dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dbe:	81a3      	strhlt	r3, [r4, #12]
 8005dc0:	bd10      	pop	{r4, pc}

08005dc2 <__swrite>:
 8005dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc6:	461f      	mov	r7, r3
 8005dc8:	898b      	ldrh	r3, [r1, #12]
 8005dca:	05db      	lsls	r3, r3, #23
 8005dcc:	4605      	mov	r5, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	d505      	bpl.n	8005de0 <__swrite+0x1e>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	f000 f868 	bl	8005eb0 <_lseek_r>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	4632      	mov	r2, r6
 8005dee:	463b      	mov	r3, r7
 8005df0:	4628      	mov	r0, r5
 8005df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005df6:	f000 b817 	b.w	8005e28 <_write_r>

08005dfa <__sseek>:
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e02:	f000 f855 	bl	8005eb0 <_lseek_r>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	bf15      	itete	ne
 8005e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e16:	81a3      	strheq	r3, [r4, #12]
 8005e18:	bf18      	it	ne
 8005e1a:	81a3      	strhne	r3, [r4, #12]
 8005e1c:	bd10      	pop	{r4, pc}

08005e1e <__sclose>:
 8005e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e22:	f000 b813 	b.w	8005e4c <_close_r>
	...

08005e28 <_write_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4c07      	ldr	r4, [pc, #28]	; (8005e48 <_write_r+0x20>)
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	4608      	mov	r0, r1
 8005e30:	4611      	mov	r1, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	6022      	str	r2, [r4, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f7fb f953 	bl	80010e2 <_write>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_write_r+0x1e>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_write_r+0x1e>
 8005e44:	602b      	str	r3, [r5, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	200003b0 	.word	0x200003b0

08005e4c <_close_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4c06      	ldr	r4, [pc, #24]	; (8005e68 <_close_r+0x1c>)
 8005e50:	2300      	movs	r3, #0
 8005e52:	4605      	mov	r5, r0
 8005e54:	4608      	mov	r0, r1
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	f7fb f95f 	bl	800111a <_close>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	d102      	bne.n	8005e66 <_close_r+0x1a>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	b103      	cbz	r3, 8005e66 <_close_r+0x1a>
 8005e64:	602b      	str	r3, [r5, #0]
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
 8005e68:	200003b0 	.word	0x200003b0

08005e6c <_fstat_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	4c07      	ldr	r4, [pc, #28]	; (8005e8c <_fstat_r+0x20>)
 8005e70:	2300      	movs	r3, #0
 8005e72:	4605      	mov	r5, r0
 8005e74:	4608      	mov	r0, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	f7fb f95a 	bl	8001132 <_fstat>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d102      	bne.n	8005e88 <_fstat_r+0x1c>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	b103      	cbz	r3, 8005e88 <_fstat_r+0x1c>
 8005e86:	602b      	str	r3, [r5, #0]
 8005e88:	bd38      	pop	{r3, r4, r5, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200003b0 	.word	0x200003b0

08005e90 <_isatty_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4c06      	ldr	r4, [pc, #24]	; (8005eac <_isatty_r+0x1c>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	4605      	mov	r5, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	f7fb f959 	bl	8001152 <_isatty>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_isatty_r+0x1a>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_isatty_r+0x1a>
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	200003b0 	.word	0x200003b0

08005eb0 <_lseek_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4c07      	ldr	r4, [pc, #28]	; (8005ed0 <_lseek_r+0x20>)
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	4611      	mov	r1, r2
 8005eba:	2200      	movs	r2, #0
 8005ebc:	6022      	str	r2, [r4, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f7fb f952 	bl	8001168 <_lseek>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_lseek_r+0x1e>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_lseek_r+0x1e>
 8005ecc:	602b      	str	r3, [r5, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	200003b0 	.word	0x200003b0

08005ed4 <__ascii_mbtowc>:
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	b901      	cbnz	r1, 8005eda <__ascii_mbtowc+0x6>
 8005ed8:	a901      	add	r1, sp, #4
 8005eda:	b142      	cbz	r2, 8005eee <__ascii_mbtowc+0x1a>
 8005edc:	b14b      	cbz	r3, 8005ef2 <__ascii_mbtowc+0x1e>
 8005ede:	7813      	ldrb	r3, [r2, #0]
 8005ee0:	600b      	str	r3, [r1, #0]
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	1c10      	adds	r0, r2, #0
 8005ee6:	bf18      	it	ne
 8005ee8:	2001      	movne	r0, #1
 8005eea:	b002      	add	sp, #8
 8005eec:	4770      	bx	lr
 8005eee:	4610      	mov	r0, r2
 8005ef0:	e7fb      	b.n	8005eea <__ascii_mbtowc+0x16>
 8005ef2:	f06f 0001 	mvn.w	r0, #1
 8005ef6:	e7f8      	b.n	8005eea <__ascii_mbtowc+0x16>

08005ef8 <__malloc_lock>:
 8005ef8:	4770      	bx	lr

08005efa <__malloc_unlock>:
 8005efa:	4770      	bx	lr

08005efc <_read_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4c07      	ldr	r4, [pc, #28]	; (8005f1c <_read_r+0x20>)
 8005f00:	4605      	mov	r5, r0
 8005f02:	4608      	mov	r0, r1
 8005f04:	4611      	mov	r1, r2
 8005f06:	2200      	movs	r2, #0
 8005f08:	6022      	str	r2, [r4, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f7fb f8cc 	bl	80010a8 <_read>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_read_r+0x1e>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_read_r+0x1e>
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	200003b0 	.word	0x200003b0

08005f20 <__ascii_wctomb>:
 8005f20:	b149      	cbz	r1, 8005f36 <__ascii_wctomb+0x16>
 8005f22:	2aff      	cmp	r2, #255	; 0xff
 8005f24:	bf85      	ittet	hi
 8005f26:	238a      	movhi	r3, #138	; 0x8a
 8005f28:	6003      	strhi	r3, [r0, #0]
 8005f2a:	700a      	strbls	r2, [r1, #0]
 8005f2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f30:	bf98      	it	ls
 8005f32:	2001      	movls	r0, #1
 8005f34:	4770      	bx	lr
 8005f36:	4608      	mov	r0, r1
 8005f38:	4770      	bx	lr
	...

08005f3c <_init>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	bf00      	nop
 8005f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f42:	bc08      	pop	{r3}
 8005f44:	469e      	mov	lr, r3
 8005f46:	4770      	bx	lr

08005f48 <_fini>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	bf00      	nop
 8005f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4e:	bc08      	pop	{r3}
 8005f50:	469e      	mov	lr, r3
 8005f52:	4770      	bx	lr
