
USB Host.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6a0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002af10  0800d828  0800d828  0001d828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08038738  08038738  00050200  2**0
                  CONTENTS
  4 .ARM          00000008  08038738  08038738  00048738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08038740  08038740  00050200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08038740  08038740  00048740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08038744  08038744  00048744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08038748  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  20000200  08038948  00050200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000126c  08038948  0005126c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000228a2  00000000  00000000  00050230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004753  00000000  00000000  00072ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  00077228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  00078308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000258a9  00000000  00000000  000791f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016ebb  00000000  00000000  0009ea99  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c79fc  00000000  00000000  000b5954  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c70  00000000  00000000  0017d3cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  0018203c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000200 	.word	0x20000200
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d810 	.word	0x0800d810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000204 	.word	0x20000204
 80001c4:	0800d810 	.word	0x0800d810

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_DMA_Init+0x3c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <MX_DMA_Init+0x3c>)
 8000e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_DMA_Init+0x3c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	203a      	movs	r0, #58	; 0x3a
 8000e28:	f000 fc39 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e2c:	203a      	movs	r0, #58	; 0x3a
 8000e2e:	f000 fc52 	bl	80016d6 <HAL_NVIC_EnableIRQ>

}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a11      	ldr	r2, [pc, #68]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PWR_GPIO_Port, USB_PWR_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_GPIO_Init+0xa0>)
 8000eb2:	f001 f8cf 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PWR_Pin;
 8000eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_PWR_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_GPIO_Init+0xa0>)
 8000ed0:	f000 ff26 	bl	8001d20 <HAL_GPIO_Init>

}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <MSC_Application>:
FATFS USBDISKFatFs; /* File system object for USB disk logical drive */
char USBH_Path[4] = "./";  /* USBH logical drive path */
FIL MyFile;         /* File object */

static void MSC_Application(void)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0
  FRESULT res; /* FatFs function common result code */
  uint32_t byteswritten; /* File write/read counts */
  uint8_t wtext[] = "The site is STM32cube.com working with FatFs"; /* File write buffer */
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MSC_Application+0x80>)
 8000eec:	463c      	mov	r4, r7
 8000eee:	461d      	mov	r5, r3
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000efc:	c407      	stmia	r4!, {r0, r1, r2}
 8000efe:	7023      	strb	r3, [r4, #0]
//  uint8_t rtext[100]; /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBH_Path, 0) != FR_OK)
 8000f00:	2200      	movs	r2, #0
 8000f02:	4919      	ldr	r1, [pc, #100]	; (8000f68 <MSC_Application+0x84>)
 8000f04:	4819      	ldr	r0, [pc, #100]	; (8000f6c <MSC_Application+0x88>)
 8000f06:	f009 fdab 	bl	800aa60 <f_mount>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <MSC_Application+0x32>
  {
	/* FatFs Initialization Error */
	Error_Handler();
 8000f10:	f000 f8ce 	bl	80010b0 <Error_Handler>
		/* Close the open text file */
		f_close(&MyFile);
	  }
    }
  }
}
 8000f14:	e021      	b.n	8000f5a <MSC_Application+0x76>
	if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000f16:	220a      	movs	r2, #10
 8000f18:	4915      	ldr	r1, [pc, #84]	; (8000f70 <MSC_Application+0x8c>)
 8000f1a:	4816      	ldr	r0, [pc, #88]	; (8000f74 <MSC_Application+0x90>)
 8000f1c:	f009 fde6 	bl	800aaec <f_open>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <MSC_Application+0x48>
	  Error_Handler();
 8000f26:	f000 f8c3 	bl	80010b0 <Error_Handler>
}
 8000f2a:	e016      	b.n	8000f5a <MSC_Application+0x76>
	  res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8000f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f30:	4639      	mov	r1, r7
 8000f32:	222d      	movs	r2, #45	; 0x2d
 8000f34:	480f      	ldr	r0, [pc, #60]	; (8000f74 <MSC_Application+0x90>)
 8000f36:	f00a f823 	bl	800af80 <f_write>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if((byteswritten == 0) || (res != FR_OK))
 8000f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <MSC_Application+0x6a>
 8000f46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <MSC_Application+0x70>
		Error_Handler();
 8000f4e:	f000 f8af 	bl	80010b0 <Error_Handler>
}
 8000f52:	e002      	b.n	8000f5a <MSC_Application+0x76>
		f_close(&MyFile);
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <MSC_Application+0x90>)
 8000f56:	f00a fa06 	bl	800b366 <f_close>
}
 8000f5a:	bf00      	nop
 8000f5c:	3738      	adds	r7, #56	; 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bdb0      	pop	{r4, r5, r7, pc}
 8000f62:	bf00      	nop
 8000f64:	0800d834 	.word	0x0800d834
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000494 	.word	0x20000494
 8000f70:	0800d828 	.word	0x0800d828
 8000f74:	20000264 	.word	0x20000264

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f000 fa20 	bl	80013c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f82c 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f7ff ff5c 	bl	8000e40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f88:	f7ff ff3a 	bl	8000e00 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f8c:	f000 f942 	bl	8001214 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f90:	f004 fcf0 	bl	8005974 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000f94:	f00a fb58 	bl	800b648 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(USB_PWR_GPIO_Port, USB_PWR_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <main+0x58>)
 8000fa0:	f001 f858 	bl	8002054 <HAL_GPIO_WritePin>

  extern ApplicationTypeDef Appli_state;

  while (1)
  {
    switch(Appli_state)
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <main+0x5c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d002      	beq.n	8000fb2 <main+0x3a>
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d006      	beq.n	8000fbe <main+0x46>
    case APPLICATION_DISCONNECT:
      f_mount(NULL, (TCHAR const*)"", 0);
    break;

    default:
    break;
 8000fb0:	e00b      	b.n	8000fca <main+0x52>
      MSC_Application();
 8000fb2:	f7ff ff97 	bl	8000ee4 <MSC_Application>
      Appli_state = APPLICATION_DISCONNECT;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <main+0x5c>)
 8000fb8:	2203      	movs	r2, #3
 8000fba:	701a      	strb	r2, [r3, #0]
    break;
 8000fbc:	e005      	b.n	8000fca <main+0x52>
      f_mount(NULL, (TCHAR const*)"", 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4905      	ldr	r1, [pc, #20]	; (8000fd8 <main+0x60>)
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f009 fd4c 	bl	800aa60 <f_mount>
    break;
 8000fc8:	bf00      	nop
    }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000fca:	f00a fb63 	bl	800b694 <MX_USB_HOST_Process>
    switch(Appli_state)
 8000fce:	e7e9      	b.n	8000fa4 <main+0x2c>
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	20000254 	.word	0x20000254
 8000fd8:	0800d864 	.word	0x0800d864

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	; 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00a fe99 	bl	800bd22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <SystemClock_Config+0xcc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <SystemClock_Config+0xcc>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <SystemClock_Config+0xcc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <SystemClock_Config+0xd0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <SystemClock_Config+0xd0>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <SystemClock_Config+0xd0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001046:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001050:	23a8      	movs	r3, #168	; 0xa8
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001058:	2307      	movs	r3, #7
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fc77 	bl	8003954 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800106c:	f000 f820 	bl	80010b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2105      	movs	r1, #5
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fea2 	bl	8003dd8 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800109a:	f000 f809 	bl	80010b0 <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	; 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_MspInit+0x4c>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_MspInit+0x4c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <MemManage_Handler+0x4>

0800112a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <UsageFault_Handler+0x4>

08001136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001164:	f000 f97e 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <USART1_IRQHandler+0x10>)
 8001172:	f003 f86d 	bl	8004250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000728 	.word	0x20000728

08001180 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <DMA2_Stream2_IRQHandler+0x10>)
 8001186:	f000 fb91 	bl	80018ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200006c8 	.word	0x200006c8

08001194 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <OTG_FS_IRQHandler+0x10>)
 800119a:	f001 f9f9 	bl	8002590 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000fa4 	.word	0x20000fa4

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <SystemInit+0x60>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <SystemInit+0x60>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <SystemInit+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <SystemInit+0x64>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <SystemInit+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <SystemInit+0x64>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <SystemInit+0x64>)
 80011d4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <SystemInit+0x64>)
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <SystemInit+0x68>)
 80011e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <SystemInit+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a08      	ldr	r2, [pc, #32]	; (800120c <SystemInit+0x64>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SystemInit+0x60>)
 80011f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fc:	609a      	str	r2, [r3, #8]
#endif
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	40023800 	.word	0x40023800
 8001210:	24003010 	.word	0x24003010

08001214 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_USART1_UART_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 800124c:	f002 ffb2 	bl	80041b4 <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001256:	f7ff ff2b 	bl	80010b0 <Error_Handler>
  }

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000728 	.word	0x20000728
 8001264:	40011000 	.word	0x40011000

08001268 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <HAL_UART_MspInit+0xf0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d162      	bne.n	8001350 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <HAL_UART_MspInit+0xf4>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a32      	ldr	r2, [pc, #200]	; (800135c <HAL_UART_MspInit+0xf4>)
 8001294:	f043 0310 	orr.w	r3, r3, #16
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_UART_MspInit+0xf4>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_UART_MspInit+0xf4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a2b      	ldr	r2, [pc, #172]	; (800135c <HAL_UART_MspInit+0xf4>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_UART_MspInit+0xf4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d4:	2307      	movs	r3, #7
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4820      	ldr	r0, [pc, #128]	; (8001360 <HAL_UART_MspInit+0xf8>)
 80012e0:	f000 fd1e 	bl	8001d20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <HAL_UART_MspInit+0xfc>)
 80012e6:	4a20      	ldr	r2, [pc, #128]	; (8001368 <HAL_UART_MspInit+0x100>)
 80012e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HAL_UART_MspInit+0xfc>)
 80012ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_UART_MspInit+0xfc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_UART_MspInit+0xfc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001304:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_UART_MspInit+0xfc>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_UART_MspInit+0xfc>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001326:	f000 f9f1 	bl	800170c <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001330:	f7ff febe 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001338:	635a      	str	r2, [r3, #52]	; 0x34
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_UART_MspInit+0xfc>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2025      	movs	r0, #37	; 0x25
 8001346:	f000 f9aa 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800134a:	2025      	movs	r0, #37	; 0x25
 800134c:	f000 f9c3 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	200006c8 	.word	0x200006c8
 8001368:	40026440 	.word	0x40026440

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001370:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001372:	e003      	b.n	800137c <LoopCopyDataInit>

08001374 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001376:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001378:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800137a:	3104      	adds	r1, #4

0800137c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001380:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001382:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001384:	d3f6      	bcc.n	8001374 <CopyDataInit>
  ldr  r2, =_sbss
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001388:	e002      	b.n	8001390 <LoopFillZerobss>

0800138a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800138a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800138c:	f842 3b04 	str.w	r3, [r2], #4

08001390 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001392:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001394:	d3f9      	bcc.n	800138a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001396:	f7ff ff07 	bl	80011a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139a:	f00a fc83 	bl	800bca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139e:	f7ff fdeb 	bl	8000f78 <main>
  bx  lr    
 80013a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013a8:	08038748 	.word	0x08038748
  ldr  r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013b0:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 80013b4:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 80013b8:	2000126c 	.word	0x2000126c

080013bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC_IRQHandler>
	...

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <HAL_Init+0x40>)
 80013ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_Init+0x40>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_Init+0x40>)
 80013e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f94d 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff fe64 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023c00 	.word	0x40023c00

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f965 	bl	80016f2 <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f92d 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000004 	.word	0x20000004
 800145c:	2000000c 	.word	0x2000000c
 8001460:	20000008 	.word	0x20000008

08001464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x20>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x24>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_IncTick+0x24>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2000000c 	.word	0x2000000c
 8001488:	20000768 	.word	0x20000768

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_GetTick+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000768 	.word	0x20000768

080014a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff ffee 	bl	800148c <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014bc:	d005      	beq.n	80014ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_Delay+0x40>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ca:	bf00      	nop
 80014cc:	f7ff ffde 	bl	800148c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8f7      	bhi.n	80014cc <HAL_Delay+0x28>
  {
  }
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000000c 	.word	0x2000000c

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	; (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff feb8 	bl	800148c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e099      	b.n	800185c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001748:	e00f      	b.n	800176a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174a:	f7ff fe9f 	bl	800148c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b05      	cmp	r3, #5
 8001756:	d908      	bls.n	800176a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2220      	movs	r2, #32
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e078      	b.n	800185c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1e8      	bne.n	800174a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_DMA_Init+0x158>)
 8001784:	4013      	ands	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001796:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d107      	bne.n	80017d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	4313      	orrs	r3, r2
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f023 0307 	bic.w	r3, r3, #7
 80017ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d117      	bne.n	800182e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00e      	beq.n	800182e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fa0b 	bl	8001c2c <DMA_CheckFifoParam>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800182a:	2301      	movs	r3, #1
 800182c:	e016      	b.n	800185c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f9c2 	bl	8001bc0 <DMA_CalcBaseAndBitshift>
 800183c:	4603      	mov	r3, r0
 800183e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	223f      	movs	r2, #63	; 0x3f
 8001846:	409a      	lsls	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	f010803f 	.word	0xf010803f

08001868 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d004      	beq.n	8001886 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00c      	b.n	80018a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2205      	movs	r2, #5
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018b8:	4b92      	ldr	r3, [pc, #584]	; (8001b04 <HAL_DMA_IRQHandler+0x258>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a92      	ldr	r2, [pc, #584]	; (8001b08 <HAL_DMA_IRQHandler+0x25c>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0a9b      	lsrs	r3, r3, #10
 80018c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	2208      	movs	r2, #8
 80018d8:	409a      	lsls	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4013      	ands	r3, r2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d01a      	beq.n	8001918 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0204 	bic.w	r2, r2, #4
 80018fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001904:	2208      	movs	r2, #8
 8001906:	409a      	lsls	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191c:	2201      	movs	r2, #1
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d012      	beq.n	800194e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	2201      	movs	r2, #1
 800193c:	409a      	lsls	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001946:	f043 0202 	orr.w	r2, r3, #2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	2204      	movs	r2, #4
 8001954:	409a      	lsls	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d012      	beq.n	8001984 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00b      	beq.n	8001984 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	2204      	movs	r2, #4
 8001972:	409a      	lsls	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f043 0204 	orr.w	r2, r3, #4
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001988:	2210      	movs	r2, #16
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d043      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d03c      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a6:	2210      	movs	r2, #16
 80019a8:	409a      	lsls	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d018      	beq.n	80019ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d108      	bne.n	80019dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d024      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
 80019da:	e01f      	b.n	8001a1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01b      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
 80019ec:	e016      	b.n	8001a1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d107      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0208 	bic.w	r2, r2, #8
 8001a0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	2220      	movs	r2, #32
 8001a22:	409a      	lsls	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 808e 	beq.w	8001b4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8086 	beq.w	8001b4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2220      	movs	r2, #32
 8001a44:	409a      	lsls	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d136      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0216 	bic.w	r2, r2, #22
 8001a64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d103      	bne.n	8001a86 <HAL_DMA_IRQHandler+0x1da>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0208 	bic.w	r2, r2, #8
 8001a94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	223f      	movs	r2, #63	; 0x3f
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d07d      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
        }
        return;
 8001ac2:	e078      	b.n	8001bb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d01c      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d108      	bne.n	8001af2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d030      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
 8001af0:	e02b      	b.n	8001b4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d027      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
 8001b02:	e022      	b.n	8001b4a <HAL_DMA_IRQHandler+0x29e>
 8001b04:	20000004 	.word	0x20000004
 8001b08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10f      	bne.n	8001b3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0210 	bic.w	r2, r2, #16
 8001b28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d032      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d022      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2205      	movs	r2, #5
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d307      	bcc.n	8001b92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f2      	bne.n	8001b76 <HAL_DMA_IRQHandler+0x2ca>
 8001b90:	e000      	b.n	8001b94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
 8001bb4:	e000      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bb6:	bf00      	nop
    }
  }
}
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop

08001bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3b10      	subs	r3, #16
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <DMA_CalcBaseAndBitshift+0x64>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <DMA_CalcBaseAndBitshift+0x68>)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d909      	bls.n	8001c02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bf6:	f023 0303 	bic.w	r3, r3, #3
 8001bfa:	1d1a      	adds	r2, r3, #4
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	659a      	str	r2, [r3, #88]	; 0x58
 8001c00:	e007      	b.n	8001c12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c0a:	f023 0303 	bic.w	r3, r3, #3
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	aaaaaaab 	.word	0xaaaaaaab
 8001c28:	0800d8cc 	.word	0x0800d8cc

08001c2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d11f      	bne.n	8001c86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d855      	bhi.n	8001cf8 <DMA_CheckFifoParam+0xcc>
 8001c4c:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <DMA_CheckFifoParam+0x28>)
 8001c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c52:	bf00      	nop
 8001c54:	08001c65 	.word	0x08001c65
 8001c58:	08001c77 	.word	0x08001c77
 8001c5c:	08001c65 	.word	0x08001c65
 8001c60:	08001cf9 	.word	0x08001cf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d045      	beq.n	8001cfc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c74:	e042      	b.n	8001cfc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c7e:	d13f      	bne.n	8001d00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c84:	e03c      	b.n	8001d00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c8e:	d121      	bne.n	8001cd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d836      	bhi.n	8001d04 <DMA_CheckFifoParam+0xd8>
 8001c96:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <DMA_CheckFifoParam+0x70>)
 8001c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9c:	08001cad 	.word	0x08001cad
 8001ca0:	08001cb3 	.word	0x08001cb3
 8001ca4:	08001cad 	.word	0x08001cad
 8001ca8:	08001cc5 	.word	0x08001cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb0:	e02f      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d024      	beq.n	8001d08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc2:	e021      	b.n	8001d08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ccc:	d11e      	bne.n	8001d0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cd2:	e01b      	b.n	8001d0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d902      	bls.n	8001ce0 <DMA_CheckFifoParam+0xb4>
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d003      	beq.n	8001ce6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cde:	e018      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce4:	e015      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00e      	beq.n	8001d10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf6:	e00b      	b.n	8001d10 <DMA_CheckFifoParam+0xe4>
      break;
 8001cf8:	bf00      	nop
 8001cfa:	e00a      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
      break;
 8001cfc:	bf00      	nop
 8001cfe:	e008      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
      break;
 8001d00:	bf00      	nop
 8001d02:	e006      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
      break;
 8001d04:	bf00      	nop
 8001d06:	e004      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
      break;
 8001d08:	bf00      	nop
 8001d0a:	e002      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
      break;   
 8001d0c:	bf00      	nop
 8001d0e:	e000      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
      break;
 8001d10:	bf00      	nop
    }
  } 
  
  return status; 
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e16b      	b.n	8002014 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 815a 	bne.w	800200e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x4a>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b12      	cmp	r3, #18
 8001d68:	d123      	bne.n	8001db2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	69b9      	ldr	r1, [r7, #24]
 8001dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0203 	and.w	r2, r3, #3
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d00b      	beq.n	8001e06 <HAL_GPIO_Init+0xe6>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dfa:	2b11      	cmp	r3, #17
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b12      	cmp	r3, #18
 8001e04:	d130      	bne.n	8001e68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80b4 	beq.w	800200e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <HAL_GPIO_Init+0x308>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a5e      	ldr	r2, [pc, #376]	; (8002028 <HAL_GPIO_Init+0x308>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	; (8002028 <HAL_GPIO_Init+0x308>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec2:	4a5a      	ldr	r2, [pc, #360]	; (800202c <HAL_GPIO_Init+0x30c>)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a51      	ldr	r2, [pc, #324]	; (8002030 <HAL_GPIO_Init+0x310>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02b      	beq.n	8001f46 <HAL_GPIO_Init+0x226>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a50      	ldr	r2, [pc, #320]	; (8002034 <HAL_GPIO_Init+0x314>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x222>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_GPIO_Init+0x318>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x21e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4e      	ldr	r2, [pc, #312]	; (800203c <HAL_GPIO_Init+0x31c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x21a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4d      	ldr	r2, [pc, #308]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x216>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_GPIO_Init+0x324>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_GPIO_Init+0x328>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x20e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_GPIO_Init+0x32c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x20a>
 8001f26:	2307      	movs	r3, #7
 8001f28:	e00e      	b.n	8001f48 <HAL_GPIO_Init+0x228>
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	e00c      	b.n	8001f48 <HAL_GPIO_Init+0x228>
 8001f2e:	2306      	movs	r3, #6
 8001f30:	e00a      	b.n	8001f48 <HAL_GPIO_Init+0x228>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e008      	b.n	8001f48 <HAL_GPIO_Init+0x228>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x228>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x228>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x228>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x228>
 8001f46:	2300      	movs	r3, #0
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f002 0203 	and.w	r2, r2, #3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f58:	4934      	ldr	r1, [pc, #208]	; (800202c <HAL_GPIO_Init+0x30c>)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f66:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <HAL_GPIO_Init+0x330>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f8a:	4a31      	ldr	r2, [pc, #196]	; (8002050 <HAL_GPIO_Init+0x330>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x330>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <HAL_GPIO_Init+0x330>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_GPIO_Init+0x330>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fde:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <HAL_GPIO_Init+0x330>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_GPIO_Init+0x330>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_GPIO_Init+0x330>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	f67f ae90 	bls.w	8001d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800201c:	bf00      	nop
 800201e:	3724      	adds	r7, #36	; 0x24
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40023800 	.word	0x40023800
 800202c:	40013800 	.word	0x40013800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40021400 	.word	0x40021400
 8002048:	40021800 	.word	0x40021800
 800204c:	40021c00 	.word	0x40021c00
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002088:	b08f      	sub	sp, #60	; 0x3c
 800208a:	af0a      	add	r7, sp, #40	; 0x28
 800208c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e054      	b.n	8002142 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f009 fb26 	bl	800b704 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 fd72 	bl	8004bc0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	687e      	ldr	r6, [r7, #4]
 80020e4:	466d      	mov	r5, sp
 80020e6:	f106 0410 	add.w	r4, r6, #16
 80020ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fa:	1d33      	adds	r3, r6, #4
 80020fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fe:	6838      	ldr	r0, [r7, #0]
 8002100:	f002 fcec 	bl	8004adc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	4618      	mov	r0, r3
 800210c:	f002 fd69 	bl	8004be2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	687e      	ldr	r6, [r7, #4]
 8002118:	466d      	mov	r5, sp
 800211a:	f106 0410 	add.w	r4, r6, #16
 800211e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002126:	e894 0003 	ldmia.w	r4, {r0, r1}
 800212a:	e885 0003 	stmia.w	r5, {r0, r1}
 800212e:	1d33      	adds	r3, r6, #4
 8002130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002132:	6838      	ldr	r0, [r7, #0]
 8002134:	f002 fe7c 	bl	8004e30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800214a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800214a:	b590      	push	{r4, r7, lr}
 800214c:	b089      	sub	sp, #36	; 0x24
 800214e:	af04      	add	r7, sp, #16
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	4608      	mov	r0, r1
 8002154:	4611      	mov	r1, r2
 8002156:	461a      	mov	r2, r3
 8002158:	4603      	mov	r3, r0
 800215a:	70fb      	strb	r3, [r7, #3]
 800215c:	460b      	mov	r3, r1
 800215e:	70bb      	strb	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_HCD_HC_Init+0x28>
 800216e:	2302      	movs	r3, #2
 8002170:	e07f      	b.n	8002272 <HAL_HCD_HC_Init+0x128>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	333d      	adds	r3, #61	; 0x3d
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3338      	adds	r3, #56	; 0x38
 800219e:	787a      	ldrb	r2, [r7, #1]
 80021a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	3340      	adds	r3, #64	; 0x40
 80021b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021b4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	3339      	adds	r3, #57	; 0x39
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	333f      	adds	r3, #63	; 0x3f
 80021da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	78bb      	ldrb	r3, [r7, #2]
 80021e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e8:	b2d8      	uxtb	r0, r3
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	333a      	adds	r3, #58	; 0x3a
 80021f8:	4602      	mov	r2, r0
 80021fa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da0a      	bge.n	800221a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	333b      	adds	r3, #59	; 0x3b
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e009      	b.n	800222e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	333b      	adds	r3, #59	; 0x3b
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	333c      	adds	r3, #60	; 0x3c
 800223e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002242:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	787c      	ldrb	r4, [r7, #1]
 800224a:	78ba      	ldrb	r2, [r7, #2]
 800224c:	78f9      	ldrb	r1, [r7, #3]
 800224e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	f897 3020 	ldrb.w	r3, [r7, #32]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	4623      	mov	r3, r4
 8002260:	f002 ff68 	bl	8005134 <USB_HC_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bd90      	pop	{r4, r7, pc}

0800227a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_HCD_HC_Halt+0x1e>
 8002294:	2302      	movs	r3, #2
 8002296:	e00f      	b.n	80022b8 <HAL_HCD_HC_Halt+0x3e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 f9a2 	bl	80055f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	70fb      	strb	r3, [r7, #3]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70bb      	strb	r3, [r7, #2]
 80022d6:	4613      	mov	r3, r2
 80022d8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	333b      	adds	r3, #59	; 0x3b
 80022ea:	78ba      	ldrb	r2, [r7, #2]
 80022ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	333f      	adds	r3, #63	; 0x3f
 80022fe:	787a      	ldrb	r2, [r7, #1]
 8002300:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002302:	7c3b      	ldrb	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	3342      	adds	r3, #66	; 0x42
 8002318:	2203      	movs	r2, #3
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e009      	b.n	8002332 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	3342      	adds	r3, #66	; 0x42
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002332:	787b      	ldrb	r3, [r7, #1]
 8002334:	2b03      	cmp	r3, #3
 8002336:	f200 80d6 	bhi.w	80024e6 <HAL_HCD_HC_SubmitRequest+0x226>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_HCD_HC_SubmitRequest+0x80>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002351 	.word	0x08002351
 8002344:	080024d1 	.word	0x080024d1
 8002348:	080023bd 	.word	0x080023bd
 800234c:	08002447 	.word	0x08002447
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002350:	7c3b      	ldrb	r3, [r7, #16]
 8002352:	2b01      	cmp	r3, #1
 8002354:	f040 80c9 	bne.w	80024ea <HAL_HCD_HC_SubmitRequest+0x22a>
 8002358:	78bb      	ldrb	r3, [r7, #2]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 80c5 	bne.w	80024ea <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002360:	8b3b      	ldrh	r3, [r7, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	3351      	adds	r3, #81	; 0x51
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	3351      	adds	r3, #81	; 0x51
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	3342      	adds	r3, #66	; 0x42
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023a4:	e0a1      	b.n	80024ea <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	3342      	adds	r3, #66	; 0x42
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
      break;
 80023ba:	e096      	b.n	80024ea <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023bc:	78bb      	ldrb	r3, [r7, #2]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d120      	bne.n	8002404 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	3351      	adds	r3, #81	; 0x51
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10a      	bne.n	80023ee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	3342      	adds	r3, #66	; 0x42
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023ec:	e07e      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	3342      	adds	r3, #66	; 0x42
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]
      break;
 8002402:	e073      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	3350      	adds	r3, #80	; 0x50
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3342      	adds	r3, #66	; 0x42
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
      break;
 800242e:	e05d      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	3342      	adds	r3, #66	; 0x42
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
      break;
 8002444:	e052      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002446:	78bb      	ldrb	r3, [r7, #2]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d120      	bne.n	800248e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	3351      	adds	r3, #81	; 0x51
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	3342      	adds	r3, #66	; 0x42
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002476:	e039      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	3342      	adds	r3, #66	; 0x42
 8002488:	2202      	movs	r2, #2
 800248a:	701a      	strb	r2, [r3, #0]
      break;
 800248c:	e02e      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	3350      	adds	r3, #80	; 0x50
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	3342      	adds	r3, #66	; 0x42
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
      break;
 80024b8:	e018      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	3342      	adds	r3, #66	; 0x42
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]
      break;
 80024ce:	e00d      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3342      	adds	r3, #66	; 0x42
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
      break;
 80024e4:	e002      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80024e6:	bf00      	nop
 80024e8:	e000      	b.n	80024ec <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80024ea:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3344      	adds	r3, #68	; 0x44
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	8b39      	ldrh	r1, [r7, #24]
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4403      	add	r3, r0
 8002510:	3348      	adds	r3, #72	; 0x48
 8002512:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	335c      	adds	r3, #92	; 0x5c
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	334c      	adds	r3, #76	; 0x4c
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	3339      	adds	r3, #57	; 0x39
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	335d      	adds	r3, #93	; 0x5d
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	3338      	adds	r3, #56	; 0x38
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	18d1      	adds	r1, r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	f002 fee2 	bl	8005348 <USB_HC_StartXfer>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop

08002590 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 fbff 	bl	8004daa <USB_GetMode>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	f040 80f1 	bne.w	8002796 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 fbe3 	bl	8004d84 <USB_ReadInterrupts>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80e7 	beq.w	8002794 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 fbda 	bl	8004d84 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025da:	d104      	bne.n	80025e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fbca 	bl	8004d84 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fa:	d104      	bne.n	8002606 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002604:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f002 fbba 	bl	8004d84 <USB_ReadInterrupts>
 8002610:	4603      	mov	r3, r0
 8002612:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800261a:	d104      	bne.n	8002626 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002624:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f002 fbaa 	bl	8004d84 <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b02      	cmp	r3, #2
 8002638:	d103      	bne.n	8002642 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2202      	movs	r2, #2
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fb9c 	bl	8004d84 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002656:	d117      	bne.n	8002688 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002666:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800266a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f009 f8b9 	bl	800b7e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fc95 	bl	8004fa8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f002 fb79 	bl	8004d84 <USB_ReadInterrupts>
 8002692:	4603      	mov	r3, r0
 8002694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269c:	d102      	bne.n	80026a4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f001 f8c8 	bl	8003834 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 fb6b 	bl	8004d84 <USB_ReadInterrupts>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d106      	bne.n	80026c6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f009 f877 	bl	800b7ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2208      	movs	r2, #8
 80026c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 fb5a 	bl	8004d84 <USB_ReadInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026da:	d138      	bne.n	800274e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 ff75 	bl	80055d0 <USB_HC_ReadInterrupt>
 80026e6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e025      	b.n	800273a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d018      	beq.n	8002734 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002718:	d106      	bne.n	8002728 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f8cf 	bl	80028c4 <HCD_HC_IN_IRQHandler>
 8002726:	e005      	b.n	8002734 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fc5f 	bl	8002ff2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	d3d4      	bcc.n	80026ee <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fb16 	bl	8004d84 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b10      	cmp	r3, #16
 8002760:	d101      	bne.n	8002766 <HAL_HCD_IRQHandler+0x1d6>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_HCD_IRQHandler+0x1d8>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d014      	beq.n	8002796 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0210 	bic.w	r2, r2, #16
 800277a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 ffad 	bl	80036dc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0210 	orr.w	r2, r2, #16
 8002790:	619a      	str	r2, [r3, #24]
 8002792:	e000      	b.n	8002796 <HAL_HCD_IRQHandler+0x206>
      return;
 8002794:	bf00      	nop
    }
  }
}
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_HCD_Start+0x16>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e013      	b.n	80027da <HAL_HCD_Start+0x3e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 f9ed 	bl	8004b9e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 fc50 	bl	8005070 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_HCD_Stop+0x16>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e00d      	b.n	8002814 <HAL_HCD_Stop+0x32>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f003 f82f 	bl	8005868 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f002 fbf7 	bl	800501c <USB_ResetPort>
 800282e:	4603      	mov	r3, r0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	335c      	adds	r3, #92	; 0x5c
 8002854:	781b      	ldrb	r3, [r3, #0]
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	334c      	adds	r3, #76	; 0x4c
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fc39 	bl	8005110 <USB_GetCurrentFrame>
 800289e:	4603      	mov	r3, r0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 fc14 	bl	80050e2 <USB_GetHostSpeed>
 80028ba:	4603      	mov	r3, r0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d119      	bne.n	8002928 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	2304      	movs	r3, #4
 8002904:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	0151      	lsls	r1, r2, #5
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	440a      	add	r2, r1
 800291c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	60d3      	str	r3, [r2, #12]
 8002926:	e095      	b.n	8002a54 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b20      	cmp	r3, #32
 800293c:	d109      	bne.n	8002952 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	461a      	mov	r2, r3
 800294c:	2320      	movs	r3, #32
 800294e:	6093      	str	r3, [r2, #8]
 8002950:	e080      	b.n	8002a54 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b08      	cmp	r3, #8
 8002966:	d134      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	0151      	lsls	r1, r2, #5
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	440a      	add	r2, r1
 800297e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	335d      	adds	r3, #93	; 0x5d
 8002998:	2205      	movs	r2, #5
 800299a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	461a      	mov	r2, r3
 80029aa:	2310      	movs	r3, #16
 80029ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	461a      	mov	r2, r3
 80029bc:	2308      	movs	r3, #8
 80029be:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fe11 	bl	80055f2 <USB_HC_Halt>
 80029d0:	e040      	b.n	8002a54 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	d134      	bne.n	8002a54 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	0151      	lsls	r1, r2, #5
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	440a      	add	r2, r1
 8002a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fdec 	bl	80055f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	2310      	movs	r3, #16
 8002a2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	335d      	adds	r3, #93	; 0x5d
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a52:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6a:	d122      	bne.n	8002ab2 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	0151      	lsls	r1, r2, #5
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	440a      	add	r2, r1
 8002a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a86:	f043 0302 	orr.w	r3, r3, #2
 8002a8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 fdab 	bl	80055f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ab0:	e29b      	b.n	8002fea <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	f040 80c1 	bne.w	8002c4c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01b      	beq.n	8002b0a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	3348      	adds	r3, #72	; 0x48
 8002ae2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	0159      	lsls	r1, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	440b      	add	r3, r1
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002af6:	1ad1      	subs	r1, r2, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4403      	add	r3, r0
 8002b06:	334c      	adds	r3, #76	; 0x4c
 8002b08:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	335d      	adds	r3, #93	; 0x5d
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3358      	adds	r3, #88	; 0x58
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2301      	movs	r3, #1
 8002b42:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	333f      	adds	r3, #63	; 0x3f
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	333f      	adds	r3, #63	; 0x3f
 8002b6a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d121      	bne.n	8002bb4 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	0151      	lsls	r1, r2, #5
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	440a      	add	r2, r1
 8002b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 fd29 	bl	80055f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	2310      	movs	r3, #16
 8002bb0:	6093      	str	r3, [r2, #8]
 8002bb2:	e034      	b.n	8002c1e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	333f      	adds	r3, #63	; 0x3f
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d129      	bne.n	8002c1e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	0151      	lsls	r1, r2, #5
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	440a      	add	r2, r1
 8002be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002be4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002be8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	335c      	adds	r3, #92	; 0x5c
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	b2d8      	uxtb	r0, r3
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	335c      	adds	r3, #92	; 0x5c
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4601      	mov	r1, r0
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f008 fdf1 	bl	800b800 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3350      	adds	r3, #80	; 0x50
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f083 0301 	eor.w	r3, r3, #1
 8002c34:	b2d8      	uxtb	r0, r3
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	3350      	adds	r3, #80	; 0x50
 8002c46:	4602      	mov	r2, r0
 8002c48:	701a      	strb	r2, [r3, #0]
}
 8002c4a:	e1ce      	b.n	8002fea <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	f040 80f1 	bne.w	8002e46 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	0151      	lsls	r1, r2, #5
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c7e:	f023 0302 	bic.w	r3, r3, #2
 8002c82:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	335d      	adds	r3, #93	; 0x5d
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d10a      	bne.n	8002cb0 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	335c      	adds	r3, #92	; 0x5c
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e0b0      	b.n	8002e12 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	335d      	adds	r3, #93	; 0x5d
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d10a      	bne.n	8002cdc <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	335c      	adds	r3, #92	; 0x5c
 8002cd6:	2205      	movs	r2, #5
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e09a      	b.n	8002e12 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	335d      	adds	r3, #93	; 0x5d
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d00a      	beq.n	8002d08 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	335d      	adds	r3, #93	; 0x5d
 8002d02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d156      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	3358      	adds	r3, #88	; 0x58
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	1c59      	adds	r1, r3, #1
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4403      	add	r3, r0
 8002d2a:	3358      	adds	r3, #88	; 0x58
 8002d2c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3358      	adds	r3, #88	; 0x58
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d914      	bls.n	8002d6e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	3358      	adds	r3, #88	; 0x58
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	335c      	adds	r3, #92	; 0x5c
 8002d68:	2204      	movs	r2, #4
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e009      	b.n	8002d82 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	335c      	adds	r3, #92	; 0x5c
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d98:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e02d      	b.n	8002e12 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	335d      	adds	r3, #93	; 0x5d
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d122      	bne.n	8002e12 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	335c      	adds	r3, #92	; 0x5c
 8002ddc:	2202      	movs	r2, #2
 8002dde:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002df6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dfe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2302      	movs	r3, #2
 8002e22:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	b2d8      	uxtb	r0, r3
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	335c      	adds	r3, #92	; 0x5c
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4601      	mov	r1, r0
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f008 fcde 	bl	800b800 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e44:	e0d1      	b.n	8002fea <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d13e      	bne.n	8002eda <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	0151      	lsls	r1, r2, #5
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	440a      	add	r2, r1
 8002e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e76:	f043 0302 	orr.w	r3, r3, #2
 8002e7a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	3358      	adds	r3, #88	; 0x58
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4403      	add	r3, r0
 8002e9e:	3358      	adds	r3, #88	; 0x58
 8002ea0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	335d      	adds	r3, #93	; 0x5d
 8002eb2:	2206      	movs	r2, #6
 8002eb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fb96 	bl	80055f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	6093      	str	r3, [r2, #8]
}
 8002ed8:	e087      	b.n	8002fea <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d17c      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	333f      	adds	r3, #63	; 0x3f
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d122      	bne.n	8002f4c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	3358      	adds	r3, #88	; 0x58
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	0151      	lsls	r1, r2, #5
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	440a      	add	r2, r1
 8002f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 fb54 	bl	80055f2 <USB_HC_Halt>
 8002f4a:	e045      	b.n	8002fd8 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	440b      	add	r3, r1
 8002f5a:	333f      	adds	r3, #63	; 0x3f
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	440b      	add	r3, r1
 8002f70:	333f      	adds	r3, #63	; 0x3f
 8002f72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d12f      	bne.n	8002fd8 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	440b      	add	r3, r1
 8002f86:	3358      	adds	r3, #88	; 0x58
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d121      	bne.n	8002fd8 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	335d      	adds	r3, #93	; 0x5d
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	0151      	lsls	r1, r2, #5
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	440a      	add	r2, r1
 8002fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc2:	f043 0302 	orr.w	r3, r3, #2
 8002fc6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 fb0d 	bl	80055f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	6093      	str	r3, [r2, #8]
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d119      	bne.n	8003056 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	461a      	mov	r2, r3
 8003030:	2304      	movs	r3, #4
 8003032:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	0151      	lsls	r1, r2, #5
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	440a      	add	r2, r1
 800304a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800304e:	f043 0302 	orr.w	r3, r3, #2
 8003052:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003054:	e33e      	b.n	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d141      	bne.n	80030f0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	461a      	mov	r2, r3
 800307a:	2320      	movs	r3, #32
 800307c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	333d      	adds	r3, #61	; 0x3d
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	f040 831f 	bne.w	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	333d      	adds	r3, #61	; 0x3d
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	335c      	adds	r3, #92	; 0x5c
 80030ba:	2202      	movs	r2, #2
 80030bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	0151      	lsls	r1, r2, #5
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	440a      	add	r2, r1
 80030d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d8:	f043 0302 	orr.w	r3, r3, #2
 80030dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 fa82 	bl	80055f2 <USB_HC_Halt>
}
 80030ee:	e2f1      	b.n	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d13f      	bne.n	8003186 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	440b      	add	r3, r1
 8003114:	335d      	adds	r3, #93	; 0x5d
 8003116:	2204      	movs	r2, #4
 8003118:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	333d      	adds	r3, #61	; 0x3d
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	440b      	add	r3, r1
 800313c:	3358      	adds	r3, #88	; 0x58
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	0151      	lsls	r1, r2, #5
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	440a      	add	r2, r1
 8003158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f002 fa40 	bl	80055f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	461a      	mov	r2, r3
 8003180:	2340      	movs	r3, #64	; 0x40
 8003182:	6093      	str	r3, [r2, #8]
}
 8003184:	e2a6      	b.n	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319c:	d122      	bne.n	80031e4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	0151      	lsls	r1, r2, #5
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	440a      	add	r2, r1
 80031b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f002 fa12 	bl	80055f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	461a      	mov	r2, r3
 80031dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e0:	6093      	str	r3, [r2, #8]
}
 80031e2:	e277      	b.n	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d135      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	3358      	adds	r3, #88	; 0x58
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	0151      	lsls	r1, r2, #5
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	440a      	add	r2, r1
 8003224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f002 f9da 	bl	80055f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	2301      	movs	r3, #1
 800324e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	335d      	adds	r3, #93	; 0x5d
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
}
 8003264:	e236      	b.n	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b08      	cmp	r3, #8
 800327a:	d12b      	bne.n	80032d4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	2308      	movs	r3, #8
 800328c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	0151      	lsls	r1, r2, #5
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	440a      	add	r2, r1
 80032a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 f99a 	bl	80055f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	440b      	add	r3, r1
 80032cc:	335d      	adds	r3, #93	; 0x5d
 80032ce:	2205      	movs	r2, #5
 80032d0:	701a      	strb	r2, [r3, #0]
}
 80032d2:	e1ff      	b.n	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d155      	bne.n	8003396 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	3358      	adds	r3, #88	; 0x58
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	335d      	adds	r3, #93	; 0x5d
 800330e:	2203      	movs	r2, #3
 8003310:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	333d      	adds	r3, #61	; 0x3d
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d114      	bne.n	8003352 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	333c      	adds	r3, #60	; 0x3c
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	333d      	adds	r3, #61	; 0x3d
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	0151      	lsls	r1, r2, #5
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	440a      	add	r2, r1
 8003368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f002 f938 	bl	80055f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	461a      	mov	r2, r3
 8003390:	2310      	movs	r3, #16
 8003392:	6093      	str	r3, [r2, #8]
}
 8003394:	e19e      	b.n	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b80      	cmp	r3, #128	; 0x80
 80033aa:	d12b      	bne.n	8003404 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	0151      	lsls	r1, r2, #5
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	440a      	add	r2, r1
 80033c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f002 f90b 	bl	80055f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	335d      	adds	r3, #93	; 0x5d
 80033ec:	2206      	movs	r2, #6
 80033ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	6093      	str	r3, [r2, #8]
}
 8003402:	e167      	b.n	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341a:	d135      	bne.n	8003488 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	0151      	lsls	r1, r2, #5
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	440a      	add	r2, r1
 8003432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003436:	f043 0302 	orr.w	r3, r3, #2
 800343a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f002 f8d3 	bl	80055f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	461a      	mov	r2, r3
 800345a:	2310      	movs	r3, #16
 800345c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003470:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	335d      	adds	r3, #93	; 0x5d
 8003482:	2208      	movs	r2, #8
 8003484:	701a      	strb	r2, [r3, #0]
}
 8003486:	e125      	b.n	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b02      	cmp	r3, #2
 800349c:	f040 811a 	bne.w	80036d4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ba:	f023 0302 	bic.w	r3, r3, #2
 80034be:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	335d      	adds	r3, #93	; 0x5d
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d137      	bne.n	8003546 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	440b      	add	r3, r1
 80034e4:	335c      	adds	r3, #92	; 0x5c
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	333f      	adds	r3, #63	; 0x3f
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d00b      	beq.n	8003518 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	333f      	adds	r3, #63	; 0x3f
 8003510:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003512:	2b03      	cmp	r3, #3
 8003514:	f040 80c5 	bne.w	80036a2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	440b      	add	r3, r1
 8003526:	3351      	adds	r3, #81	; 0x51
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	f083 0301 	eor.w	r3, r3, #1
 800352e:	b2d8      	uxtb	r0, r3
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	3351      	adds	r3, #81	; 0x51
 8003540:	4602      	mov	r2, r0
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e0ad      	b.n	80036a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	440b      	add	r3, r1
 8003554:	335d      	adds	r3, #93	; 0x5d
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d10a      	bne.n	8003572 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	335c      	adds	r3, #92	; 0x5c
 800356c:	2202      	movs	r2, #2
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e097      	b.n	80036a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	335d      	adds	r3, #93	; 0x5d
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d10a      	bne.n	800359e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	335c      	adds	r3, #92	; 0x5c
 8003598:	2202      	movs	r2, #2
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e081      	b.n	80036a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	335d      	adds	r3, #93	; 0x5d
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d10a      	bne.n	80035ca <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	440b      	add	r3, r1
 80035c2:	335c      	adds	r3, #92	; 0x5c
 80035c4:	2205      	movs	r2, #5
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	e06b      	b.n	80036a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	335d      	adds	r3, #93	; 0x5d
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b06      	cmp	r3, #6
 80035de:	d00a      	beq.n	80035f6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	335d      	adds	r3, #93	; 0x5d
 80035f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d155      	bne.n	80036a2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	3358      	adds	r3, #88	; 0x58
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	1c59      	adds	r1, r3, #1
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4403      	add	r3, r0
 8003618:	3358      	adds	r3, #88	; 0x58
 800361a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	440b      	add	r3, r1
 800362a:	3358      	adds	r3, #88	; 0x58
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b03      	cmp	r3, #3
 8003630:	d914      	bls.n	800365c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	3358      	adds	r3, #88	; 0x58
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	335c      	adds	r3, #92	; 0x5c
 8003656:	2204      	movs	r2, #4
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e009      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	335c      	adds	r3, #92	; 0x5c
 800366c:	2202      	movs	r2, #2
 800366e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003686:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800368e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369c:	461a      	mov	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ae:	461a      	mov	r2, r3
 80036b0:	2302      	movs	r3, #2
 80036b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	b2d8      	uxtb	r0, r3
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	440b      	add	r3, r1
 80036c6:	335c      	adds	r3, #92	; 0x5c
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	4601      	mov	r1, r0
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f008 f896 	bl	800b800 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036d4:	bf00      	nop
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	0c5b      	lsrs	r3, r3, #17
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003710:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d003      	beq.n	8003720 <HCD_RXQLVL_IRQHandler+0x44>
 8003718:	2b05      	cmp	r3, #5
 800371a:	f000 8082 	beq.w	8003822 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800371e:	e083      	b.n	8003828 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d07f      	beq.n	8003826 <HCD_RXQLVL_IRQHandler+0x14a>
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	3344      	adds	r3, #68	; 0x44
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d074      	beq.n	8003826 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	3344      	adds	r3, #68	; 0x44
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	b292      	uxth	r2, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f001 faeb 	bl	8004d32 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	440b      	add	r3, r1
 800376a:	3344      	adds	r3, #68	; 0x44
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	18d1      	adds	r1, r2, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4403      	add	r3, r0
 8003780:	3344      	adds	r3, #68	; 0x44
 8003782:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	334c      	adds	r3, #76	; 0x4c
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	18d1      	adds	r1, r2, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4403      	add	r3, r0
 80037a8:	334c      	adds	r3, #76	; 0x4c
 80037aa:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HCD_RXQLVL_IRQHandler+0x154>)
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d031      	beq.n	8003826 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037d8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037e0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	3350      	adds	r3, #80	; 0x50
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	f083 0301 	eor.w	r3, r3, #1
 800380a:	b2d8      	uxtb	r0, r3
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	440b      	add	r3, r1
 800381a:	3350      	adds	r3, #80	; 0x50
 800381c:	4602      	mov	r2, r0
 800381e:	701a      	strb	r2, [r3, #0]
      break;
 8003820:	e001      	b.n	8003826 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003826:	bf00      	nop
  }
}
 8003828:	bf00      	nop
 800382a:	3728      	adds	r7, #40	; 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	1ff80000 	.word	0x1ff80000

08003834 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003860:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b02      	cmp	r3, #2
 800386a:	d113      	bne.n	8003894 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10a      	bne.n	800388c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699a      	ldr	r2, [r3, #24]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003884:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f007 ff9e 	bl	800b7c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b08      	cmp	r3, #8
 800389c:	d147      	bne.n	800392e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f043 0308 	orr.w	r3, r3, #8
 80038a4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d129      	bne.n	8003904 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d113      	bne.n	80038e0 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80038be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038c2:	d106      	bne.n	80038d2 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2102      	movs	r1, #2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fb6c 	bl	8004fa8 <USB_InitFSLSPClkSel>
 80038d0:	e011      	b.n	80038f6 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 fb65 	bl	8004fa8 <USB_InitFSLSPClkSel>
 80038de:	e00a      	b.n	80038f6 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d106      	bne.n	80038f6 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ee:	461a      	mov	r2, r3
 80038f0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038f4:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f007 ff90 	bl	800b81c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f007 ff63 	bl	800b7c8 <HAL_HCD_Connect_Callback>
 8003902:	e014      	b.n	800392e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f007 ff97 	bl	800b838 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003918:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800391c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800392c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b20      	cmp	r3, #32
 8003936:	d103      	bne.n	8003940 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f043 0320 	orr.w	r3, r3, #32
 800393e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	6013      	str	r3, [r2, #0]
}
 800394c:	bf00      	nop
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e22d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003972:	4ba3      	ldr	r3, [pc, #652]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4ba0      	ldr	r3, [pc, #640]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b9d      	ldr	r3, [pc, #628]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b99      	ldr	r3, [pc, #612]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d157      	bne.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e208      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x74>
 80039ba:	4b91      	ldr	r3, [pc, #580]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a90      	ldr	r2, [pc, #576]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x98>
 80039d2:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a8a      	ldr	r2, [pc, #552]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a87      	ldr	r2, [pc, #540]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039ec:	4b84      	ldr	r3, [pc, #528]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a83      	ldr	r2, [pc, #524]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b81      	ldr	r3, [pc, #516]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a80      	ldr	r2, [pc, #512]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fd3e 	bl	800148c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fd fd3a 	bl	800148c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1cd      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b76      	ldr	r3, [pc, #472]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd fd2a 	bl	800148c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd fd26 	bl	800148c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1b9      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b6c      	ldr	r3, [pc, #432]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0xe8>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6a:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e18d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4952      	ldr	r1, [pc, #328]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCC_OscConfig+0x2b0>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fd fcdf 	bl	800148c <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fcdb 	bl	800148c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e16e      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4940      	ldr	r1, [pc, #256]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <HAL_RCC_OscConfig+0x2b0>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fcbe 	bl	800148c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fd fcba 	bl	800148c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e14d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d030      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_RCC_OscConfig+0x2b4>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fc9e 	bl	800148c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fd fc9a 	bl	800148c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e12d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x200>
 8003b72:	e015      	b.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <HAL_RCC_OscConfig+0x2b4>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fc87 	bl	800148c <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fd fc83 	bl	800148c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e116      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a0 	beq.w	8003cee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10f      	bne.n	8003bde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_OscConfig+0x2b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_RCC_OscConfig+0x2b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <HAL_RCC_OscConfig+0x2b8>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf6:	f7fd fc49 	bl	800148c <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	e011      	b.n	8003c22 <HAL_RCC_OscConfig+0x2ce>
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	42470000 	.word	0x42470000
 8003c08:	42470e80 	.word	0x42470e80
 8003c0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fd fc3c 	bl	800148c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0cf      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x2f0>
 8003c36:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
 8003c42:	e01c      	b.n	8003c7e <HAL_RCC_OscConfig+0x32a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCC_OscConfig+0x312>
 8003c4c:	4b60      	ldr	r3, [pc, #384]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a5f      	ldr	r2, [pc, #380]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	4b5d      	ldr	r3, [pc, #372]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a5c      	ldr	r2, [pc, #368]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e00b      	b.n	8003c7e <HAL_RCC_OscConfig+0x32a>
 8003c66:	4b5a      	ldr	r3, [pc, #360]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a59      	ldr	r2, [pc, #356]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
 8003c72:	4b57      	ldr	r3, [pc, #348]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a56      	ldr	r2, [pc, #344]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d015      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fd fc01 	bl	800148c <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fd fbfd 	bl	800148c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e08e      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca4:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ee      	beq.n	8003c8e <HAL_RCC_OscConfig+0x33a>
 8003cb0:	e014      	b.n	8003cdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fbeb 	bl	800148c <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f7fd fbe7 	bl	800148c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e078      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ee      	bne.n	8003cba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d064      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf6:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d05c      	beq.n	8003dbc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d141      	bne.n	8003d8e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0a:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <HAL_RCC_OscConfig+0x480>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fd fbbc 	bl	800148c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fd fbb8 	bl	800148c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	491d      	ldr	r1, [pc, #116]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d60:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <HAL_RCC_OscConfig+0x480>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fd fb91 	bl	800148c <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fd fb8d 	bl	800148c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e020      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x41a>
 8003d8c:	e018      	b.n	8003dc0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_RCC_OscConfig+0x480>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fd fb7a 	bl	800148c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fd fb76 	bl	800148c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e009      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x448>
 8003dba:	e001      	b.n	8003dc0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	42470060 	.word	0x42470060

08003dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0ca      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dec:	4b67      	ldr	r3, [pc, #412]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d90c      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b64      	ldr	r3, [pc, #400]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0b6      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e2c:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a57      	ldr	r2, [pc, #348]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e44:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a51      	ldr	r2, [pc, #324]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b4f      	ldr	r3, [pc, #316]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	494c      	ldr	r1, [pc, #304]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d044      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d119      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07d      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e96:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e06d      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea6:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e065      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb6:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 0203 	bic.w	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4933      	ldr	r1, [pc, #204]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec8:	f7fd fae0 	bl	800148c <HAL_GetTick>
 8003ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed0:	f7fd fadc 	bl	800148c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e04d      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 020c 	and.w	r2, r3, #12
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d1eb      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d20c      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e030      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4915      	ldr	r1, [pc, #84]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	490d      	ldr	r1, [pc, #52]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f5e:	f000 f81d 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
 8003f62:	4601      	mov	r1, r0
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	fa21 f303 	lsr.w	r3, r1, r3
 8003f76:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f7fd fa42 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023c00 	.word	0x40023c00
 8003f90:	40023800 	.word	0x40023800
 8003f94:	0800d8b4 	.word	0x0800d8b4
 8003f98:	20000004 	.word	0x20000004

08003f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	2300      	movs	r3, #0
 8003fac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d007      	beq.n	8003fce <HAL_RCC_GetSysClockFreq+0x32>
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x38>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 80b4 	bne.w	8004130 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fc8:	4b5e      	ldr	r3, [pc, #376]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fca:	60bb      	str	r3, [r7, #8]
       break;
 8003fcc:	e0b3      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fce:	4b5e      	ldr	r3, [pc, #376]	; (8004148 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003fd0:	60bb      	str	r3, [r7, #8]
      break;
 8003fd2:	e0b0      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd4:	4b5a      	ldr	r3, [pc, #360]	; (8004140 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fde:	4b58      	ldr	r3, [pc, #352]	; (8004140 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d04a      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fea:	4b55      	ldr	r3, [pc, #340]	; (8004140 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	f04f 0400 	mov.w	r4, #0
 8003ff4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	ea03 0501 	and.w	r5, r3, r1
 8004000:	ea04 0602 	and.w	r6, r4, r2
 8004004:	4629      	mov	r1, r5
 8004006:	4632      	mov	r2, r6
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	f04f 0400 	mov.w	r4, #0
 8004010:	0154      	lsls	r4, r2, #5
 8004012:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004016:	014b      	lsls	r3, r1, #5
 8004018:	4619      	mov	r1, r3
 800401a:	4622      	mov	r2, r4
 800401c:	1b49      	subs	r1, r1, r5
 800401e:	eb62 0206 	sbc.w	r2, r2, r6
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	f04f 0400 	mov.w	r4, #0
 800402a:	0194      	lsls	r4, r2, #6
 800402c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004030:	018b      	lsls	r3, r1, #6
 8004032:	1a5b      	subs	r3, r3, r1
 8004034:	eb64 0402 	sbc.w	r4, r4, r2
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	00e2      	lsls	r2, r4, #3
 8004042:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004046:	00d9      	lsls	r1, r3, #3
 8004048:	460b      	mov	r3, r1
 800404a:	4614      	mov	r4, r2
 800404c:	195b      	adds	r3, r3, r5
 800404e:	eb44 0406 	adc.w	r4, r4, r6
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	0262      	lsls	r2, r4, #9
 800405c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004060:	0259      	lsls	r1, r3, #9
 8004062:	460b      	mov	r3, r1
 8004064:	4614      	mov	r4, r2
 8004066:	4618      	mov	r0, r3
 8004068:	4621      	mov	r1, r4
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f04f 0400 	mov.w	r4, #0
 8004070:	461a      	mov	r2, r3
 8004072:	4623      	mov	r3, r4
 8004074:	f7fc fd44 	bl	8000b00 <__aeabi_uldivmod>
 8004078:	4603      	mov	r3, r0
 800407a:	460c      	mov	r4, r1
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e049      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004080:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	f04f 0400 	mov.w	r4, #0
 800408a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	ea03 0501 	and.w	r5, r3, r1
 8004096:	ea04 0602 	and.w	r6, r4, r2
 800409a:	4629      	mov	r1, r5
 800409c:	4632      	mov	r2, r6
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	f04f 0400 	mov.w	r4, #0
 80040a6:	0154      	lsls	r4, r2, #5
 80040a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040ac:	014b      	lsls	r3, r1, #5
 80040ae:	4619      	mov	r1, r3
 80040b0:	4622      	mov	r2, r4
 80040b2:	1b49      	subs	r1, r1, r5
 80040b4:	eb62 0206 	sbc.w	r2, r2, r6
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	f04f 0400 	mov.w	r4, #0
 80040c0:	0194      	lsls	r4, r2, #6
 80040c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040c6:	018b      	lsls	r3, r1, #6
 80040c8:	1a5b      	subs	r3, r3, r1
 80040ca:	eb64 0402 	sbc.w	r4, r4, r2
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	00e2      	lsls	r2, r4, #3
 80040d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040dc:	00d9      	lsls	r1, r3, #3
 80040de:	460b      	mov	r3, r1
 80040e0:	4614      	mov	r4, r2
 80040e2:	195b      	adds	r3, r3, r5
 80040e4:	eb44 0406 	adc.w	r4, r4, r6
 80040e8:	f04f 0100 	mov.w	r1, #0
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	02a2      	lsls	r2, r4, #10
 80040f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040f6:	0299      	lsls	r1, r3, #10
 80040f8:	460b      	mov	r3, r1
 80040fa:	4614      	mov	r4, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	4621      	mov	r1, r4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f04f 0400 	mov.w	r4, #0
 8004106:	461a      	mov	r2, r3
 8004108:	4623      	mov	r3, r4
 800410a:	f7fc fcf9 	bl	8000b00 <__aeabi_uldivmod>
 800410e:	4603      	mov	r3, r0
 8004110:	460c      	mov	r4, r1
 8004112:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	3301      	adds	r3, #1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	60bb      	str	r3, [r7, #8]
      break;
 800412e:	e002      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004132:	60bb      	str	r3, [r7, #8]
      break;
 8004134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004136:	68bb      	ldr	r3, [r7, #8]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	00f42400 	.word	0x00f42400
 8004148:	007a1200 	.word	0x007a1200

0800414c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <HAL_RCC_GetHCLKFreq+0x14>)
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000004 	.word	0x20000004

08004164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004168:	f7ff fff0 	bl	800414c <HAL_RCC_GetHCLKFreq>
 800416c:	4601      	mov	r1, r0
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	0a9b      	lsrs	r3, r3, #10
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	4a03      	ldr	r2, [pc, #12]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800417a:	5cd3      	ldrb	r3, [r2, r3]
 800417c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40023800 	.word	0x40023800
 8004188:	0800d8c4 	.word	0x0800d8c4

0800418c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004190:	f7ff ffdc 	bl	800414c <HAL_RCC_GetHCLKFreq>
 8004194:	4601      	mov	r1, r0
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	0b5b      	lsrs	r3, r3, #13
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	4a03      	ldr	r2, [pc, #12]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40023800 	.word	0x40023800
 80041b0:	0800d8c4 	.word	0x0800d8c4

080041b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e03f      	b.n	8004246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fd f844 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	; 0x24
 80041e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fa65 	bl	80046c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800420c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800421c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800422c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10d      	bne.n	80042a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_UART_IRQHandler+0x52>
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f992 	bl	80045c4 <UART_Receive_IT>
      return;
 80042a0:	e0cc      	b.n	800443c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80ab 	beq.w	8004400 <HAL_UART_IRQHandler+0x1b0>
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <HAL_UART_IRQHandler+0x70>
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80a0 	beq.w	8004400 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_UART_IRQHandler+0x90>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	f043 0201 	orr.w	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_UART_IRQHandler+0xb0>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	f043 0202 	orr.w	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_UART_IRQHandler+0xd0>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	f043 0204 	orr.w	r2, r3, #4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_UART_IRQHandler+0xf0>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	f043 0208 	orr.w	r2, r3, #8
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d078      	beq.n	800443a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_UART_IRQHandler+0x112>
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f931 	bl	80045c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d102      	bne.n	800438a <HAL_UART_IRQHandler+0x13a>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d031      	beq.n	80043ee <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f87a 	bl	8004484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d123      	bne.n	80043e6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d013      	beq.n	80043de <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	4a22      	ldr	r2, [pc, #136]	; (8004444 <HAL_UART_IRQHandler+0x1f4>)
 80043bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fd fa50 	bl	8001868 <HAL_DMA_Abort_IT>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d016      	beq.n	80043fc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043d8:	4610      	mov	r0, r2
 80043da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e00e      	b.n	80043fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f846 	bl	8004470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	e00a      	b.n	80043fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f842 	bl	8004470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	e006      	b.n	80043fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f83e 	bl	8004470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80043fa:	e01e      	b.n	800443a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	bf00      	nop
    return;
 80043fe:	e01c      	b.n	800443a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_UART_IRQHandler+0x1cc>
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f867 	bl	80044e8 <UART_Transmit_IT>
    return;
 800441a:	e00f      	b.n	800443c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_UART_IRQHandler+0x1ec>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f8af 	bl	8004594 <UART_EndTransmit_IT>
    return;
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <HAL_UART_IRQHandler+0x1ec>
    return;
 800443a:	bf00      	nop
  }
}
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	080044c1 	.word	0x080044c1

08004448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800449a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff ffc8 	bl	8004470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b21      	cmp	r3, #33	; 0x21
 80044fa:	d144      	bne.n	8004586 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004504:	d11a      	bne.n	800453c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800451a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	621a      	str	r2, [r3, #32]
 800452e:	e00e      	b.n	800454e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]
 800453a:	e008      	b.n	800454e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6211      	str	r1, [r2, #32]
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4619      	mov	r1, r3
 800455c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004570:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004580:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff47 	bl	8004448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b22      	cmp	r3, #34	; 0x22
 80045d6:	d171      	bne.n	80046bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e0:	d123      	bne.n	800462a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10e      	bne.n	800460e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	1c9a      	adds	r2, r3, #2
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28
 800460c:	e029      	b.n	8004662 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	b29b      	uxth	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
 8004628:	e01b      	b.n	8004662 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6858      	ldr	r0, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6291      	str	r1, [r2, #40]	; 0x28
 8004642:	b2c2      	uxtb	r2, r0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e00c      	b.n	8004662 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	1c58      	adds	r0, r3, #1
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	6288      	str	r0, [r1, #40]	; 0x28
 800465a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29b      	uxth	r3, r3
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4619      	mov	r1, r3
 8004670:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004672:	2b00      	cmp	r3, #0
 8004674:	d120      	bne.n	80046b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0220 	bic.w	r2, r2, #32
 8004684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004694:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fed4 	bl	800445c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e002      	b.n	80046be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c8:	b5b0      	push	{r4, r5, r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004708:	f023 030c 	bic.w	r3, r3, #12
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	68f9      	ldr	r1, [r7, #12]
 8004712:	430b      	orrs	r3, r1
 8004714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004734:	f040 80e4 	bne.w	8004900 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4aab      	ldr	r2, [pc, #684]	; (80049ec <UART_SetConfig+0x324>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <UART_SetConfig+0x84>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4aaa      	ldr	r2, [pc, #680]	; (80049f0 <UART_SetConfig+0x328>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d16c      	bne.n	8004826 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800474c:	f7ff fd1e 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8004750:	4602      	mov	r2, r0
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009a      	lsls	r2, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	4aa3      	ldr	r2, [pc, #652]	; (80049f4 <UART_SetConfig+0x32c>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	011c      	lsls	r4, r3, #4
 8004770:	f7ff fd0c 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8004774:	4602      	mov	r2, r0
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	009a      	lsls	r2, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	fbb2 f5f3 	udiv	r5, r2, r3
 800478a:	f7ff fcff 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 800478e:	4602      	mov	r2, r0
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009a      	lsls	r2, r3, #2
 8004798:	441a      	add	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	4a93      	ldr	r2, [pc, #588]	; (80049f4 <UART_SetConfig+0x32c>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2264      	movs	r2, #100	; 0x64
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	1aeb      	subs	r3, r5, r3
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	3332      	adds	r3, #50	; 0x32
 80047b8:	4a8e      	ldr	r2, [pc, #568]	; (80049f4 <UART_SetConfig+0x32c>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047c6:	441c      	add	r4, r3
 80047c8:	f7ff fce0 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009a      	lsls	r2, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	fbb2 f5f3 	udiv	r5, r2, r3
 80047e2:	f7ff fcd3 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 80047e6:	4602      	mov	r2, r0
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009a      	lsls	r2, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	4a7d      	ldr	r2, [pc, #500]	; (80049f4 <UART_SetConfig+0x32c>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2264      	movs	r2, #100	; 0x64
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	1aeb      	subs	r3, r5, r3
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	3332      	adds	r3, #50	; 0x32
 8004810:	4a78      	ldr	r2, [pc, #480]	; (80049f4 <UART_SetConfig+0x32c>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	f003 0207 	and.w	r2, r3, #7
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4422      	add	r2, r4
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	e154      	b.n	8004ad0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004826:	f7ff fc9d 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 800482a:	4602      	mov	r2, r0
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	009a      	lsls	r2, r3, #2
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	4a6c      	ldr	r2, [pc, #432]	; (80049f4 <UART_SetConfig+0x32c>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	011c      	lsls	r4, r3, #4
 800484a:	f7ff fc8b 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 800484e:	4602      	mov	r2, r0
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009a      	lsls	r2, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fbb2 f5f3 	udiv	r5, r2, r3
 8004864:	f7ff fc7e 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8004868:	4602      	mov	r2, r0
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	009a      	lsls	r2, r3, #2
 8004872:	441a      	add	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	4a5d      	ldr	r2, [pc, #372]	; (80049f4 <UART_SetConfig+0x32c>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	2264      	movs	r2, #100	; 0x64
 8004888:	fb02 f303 	mul.w	r3, r2, r3
 800488c:	1aeb      	subs	r3, r5, r3
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	3332      	adds	r3, #50	; 0x32
 8004892:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <UART_SetConfig+0x32c>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048a0:	441c      	add	r4, r3
 80048a2:	f7ff fc5f 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 80048a6:	4602      	mov	r2, r0
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009a      	lsls	r2, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80048bc:	f7ff fc52 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009a      	lsls	r2, r3, #2
 80048ca:	441a      	add	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	4a47      	ldr	r2, [pc, #284]	; (80049f4 <UART_SetConfig+0x32c>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	2264      	movs	r2, #100	; 0x64
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	1aeb      	subs	r3, r5, r3
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	3332      	adds	r3, #50	; 0x32
 80048ea:	4a42      	ldr	r2, [pc, #264]	; (80049f4 <UART_SetConfig+0x32c>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	f003 0207 	and.w	r2, r3, #7
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4422      	add	r2, r4
 80048fc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80048fe:	e0e7      	b.n	8004ad0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a39      	ldr	r2, [pc, #228]	; (80049ec <UART_SetConfig+0x324>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <UART_SetConfig+0x24c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a38      	ldr	r2, [pc, #224]	; (80049f0 <UART_SetConfig+0x328>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d171      	bne.n	80049f8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004914:	f7ff fc3a 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8004918:	4602      	mov	r2, r0
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	009a      	lsls	r2, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	4a31      	ldr	r2, [pc, #196]	; (80049f4 <UART_SetConfig+0x32c>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	011c      	lsls	r4, r3, #4
 8004938:	f7ff fc28 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 800493c:	4602      	mov	r2, r0
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	009a      	lsls	r2, r3, #2
 8004946:	441a      	add	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004952:	f7ff fc1b 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8004956:	4602      	mov	r2, r0
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	009a      	lsls	r2, r3, #2
 8004960:	441a      	add	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <UART_SetConfig+0x32c>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2264      	movs	r2, #100	; 0x64
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	1aeb      	subs	r3, r5, r3
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	3332      	adds	r3, #50	; 0x32
 8004980:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <UART_SetConfig+0x32c>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498c:	441c      	add	r4, r3
 800498e:	f7ff fbfd 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8004992:	4602      	mov	r2, r0
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009a      	lsls	r2, r3, #2
 800499c:	441a      	add	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80049a8:	f7ff fbf0 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	009a      	lsls	r2, r3, #2
 80049b6:	441a      	add	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	4a0c      	ldr	r2, [pc, #48]	; (80049f4 <UART_SetConfig+0x32c>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	2264      	movs	r2, #100	; 0x64
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
 80049d0:	1aeb      	subs	r3, r5, r3
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	3332      	adds	r3, #50	; 0x32
 80049d6:	4a07      	ldr	r2, [pc, #28]	; (80049f4 <UART_SetConfig+0x32c>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	f003 020f 	and.w	r2, r3, #15
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4422      	add	r2, r4
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	e071      	b.n	8004ad0 <UART_SetConfig+0x408>
 80049ec:	40011000 	.word	0x40011000
 80049f0:	40011400 	.word	0x40011400
 80049f4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049f8:	f7ff fbb4 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	009a      	lsls	r2, r3, #2
 8004a06:	441a      	add	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	4a31      	ldr	r2, [pc, #196]	; (8004ad8 <UART_SetConfig+0x410>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	011c      	lsls	r4, r3, #4
 8004a1c:	f7ff fba2 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009a      	lsls	r2, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a36:	f7ff fb95 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009a      	lsls	r2, r3, #2
 8004a44:	441a      	add	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <UART_SetConfig+0x410>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	2264      	movs	r2, #100	; 0x64
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	1aeb      	subs	r3, r5, r3
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	3332      	adds	r3, #50	; 0x32
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <UART_SetConfig+0x410>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a70:	441c      	add	r4, r3
 8004a72:	f7ff fb77 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009a      	lsls	r2, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a8c:	f7ff fb6a 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	009a      	lsls	r2, r3, #2
 8004a9a:	441a      	add	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	4a0c      	ldr	r2, [pc, #48]	; (8004ad8 <UART_SetConfig+0x410>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	2264      	movs	r2, #100	; 0x64
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	1aeb      	subs	r3, r5, r3
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	3332      	adds	r3, #50	; 0x32
 8004aba:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <UART_SetConfig+0x410>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	f003 020f 	and.w	r2, r3, #15
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4422      	add	r2, r4
 8004acc:	609a      	str	r2, [r3, #8]
}
 8004ace:	e7ff      	b.n	8004ad0 <UART_SetConfig+0x408>
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ad8:	51eb851f 	.word	0x51eb851f

08004adc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004adc:	b084      	sub	sp, #16
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	f107 001c 	add.w	r0, r7, #28
 8004aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d122      	bne.n	8004b3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d105      	bne.n	8004b2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f94a 	bl	8004dc8 <USB_CoreReset>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]
 8004b38:	e01a      	b.n	8004b70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f93e 	bl	8004dc8 <USB_CoreReset>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
 8004b62:	e005      	b.n	8004b70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10b      	bne.n	8004b8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f043 0206 	orr.w	r2, r3, #6
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f043 0220 	orr.w	r2, r3, #32
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b9a:	b004      	add	sp, #16
 8004b9c:	4770      	bx	lr

08004b9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f043 0201 	orr.w	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f023 0201 	bic.w	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d106      	bne.n	8004c0e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60da      	str	r2, [r3, #12]
 8004c0c:	e00b      	b.n	8004c26 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
 8004c20:	e001      	b.n	8004c26 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e003      	b.n	8004c2e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c26:	2032      	movs	r0, #50	; 0x32
 8004c28:	f7fc fc3c 	bl	80014a4 <HAL_Delay>

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	019b      	lsls	r3, r3, #6
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <USB_FlushTxFifo+0x48>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e006      	b.n	8004c72 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d0f0      	beq.n	8004c52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	00030d40 	.word	0x00030d40

08004c84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2210      	movs	r2, #16
 8004c94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <USB_FlushRxFifo+0x40>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d901      	bls.n	8004ca8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e006      	b.n	8004cb6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d0f0      	beq.n	8004c96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	00030d40 	.word	0x00030d40

08004cc8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	71fb      	strb	r3, [r7, #7]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d11a      	bne.n	8004d24 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cee:	88bb      	ldrh	r3, [r7, #4]
 8004cf0:	3303      	adds	r3, #3
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	e00f      	b.n	8004d1c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	031a      	lsls	r2, r3, #12
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d08:	461a      	mov	r2, r3
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	3304      	adds	r3, #4
 8004d14:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d3eb      	bcc.n	8004cfc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3724      	adds	r7, #36	; 0x24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b089      	sub	sp, #36	; 0x24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	3303      	adds	r3, #3
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	e00b      	b.n	8004d6e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3304      	adds	r3, #4
 8004d66:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d3ef      	bcc.n	8004d56 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004d76:	69fb      	ldr	r3, [r7, #28]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3724      	adds	r7, #36	; 0x24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0301 	and.w	r3, r3, #1
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a13      	ldr	r2, [pc, #76]	; (8004e2c <USB_CoreReset+0x64>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e01b      	b.n	8004e1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	daf2      	bge.n	8004dd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <USB_CoreReset+0x64>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e006      	b.n	8004e1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d0f0      	beq.n	8004dfe <USB_CoreReset+0x36>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	00030d40 	.word	0x00030d40

08004e30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e30:	b084      	sub	sp, #16
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	f107 001c 	add.w	r0, r7, #28
 8004e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d10a      	bne.n	8004e9e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e96:	f043 0304 	orr.w	r3, r3, #4
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	e014      	b.n	8004ec8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e009      	b.n	8004ec8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ec2:	f023 0304 	bic.w	r3, r3, #4
 8004ec6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004ec8:	2110      	movs	r1, #16
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff feb4 	bl	8004c38 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fed7 	bl	8004c84 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e015      	b.n	8004f08 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
 8004eee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efc:	461a      	mov	r2, r3
 8004efe:	2300      	movs	r3, #0
 8004f00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3301      	adds	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d3e5      	bcc.n	8004edc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004f10:	2101      	movs	r1, #1
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f8ac 	bl	8005070 <USB_DriveVbus>

  HAL_Delay(200U);
 8004f18:	20c8      	movs	r0, #200	; 0xc8
 8004f1a:	f7fc fac3 	bl	80014a4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <USB_HostInit+0x164>)
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <USB_HostInit+0x168>)
 8004f4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004f4e:	e009      	b.n	8004f64 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <USB_HostInit+0x16c>)
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <USB_HostInit+0x170>)
 8004f60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f043 0210 	orr.w	r2, r3, #16
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <USB_HostInit+0x174>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f8e:	b004      	add	sp, #16
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	01000200 	.word	0x01000200
 8004f98:	00e00300 	.word	0x00e00300
 8004f9c:	00600080 	.word	0x00600080
 8004fa0:	004000e0 	.word	0x004000e0
 8004fa4:	a3200008 	.word	0xa3200008

08004fa8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d107      	bne.n	8004ffa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ff6:	6053      	str	r3, [r2, #4]
 8004ff8:	e009      	b.n	800500e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d106      	bne.n	800500e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005006:	461a      	mov	r2, r3
 8005008:	f241 7370 	movw	r3, #6000	; 0x1770
 800500c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800503c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800504a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800504c:	2064      	movs	r0, #100	; 0x64
 800504e:	f7fc fa29 	bl	80014a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800505a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800505e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005060:	200a      	movs	r0, #10
 8005062:	f7fc fa1f 	bl	80014a4 <HAL_Delay>

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005094:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d109      	bne.n	80050b4 <USB_DriveVbus+0x44>
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d106      	bne.n	80050b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050be:	d109      	bne.n	80050d4 <USB_DriveVbus+0x64>
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	0c5b      	lsrs	r3, r3, #17
 8005100:	f003 0303 	and.w	r3, r3, #3
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	b29b      	uxth	r3, r3
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	461a      	mov	r2, r3
 8005142:	4603      	mov	r3, r0
 8005144:	70fb      	strb	r3, [r7, #3]
 8005146:	460b      	mov	r3, r1
 8005148:	70bb      	strb	r3, [r7, #2]
 800514a:	4613      	mov	r3, r2
 800514c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005162:	461a      	mov	r2, r3
 8005164:	f04f 33ff 	mov.w	r3, #4294967295
 8005168:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800516a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800516e:	2b03      	cmp	r3, #3
 8005170:	d87e      	bhi.n	8005270 <USB_HC_Init+0x13c>
 8005172:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <USB_HC_Init+0x44>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	08005189 	.word	0x08005189
 800517c:	08005233 	.word	0x08005233
 8005180:	08005189 	.word	0x08005189
 8005184:	080051f5 	.word	0x080051f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	461a      	mov	r2, r3
 8005196:	f240 439d 	movw	r3, #1181	; 0x49d
 800519a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800519c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	da10      	bge.n	80051c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	78fa      	ldrb	r2, [r7, #3]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80051c4:	e057      	b.n	8005276 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d051      	beq.n	8005276 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	78fa      	ldrb	r2, [r7, #3]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051f0:	60d3      	str	r3, [r2, #12]
      break;
 80051f2:	e040      	b.n	8005276 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	461a      	mov	r2, r3
 8005202:	f240 639d 	movw	r3, #1693	; 0x69d
 8005206:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005208:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800520c:	2b00      	cmp	r3, #0
 800520e:	da34      	bge.n	800527a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4413      	add	r3, r2
 8005218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	78fa      	ldrb	r2, [r7, #3]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	440a      	add	r2, r1
 8005226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005230:	e023      	b.n	800527a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523e:	461a      	mov	r2, r3
 8005240:	f240 2325 	movw	r3, #549	; 0x225
 8005244:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005246:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800524a:	2b00      	cmp	r3, #0
 800524c:	da17      	bge.n	800527e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	440a      	add	r2, r1
 8005264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005268:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800526c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800526e:	e006      	b.n	800527e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	75fb      	strb	r3, [r7, #23]
      break;
 8005274:	e004      	b.n	8005280 <USB_HC_Init+0x14c>
      break;
 8005276:	bf00      	nop
 8005278:	e002      	b.n	8005280 <USB_HC_Init+0x14c>
      break;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <USB_HC_Init+0x14c>
      break;
 800527e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800529a:	4313      	orrs	r3, r2
 800529c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da03      	bge.n	80052ba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80052b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e001      	b.n	80052be <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80052be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d103      	bne.n	80052ce <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80052c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e001      	b.n	80052d2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052d2:	787b      	ldrb	r3, [r7, #1]
 80052d4:	059b      	lsls	r3, r3, #22
 80052d6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052da:	78bb      	ldrb	r3, [r7, #2]
 80052dc:	02db      	lsls	r3, r3, #11
 80052de:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80052e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052e8:	049b      	lsls	r3, r3, #18
 80052ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80052f6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	0159      	lsls	r1, r3, #5
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	440b      	add	r3, r1
 8005304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005308:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800530e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005310:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005314:	2b03      	cmp	r3, #3
 8005316:	d10f      	bne.n	8005338 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	440a      	add	r2, r1
 800532e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005336:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005338:	7dfb      	ldrb	r3, [r7, #23]
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop

08005348 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08c      	sub	sp, #48	; 0x30
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005364:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d028      	beq.n	80053c4 <USB_HC_StartXfer+0x7c>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	791b      	ldrb	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d124      	bne.n	80053c4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <USB_HC_StartXfer+0x50>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	795b      	ldrb	r3, [r3, #5]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d107      	bne.n	8005398 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	4619      	mov	r1, r3
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fa2e 	bl	80057f0 <USB_DoPing>
      return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e112      	b.n	80055be <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d112      	bne.n	80053c4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80053bc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2200      	movs	r2, #0
 80053c2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d018      	beq.n	80053fe <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	8912      	ldrh	r2, [r2, #8]
 80053d4:	4413      	add	r3, r2
 80053d6:	3b01      	subs	r3, #1
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	8912      	ldrh	r2, [r2, #8]
 80053dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80053e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80053e4:	8b7b      	ldrh	r3, [r7, #26]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d90b      	bls.n	8005402 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80053ea:	8b7b      	ldrh	r3, [r7, #26]
 80053ec:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80053ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	8912      	ldrh	r2, [r2, #8]
 80053f4:	fb02 f203 	mul.w	r2, r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	611a      	str	r2, [r3, #16]
 80053fc:	e001      	b.n	8005402 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80053fe:	2301      	movs	r3, #1
 8005400:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	78db      	ldrb	r3, [r3, #3]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d006      	beq.n	8005418 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800540a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	8912      	ldrh	r2, [r2, #8]
 8005410:	fb02 f203 	mul.w	r2, r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005420:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005422:	04d9      	lsls	r1, r3, #19
 8005424:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <USB_HC_StartXfer+0x280>)
 8005426:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005428:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	7a9b      	ldrb	r3, [r3, #10]
 800542e:	075b      	lsls	r3, r3, #29
 8005430:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005434:	69f9      	ldr	r1, [r7, #28]
 8005436:	0148      	lsls	r0, r1, #5
 8005438:	6a39      	ldr	r1, [r7, #32]
 800543a:	4401      	add	r1, r0
 800543c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005440:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005442:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	4413      	add	r3, r2
 8005456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545a:	460a      	mov	r2, r1
 800545c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	440a      	add	r2, r1
 800548c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005490:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005494:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	7e7b      	ldrb	r3, [r7, #25]
 80054a6:	075b      	lsls	r3, r3, #29
 80054a8:	69f9      	ldr	r1, [r7, #28]
 80054aa:	0148      	lsls	r0, r1, #5
 80054ac:	6a39      	ldr	r1, [r7, #32]
 80054ae:	4401      	add	r1, r0
 80054b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80054b4:	4313      	orrs	r3, r2
 80054b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a41      	ldr	r2, [pc, #260]	; (80055cc <USB_HC_StartXfer+0x284>)
 80054c8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ca:	4b40      	ldr	r3, [pc, #256]	; (80055cc <USB_HC_StartXfer+0x284>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054d2:	4a3e      	ldr	r2, [pc, #248]	; (80055cc <USB_HC_StartXfer+0x284>)
 80054d4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	78db      	ldrb	r3, [r3, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d006      	beq.n	80054ec <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80054de:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <USB_HC_StartXfer+0x284>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	4a39      	ldr	r2, [pc, #228]	; (80055cc <USB_HC_StartXfer+0x284>)
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e005      	b.n	80054f8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80054ec:	4b37      	ldr	r3, [pc, #220]	; (80055cc <USB_HC_StartXfer+0x284>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054f4:	4a35      	ldr	r2, [pc, #212]	; (80055cc <USB_HC_StartXfer+0x284>)
 80054f6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054f8:	4b34      	ldr	r3, [pc, #208]	; (80055cc <USB_HC_StartXfer+0x284>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005500:	4a32      	ldr	r2, [pc, #200]	; (80055cc <USB_HC_StartXfer+0x284>)
 8005502:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	461a      	mov	r2, r3
 8005512:	4b2e      	ldr	r3, [pc, #184]	; (80055cc <USB_HC_StartXfer+0x284>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d14e      	bne.n	80055bc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	78db      	ldrb	r3, [r3, #3]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d14a      	bne.n	80055bc <USB_HC_StartXfer+0x274>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d046      	beq.n	80055bc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	79db      	ldrb	r3, [r3, #7]
 8005532:	2b03      	cmp	r3, #3
 8005534:	d830      	bhi.n	8005598 <USB_HC_StartXfer+0x250>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <USB_HC_StartXfer+0x1f4>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	0800554d 	.word	0x0800554d
 8005540:	08005571 	.word	0x08005571
 8005544:	0800554d 	.word	0x0800554d
 8005548:	08005571 	.word	0x08005571
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	3303      	adds	r3, #3
 8005552:	089b      	lsrs	r3, r3, #2
 8005554:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005556:	8afa      	ldrh	r2, [r7, #22]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	b29b      	uxth	r3, r3
 800555e:	429a      	cmp	r2, r3
 8005560:	d91c      	bls.n	800559c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	619a      	str	r2, [r3, #24]
          }
          break;
 800556e:	e015      	b.n	800559c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	3303      	adds	r3, #3
 8005576:	089b      	lsrs	r3, r3, #2
 8005578:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800557a:	8afa      	ldrh	r2, [r7, #22]
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	b29b      	uxth	r3, r3
 8005586:	429a      	cmp	r2, r3
 8005588:	d90a      	bls.n	80055a0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	619a      	str	r2, [r3, #24]
          }
          break;
 8005596:	e003      	b.n	80055a0 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005598:	bf00      	nop
 800559a:	e002      	b.n	80055a2 <USB_HC_StartXfer+0x25a>
          break;
 800559c:	bf00      	nop
 800559e:	e000      	b.n	80055a2 <USB_HC_StartXfer+0x25a>
          break;
 80055a0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	68d9      	ldr	r1, [r3, #12]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	785a      	ldrb	r2, [r3, #1]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	b298      	uxth	r0, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	4603      	mov	r3, r0
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fb86 	bl	8004cc8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3728      	adds	r7, #40	; 0x28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	1ff80000 	.word	0x1ff80000
 80055cc:	2000021c 	.word	0x2000021c

080055d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	b29b      	uxth	r3, r3
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b087      	sub	sp, #28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	460b      	mov	r3, r1
 80055fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	0c9b      	lsrs	r3, r3, #18
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <USB_HC_Halt+0x3a>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d16c      	bne.n	8005706 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4413      	add	r3, r2
 8005634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	440a      	add	r2, r1
 8005642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800564a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d143      	bne.n	80056e0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	440a      	add	r2, r1
 800566e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005672:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005676:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	440a      	add	r2, r1
 800568e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005696:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056b6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	3301      	adds	r3, #1
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056c4:	d81d      	bhi.n	8005702 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056dc:	d0ec      	beq.n	80056b8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056de:	e080      	b.n	80057e2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056fe:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005700:	e06f      	b.n	80057e2 <USB_HC_Halt+0x1f0>
          break;
 8005702:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005704:	e06d      	b.n	80057e2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	440a      	add	r2, r1
 800571c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005720:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005724:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d143      	bne.n	80057be <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	440a      	add	r2, r1
 800574c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005754:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	440a      	add	r2, r1
 800576c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005774:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4413      	add	r3, r2
 800577e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	440a      	add	r2, r1
 800578c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005790:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005794:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	3301      	adds	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057a2:	d81d      	bhi.n	80057e0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ba:	d0ec      	beq.n	8005796 <USB_HC_Halt+0x1a4>
 80057bc:	e011      	b.n	80057e2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e000      	b.n	80057e2 <USB_HC_Halt+0x1f0>
          break;
 80057e0:	bf00      	nop
    }
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005804:	2301      	movs	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	04da      	lsls	r2, r3, #19
 800580c:	4b15      	ldr	r3, [pc, #84]	; (8005864 <USB_DoPing+0x74>)
 800580e:	4013      	ands	r3, r2
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	440a      	add	r2, r1
 8005818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800581c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005820:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005838:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005840:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	4413      	add	r3, r2
 800584a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584e:	461a      	mov	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	1ff80000 	.word	0x1ff80000

08005868 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff f9a1 	bl	8004bc0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800587e:	2110      	movs	r1, #16
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff f9d9 	bl	8004c38 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff f9fc 	bl	8004c84 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	e01f      	b.n	80058d2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c6:	461a      	mov	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	3301      	adds	r3, #1
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b0f      	cmp	r3, #15
 80058d6:	d9dc      	bls.n	8005892 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	e034      	b.n	8005948 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058f4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005904:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005912:	461a      	mov	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	3301      	adds	r3, #1
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005924:	d80c      	bhi.n	8005940 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800593c:	d0ec      	beq.n	8005918 <USB_StopHost+0xb0>
 800593e:	e000      	b.n	8005942 <USB_StopHost+0xda>
        break;
 8005940:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3301      	adds	r3, #1
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b0f      	cmp	r3, #15
 800594c:	d9c7      	bls.n	80058de <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005954:	461a      	mov	r2, r3
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f04f 32ff 	mov.w	r2, #4294967295
 8005962:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff f91a 	bl	8004b9e <USB_EnableGlobalInt>

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005978:	4904      	ldr	r1, [pc, #16]	; (800598c <MX_FATFS_Init+0x18>)
 800597a:	4805      	ldr	r0, [pc, #20]	; (8005990 <MX_FATFS_Init+0x1c>)
 800597c:	f005 fd6a 	bl	800b454 <FATFS_LinkDriver>
 8005980:	4603      	mov	r3, r0
 8005982:	461a      	mov	r2, r3
 8005984:	4b03      	ldr	r3, [pc, #12]	; (8005994 <MX_FATFS_Init+0x20>)
 8005986:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005988:	bf00      	nop
 800598a:	bd80      	pop	{r7, pc}
 800598c:	2000076c 	.word	0x2000076c
 8005990:	0800d8d4 	.word	0x0800d8d4
 8005994:	20000bd4 	.word	0x20000bd4

08005998 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800599c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800599e:	4618      	mov	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	4619      	mov	r1, r3
 80059d2:	4808      	ldr	r0, [pc, #32]	; (80059f4 <USBH_status+0x34>)
 80059d4:	f000 fe2f 	bl	8006636 <USBH_MSC_UnitIsReady>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <USBH_status+0x24>
  {
    res = RES_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]
 80059e2:	e001      	b.n	80059e8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000bd8 	.word	0x20000bd8

080059f8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b094      	sub	sp, #80	; 0x50
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005a0e:	7bf9      	ldrb	r1, [r7, #15]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	4812      	ldr	r0, [pc, #72]	; (8005a64 <USBH_read+0x6c>)
 8005a1a:	f000 fe56 	bl	80066ca <USBH_MSC_Read>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d103      	bne.n	8005a2c <USBH_read+0x34>
  {
    res = RES_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a2a:	e015      	b.n	8005a58 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005a2c:	f107 0210 	add.w	r2, r7, #16
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	4619      	mov	r1, r3
 8005a34:	480b      	ldr	r0, [pc, #44]	; (8005a64 <USBH_read+0x6c>)
 8005a36:	f000 fe24 	bl	8006682 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005a3a:	7f7b      	ldrb	r3, [r7, #29]
 8005a3c:	2b28      	cmp	r3, #40	; 0x28
 8005a3e:	d003      	beq.n	8005a48 <USBH_read+0x50>
 8005a40:	2b3a      	cmp	r3, #58	; 0x3a
 8005a42:	d001      	beq.n	8005a48 <USBH_read+0x50>
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d103      	bne.n	8005a50 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8005a4e:	e003      	b.n	8005a58 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005a56:	bf00      	nop
    }
  }

  return res;
 8005a58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3748      	adds	r7, #72	; 0x48
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000bd8 	.word	0x20000bd8

08005a68 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b094      	sub	sp, #80	; 0x50
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4603      	mov	r3, r0
 8005a76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005a7e:	7bf9      	ldrb	r1, [r7, #15]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4817      	ldr	r0, [pc, #92]	; (8005ae8 <USBH_write+0x80>)
 8005a8a:	f000 fe87 	bl	800679c <USBH_MSC_Write>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d103      	bne.n	8005a9c <USBH_write+0x34>
  {
    res = RES_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a9a:	e01f      	b.n	8005adc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005a9c:	f107 0210 	add.w	r2, r7, #16
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4810      	ldr	r0, [pc, #64]	; (8005ae8 <USBH_write+0x80>)
 8005aa6:	f000 fdec 	bl	8006682 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005aaa:	7f7b      	ldrb	r3, [r7, #29]
 8005aac:	2b27      	cmp	r3, #39	; 0x27
 8005aae:	d009      	beq.n	8005ac4 <USBH_write+0x5c>
 8005ab0:	2b27      	cmp	r3, #39	; 0x27
 8005ab2:	dc02      	bgt.n	8005aba <USBH_write+0x52>
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d009      	beq.n	8005acc <USBH_write+0x64>
 8005ab8:	e00c      	b.n	8005ad4 <USBH_write+0x6c>
 8005aba:	2b28      	cmp	r3, #40	; 0x28
 8005abc:	d006      	beq.n	8005acc <USBH_write+0x64>
 8005abe:	2b3a      	cmp	r3, #58	; 0x3a
 8005ac0:	d004      	beq.n	8005acc <USBH_write+0x64>
 8005ac2:	e007      	b.n	8005ad4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005aca:	e007      	b.n	8005adc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005acc:	2303      	movs	r3, #3
 8005ace:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005ad2:	e003      	b.n	8005adc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005ada:	bf00      	nop
    }
  }

  return res;
 8005adc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3748      	adds	r7, #72	; 0x48
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000bd8 	.word	0x20000bd8

08005aec <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b090      	sub	sp, #64	; 0x40
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	603a      	str	r2, [r7, #0]
 8005af6:	71fb      	strb	r3, [r7, #7]
 8005af8:	460b      	mov	r3, r1
 8005afa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005b02:	79bb      	ldrb	r3, [r7, #6]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d852      	bhi.n	8005bae <USBH_ioctl+0xc2>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <USBH_ioctl+0x24>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b21 	.word	0x08005b21
 8005b14:	08005b29 	.word	0x08005b29
 8005b18:	08005b53 	.word	0x08005b53
 8005b1c:	08005b7f 	.word	0x08005b7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005b26:	e045      	b.n	8005bb4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005b28:	f107 0208 	add.w	r2, r7, #8
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4823      	ldr	r0, [pc, #140]	; (8005bc0 <USBH_ioctl+0xd4>)
 8005b32:	f000 fda6 	bl	8006682 <USBH_MSC_GetLUNInfo>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005b48:	e034      	b.n	8005bb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005b50:	e030      	b.n	8005bb4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005b52:	f107 0208 	add.w	r2, r7, #8
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4819      	ldr	r0, [pc, #100]	; (8005bc0 <USBH_ioctl+0xd4>)
 8005b5c:	f000 fd91 	bl	8006682 <USBH_MSC_GetLUNInfo>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d107      	bne.n	8005b76 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005b66:	8a3b      	ldrh	r3, [r7, #16]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005b74:	e01e      	b.n	8005bb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005b7c:	e01a      	b.n	8005bb4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005b7e:	f107 0208 	add.w	r2, r7, #8
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	4619      	mov	r1, r3
 8005b86:	480e      	ldr	r0, [pc, #56]	; (8005bc0 <USBH_ioctl+0xd4>)
 8005b88:	f000 fd7b 	bl	8006682 <USBH_MSC_GetLUNInfo>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005b92:	8a3b      	ldrh	r3, [r7, #16]
 8005b94:	0a5b      	lsrs	r3, r3, #9
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005ba4:	e006      	b.n	8005bb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005bac:	e002      	b.n	8005bb4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005bae:	2304      	movs	r3, #4
 8005bb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005bb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3740      	adds	r7, #64	; 0x40
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000bd8 	.word	0x20000bd8

08005bc4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b089      	sub	sp, #36	; 0x24
 8005bc8:	af04      	add	r7, sp, #16
 8005bca:	6078      	str	r0, [r7, #4]
  uint8_t interface = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef status = USBH_FAIL;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bda:	7919      	ldrb	r1, [r3, #4]
 8005bdc:	2350      	movs	r3, #80	; 0x50
 8005bde:	2206      	movs	r2, #6
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 fc4f 	bl	8007484 <USBH_FindInterface>
 8005be6:	4603      	mov	r3, r0
 8005be8:	73bb      	strb	r3, [r7, #14]

  if(interface == 0xFFU) /* Not Valid Interface */
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	2bff      	cmp	r3, #255	; 0xff
 8005bee:	d102      	bne.n	8005bf6 <USBH_MSC_InterfaceInit+0x32>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	73fb      	strb	r3, [r7, #15]
 8005bf4:	e10b      	b.n	8005e0e <USBH_MSC_InterfaceInit+0x24a>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 fc26 	bl	800744c <USBH_SelectInterface>

    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005c06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005c0a:	f006 f86f 	bl	800bcec <malloc>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	61e3      	str	r3, [r4, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	60bb      	str	r3, [r7, #8]

    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005c22:	4619      	mov	r1, r3
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	231a      	movs	r3, #26
 8005c28:	fb03 f301 	mul.w	r3, r3, r1
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	b25b      	sxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	da1c      	bge.n	8005c74 <USBH_MSC_InterfaceInit+0xb0>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005c40:	4619      	mov	r1, r3
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	231a      	movs	r3, #26
 8005c46:	fb03 f301 	mul.w	r3, r3, r1
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	231a      	movs	r3, #26
 8005c62:	fb03 f301 	mul.w	r3, r3, r1
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005c6c:	881a      	ldrh	r2, [r3, #0]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	815a      	strh	r2, [r3, #10]
 8005c72:	e01b      	b.n	8005cac <USBH_MSC_InterfaceInit+0xe8>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	231a      	movs	r3, #26
 8005c80:	fb03 f301 	mul.w	r3, r3, r1
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005c8a:	781a      	ldrb	r2, [r3, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005c96:	4619      	mov	r1, r3
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	231a      	movs	r3, #26
 8005c9c:	fb03 f301 	mul.w	r3, r3, r1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005ca6:	881a      	ldrh	r2, [r3, #0]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	811a      	strh	r2, [r3, #8]
    }

    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	231a      	movs	r3, #26
 8005cb8:	fb03 f301 	mul.w	r3, r3, r1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	b25b      	sxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da1c      	bge.n	8005d04 <USBH_MSC_InterfaceInit+0x140>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	231a      	movs	r3, #26
 8005cd6:	fb03 f301 	mul.w	r3, r3, r1
 8005cda:	4413      	add	r3, r2
 8005cdc:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005cec:	4619      	mov	r1, r3
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	231a      	movs	r3, #26
 8005cf2:	fb03 f301 	mul.w	r3, r3, r1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005cfc:	881a      	ldrh	r2, [r3, #0]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	815a      	strh	r2, [r3, #10]
 8005d02:	e01b      	b.n	8005d3c <USBH_MSC_InterfaceInit+0x178>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	231a      	movs	r3, #26
 8005d10:	fb03 f301 	mul.w	r3, r3, r1
 8005d14:	4413      	add	r3, r2
 8005d16:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005d26:	4619      	mov	r1, r3
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	231a      	movs	r3, #26
 8005d2c:	fb03 f301 	mul.w	r3, r3, r1
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005d36:	881a      	ldrh	r2, [r3, #0]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	811a      	strh	r2, [r3, #8]
    }

    MSC_Handle->current_lun = 0U;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->rw_lun = 0U;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	731a      	strb	r2, [r3, #12]
    MSC_Handle->error = MSC_OK;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2200      	movs	r2, #0
 8005d56:	735a      	strb	r2, [r3, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	739a      	strb	r2, [r3, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	799b      	ldrb	r3, [r3, #6]
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f002 fcb4 	bl	80086d2 <USBH_AllocPipe>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	715a      	strb	r2, [r3, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	79db      	ldrb	r3, [r3, #7]
 8005d76:	4619      	mov	r1, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f002 fcaa 	bl	80086d2 <USBH_AllocPipe>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	711a      	strb	r2, [r3, #4]

    USBH_MSC_BOT_Init(phost);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fdac 	bl	80068e4 <USBH_MSC_BOT_Init>

    /* De-Initialize LUNs information */
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	3390      	adds	r3, #144	; 0x90
 8005d90:	2268      	movs	r2, #104	; 0x68
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f005 ffc4 	bl	800bd22 <memset>

    /* Open the new channels */
    USBH_OpenPipe  (phost,
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	7959      	ldrb	r1, [r3, #5]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	7998      	ldrb	r0, [r3, #6]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	8912      	ldrh	r2, [r2, #8]
 8005db2:	9202      	str	r2, [sp, #8]
 8005db4:	2202      	movs	r2, #2
 8005db6:	9201      	str	r2, [sp, #4]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	4623      	mov	r3, r4
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f002 fc58 	bl	8008674 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->OutEpSize);

    USBH_OpenPipe  (phost,
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	7919      	ldrb	r1, [r3, #4]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	79d8      	ldrb	r0, [r3, #7]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	8952      	ldrh	r2, [r2, #10]
 8005ddc:	9202      	str	r2, [sp, #8]
 8005dde:	2202      	movs	r2, #2
 8005de0:	9201      	str	r2, [sp, #4]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	4623      	mov	r3, r4
 8005de6:	4602      	mov	r2, r0
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f002 fc43 	bl	8008674 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->InEpSize);

    USBH_LL_SetToggle (phost, MSC_Handle->InPipe, 0U);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	791b      	ldrb	r3, [r3, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f005 fe9a 	bl	800bb30 <USBH_LL_SetToggle>
    USBH_LL_SetToggle (phost, MSC_Handle->OutPipe, 0U);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	795b      	ldrb	r3, [r3, #5]
 8005e00:	2200      	movs	r2, #0
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f005 fe93 	bl	800bb30 <USBH_LL_SetToggle>
    status = USBH_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd90      	pop	{r4, r7, pc}

08005e18 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	60fb      	str	r3, [r7, #12]

  if ( MSC_Handle->OutPipe)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	795b      	ldrb	r3, [r3, #5]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	795b      	ldrb	r3, [r3, #5]
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f002 fc3a 	bl	80086b2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	795b      	ldrb	r3, [r3, #5]
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f002 fc62 	bl	800870e <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	715a      	strb	r2, [r3, #5]
  }

  if ( MSC_Handle->InPipe)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	791b      	ldrb	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00e      	beq.n	8005e76 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	791b      	ldrb	r3, [r3, #4]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f002 fc27 	bl	80086b2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	791b      	ldrb	r3, [r3, #4]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f002 fc4f 	bl	800870e <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	711a      	strb	r2, [r3, #4]
  }

  if(phost->pActiveClass->pData)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free (phost->pActiveClass->pData);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f005 ff36 	bl	800bcfc <free>
    phost->pActiveClass->pData = 0U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e96:	2200      	movs	r2, #0
 8005e98:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	7b9b      	ldrb	r3, [r3, #14]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d004      	beq.n	8005ecc <USBH_MSC_ClassRequest+0x28>
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d03e      	beq.n	8005f44 <USBH_MSC_ClassRequest+0xa0>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d000      	beq.n	8005ecc <USBH_MSC_ClassRequest+0x28>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
    }
    break;

  default:
    break;
 8005eca:	e04a      	b.n	8005f62 <USBH_MSC_ClassRequest+0xbe>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)(void *)&MSC_Handle->max_lun);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fce9 	bl	80068a8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_NOT_SUPPORTED)
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d104      	bne.n	8005eea <USBH_MSC_ClassRequest+0x46>
      MSC_Handle->max_lun = 0U;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
      status = USBH_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_OK)
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d135      	bne.n	8005f5c <USBH_MSC_ClassRequest+0xb8>
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d804      	bhi.n	8005f02 <USBH_MSC_ClassRequest+0x5e>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	3301      	adds	r3, #1
 8005f00:	e000      	b.n	8005f04 <USBH_MSC_ClassRequest+0x60>
 8005f02:	2302      	movs	r3, #2
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	6013      	str	r3, [r2, #0]
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	73bb      	strb	r3, [r7, #14]
 8005f0c:	e014      	b.n	8005f38 <USBH_MSC_ClassRequest+0x94>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	2134      	movs	r1, #52	; 0x34
 8005f14:	fb01 f303 	mul.w	r3, r1, r3
 8005f18:	4413      	add	r3, r2
 8005f1a:	3392      	adds	r3, #146	; 0x92
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[i].state_changed = 0U;
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	2134      	movs	r1, #52	; 0x34
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	33c1      	adds	r3, #193	; 0xc1
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	3301      	adds	r3, #1
 8005f36:	73bb      	strb	r3, [r7, #14]
 8005f38:	7bba      	ldrb	r2, [r7, #14]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d3e5      	bcc.n	8005f0e <USBH_MSC_ClassRequest+0x6a>
    break;
 8005f42:	e00b      	b.n	8005f5c <USBH_MSC_ClassRequest+0xb8>
    if(USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005f44:	2100      	movs	r1, #0
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 ff60 	bl	8007e0c <USBH_ClrFeature>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <USBH_MSC_ClassRequest+0xbc>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	7bda      	ldrb	r2, [r3, #15]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	739a      	strb	r2, [r3, #14]
    break;
 8005f5a:	e001      	b.n	8005f60 <USBH_MSC_ClassRequest+0xbc>
    break;
 8005f5c:	bf00      	nop
 8005f5e:	e000      	b.n	8005f62 <USBH_MSC_ClassRequest+0xbe>
    break;
 8005f60:	bf00      	nop
  }

  return status;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005f82:	2301      	movs	r3, #1
 8005f84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY ;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	7b1b      	ldrb	r3, [r3, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <USBH_MSC_Process+0x2e>
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	f000 8271 	beq.w	800647a <USBH_MSC_Process+0x50e>
  case MSC_IDLE:
    error = USBH_OK;
    break;

  default:
    break;
 8005f98:	e272      	b.n	8006480 <USBH_MSC_Process+0x514>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	f080 824f 	bcs.w	800644a <USBH_MSC_Process+0x4de>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	2334      	movs	r3, #52	; 0x34
 8005fb8:	fb03 f301 	mul.w	r3, r3, r1
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3391      	adds	r3, #145	; 0x91
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	701a      	strb	r2, [r3, #0]
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fca:	4619      	mov	r1, r3
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	2334      	movs	r3, #52	; 0x34
 8005fd0:	fb03 f301 	mul.w	r3, r3, r1
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3390      	adds	r3, #144	; 0x90
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	f200 8243 	bhi.w	8006466 <USBH_MSC_Process+0x4fa>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <USBH_MSC_Process+0x7c>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006467 	.word	0x08006467
 8005ff0:	080060d5 	.word	0x080060d5
 8005ff4:	08006259 	.word	0x08006259
 8005ff8:	08006033 	.word	0x08006033
 8005ffc:	08006325 	.word	0x08006325
 8006000:	08006467 	.word	0x08006467
 8006004:	08006467 	.word	0x08006467
 8006008:	08006439 	.word	0x08006439
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006012:	4619      	mov	r1, r3
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	2334      	movs	r3, #52	; 0x34
 8006018:	fb03 f301 	mul.w	r3, r3, r1
 800601c:	4413      	add	r3, r2
 800601e:	3390      	adds	r3, #144	; 0x90
 8006020:	2204      	movs	r2, #4
 8006022:	701a      	strb	r2, [r3, #0]
        MSC_Handle->timer = phost->Timer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        break;
 8006030:	e222      	b.n	8006478 <USBH_MSC_Process+0x50c>
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006038:	b2d9      	uxtb	r1, r3
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006040:	461a      	mov	r2, r3
 8006042:	2334      	movs	r3, #52	; 0x34
 8006044:	fb03 f302 	mul.w	r3, r3, r2
 8006048:	3398      	adds	r3, #152	; 0x98
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4413      	add	r3, r2
 800604e:	3307      	adds	r3, #7
 8006050:	461a      	mov	r2, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 ff68 	bl	8006f28 <USBH_MSC_SCSI_Inquiry>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]
        if (scsi_status == USBH_OK)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <USBH_MSC_Process+0x10e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006068:	4619      	mov	r1, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	2334      	movs	r3, #52	; 0x34
 800606e:	fb03 f301 	mul.w	r3, r3, r1
 8006072:	4413      	add	r3, r2
 8006074:	3390      	adds	r3, #144	; 0x90
 8006076:	2202      	movs	r2, #2
 8006078:	701a      	strb	r2, [r3, #0]
        if (scsi_status == USBH_FAIL)
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d10c      	bne.n	800609a <USBH_MSC_Process+0x12e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006086:	4619      	mov	r1, r3
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	2334      	movs	r3, #52	; 0x34
 800608c:	fb03 f301 	mul.w	r3, r3, r1
 8006090:	4413      	add	r3, r2
 8006092:	3390      	adds	r3, #144	; 0x90
 8006094:	2205      	movs	r2, #5
 8006096:	701a      	strb	r2, [r3, #0]
        break;
 8006098:	e1e7      	b.n	800646a <USBH_MSC_Process+0x4fe>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	2b04      	cmp	r3, #4
 800609e:	f040 81e4 	bne.w	800646a <USBH_MSC_Process+0x4fe>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060a8:	4619      	mov	r1, r3
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	2334      	movs	r3, #52	; 0x34
 80060ae:	fb03 f301 	mul.w	r3, r3, r1
 80060b2:	4413      	add	r3, r2
 80060b4:	3390      	adds	r3, #144	; 0x90
 80060b6:	2201      	movs	r2, #1
 80060b8:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060c0:	4619      	mov	r1, r3
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	2334      	movs	r3, #52	; 0x34
 80060c6:	fb03 f301 	mul.w	r3, r3, r1
 80060ca:	4413      	add	r3, r2
 80060cc:	3391      	adds	r3, #145	; 0x91
 80060ce:	2202      	movs	r2, #2
 80060d0:	701a      	strb	r2, [r3, #0]
        break;
 80060d2:	e1ca      	b.n	800646a <USBH_MSC_Process+0x4fe>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fe64 	bl	8006dac <USBH_MSC_SCSI_TestUnitReady>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73bb      	strb	r3, [r7, #14]
        if (ready_status == USBH_OK)
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d149      	bne.n	8006182 <USBH_MSC_Process+0x216>
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060f4:	4619      	mov	r1, r3
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	2334      	movs	r3, #52	; 0x34
 80060fa:	fb03 f301 	mul.w	r3, r3, r1
 80060fe:	4413      	add	r3, r2
 8006100:	3392      	adds	r3, #146	; 0x92
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00c      	beq.n	8006122 <USBH_MSC_Process+0x1b6>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800610e:	4619      	mov	r1, r3
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	2334      	movs	r3, #52	; 0x34
 8006114:	fb03 f301 	mul.w	r3, r3, r1
 8006118:	4413      	add	r3, r2
 800611a:	33c1      	adds	r3, #193	; 0xc1
 800611c:	2201      	movs	r2, #1
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e00b      	b.n	800613a <USBH_MSC_Process+0x1ce>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006128:	4619      	mov	r1, r3
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	2334      	movs	r3, #52	; 0x34
 800612e:	fb03 f301 	mul.w	r3, r3, r1
 8006132:	4413      	add	r3, r2
 8006134:	33c1      	adds	r3, #193	; 0xc1
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006140:	4619      	mov	r1, r3
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	2334      	movs	r3, #52	; 0x34
 8006146:	fb03 f301 	mul.w	r3, r3, r1
 800614a:	4413      	add	r3, r2
 800614c:	3390      	adds	r3, #144	; 0x90
 800614e:	2203      	movs	r2, #3
 8006150:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006158:	4619      	mov	r1, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	2334      	movs	r3, #52	; 0x34
 800615e:	fb03 f301 	mul.w	r3, r3, r1
 8006162:	4413      	add	r3, r2
 8006164:	3391      	adds	r3, #145	; 0x91
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006170:	4619      	mov	r1, r3
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	2334      	movs	r3, #52	; 0x34
 8006176:	fb03 f301 	mul.w	r3, r3, r1
 800617a:	4413      	add	r3, r2
 800617c:	3392      	adds	r3, #146	; 0x92
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
        if (ready_status == USBH_FAIL)
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d14a      	bne.n	800621e <USBH_MSC_Process+0x2b2>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800618e:	4619      	mov	r1, r3
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	2334      	movs	r3, #52	; 0x34
 8006194:	fb03 f301 	mul.w	r3, r3, r1
 8006198:	4413      	add	r3, r2
 800619a:	3392      	adds	r3, #146	; 0x92
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d00c      	beq.n	80061bc <USBH_MSC_Process+0x250>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061a8:	4619      	mov	r1, r3
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	2334      	movs	r3, #52	; 0x34
 80061ae:	fb03 f301 	mul.w	r3, r3, r1
 80061b2:	4413      	add	r3, r2
 80061b4:	33c1      	adds	r3, #193	; 0xc1
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e00b      	b.n	80061d4 <USBH_MSC_Process+0x268>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061c2:	4619      	mov	r1, r3
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	2334      	movs	r3, #52	; 0x34
 80061c8:	fb03 f301 	mul.w	r3, r3, r1
 80061cc:	4413      	add	r3, r2
 80061ce:	33c1      	adds	r3, #193	; 0xc1
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061da:	4619      	mov	r1, r3
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	2334      	movs	r3, #52	; 0x34
 80061e0:	fb03 f301 	mul.w	r3, r3, r1
 80061e4:	4413      	add	r3, r2
 80061e6:	3390      	adds	r3, #144	; 0x90
 80061e8:	2205      	movs	r2, #5
 80061ea:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061f2:	4619      	mov	r1, r3
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	2334      	movs	r3, #52	; 0x34
 80061f8:	fb03 f301 	mul.w	r3, r3, r1
 80061fc:	4413      	add	r3, r2
 80061fe:	3391      	adds	r3, #145	; 0x91
 8006200:	2201      	movs	r2, #1
 8006202:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800620a:	4619      	mov	r1, r3
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	2334      	movs	r3, #52	; 0x34
 8006210:	fb03 f301 	mul.w	r3, r3, r1
 8006214:	4413      	add	r3, r2
 8006216:	3392      	adds	r3, #146	; 0x92
 8006218:	2202      	movs	r2, #2
 800621a:	701a      	strb	r2, [r3, #0]
        break;
 800621c:	e127      	b.n	800646e <USBH_MSC_Process+0x502>
          if (ready_status == USBH_UNRECOVERED_ERROR)
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b04      	cmp	r3, #4
 8006222:	f040 8124 	bne.w	800646e <USBH_MSC_Process+0x502>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800622c:	4619      	mov	r1, r3
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	2334      	movs	r3, #52	; 0x34
 8006232:	fb03 f301 	mul.w	r3, r3, r1
 8006236:	4413      	add	r3, r2
 8006238:	3390      	adds	r3, #144	; 0x90
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006244:	4619      	mov	r1, r3
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	2334      	movs	r3, #52	; 0x34
 800624a:	fb03 f301 	mul.w	r3, r3, r1
 800624e:	4413      	add	r3, r2
 8006250:	3391      	adds	r3, #145	; 0x91
 8006252:	2202      	movs	r2, #2
 8006254:	701a      	strb	r2, [r3, #0]
        break;
 8006256:	e10a      	b.n	800646e <USBH_MSC_Process+0x502>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800625e:	b2d9      	uxtb	r1, r3
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006266:	461a      	mov	r2, r3
 8006268:	2334      	movs	r3, #52	; 0x34
 800626a:	fb03 f302 	mul.w	r3, r3, r2
 800626e:	3390      	adds	r3, #144	; 0x90
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4413      	add	r3, r2
 8006274:	3304      	adds	r3, #4
 8006276:	461a      	mov	r2, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fdda 	bl	8006e32 <USBH_MSC_SCSI_ReadCapacity>
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
        if(scsi_status == USBH_OK)
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d120      	bne.n	80062ca <USBH_MSC_Process+0x35e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800628e:	4619      	mov	r1, r3
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	2334      	movs	r3, #52	; 0x34
 8006294:	fb03 f301 	mul.w	r3, r3, r1
 8006298:	4413      	add	r3, r2
 800629a:	3390      	adds	r3, #144	; 0x90
 800629c:	2201      	movs	r2, #1
 800629e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062a6:	4619      	mov	r1, r3
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	2334      	movs	r3, #52	; 0x34
 80062ac:	fb03 f301 	mul.w	r3, r3, r1
 80062b0:	4413      	add	r3, r2
 80062b2:	3391      	adds	r3, #145	; 0x91
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062be:	3301      	adds	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 80062c8:	e0d3      	b.n	8006472 <USBH_MSC_Process+0x506>
        else if(scsi_status == USBH_FAIL)
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d10c      	bne.n	80062ea <USBH_MSC_Process+0x37e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062d6:	4619      	mov	r1, r3
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	2334      	movs	r3, #52	; 0x34
 80062dc:	fb03 f301 	mul.w	r3, r3, r1
 80062e0:	4413      	add	r3, r2
 80062e2:	3390      	adds	r3, #144	; 0x90
 80062e4:	2205      	movs	r2, #5
 80062e6:	701a      	strb	r2, [r3, #0]
        break;
 80062e8:	e0c3      	b.n	8006472 <USBH_MSC_Process+0x506>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	f040 80c0 	bne.w	8006472 <USBH_MSC_Process+0x506>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062f8:	4619      	mov	r1, r3
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	2334      	movs	r3, #52	; 0x34
 80062fe:	fb03 f301 	mul.w	r3, r3, r1
 8006302:	4413      	add	r3, r2
 8006304:	3390      	adds	r3, #144	; 0x90
 8006306:	2201      	movs	r2, #1
 8006308:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006310:	4619      	mov	r1, r3
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	2334      	movs	r3, #52	; 0x34
 8006316:	fb03 f301 	mul.w	r3, r3, r1
 800631a:	4413      	add	r3, r2
 800631c:	3391      	adds	r3, #145	; 0x91
 800631e:	2202      	movs	r2, #2
 8006320:	701a      	strb	r2, [r3, #0]
        break;
 8006322:	e0a6      	b.n	8006472 <USBH_MSC_Process+0x506>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800632a:	b2d9      	uxtb	r1, r3
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006332:	461a      	mov	r2, r3
 8006334:	2334      	movs	r3, #52	; 0x34
 8006336:	fb03 f302 	mul.w	r3, r3, r2
 800633a:	3398      	adds	r3, #152	; 0x98
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4413      	add	r3, r2
 8006340:	3304      	adds	r3, #4
 8006342:	461a      	mov	r2, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fe94 	bl	8007072 <USBH_MSC_SCSI_RequestSense>
 800634a:	4603      	mov	r3, r0
 800634c:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d145      	bne.n	80063e0 <USBH_MSC_Process+0x474>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800635a:	4619      	mov	r1, r3
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	2334      	movs	r3, #52	; 0x34
 8006360:	fb03 f301 	mul.w	r3, r3, r1
 8006364:	4413      	add	r3, r2
 8006366:	339c      	adds	r3, #156	; 0x9c
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b06      	cmp	r3, #6
 800636c:	d00c      	beq.n	8006388 <USBH_MSC_Process+0x41c>
             (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006374:	4619      	mov	r1, r3
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	2334      	movs	r3, #52	; 0x34
 800637a:	fb03 f301 	mul.w	r3, r3, r1
 800637e:	4413      	add	r3, r2
 8006380:	339c      	adds	r3, #156	; 0x9c
 8006382:	781b      	ldrb	r3, [r3, #0]
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006384:	2b02      	cmp	r3, #2
 8006386:	d117      	bne.n	80063b8 <USBH_MSC_Process+0x44c>
            if((phost->Timer - MSC_Handle->timer) < 10000U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f242 720f 	movw	r2, #9999	; 0x270f
 800639a:	4293      	cmp	r3, r2
 800639c:	d80c      	bhi.n	80063b8 <USBH_MSC_Process+0x44c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063a4:	4619      	mov	r1, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	2334      	movs	r3, #52	; 0x34
 80063aa:	fb03 f301 	mul.w	r3, r3, r1
 80063ae:	4413      	add	r3, r2
 80063b0:	3390      	adds	r3, #144	; 0x90
 80063b2:	2202      	movs	r2, #2
 80063b4:	701a      	strb	r2, [r3, #0]
              break;
 80063b6:	e05f      	b.n	8006478 <USBH_MSC_Process+0x50c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063be:	4619      	mov	r1, r3
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	2334      	movs	r3, #52	; 0x34
 80063c4:	fb03 f301 	mul.w	r3, r3, r1
 80063c8:	4413      	add	r3, r2
 80063ca:	3390      	adds	r3, #144	; 0x90
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063d6:	3301      	adds	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        if(scsi_status == USBH_FAIL)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d10c      	bne.n	8006400 <USBH_MSC_Process+0x494>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063ec:	4619      	mov	r1, r3
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	2334      	movs	r3, #52	; 0x34
 80063f2:	fb03 f301 	mul.w	r3, r3, r1
 80063f6:	4413      	add	r3, r2
 80063f8:	3390      	adds	r3, #144	; 0x90
 80063fa:	2208      	movs	r2, #8
 80063fc:	701a      	strb	r2, [r3, #0]
        break;
 80063fe:	e03a      	b.n	8006476 <USBH_MSC_Process+0x50a>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b04      	cmp	r3, #4
 8006404:	d137      	bne.n	8006476 <USBH_MSC_Process+0x50a>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800640c:	4619      	mov	r1, r3
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	2334      	movs	r3, #52	; 0x34
 8006412:	fb03 f301 	mul.w	r3, r3, r1
 8006416:	4413      	add	r3, r2
 8006418:	3390      	adds	r3, #144	; 0x90
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006424:	4619      	mov	r1, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	2334      	movs	r3, #52	; 0x34
 800642a:	fb03 f301 	mul.w	r3, r3, r1
 800642e:	4413      	add	r3, r2
 8006430:	3391      	adds	r3, #145	; 0x91
 8006432:	2202      	movs	r2, #2
 8006434:	701a      	strb	r2, [r3, #0]
        break;
 8006436:	e01e      	b.n	8006476 <USBH_MSC_Process+0x50a>
        MSC_Handle->current_lun++;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800643e:	3301      	adds	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 8006448:	e016      	b.n	8006478 <USBH_MSC_Process+0x50c>
      MSC_Handle->current_lun = 0U;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2200      	movs	r2, #0
 800644e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
      MSC_Handle->state = MSC_IDLE;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2201      	movs	r2, #1
 8006456:	731a      	strb	r2, [r3, #12]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800645e:	2102      	movs	r1, #2
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
    break;
 8006464:	e00c      	b.n	8006480 <USBH_MSC_Process+0x514>
        break;
 8006466:	bf00      	nop
 8006468:	e00a      	b.n	8006480 <USBH_MSC_Process+0x514>
        break;
 800646a:	bf00      	nop
 800646c:	e008      	b.n	8006480 <USBH_MSC_Process+0x514>
        break;
 800646e:	bf00      	nop
 8006470:	e006      	b.n	8006480 <USBH_MSC_Process+0x514>
        break;
 8006472:	bf00      	nop
 8006474:	e004      	b.n	8006480 <USBH_MSC_Process+0x514>
        break;
 8006476:	bf00      	nop
    break;
 8006478:	e002      	b.n	8006480 <USBH_MSC_Process+0x514>
    error = USBH_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	75fb      	strb	r3, [r7, #23]
    break;
 800647e:	bf00      	nop
  }
  return error;
 8006480:	7dfb      	ldrb	r3, [r7, #23]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop

0800648c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]

  return USBH_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b088      	sub	sp, #32
 80064a6:	af02      	add	r7, sp, #8
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	2134      	movs	r1, #52	; 0x34
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	3390      	adds	r3, #144	; 0x90
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b06      	cmp	r3, #6
 80064d2:	d004      	beq.n	80064de <USBH_MSC_RdWrProcess+0x3c>
 80064d4:	2b07      	cmp	r3, #7
 80064d6:	d037      	beq.n	8006548 <USBH_MSC_RdWrProcess+0xa6>
 80064d8:	2b05      	cmp	r3, #5
 80064da:	d06a      	beq.n	80065b2 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
    break;

  default:
    break;
 80064dc:	e0a6      	b.n	800662c <USBH_MSC_RdWrProcess+0x18a>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 80064de:	78f9      	ldrb	r1, [r7, #3]
 80064e0:	2300      	movs	r3, #0
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	2200      	movs	r2, #0
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fea6 	bl	800723a <USBH_MSC_SCSI_Read>
 80064ee:	4603      	mov	r3, r0
 80064f0:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10b      	bne.n	8006510 <USBH_MSC_RdWrProcess+0x6e>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	2134      	movs	r1, #52	; 0x34
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	4413      	add	r3, r2
 8006504:	3390      	adds	r3, #144	; 0x90
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
      error = USBH_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	75fb      	strb	r3, [r7, #23]
    break;
 800650e:	e088      	b.n	8006622 <USBH_MSC_RdWrProcess+0x180>
    else if( scsi_status == USBH_FAIL)
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d109      	bne.n	800652a <USBH_MSC_RdWrProcess+0x88>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	2134      	movs	r1, #52	; 0x34
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	4413      	add	r3, r2
 8006522:	3390      	adds	r3, #144	; 0x90
 8006524:	2205      	movs	r2, #5
 8006526:	701a      	strb	r2, [r3, #0]
    break;
 8006528:	e07b      	b.n	8006622 <USBH_MSC_RdWrProcess+0x180>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b04      	cmp	r3, #4
 800652e:	d178      	bne.n	8006622 <USBH_MSC_RdWrProcess+0x180>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	2134      	movs	r1, #52	; 0x34
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	4413      	add	r3, r2
 800653c:	3390      	adds	r3, #144	; 0x90
 800653e:	2208      	movs	r2, #8
 8006540:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8006542:	2302      	movs	r3, #2
 8006544:	75fb      	strb	r3, [r7, #23]
    break;
 8006546:	e06c      	b.n	8006622 <USBH_MSC_RdWrProcess+0x180>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 8006548:	78f9      	ldrb	r1, [r7, #3]
 800654a:	2300      	movs	r3, #0
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	2200      	movs	r2, #0
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fe06 	bl	8007164 <USBH_MSC_SCSI_Write>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	2134      	movs	r1, #52	; 0x34
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	4413      	add	r3, r2
 800656e:	3390      	adds	r3, #144	; 0x90
 8006570:	2201      	movs	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	75fb      	strb	r3, [r7, #23]
    break;
 8006578:	e055      	b.n	8006626 <USBH_MSC_RdWrProcess+0x184>
    else if( scsi_status == USBH_FAIL)
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d109      	bne.n	8006594 <USBH_MSC_RdWrProcess+0xf2>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	2134      	movs	r1, #52	; 0x34
 8006586:	fb01 f303 	mul.w	r3, r1, r3
 800658a:	4413      	add	r3, r2
 800658c:	3390      	adds	r3, #144	; 0x90
 800658e:	2205      	movs	r2, #5
 8006590:	701a      	strb	r2, [r3, #0]
    break;
 8006592:	e048      	b.n	8006626 <USBH_MSC_RdWrProcess+0x184>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b04      	cmp	r3, #4
 8006598:	d145      	bne.n	8006626 <USBH_MSC_RdWrProcess+0x184>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	2134      	movs	r1, #52	; 0x34
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	4413      	add	r3, r2
 80065a6:	3390      	adds	r3, #144	; 0x90
 80065a8:	2208      	movs	r2, #8
 80065aa:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 80065ac:	2302      	movs	r3, #2
 80065ae:	75fb      	strb	r3, [r7, #23]
    break;
 80065b0:	e039      	b.n	8006626 <USBH_MSC_RdWrProcess+0x184>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	2234      	movs	r2, #52	; 0x34
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	3398      	adds	r3, #152	; 0x98
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	1d1a      	adds	r2, r3, #4
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fd53 	bl	8007072 <USBH_MSC_SCSI_RequestSense>
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d113      	bne.n	80065fe <USBH_MSC_RdWrProcess+0x15c>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	2134      	movs	r1, #52	; 0x34
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	4413      	add	r3, r2
 80065e2:	3390      	adds	r3, #144	; 0x90
 80065e4:	2201      	movs	r2, #1
 80065e6:	701a      	strb	r2, [r3, #0]
      MSC_Handle->unit[lun].error = MSC_ERROR;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	2134      	movs	r1, #52	; 0x34
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	3391      	adds	r3, #145	; 0x91
 80065f6:	2202      	movs	r2, #2
 80065f8:	701a      	strb	r2, [r3, #0]
      error = USBH_FAIL;
 80065fa:	2302      	movs	r3, #2
 80065fc:	75fb      	strb	r3, [r7, #23]
    if(scsi_status == USBH_FAIL)
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d012      	beq.n	800662a <USBH_MSC_RdWrProcess+0x188>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b04      	cmp	r3, #4
 8006608:	d10f      	bne.n	800662a <USBH_MSC_RdWrProcess+0x188>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	2134      	movs	r1, #52	; 0x34
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	4413      	add	r3, r2
 8006616:	3390      	adds	r3, #144	; 0x90
 8006618:	2208      	movs	r2, #8
 800661a:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800661c:	2302      	movs	r3, #2
 800661e:	75fb      	strb	r3, [r7, #23]
    break;
 8006620:	e003      	b.n	800662a <USBH_MSC_RdWrProcess+0x188>
    break;
 8006622:	bf00      	nop
 8006624:	e002      	b.n	800662c <USBH_MSC_RdWrProcess+0x18a>
    break;
 8006626:	bf00      	nop
 8006628:	e000      	b.n	800662c <USBH_MSC_RdWrProcess+0x18a>
    break;
 800662a:	bf00      	nop

  }
  return error;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b0b      	cmp	r3, #11
 8006654:	d10c      	bne.n	8006670 <USBH_MSC_UnitIsReady+0x3a>
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	2134      	movs	r1, #52	; 0x34
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	3391      	adds	r3, #145	; 0x91
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
 800666e:	e001      	b.n	8006674 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b086      	sub	sp, #24
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	460b      	mov	r3, r1
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	617b      	str	r3, [r7, #20]
  if(phost->gState == HOST_CLASS)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b0b      	cmp	r3, #11
 80066a2:	d10d      	bne.n	80066c0 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	2234      	movs	r2, #52	; 0x34
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
 80066ac:	3390      	adds	r3, #144	; 0x90
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	2234      	movs	r2, #52	; 0x34
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f005 fb28 	bl	800bd0c <memcpy>
    return USBH_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	e000      	b.n	80066c2 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80066c0:	2302      	movs	r3, #2
  }
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b088      	sub	sp, #32
 80066ce:	af02      	add	r7, sp, #8
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
 80066d6:	460b      	mov	r3, r1
 80066d8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00e      	beq.n	800670e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80066f6:	2b0b      	cmp	r3, #11
 80066f8:	d109      	bne.n	800670e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	2134      	movs	r1, #52	; 0x34
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	3390      	adds	r3, #144	; 0x90
 8006708:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800670a:	2b01      	cmp	r3, #1
 800670c:	d001      	beq.n	8006712 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800670e:	2302      	movs	r3, #2
 8006710:	e040      	b.n	8006794 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2206      	movs	r2, #6
 8006716:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	2134      	movs	r1, #52	; 0x34
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	4413      	add	r3, r2
 8006724:	3390      	adds	r3, #144	; 0x90
 8006726:	2206      	movs	r2, #6
 8006728:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800672a:	7afb      	ldrb	r3, [r7, #11]
 800672c:	b29a      	uxth	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006734:	7af9      	ldrb	r1, [r7, #11]
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fd7b 	bl	800723a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800674a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800674c:	e016      	b.n	800677c <USBH_MSC_Read+0xb2>
  {
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad2      	subs	r2, r2, r3
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	f242 7110 	movw	r1, #10000	; 0x2710
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	429a      	cmp	r2, r3
 8006764:	d805      	bhi.n	8006772 <USBH_MSC_Read+0xa8>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2201      	movs	r2, #1
 8006776:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006778:	2302      	movs	r3, #2
 800677a:	e00b      	b.n	8006794 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	4619      	mov	r1, r3
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7ff fe8e 	bl	80064a2 <USBH_MSC_RdWrProcess>
 8006786:	4603      	mov	r3, r0
 8006788:	2b01      	cmp	r3, #1
 800678a:	d0e0      	beq.n	800674e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2201      	movs	r2, #1
 8006790:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	460b      	mov	r3, r1
 80067aa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80067c8:	2b0b      	cmp	r3, #11
 80067ca:	d109      	bne.n	80067e0 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80067cc:	7afb      	ldrb	r3, [r7, #11]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	2134      	movs	r1, #52	; 0x34
 80067d2:	fb01 f303 	mul.w	r3, r1, r3
 80067d6:	4413      	add	r3, r2
 80067d8:	3390      	adds	r3, #144	; 0x90
 80067da:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d001      	beq.n	80067e4 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80067e0:	2302      	movs	r3, #2
 80067e2:	e040      	b.n	8006866 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2207      	movs	r2, #7
 80067e8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	2134      	movs	r1, #52	; 0x34
 80067f0:	fb01 f303 	mul.w	r3, r1, r3
 80067f4:	4413      	add	r3, r2
 80067f6:	3390      	adds	r3, #144	; 0x90
 80067f8:	2207      	movs	r2, #7
 80067fa:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80067fc:	7afb      	ldrb	r3, [r7, #11]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006806:	7af9      	ldrb	r1, [r7, #11]
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fca7 	bl	8007164 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800681c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800681e:	e016      	b.n	800684e <USBH_MSC_Write+0xb2>
  {
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad2      	subs	r2, r2, r3
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	f242 7110 	movw	r1, #10000	; 0x2710
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	429a      	cmp	r2, r3
 8006836:	d805      	bhi.n	8006844 <USBH_MSC_Write+0xa8>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2201      	movs	r2, #1
 8006848:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800684a:	2302      	movs	r3, #2
 800684c:	e00b      	b.n	8006866 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	4619      	mov	r1, r3
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff fe25 	bl	80064a2 <USBH_MSC_RdWrProcess>
 8006858:	4603      	mov	r3, r0
 800685a:	2b01      	cmp	r3, #1
 800685c:	d0e0      	beq.n	8006820 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2201      	movs	r2, #1
 8006862:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2221      	movs	r2, #33	; 0x21
 800687a:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006894:	2200      	movs	r2, #0
 8006896:	2100      	movs	r1, #0
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fc97 	bl	80081cc <USBH_CtlReq>
 800689e:	4603      	mov	r3, r0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	22a1      	movs	r2, #161	; 0xa1
 80068b6:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	22fe      	movs	r2, #254	; 0xfe
 80068bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80068d0:	2201      	movs	r2, #1
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fc79 	bl	80081cc <USBH_CtlReq>
 80068da:	4603      	mov	r3, r0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <USBH_MSC_BOT_Init+0x3c>)
 80068fa:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a09      	ldr	r2, [pc, #36]	; (8006924 <USBH_MSC_BOT_Init+0x40>)
 8006900:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	43425355 	.word	0x43425355
 8006924:	20304050 	.word	0x20304050

08006928 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af02      	add	r7, sp, #8
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006934:	2301      	movs	r3, #1
 8006936:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006938:	2301      	movs	r3, #1
 800693a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800693c:	2301      	movs	r3, #1
 800693e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006940:	2300      	movs	r3, #0
 8006942:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006958:	3b01      	subs	r3, #1
 800695a:	2b0a      	cmp	r3, #10
 800695c:	f200 81a1 	bhi.w	8006ca2 <USBH_MSC_BOT_Process+0x37a>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <USBH_MSC_BOT_Process+0x40>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	08006995 	.word	0x08006995
 800696c:	080069bf 	.word	0x080069bf
 8006970:	08006a29 	.word	0x08006a29
 8006974:	08006a47 	.word	0x08006a47
 8006978:	08006acb 	.word	0x08006acb
 800697c:	08006aef 	.word	0x08006aef
 8006980:	08006b89 	.word	0x08006b89
 8006984:	08006ba5 	.word	0x08006ba5
 8006988:	08006bf7 	.word	0x08006bf7
 800698c:	08006c27 	.word	0x08006c27
 8006990:	08006c89 	.word	0x08006c89
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	78fa      	ldrb	r2, [r7, #3]
 8006998:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	795a      	ldrb	r2, [r3, #5]
 80069ae:	2301      	movs	r3, #1
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	4613      	mov	r3, r2
 80069b4:	221f      	movs	r2, #31
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fe19 	bl	80085ee <USBH_BulkSendData>
                       BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

    break;
 80069bc:	e180      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>

  case BOT_SEND_CBW_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	795b      	ldrb	r3, [r3, #5]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f005 f889 	bl	800badc <USBH_LL_GetURBState>
 80069ca:	4603      	mov	r3, r0
 80069cc:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 80069ce:	7d3b      	ldrb	r3, [r7, #20]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d118      	bne.n	8006a06 <USBH_MSC_BOT_Process+0xde>
    {
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00f      	beq.n	80069fc <USBH_MSC_BOT_Process+0xd4>
      {
        /* If there is Data Transfer Stage */
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da04      	bge.n	80069f2 <USBH_MSC_BOT_Process+0xca>
        {
          /* Data Direction is IN */
          MSC_Handle->hbot.state = BOT_DATA_IN;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2203      	movs	r2, #3
 80069ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80069f0:	e159      	b.n	8006ca6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2205      	movs	r2, #5
 80069f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80069fa:	e154      	b.n	8006ca6 <USBH_MSC_BOT_Process+0x37e>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2207      	movs	r2, #7
 8006a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006a04:	e14f      	b.n	8006ca6 <USBH_MSC_BOT_Process+0x37e>
    else if(URB_Status == USBH_URB_NOTREADY)
 8006a06:	7d3b      	ldrb	r3, [r7, #20]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d104      	bne.n	8006a16 <USBH_MSC_BOT_Process+0xee>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006a14:	e147      	b.n	8006ca6 <USBH_MSC_BOT_Process+0x37e>
      if(URB_Status == USBH_URB_STALL)
 8006a16:	7d3b      	ldrb	r3, [r7, #20]
 8006a18:	2b05      	cmp	r3, #5
 8006a1a:	f040 8144 	bne.w	8006ca6 <USBH_MSC_BOT_Process+0x37e>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	220a      	movs	r2, #10
 8006a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006a26:	e13e      	b.n	8006ca6 <USBH_MSC_BOT_Process+0x37e>

  case BOT_DATA_IN:
    /* Send first packet */
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	895a      	ldrh	r2, [r3, #10]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	791b      	ldrb	r3, [r3, #4]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fdfe 	bl	8008638 <USBH_BulkReceiveData>
                          MSC_Handle->InEpSize, MSC_Handle->InPipe);

    MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    break;
 8006a44:	e13c      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>

  case BOT_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	791b      	ldrb	r3, [r3, #4]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f005 f845 	bl	800badc <USBH_LL_GetURBState>
 8006a52:	4603      	mov	r3, r0
 8006a54:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 8006a56:	7d3b      	ldrb	r3, [r7, #20]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d12d      	bne.n	8006ab8 <USBH_MSC_BOT_Process+0x190>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	8952      	ldrh	r2, [r2, #10]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d910      	bls.n	8006a8a <USBH_MSC_BOT_Process+0x162>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	8952      	ldrh	r2, [r2, #10]
 8006a72:	441a      	add	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	8952      	ldrh	r2, [r2, #10]
 8006a82:	1a9a      	subs	r2, r3, r2
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a88:	e002      	b.n	8006a90 <USBH_MSC_BOT_Process+0x168>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* More Data To be Received */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <USBH_MSC_BOT_Process+0x186>
      {
        /* Send next packet */
        USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	895a      	ldrh	r2, [r3, #10]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 fdc6 	bl	8008638 <USBH_BulkReceiveData>
#endif
    }
    else
    {
    }
    break;
 8006aac:	e0fd      	b.n	8006caa <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006ab6:	e0f8      	b.n	8006caa <USBH_MSC_BOT_Process+0x382>
    else if(URB_Status == USBH_URB_STALL)
 8006ab8:	7d3b      	ldrb	r3, [r7, #20]
 8006aba:	2b05      	cmp	r3, #5
 8006abc:	f040 80f5 	bne.w	8006caa <USBH_MSC_BOT_Process+0x382>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2209      	movs	r2, #9
 8006ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006ac8:	e0ef      	b.n	8006caa <USBH_MSC_BOT_Process+0x382>

  case BOT_DATA_OUT:

    USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	891a      	ldrh	r2, [r3, #8]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	7958      	ldrb	r0, [r3, #5]
 8006ad8:	2301      	movs	r3, #1
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	4603      	mov	r3, r0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 fd85 	bl	80085ee <USBH_BulkSendData>
                       MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2206      	movs	r2, #6
 8006ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006aec:	e0e8      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>

  case BOT_DATA_OUT_WAIT:
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	795b      	ldrb	r3, [r3, #5]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f004 fff1 	bl	800badc <USBH_LL_GetURBState>
 8006afa:	4603      	mov	r3, r0
 8006afc:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 8006afe:	7d3b      	ldrb	r3, [r7, #20]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d130      	bne.n	8006b66 <USBH_MSC_BOT_Process+0x23e>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	8912      	ldrh	r2, [r2, #8]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d910      	bls.n	8006b32 <USBH_MSC_BOT_Process+0x20a>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	8912      	ldrh	r2, [r2, #8]
 8006b1a:	441a      	add	r2, r3
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	8912      	ldrh	r2, [r2, #8]
 8006b2a:	1a9a      	subs	r2, r3, r2
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b30:	e002      	b.n	8006b38 <USBH_MSC_BOT_Process+0x210>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2200      	movs	r2, #0
 8006b36:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00d      	beq.n	8006b5c <USBH_MSC_BOT_Process+0x234>
      {
        USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	891a      	ldrh	r2, [r3, #8]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	7958      	ldrb	r0, [r3, #5]
 8006b4e:	2301      	movs	r3, #1
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4603      	mov	r3, r0
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fd4a 	bl	80085ee <USBH_BulkSendData>
#endif
    }
    else
    {
    }
    break;
 8006b5a:	e0a8      	b.n	8006cae <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2207      	movs	r2, #7
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006b64:	e0a3      	b.n	8006cae <USBH_MSC_BOT_Process+0x386>
    else if(URB_Status == USBH_URB_NOTREADY)
 8006b66:	7d3b      	ldrb	r3, [r7, #20]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d104      	bne.n	8006b76 <USBH_MSC_BOT_Process+0x24e>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2205      	movs	r2, #5
 8006b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006b74:	e09b      	b.n	8006cae <USBH_MSC_BOT_Process+0x386>
    else if(URB_Status == USBH_URB_STALL)
 8006b76:	7d3b      	ldrb	r3, [r7, #20]
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	f040 8098 	bne.w	8006cae <USBH_MSC_BOT_Process+0x386>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	220a      	movs	r2, #10
 8006b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006b86:	e092      	b.n	8006cae <USBH_MSC_BOT_Process+0x386>

  case BOT_RECEIVE_CSW:

    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	791b      	ldrb	r3, [r3, #4]
 8006b92:	220d      	movs	r2, #13
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fd4f 	bl	8008638 <USBH_BulkReceiveData>
                          BOT_CSW_LENGTH, MSC_Handle->InPipe);

    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006ba2:	e08d      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>

  case BOT_RECEIVE_CSW_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	791b      	ldrb	r3, [r3, #4]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f004 ff96 	bl	800badc <USBH_LL_GetURBState>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	753b      	strb	r3, [r7, #20]

    /* Decode CSW */
    if(URB_Status == USBH_URB_DONE)
 8006bb4:	7d3b      	ldrb	r3, [r7, #20]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d115      	bne.n	8006be6 <USBH_MSC_BOT_Process+0x2be>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f8aa 	bl	8006d24 <USBH_MSC_DecodeCSW>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	757b      	strb	r3, [r7, #21]

      if(CSW_Status == BOT_CSW_CMD_PASSED)
 8006bd4:	7d7b      	ldrb	r3, [r7, #21]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <USBH_MSC_BOT_Process+0x2b8>
      {
        status = USBH_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]
#endif
    }
    else
    {
    }
    break;
 8006bde:	e068      	b.n	8006cb2 <USBH_MSC_BOT_Process+0x38a>
        status = USBH_FAIL;
 8006be0:	2302      	movs	r3, #2
 8006be2:	75fb      	strb	r3, [r7, #23]
    break;
 8006be4:	e065      	b.n	8006cb2 <USBH_MSC_BOT_Process+0x38a>
    else if(URB_Status == USBH_URB_STALL)
 8006be6:	7d3b      	ldrb	r3, [r7, #20]
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	d162      	bne.n	8006cb2 <USBH_MSC_BOT_Process+0x38a>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2209      	movs	r2, #9
 8006bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006bf4:	e05d      	b.n	8006cb2 <USBH_MSC_BOT_Process+0x38a>

  case BOT_ERROR_IN:
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f865 	bl	8006ccc <USBH_MSC_BOT_Abort>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75bb      	strb	r3, [r7, #22]

    if (error == USBH_OK)
 8006c06:	7dbb      	ldrb	r3, [r7, #22]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <USBH_MSC_BOT_Process+0x2ee>
    {
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2207      	movs	r2, #7
 8006c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    else
    {
    }
    break;
 8006c14:	e04f      	b.n	8006cb6 <USBH_MSC_BOT_Process+0x38e>
    else if (error == USBH_UNRECOVERED_ERROR)
 8006c16:	7dbb      	ldrb	r3, [r7, #22]
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d14c      	bne.n	8006cb6 <USBH_MSC_BOT_Process+0x38e>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	220b      	movs	r2, #11
 8006c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006c24:	e047      	b.n	8006cb6 <USBH_MSC_BOT_Process+0x38e>

  case BOT_ERROR_OUT:
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f84d 	bl	8006ccc <USBH_MSC_BOT_Abort>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75bb      	strb	r3, [r7, #22]

    if (error == USBH_OK)
 8006c36:	7dbb      	ldrb	r3, [r7, #22]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d11d      	bne.n	8006c78 <USBH_MSC_BOT_Process+0x350>
    {

      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	795b      	ldrb	r3, [r3, #5]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f004 ffa7 	bl	800bb96 <USBH_LL_GetToggle>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73fb      	strb	r3, [r7, #15]
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	7959      	ldrb	r1, [r3, #5]
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	f1c3 0301 	rsb	r3, r3, #1
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f004 ff68 	bl	800bb30 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	791b      	ldrb	r3, [r3, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f004 ff61 	bl	800bb30 <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2209      	movs	r2, #9
 8006c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (error == USBH_UNRECOVERED_ERROR)
      {
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
    }
    break;
 8006c76:	e020      	b.n	8006cba <USBH_MSC_BOT_Process+0x392>
      if (error == USBH_UNRECOVERED_ERROR)
 8006c78:	7dbb      	ldrb	r3, [r7, #22]
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d11d      	bne.n	8006cba <USBH_MSC_BOT_Process+0x392>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	220b      	movs	r2, #11
 8006c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006c86:	e018      	b.n	8006cba <USBH_MSC_BOT_Process+0x392>


  case BOT_UNRECOVERED_ERROR:
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff fdf0 	bl	800686e <USBH_MSC_BOT_REQ_Reset>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]
    if ( status == USBH_OK)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d112      	bne.n	8006cbe <USBH_MSC_BOT_Process+0x396>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    break;
 8006ca0:	e00d      	b.n	8006cbe <USBH_MSC_BOT_Process+0x396>

  default:
    break;
 8006ca2:	bf00      	nop
 8006ca4:	e00c      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>
    break;
 8006ca6:	bf00      	nop
 8006ca8:	e00a      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>
    break;
 8006caa:	bf00      	nop
 8006cac:	e008      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>
    break;
 8006cae:	bf00      	nop
 8006cb0:	e006      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>
    break;
 8006cb2:	bf00      	nop
 8006cb4:	e004      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>
    break;
 8006cb6:	bf00      	nop
 8006cb8:	e002      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>
    break;
 8006cba:	bf00      	nop
 8006cbc:	e000      	b.n	8006cc0 <USBH_MSC_BOT_Process+0x398>
    break;
 8006cbe:	bf00      	nop
  }
  return status;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop

08006ccc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_FAIL;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006cea:	78bb      	ldrb	r3, [r7, #2]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <USBH_MSC_BOT_Abort+0x2a>
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d009      	beq.n	8006d08 <USBH_MSC_BOT_Abort+0x3c>
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
    break;

  default:
    break;
 8006cf4:	e011      	b.n	8006d1a <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	79db      	ldrb	r3, [r3, #7]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 f885 	bl	8007e0c <USBH_ClrFeature>
 8006d02:	4603      	mov	r3, r0
 8006d04:	73fb      	strb	r3, [r7, #15]
    break;
 8006d06:	e008      	b.n	8006d1a <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	799b      	ldrb	r3, [r3, #6]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 f87c 	bl	8007e0c <USBH_ClrFeature>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]
    break;
 8006d18:	bf00      	nop
  }
  return status;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006d36:	2301      	movs	r3, #1
 8006d38:	73fb      	strb	r3, [r7, #15]

    /*Checking if the transfer length is different than 13*/
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	791b      	ldrb	r3, [r3, #4]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f004 fe39 	bl	800b9b8 <USBH_LL_GetLastXferSize>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b0d      	cmp	r3, #13
 8006d4a:	d002      	beq.n	8006d52 <USBH_MSC_DecodeCSW+0x2e>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/


      status = BOT_CSW_PHASE_ERROR;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	e024      	b.n	8006d9c <USBH_MSC_DecodeCSW+0x78>
    }
    else
    { /* CSW length is Correct */

      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d56:	4a14      	ldr	r2, [pc, #80]	; (8006da8 <USBH_MSC_DecodeCSW+0x84>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d11d      	bne.n	8006d98 <USBH_MSC_DecodeCSW+0x74>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */

        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d119      	bne.n	8006d9c <USBH_MSC_DecodeCSW+0x78>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0U)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <USBH_MSC_DecodeCSW+0x54>
            (12) Ho = Do (Host expects to send data to the device,
            Device intends to receive data from the host)

            */

            status = BOT_CSW_CMD_PASSED;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
 8006d76:	e011      	b.n	8006d9c <USBH_MSC_DecodeCSW+0x78>
          }
          else if(MSC_Handle->hbot.csw.field.Status == 1U)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d102      	bne.n	8006d88 <USBH_MSC_DecodeCSW+0x64>
          {
            status = BOT_CSW_CMD_FAILED;
 8006d82:	2301      	movs	r3, #1
 8006d84:	73fb      	strb	r3, [r7, #15]
 8006d86:	e009      	b.n	8006d9c <USBH_MSC_DecodeCSW+0x78>
          }

          else if(MSC_Handle->hbot.csw.field.Status == 2U)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d104      	bne.n	8006d9c <USBH_MSC_DecodeCSW+0x78>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device,
            Device intends to receive data from the host)
            */

            status = BOT_CSW_PHASE_ERROR;
 8006d92:	2302      	movs	r3, #2
 8006d94:	73fb      	strb	r3, [r7, #15]
 8006d96:	e001      	b.n	8006d9c <USBH_MSC_DecodeCSW+0x78>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */

        status = BOT_CSW_PHASE_ERROR;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/

  return status;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	53425355 	.word	0x53425355

08006dac <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost,
                                                uint8_t lun)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006db8:	2302      	movs	r3, #2
 8006dba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	60bb      	str	r3, [r7, #8]

  switch(MSC_Handle->hbot.cmd_state)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d002      	beq.n	8006dd6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d021      	beq.n	8006e18 <USBH_MSC_SCSI_TestUnitReady+0x6c>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 8006dd4:	e028      	b.n	8006e28 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	220a      	movs	r2, #10
 8006de8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	3363      	adds	r3, #99	; 0x63
 8006df0:	2210      	movs	r2, #16
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f004 ff94 	bl	800bd22 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    error = USBH_BUSY;
 8006e12:	2301      	movs	r3, #1
 8006e14:	73fb      	strb	r3, [r7, #15]
    break;
 8006e16:	e007      	b.n	8006e28 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fd83 	bl	8006928 <USBH_MSC_BOT_Process>
 8006e22:	4603      	mov	r3, r0
 8006e24:	73fb      	strb	r3, [r7, #15]
    break;
 8006e26:	bf00      	nop
  }

  return error;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b086      	sub	sp, #24
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006e40:	2301      	movs	r3, #1
 8006e42:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d002      	beq.n	8006e5e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d027      	beq.n	8006eac <USBH_MSC_SCSI_ReadCapacity+0x7a>
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
    }
    break;

  default:
    break;
 8006e5c:	e05f      	b.n	8006f1e <USBH_MSC_SCSI_ReadCapacity+0xec>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2208      	movs	r2, #8
 8006e62:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2280      	movs	r2, #128	; 0x80
 8006e68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	220a      	movs	r2, #10
 8006e70:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3363      	adds	r3, #99	; 0x63
 8006e78:	2210      	movs	r2, #16
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f004 ff50 	bl	800bd22 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2225      	movs	r2, #37	; 0x25
 8006e86:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f103 0210 	add.w	r2, r3, #16
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	75fb      	strb	r3, [r7, #23]
    break;
 8006eaa:	e038      	b.n	8006f1e <USBH_MSC_SCSI_ReadCapacity+0xec>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff fd39 	bl	8006928 <USBH_MSC_BOT_Process>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d12d      	bne.n	8006f1c <USBH_MSC_SCSI_ReadCapacity+0xea>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec6:	3303      	adds	r3, #3
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ed2:	3302      	adds	r3, #2
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	431a      	orrs	r2, r3
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8006ee6:	431a      	orrs	r2, r3
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	061b      	lsls	r3, r3, #24
 8006ef2:	431a      	orrs	r2, r3
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006efe:	3307      	adds	r3, #7
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f0a:	3306      	adds	r3, #6
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	021b      	lsls	r3, r3, #8
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4313      	orrs	r3, r2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	809a      	strh	r2, [r3, #4]
    break;
 8006f1c:	bf00      	nop
  }

  return error;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, uint8_t lun,
                                          SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	460b      	mov	r3, r1
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006f36:	2302      	movs	r3, #2
 8006f38:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d002      	beq.n	8006f54 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d03d      	beq.n	8006fce <USBH_MSC_SCSI_Inquiry+0xa6>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
    }
    break;

  default:
    break;
 8006f52:	e089      	b.n	8007068 <USBH_MSC_SCSI_Inquiry+0x140>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2224      	movs	r2, #36	; 0x24
 8006f58:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2280      	movs	r2, #128	; 0x80
 8006f5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	220a      	movs	r2, #10
 8006f66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3363      	adds	r3, #99	; 0x63
 8006f6e:	220a      	movs	r2, #10
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f004 fed5 	bl	800bd22 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2212      	movs	r2, #18
 8006f7c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	015b      	lsls	r3, r3, #5
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2224      	movs	r2, #36	; 0x24
 8006fa0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f103 0210 	add.w	r2, r3, #16
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]
    break;
 8006fcc:	e04c      	b.n	8007068 <USBH_MSC_SCSI_Inquiry+0x140>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7ff fca8 	bl	8006928 <USBH_MSC_BOT_Process>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d141      	bne.n	8007066 <USBH_MSC_SCSI_Inquiry+0x13e>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006fe2:	2222      	movs	r2, #34	; 0x22
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f004 fe9b 	bl	800bd22 <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	f003 031f 	and.w	r3, r3, #31
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	705a      	strb	r2, [r3, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	b2da      	uxtb	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	701a      	strb	r2, [r3, #0]
      if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007014:	3301      	adds	r3, #1
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b25b      	sxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	da03      	bge.n	8007026 <USBH_MSC_SCSI_Inquiry+0xfe>
        inquiry->RemovableMedia = 1U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	709a      	strb	r2, [r3, #2]
 8007024:	e002      	b.n	800702c <USBH_MSC_SCSI_Inquiry+0x104>
        inquiry->RemovableMedia = 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	709a      	strb	r2, [r3, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	1cd8      	adds	r0, r3, #3
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007036:	3308      	adds	r3, #8
 8007038:	2208      	movs	r2, #8
 800703a:	4619      	mov	r1, r3
 800703c:	f004 fe66 	bl	800bd0c <memcpy>
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f103 000c 	add.w	r0, r3, #12
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800704c:	3310      	adds	r3, #16
 800704e:	2210      	movs	r2, #16
 8007050:	4619      	mov	r1, r3
 8007052:	f004 fe5b 	bl	800bd0c <memcpy>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	331d      	adds	r3, #29
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007060:	3220      	adds	r2, #32
 8007062:	6812      	ldr	r2, [r2, #0]
 8007064:	601a      	str	r2, [r3, #0]
    break;
 8007066:	bf00      	nop
  }

  return error;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_SenseTypeDef *sense_data)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	460b      	mov	r3, r1
 800707c:	607a      	str	r2, [r7, #4]
 800707e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007080:	2302      	movs	r3, #2
 8007082:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007094:	2b01      	cmp	r3, #1
 8007096:	d002      	beq.n	800709e <USBH_MSC_SCSI_RequestSense+0x2c>
 8007098:	2b02      	cmp	r3, #2
 800709a:	d03d      	beq.n	8007118 <USBH_MSC_SCSI_RequestSense+0xa6>
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
    }
    break;

  default:
    break;
 800709c:	e05d      	b.n	800715a <USBH_MSC_SCSI_RequestSense+0xe8>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	220e      	movs	r2, #14
 80070a2:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	220a      	movs	r2, #10
 80070b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3363      	adds	r3, #99	; 0x63
 80070b8:	2210      	movs	r2, #16
 80070ba:	2100      	movs	r1, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	f004 fe30 	bl	800bd22 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2203      	movs	r2, #3
 80070c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80070ca:	7afb      	ldrb	r3, [r7, #11]
 80070cc:	015b      	lsls	r3, r3, #5
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	220e      	movs	r2, #14
 80070ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f103 0210 	add.w	r2, r3, #16
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 8007112:	2301      	movs	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
    break;
 8007116:	e020      	b.n	800715a <USBH_MSC_SCSI_RequestSense+0xe8>
    error = USBH_MSC_BOT_Process(phost, lun);
 8007118:	7afb      	ldrb	r3, [r7, #11]
 800711a:	4619      	mov	r1, r3
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7ff fc03 	bl	8006928 <USBH_MSC_BOT_Process>
 8007122:	4603      	mov	r3, r0
 8007124:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d115      	bne.n	8007158 <USBH_MSC_SCSI_RequestSense+0xe6>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007132:	3302      	adds	r3, #2
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	b2da      	uxtb	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	701a      	strb	r2, [r3, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007146:	7b1a      	ldrb	r2, [r3, #12]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	705a      	strb	r2, [r3, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007152:	7b5a      	ldrb	r2, [r3, #13]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	709a      	strb	r2, [r3, #2]
    break;
 8007158:	bf00      	nop
  }

  return error;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	460b      	mov	r3, r1
 8007172:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007174:	2302      	movs	r3, #2
 8007176:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007188:	2b01      	cmp	r3, #1
 800718a:	d002      	beq.n	8007192 <USBH_MSC_SCSI_Write+0x2e>
 800718c:	2b02      	cmp	r3, #2
 800718e:	d047      	beq.n	8007220 <USBH_MSC_SCSI_Write+0xbc>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 8007190:	e04e      	b.n	8007230 <USBH_MSC_SCSI_Write+0xcc>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007198:	461a      	mov	r2, r3
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	fb03 f202 	mul.w	r2, r3, r2
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	220a      	movs	r2, #10
 80071b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	3363      	adds	r3, #99	; 0x63
 80071b8:	2210      	movs	r2, #16
 80071ba:	2100      	movs	r1, #0
 80071bc:	4618      	mov	r0, r3
 80071be:	f004 fdb0 	bl	800bd22 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	222a      	movs	r2, #42	; 0x2a
 80071c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 80071ca:	79fa      	ldrb	r2, [r7, #7]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 80071d2:	79ba      	ldrb	r2, [r7, #6]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 80071da:	797a      	ldrb	r2, [r7, #5]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 80071e2:	1d3b      	adds	r3, r7, #4
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80071ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80071f6:	f107 0320 	add.w	r3, r7, #32
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800721a:	2301      	movs	r3, #1
 800721c:	75fb      	strb	r3, [r7, #23]
    break;
 800721e:	e007      	b.n	8007230 <USBH_MSC_SCSI_Write+0xcc>
    error = USBH_MSC_BOT_Process(phost, lun);
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff fb7f 	bl	8006928 <USBH_MSC_BOT_Process>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]
    break;
 800722e:	bf00      	nop
  }

  return error;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	460b      	mov	r3, r1
 8007248:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800724a:	2302      	movs	r3, #2
 800724c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800725e:	2b01      	cmp	r3, #1
 8007260:	d002      	beq.n	8007268 <USBH_MSC_SCSI_Read+0x2e>
 8007262:	2b02      	cmp	r3, #2
 8007264:	d047      	beq.n	80072f6 <USBH_MSC_SCSI_Read+0xbc>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 8007266:	e04e      	b.n	8007306 <USBH_MSC_SCSI_Read+0xcc>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800726e:	461a      	mov	r2, r3
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	fb03 f202 	mul.w	r2, r3, r2
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2280      	movs	r2, #128	; 0x80
 800727e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	220a      	movs	r2, #10
 8007286:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3363      	adds	r3, #99	; 0x63
 800728e:	2210      	movs	r2, #16
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f004 fd45 	bl	800bd22 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2228      	movs	r2, #40	; 0x28
 800729c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 80072a0:	79fa      	ldrb	r2, [r7, #7]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 80072a8:	79ba      	ldrb	r2, [r7, #6]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 80072b0:	797a      	ldrb	r2, [r7, #5]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 80072b8:	1d3b      	adds	r3, r7, #4
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80072c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80072cc:	f107 0320 	add.w	r3, r7, #32
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 80072f0:	2301      	movs	r3, #1
 80072f2:	75fb      	strb	r3, [r7, #23]
    break;
 80072f4:	e007      	b.n	8007306 <USBH_MSC_SCSI_Read+0xcc>
    error = USBH_MSC_BOT_Process(phost, lun);
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	4619      	mov	r1, r3
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f7ff fb14 	bl	8006928 <USBH_MSC_BOT_Process>
 8007300:	4603      	mov	r3, r0
 8007302:	75fb      	strb	r3, [r7, #23]
    break;
 8007304:	bf00      	nop
  }

  return error;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007324:	2302      	movs	r3, #2
 8007326:	e019      	b.n	800735c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	79fa      	ldrb	r2, [r7, #7]
 800732c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f80f 	bl	8007364 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f004 fa7d 	bl	800b854 <USBH_LL_Init>

  return USBH_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007370:	e008      	b.n	8007384 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	32e0      	adds	r2, #224	; 0xe0
 8007378:	2100      	movs	r1, #0
 800737a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b0e      	cmp	r3, #14
 8007388:	d9f3      	bls.n	8007372 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	e009      	b.n	80073a4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073aa:	d3f1      	bcc.n	8007390 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2240      	movs	r2, #64	; 0x40
 80073d0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d017      	beq.n	800743a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10f      	bne.n	8007434 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741a:	1c59      	adds	r1, r3, #1
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	33dc      	adds	r3, #220	; 0xdc
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
 8007432:	e004      	b.n	800743e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007434:	2302      	movs	r3, #2
 8007436:	73fb      	strb	r3, [r7, #15]
 8007438:	e001      	b.n	800743e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800743a:	2302      	movs	r3, #2
 800743c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8007462:	78fa      	ldrb	r2, [r7, #3]
 8007464:	429a      	cmp	r2, r3
 8007466:	d204      	bcs.n	8007472 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	78fa      	ldrb	r2, [r7, #3]
 800746c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8007470:	e001      	b.n	8007476 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007472:	2302      	movs	r3, #2
 8007474:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	4608      	mov	r0, r1
 800748e:	4611      	mov	r1, r2
 8007490:	461a      	mov	r2, r3
 8007492:	4603      	mov	r3, r0
 8007494:	70fb      	strb	r3, [r7, #3]
 8007496:	460b      	mov	r3, r1
 8007498:	70bb      	strb	r3, [r7, #2]
 800749a:	4613      	mov	r3, r2
 800749c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80074ac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074ae:	e025      	b.n	80074fc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	221a      	movs	r2, #26
 80074b4:	fb02 f303 	mul.w	r3, r2, r3
 80074b8:	3308      	adds	r3, #8
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	3302      	adds	r3, #2
 80074c0:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	795b      	ldrb	r3, [r3, #5]
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d002      	beq.n	80074d2 <USBH_FindInterface+0x4e>
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	2bff      	cmp	r3, #255	; 0xff
 80074d0:	d111      	bne.n	80074f6 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80074d6:	78ba      	ldrb	r2, [r7, #2]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d002      	beq.n	80074e2 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80074dc:	78bb      	ldrb	r3, [r7, #2]
 80074de:	2bff      	cmp	r3, #255	; 0xff
 80074e0:	d109      	bne.n	80074f6 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80074e6:	787a      	ldrb	r2, [r7, #1]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d002      	beq.n	80074f2 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074ec:	787b      	ldrb	r3, [r7, #1]
 80074ee:	2bff      	cmp	r3, #255	; 0xff
 80074f0:	d101      	bne.n	80074f6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	e006      	b.n	8007504 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	3301      	adds	r3, #1
 80074fa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d9d6      	bls.n	80074b0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007502:	23ff      	movs	r3, #255	; 0xff
}
 8007504:	4618      	mov	r0, r3
 8007506:	371c      	adds	r7, #28
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f004 f9d7 	bl	800b8cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800751e:	2101      	movs	r1, #1
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f004 faee 	bl	800bb02 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af04      	add	r7, sp, #16
 8007536:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007538:	2302      	movs	r3, #2
 800753a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 faec 	bl	8007b1e <USBH_IsPortEnabled>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10c      	bne.n	8007566 <USBH_Process+0x36>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b03      	cmp	r3, #3
 800755e:	d002      	beq.n	8007566 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2203      	movs	r2, #3
 8007564:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b0b      	cmp	r3, #11
 800756e:	f200 814c 	bhi.w	800780a <USBH_Process+0x2da>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <USBH_Process+0x48>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	080075a9 	.word	0x080075a9
 800757c:	080075cb 	.word	0x080075cb
 8007580:	080075df 	.word	0x080075df
 8007584:	080077e5 	.word	0x080077e5
 8007588:	0800780b 	.word	0x0800780b
 800758c:	0800766d 	.word	0x0800766d
 8007590:	0800779b 	.word	0x0800779b
 8007594:	0800769d 	.word	0x0800769d
 8007598:	080076bd 	.word	0x080076bd
 800759c:	080076dd 	.word	0x080076dd
 80075a0:	0800770b 	.word	0x0800770b
 80075a4:	080077cd 	.word	0x080077cd
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 812c 	beq.w	800780e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80075bc:	20c8      	movs	r0, #200	; 0xc8
 80075be:	f004 fb1d 	bl	800bbfc <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f004 f9dd 	bl	800b982 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80075c8:	e121      	b.n	800780e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	f040 811e 	bne.w	8007812 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2202      	movs	r2, #2
 80075da:	701a      	strb	r2, [r3, #0]
    }
    break;
 80075dc:	e119      	b.n	8007812 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80075de:	2064      	movs	r0, #100	; 0x64
 80075e0:	f004 fb0c 	bl	800bbfc <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f004 f9a7 	bl	800b938 <USBH_LL_GetSpeed>
 80075ea:	4603      	mov	r3, r0
 80075ec:	461a      	mov	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2205      	movs	r2, #5
 80075f8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80075fa:	2100      	movs	r1, #0
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f868 	bl	80086d2 <USBH_AllocPipe>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800760a:	2180      	movs	r1, #128	; 0x80
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f860 	bl	80086d2 <USBH_AllocPipe>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	7919      	ldrb	r1, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800762e:	b292      	uxth	r2, r2
 8007630:	9202      	str	r2, [sp, #8]
 8007632:	2200      	movs	r2, #0
 8007634:	9201      	str	r2, [sp, #4]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	4603      	mov	r3, r0
 800763a:	2280      	movs	r2, #128	; 0x80
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f819 	bl	8008674 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7959      	ldrb	r1, [r3, #5]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007656:	b292      	uxth	r2, r2
 8007658:	9202      	str	r2, [sp, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	9201      	str	r2, [sp, #4]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	4603      	mov	r3, r0
 8007662:	2200      	movs	r2, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f805 	bl	8008674 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800766a:	e0e3      	b.n	8007834 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f8e7 	bl	8007840 <USBH_HandleEnum>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	f040 80ce 	bne.w	8007816 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007688:	2b01      	cmp	r3, #1
 800768a:	d103      	bne.n	8007694 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2208      	movs	r2, #8
 8007690:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007692:	e0c0      	b.n	8007816 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2207      	movs	r2, #7
 8007698:	701a      	strb	r2, [r3, #0]
    break;
 800769a:	e0bc      	b.n	8007816 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 80b9 	beq.w	800781a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076ae:	2101      	movs	r1, #1
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2208      	movs	r2, #8
 80076b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80076ba:	e0ae      	b.n	800781a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fb59 	bl	8007d7e <USBH_SetCfg>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 80a5 	bne.w	800781e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2209      	movs	r2, #9
 80076d8:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80076da:	e0a0      	b.n	800781e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80076ea:	2101      	movs	r1, #1
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fb69 	bl	8007dc4 <USBH_SetFeature>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f040 8094 	bne.w	8007822 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	220a      	movs	r2, #10
 80076fe:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007700:	e08f      	b.n	8007822 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	220a      	movs	r2, #10
 8007706:	701a      	strb	r2, [r3, #0]
    break;
 8007708:	e08b      	b.n	8007822 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 8088 	beq.w	8007826 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
 8007722:	e017      	b.n	8007754 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	33dc      	adds	r3, #220	; 0xdc
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	791a      	ldrb	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007738:	429a      	cmp	r2, r3
 800773a:	d108      	bne.n	800774e <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	33dc      	adds	r3, #220	; 0xdc
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	3301      	adds	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0e4      	beq.n	8007724 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007760:	2b00      	cmp	r3, #0
 8007762:	d016      	beq.n	8007792 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2206      	movs	r2, #6
 800777a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007782:	2103      	movs	r1, #3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007788:	e04d      	b.n	8007826 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	220d      	movs	r2, #13
 800778e:	701a      	strb	r2, [r3, #0]
    break;
 8007790:	e049      	b.n	8007826 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	220d      	movs	r2, #13
 8007796:	701a      	strb	r2, [r3, #0]
    break;
 8007798:	e045      	b.n	8007826 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00f      	beq.n	80077c4 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
 80077b0:	4603      	mov	r3, r0
 80077b2:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d136      	bne.n	800782a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	220b      	movs	r2, #11
 80077c0:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80077c2:	e032      	b.n	800782a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	220d      	movs	r2, #13
 80077c8:	701a      	strb	r2, [r3, #0]
    break;
 80077ca:	e02e      	b.n	800782a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d02b      	beq.n	800782e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
    }
    break;
 80077e2:	e024      	b.n	800782e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff fdbd 	bl	8007364 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01e      	beq.n	8007832 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007808:	e013      	b.n	8007832 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800780a:	bf00      	nop
 800780c:	e012      	b.n	8007834 <USBH_Process+0x304>
    break;
 800780e:	bf00      	nop
 8007810:	e010      	b.n	8007834 <USBH_Process+0x304>
    break;
 8007812:	bf00      	nop
 8007814:	e00e      	b.n	8007834 <USBH_Process+0x304>
    break;
 8007816:	bf00      	nop
 8007818:	e00c      	b.n	8007834 <USBH_Process+0x304>
    break;
 800781a:	bf00      	nop
 800781c:	e00a      	b.n	8007834 <USBH_Process+0x304>
    break;
 800781e:	bf00      	nop
 8007820:	e008      	b.n	8007834 <USBH_Process+0x304>
    break;
 8007822:	bf00      	nop
 8007824:	e006      	b.n	8007834 <USBH_Process+0x304>
    break;
 8007826:	bf00      	nop
 8007828:	e004      	b.n	8007834 <USBH_Process+0x304>
    break;
 800782a:	bf00      	nop
 800782c:	e002      	b.n	8007834 <USBH_Process+0x304>
    break;
 800782e:	bf00      	nop
 8007830:	e000      	b.n	8007834 <USBH_Process+0x304>
    break;
 8007832:	bf00      	nop
  }
 return USBH_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop

08007840 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af04      	add	r7, sp, #16
 8007846:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007848:	2301      	movs	r3, #1
 800784a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	2b07      	cmp	r3, #7
 8007852:	f200 80f8 	bhi.w	8007a46 <USBH_HandleEnum+0x206>
 8007856:	a201      	add	r2, pc, #4	; (adr r2, 800785c <USBH_HandleEnum+0x1c>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	0800787d 	.word	0x0800787d
 8007860:	080078ef 	.word	0x080078ef
 8007864:	08007907 	.word	0x08007907
 8007868:	0800797d 	.word	0x0800797d
 800786c:	08007993 	.word	0x08007993
 8007870:	080079af 	.word	0x080079af
 8007874:	080079e3 	.word	0x080079e3
 8007878:	08007a17 	.word	0x08007a17
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800787c:	2108      	movs	r1, #8
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f9ad 	bl	8007bde <USBH_Get_DevDesc>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 80df 	bne.w	8007a4a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7919      	ldrb	r1, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80078b0:	b292      	uxth	r2, r2
 80078b2:	9202      	str	r2, [sp, #8]
 80078b4:	2200      	movs	r2, #0
 80078b6:	9201      	str	r2, [sp, #4]
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	4603      	mov	r3, r0
 80078bc:	2280      	movs	r2, #128	; 0x80
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fed8 	bl	8008674 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	7959      	ldrb	r1, [r3, #5]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80078d8:	b292      	uxth	r2, r2
 80078da:	9202      	str	r2, [sp, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	9201      	str	r2, [sp, #4]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4603      	mov	r3, r0
 80078e4:	2200      	movs	r2, #0
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fec4 	bl	8008674 <USBH_OpenPipe>

    }
    break;
 80078ec:	e0ad      	b.n	8007a4a <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80078ee:	2112      	movs	r1, #18
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f974 	bl	8007bde <USBH_Get_DevDesc>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f040 80a8 	bne.w	8007a4e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007904:	e0a3      	b.n	8007a4e <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007906:	2101      	movs	r1, #1
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fa14 	bl	8007d36 <USBH_SetAddress>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	f040 809e 	bne.w	8007a52 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007916:	2002      	movs	r0, #2
 8007918:	f004 f970 	bl	800bbfc <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2203      	movs	r2, #3
 8007928:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	7919      	ldrb	r1, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800793e:	b292      	uxth	r2, r2
 8007940:	9202      	str	r2, [sp, #8]
 8007942:	2200      	movs	r2, #0
 8007944:	9201      	str	r2, [sp, #4]
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	4603      	mov	r3, r0
 800794a:	2280      	movs	r2, #128	; 0x80
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fe91 	bl	8008674 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	7959      	ldrb	r1, [r3, #5]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007966:	b292      	uxth	r2, r2
 8007968:	9202      	str	r2, [sp, #8]
 800796a:	2200      	movs	r2, #0
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	4603      	mov	r3, r0
 8007972:	2200      	movs	r2, #0
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fe7d 	bl	8008674 <USBH_OpenPipe>
    }
    break;
 800797a:	e06a      	b.n	8007a52 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800797c:	2109      	movs	r1, #9
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f955 	bl	8007c2e <USBH_Get_CfgDesc>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d165      	bne.n	8007a56 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2204      	movs	r2, #4
 800798e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007990:	e061      	b.n	8007a56 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f947 	bl	8007c2e <USBH_Get_CfgDesc>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d159      	bne.n	8007a5a <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2205      	movs	r2, #5
 80079aa:	705a      	strb	r2, [r3, #1]
    }
    break;
 80079ac:	e055      	b.n	8007a5a <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d010      	beq.n	80079da <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80079c4:	23ff      	movs	r3, #255	; 0xff
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f955 	bl	8007c76 <USBH_Get_StringDesc>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d145      	bne.n	8007a5e <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2206      	movs	r2, #6
 80079d6:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80079d8:	e041      	b.n	8007a5e <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2206      	movs	r2, #6
 80079de:	705a      	strb	r2, [r3, #1]
    break;
 80079e0:	e03d      	b.n	8007a5e <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d010      	beq.n	8007a0e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80079f8:	23ff      	movs	r3, #255	; 0xff
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f93b 	bl	8007c76 <USBH_Get_StringDesc>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d12d      	bne.n	8007a62 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2207      	movs	r2, #7
 8007a0a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007a0c:	e029      	b.n	8007a62 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2207      	movs	r2, #7
 8007a12:	705a      	strb	r2, [r3, #1]
    break;
 8007a14:	e025      	b.n	8007a62 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00f      	beq.n	8007a40 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007a2c:	23ff      	movs	r3, #255	; 0xff
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f921 	bl	8007c76 <USBH_Get_StringDesc>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d115      	bne.n	8007a66 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007a3e:	e012      	b.n	8007a66 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]
    break;
 8007a44:	e00f      	b.n	8007a66 <USBH_HandleEnum+0x226>

  default:
    break;
 8007a46:	bf00      	nop
 8007a48:	e00e      	b.n	8007a68 <USBH_HandleEnum+0x228>
    break;
 8007a4a:	bf00      	nop
 8007a4c:	e00c      	b.n	8007a68 <USBH_HandleEnum+0x228>
    break;
 8007a4e:	bf00      	nop
 8007a50:	e00a      	b.n	8007a68 <USBH_HandleEnum+0x228>
    break;
 8007a52:	bf00      	nop
 8007a54:	e008      	b.n	8007a68 <USBH_HandleEnum+0x228>
    break;
 8007a56:	bf00      	nop
 8007a58:	e006      	b.n	8007a68 <USBH_HandleEnum+0x228>
    break;
 8007a5a:	bf00      	nop
 8007a5c:	e004      	b.n	8007a68 <USBH_HandleEnum+0x228>
    break;
 8007a5e:	bf00      	nop
 8007a60:	e002      	b.n	8007a68 <USBH_HandleEnum+0x228>
    break;
 8007a62:	bf00      	nop
 8007a64:	e000      	b.n	8007a68 <USBH_HandleEnum+0x228>
    break;
 8007a66:	bf00      	nop
  }
  return Status;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop

08007a74 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f804 	bl	8007ab6 <USBH_HandleSof>
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b0b      	cmp	r3, #11
 8007ac6:	d10a      	bne.n	8007ade <USBH_HandleSof+0x28>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007af6:	bf00      	nop
}
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007b12:	bf00      	nop
}
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10f      	bne.n	8007b6a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00e      	beq.n	8007b7a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b62:	2104      	movs	r1, #4
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
 8007b68:	e007      	b.n	8007b7a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d102      	bne.n	8007b7a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f003 feb8 	bl	800b902 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	791b      	ldrb	r3, [r3, #4]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fdb8 	bl	800870e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	795b      	ldrb	r3, [r3, #5]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fdb2 	bl	800870e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bc2:	2105      	movs	r1, #5
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f003 fe7f 	bl	800b8cc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b086      	sub	sp, #24
 8007be2:	af02      	add	r7, sp, #8
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	460b      	mov	r3, r1
 8007be8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f864 	bl	8007ccc <USBH_GetDescriptor>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	b292      	uxth	r2, r2
 8007c1e:	4619      	mov	r1, r3
 8007c20:	f000 f918 	bl	8007e54 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b086      	sub	sp, #24
 8007c32:	af02      	add	r7, sp, #8
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	331c      	adds	r3, #28
 8007c3e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007c40:	887b      	ldrh	r3, [r7, #2]
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f83d 	bl	8007ccc <USBH_GetDescriptor>
 8007c52:	4603      	mov	r3, r0
 8007c54:	72fb      	strb	r3, [r7, #11]
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d107      	bne.n	8007c6c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007c62:	887a      	ldrh	r2, [r7, #2]
 8007c64:	68f9      	ldr	r1, [r7, #12]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 f964 	bl	8007f34 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b088      	sub	sp, #32
 8007c7a:	af02      	add	r7, sp, #8
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	461a      	mov	r2, r3
 8007c82:	460b      	mov	r3, r1
 8007c84:	72fb      	strb	r3, [r7, #11]
 8007c86:	4613      	mov	r3, r2
 8007c88:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c92:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007c9a:	893b      	ldrh	r3, [r7, #8]
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f812 	bl	8007ccc <USBH_GetDescriptor>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	75fb      	strb	r3, [r7, #23]
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d107      	bne.n	8007cc2 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cb8:	893a      	ldrh	r2, [r7, #8]
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fa37 	bl	8008130 <USBH_ParseStringDesc>
  }
  return status;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	607b      	str	r3, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	72fb      	strb	r3, [r7, #11]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	789b      	ldrb	r3, [r3, #2]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d11c      	bne.n	8007d20 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ce6:	7afb      	ldrb	r3, [r7, #11]
 8007ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2206      	movs	r2, #6
 8007cf6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	893a      	ldrh	r2, [r7, #8]
 8007cfc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007cfe:	893b      	ldrh	r3, [r7, #8]
 8007d00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d08:	d104      	bne.n	8007d14 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f240 4209 	movw	r2, #1033	; 0x409
 8007d10:	829a      	strh	r2, [r3, #20]
 8007d12:	e002      	b.n	8007d1a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8b3a      	ldrh	r2, [r7, #24]
 8007d1e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007d20:	8b3b      	ldrh	r3, [r7, #24]
 8007d22:	461a      	mov	r2, r3
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fa50 	bl	80081cc <USBH_CtlReq>
 8007d2c:	4603      	mov	r3, r0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	789b      	ldrb	r3, [r3, #2]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d10f      	bne.n	8007d6a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2205      	movs	r2, #5
 8007d54:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa2c 	bl	80081cc <USBH_CtlReq>
 8007d74:	4603      	mov	r3, r0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	789b      	ldrb	r3, [r3, #2]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d10e      	bne.n	8007db0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2209      	movs	r2, #9
 8007d9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	887a      	ldrh	r2, [r7, #2]
 8007da2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007db0:	2200      	movs	r2, #0
 8007db2:	2100      	movs	r1, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa09 	bl	80081cc <USBH_CtlReq>
 8007dba:	4603      	mov	r3, r0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	789b      	ldrb	r3, [r3, #2]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d10f      	bne.n	8007df8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2203      	movs	r2, #3
 8007de2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007de4:	78fb      	ldrb	r3, [r7, #3]
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f9e5 	bl	80081cc <USBH_CtlReq>
 8007e02:	4603      	mov	r3, r0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	789b      	ldrb	r3, [r3, #2]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d10f      	bne.n	8007e40 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007e40:	2200      	movs	r2, #0
 8007e42:	2100      	movs	r1, #0
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f9c1 	bl	80081cc <USBH_CtlReq>
 8007e4a:	4603      	mov	r3, r0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	781a      	ldrb	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	785a      	ldrb	r2, [r3, #1]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	3302      	adds	r3, #2
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	3303      	adds	r3, #3
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4313      	orrs	r3, r2
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	791a      	ldrb	r2, [r3, #4]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	795a      	ldrb	r2, [r3, #5]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	799a      	ldrb	r2, [r3, #6]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	79da      	ldrb	r2, [r3, #7]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d939      	bls.n	8007f28 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3309      	adds	r3, #9
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	021b      	lsls	r3, r3, #8
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	330a      	adds	r3, #10
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	330b      	adds	r3, #11
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	021b      	lsls	r3, r3, #8
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	330c      	adds	r3, #12
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	330d      	adds	r3, #13
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	4313      	orrs	r3, r2
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	7b9a      	ldrb	r2, [r3, #14]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	7bda      	ldrb	r2, [r3, #15]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	7c1a      	ldrb	r2, [r3, #16]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	7c5a      	ldrb	r2, [r3, #17]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	745a      	strb	r2, [r3, #17]
  }
}
 8007f28:	bf00      	nop
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	; 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	785a      	ldrb	r2, [r3, #1]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	3302      	adds	r3, #2
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	3303      	adds	r3, #3
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	021b      	lsls	r3, r3, #8
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	791a      	ldrb	r2, [r3, #4]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	795a      	ldrb	r2, [r3, #5]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	799a      	ldrb	r2, [r3, #6]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	79da      	ldrb	r2, [r3, #7]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	7a1a      	ldrb	r2, [r3, #8]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007faa:	88fb      	ldrh	r3, [r7, #6]
 8007fac:	2b09      	cmp	r3, #9
 8007fae:	d95f      	bls.n	8008070 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fb0:	2309      	movs	r3, #9
 8007fb2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fb8:	e051      	b.n	800805e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fba:	f107 0316 	add.w	r3, r7, #22
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fc2:	f000 f8e8 	bl	8008196 <USBH_GetNextDesc>
 8007fc6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d146      	bne.n	800805e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fd4:	221a      	movs	r2, #26
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	3308      	adds	r3, #8
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fe6:	69f8      	ldr	r0, [r7, #28]
 8007fe8:	f000 f846 	bl	8008078 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ff6:	e022      	b.n	800803e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007ff8:	f107 0316 	add.w	r3, r7, #22
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008000:	f000 f8c9 	bl	8008196 <USBH_GetNextDesc>
 8008004:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b05      	cmp	r3, #5
 800800c:	d117      	bne.n	800803e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800800e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008012:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008016:	3201      	adds	r2, #1
 8008018:	00d2      	lsls	r2, r2, #3
 800801a:	211a      	movs	r1, #26
 800801c:	fb01 f303 	mul.w	r3, r1, r3
 8008020:	4413      	add	r3, r2
 8008022:	3308      	adds	r3, #8
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	3304      	adds	r3, #4
 800802a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800802c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800802e:	69b8      	ldr	r0, [r7, #24]
 8008030:	f000 f851 	bl	80080d6 <USBH_ParseEPDesc>
            ep_ix++;
 8008034:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008038:	3301      	adds	r3, #1
 800803a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	791b      	ldrb	r3, [r3, #4]
 8008042:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008046:	429a      	cmp	r2, r3
 8008048:	d204      	bcs.n	8008054 <USBH_ParseCfgDesc+0x120>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	885a      	ldrh	r2, [r3, #2]
 800804e:	8afb      	ldrh	r3, [r7, #22]
 8008050:	429a      	cmp	r2, r3
 8008052:	d8d1      	bhi.n	8007ff8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008058:	3301      	adds	r3, #1
 800805a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800805e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008062:	2b01      	cmp	r3, #1
 8008064:	d804      	bhi.n	8008070 <USBH_ParseCfgDesc+0x13c>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	885a      	ldrh	r2, [r3, #2]
 800806a:	8afb      	ldrh	r3, [r7, #22]
 800806c:	429a      	cmp	r2, r3
 800806e:	d8a4      	bhi.n	8007fba <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008070:	bf00      	nop
 8008072:	3728      	adds	r7, #40	; 0x28
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	785a      	ldrb	r2, [r3, #1]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	789a      	ldrb	r2, [r3, #2]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	78da      	ldrb	r2, [r3, #3]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	791a      	ldrb	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	795a      	ldrb	r2, [r3, #5]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	799a      	ldrb	r2, [r3, #6]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	79da      	ldrb	r2, [r3, #7]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	7a1a      	ldrb	r2, [r3, #8]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	721a      	strb	r2, [r3, #8]
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	785a      	ldrb	r2, [r3, #1]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	789a      	ldrb	r2, [r3, #2]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	78da      	ldrb	r2, [r3, #3]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	3304      	adds	r3, #4
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	b29a      	uxth	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	3305      	adds	r3, #5
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	b29b      	uxth	r3, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	799a      	ldrb	r2, [r3, #6]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	719a      	strb	r2, [r3, #6]
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3301      	adds	r3, #1
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d120      	bne.n	800818a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	1e9a      	subs	r2, r3, #2
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	4293      	cmp	r3, r2
 8008152:	bf28      	it	cs
 8008154:	4613      	movcs	r3, r2
 8008156:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3302      	adds	r3, #2
 800815c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800815e:	2300      	movs	r3, #0
 8008160:	82fb      	strh	r3, [r7, #22]
 8008162:	e00b      	b.n	800817c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008164:	8afb      	ldrh	r3, [r7, #22]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	781a      	ldrb	r2, [r3, #0]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	3301      	adds	r3, #1
 8008174:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008176:	8afb      	ldrh	r3, [r7, #22]
 8008178:	3302      	adds	r3, #2
 800817a:	82fb      	strh	r3, [r7, #22]
 800817c:	8afa      	ldrh	r2, [r7, #22]
 800817e:	8abb      	ldrh	r3, [r7, #20]
 8008180:	429a      	cmp	r2, r3
 8008182:	d3ef      	bcc.n	8008164 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
  }
}
 800818a:	bf00      	nop
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8008196:	b480      	push	{r7}
 8008198:	b085      	sub	sp, #20
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	881a      	ldrh	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	4413      	add	r3, r2
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4413      	add	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80081be:	68fb      	ldr	r3, [r7, #12]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081da:	2301      	movs	r3, #1
 80081dc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	789b      	ldrb	r3, [r3, #2]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d002      	beq.n	80081ec <USBH_CtlReq+0x20>
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d00f      	beq.n	800820a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80081ea:	e034      	b.n	8008256 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	88fa      	ldrh	r2, [r7, #6]
 80081f6:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2201      	movs	r2, #1
 80081fc:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2202      	movs	r2, #2
 8008202:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008204:	2301      	movs	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
    break;
 8008208:	e025      	b.n	8008256 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 f828 	bl	8008260 <USBH_HandleControl>
 8008210:	4603      	mov	r3, r0
 8008212:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d108      	bne.n	800822c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	75fb      	strb	r3, [r7, #23]
    break;
 800822a:	e013      	b.n	8008254 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d108      	bne.n	8008244 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800823e:	2303      	movs	r3, #3
 8008240:	75fb      	strb	r3, [r7, #23]
    break;
 8008242:	e007      	b.n	8008254 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8008244:	7dfb      	ldrb	r3, [r7, #23]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d104      	bne.n	8008254 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008250:	2302      	movs	r3, #2
 8008252:	75fb      	strb	r3, [r7, #23]
    break;
 8008254:	bf00      	nop
  }
  return status;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008268:	2301      	movs	r3, #1
 800826a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800826c:	2300      	movs	r3, #0
 800826e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	7e1b      	ldrb	r3, [r3, #24]
 8008274:	3b01      	subs	r3, #1
 8008276:	2b0a      	cmp	r3, #10
 8008278:	f200 814c 	bhi.w	8008514 <USBH_HandleControl+0x2b4>
 800827c:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <USBH_HandleControl+0x24>)
 800827e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008282:	bf00      	nop
 8008284:	080082b1 	.word	0x080082b1
 8008288:	080082cb 	.word	0x080082cb
 800828c:	08008335 	.word	0x08008335
 8008290:	0800835b 	.word	0x0800835b
 8008294:	08008393 	.word	0x08008393
 8008298:	080083bf 	.word	0x080083bf
 800829c:	08008411 	.word	0x08008411
 80082a0:	08008433 	.word	0x08008433
 80082a4:	0800846f 	.word	0x0800846f
 80082a8:	08008497 	.word	0x08008497
 80082ac:	080084d5 	.word	0x080084d5
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f103 0110 	add.w	r1, r3, #16
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	795b      	ldrb	r3, [r3, #5]
 80082ba:	461a      	mov	r2, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f939 	bl	8008534 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	761a      	strb	r2, [r3, #24]
    break;
 80082c8:	e12f      	b.n	800852a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	795b      	ldrb	r3, [r3, #5]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f003 fc03 	bl	800badc <USBH_LL_GetURBState>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d11e      	bne.n	800831e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	7c1b      	ldrb	r3, [r3, #16]
 80082e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082e8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	8adb      	ldrh	r3, [r3, #22]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80082f2:	7b7b      	ldrb	r3, [r7, #13]
 80082f4:	2b80      	cmp	r3, #128	; 0x80
 80082f6:	d103      	bne.n	8008300 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2203      	movs	r2, #3
 80082fc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80082fe:	e10b      	b.n	8008518 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2205      	movs	r2, #5
 8008304:	761a      	strb	r2, [r3, #24]
    break;
 8008306:	e107      	b.n	8008518 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8008308:	7b7b      	ldrb	r3, [r7, #13]
 800830a:	2b80      	cmp	r3, #128	; 0x80
 800830c:	d103      	bne.n	8008316 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2209      	movs	r2, #9
 8008312:	761a      	strb	r2, [r3, #24]
    break;
 8008314:	e100      	b.n	8008518 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2207      	movs	r2, #7
 800831a:	761a      	strb	r2, [r3, #24]
    break;
 800831c:	e0fc      	b.n	8008518 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b04      	cmp	r3, #4
 8008322:	d003      	beq.n	800832c <USBH_HandleControl+0xcc>
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b02      	cmp	r3, #2
 8008328:	f040 80f6 	bne.w	8008518 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	220b      	movs	r2, #11
 8008330:	761a      	strb	r2, [r3, #24]
    break;
 8008332:	e0f1      	b.n	8008518 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6899      	ldr	r1, [r3, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	899a      	ldrh	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	791b      	ldrb	r3, [r3, #4]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f930 	bl	80085b2 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2204      	movs	r2, #4
 8008356:	761a      	strb	r2, [r3, #24]
    break;
 8008358:	e0e7      	b.n	800852a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	791b      	ldrb	r3, [r3, #4]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f003 fbbb 	bl	800badc <USBH_LL_GetURBState>
 8008366:	4603      	mov	r3, r0
 8008368:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d102      	bne.n	8008376 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2209      	movs	r2, #9
 8008374:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b05      	cmp	r3, #5
 800837a:	d102      	bne.n	8008382 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800837c:	2303      	movs	r3, #3
 800837e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008380:	e0cc      	b.n	800851c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b04      	cmp	r3, #4
 8008386:	f040 80c9 	bne.w	800851c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	220b      	movs	r2, #11
 800838e:	761a      	strb	r2, [r3, #24]
    break;
 8008390:	e0c4      	b.n	800851c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6899      	ldr	r1, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	899a      	ldrh	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7958      	ldrb	r0, [r3, #5]
 800839e:	2301      	movs	r3, #1
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	4603      	mov	r3, r0
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f8df 	bl	8008568 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2206      	movs	r2, #6
 80083ba:	761a      	strb	r2, [r3, #24]
    break;
 80083bc:	e0b5      	b.n	800852a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f003 fb89 	bl	800badc <USBH_LL_GetURBState>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d103      	bne.n	80083dc <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2207      	movs	r2, #7
 80083d8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80083da:	e0a1      	b.n	8008520 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b05      	cmp	r3, #5
 80083e0:	d105      	bne.n	80083ee <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	220c      	movs	r2, #12
 80083e6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80083e8:	2303      	movs	r3, #3
 80083ea:	73fb      	strb	r3, [r7, #15]
    break;
 80083ec:	e098      	b.n	8008520 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d103      	bne.n	80083fc <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2205      	movs	r2, #5
 80083f8:	761a      	strb	r2, [r3, #24]
    break;
 80083fa:	e091      	b.n	8008520 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	f040 808e 	bne.w	8008520 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	220b      	movs	r2, #11
 8008408:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800840a:	2302      	movs	r3, #2
 800840c:	73fb      	strb	r3, [r7, #15]
    break;
 800840e:	e087      	b.n	8008520 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	791b      	ldrb	r3, [r3, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	2100      	movs	r1, #0
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f8ca 	bl	80085b2 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2208      	movs	r2, #8
 800842e:	761a      	strb	r2, [r3, #24]

    break;
 8008430:	e07b      	b.n	800852a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	791b      	ldrb	r3, [r3, #4]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f003 fb4f 	bl	800badc <USBH_LL_GetURBState>
 800843e:	4603      	mov	r3, r0
 8008440:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d105      	bne.n	8008454 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	220d      	movs	r2, #13
 800844c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008452:	e067      	b.n	8008524 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	2b04      	cmp	r3, #4
 8008458:	d103      	bne.n	8008462 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	220b      	movs	r2, #11
 800845e:	761a      	strb	r2, [r3, #24]
    break;
 8008460:	e060      	b.n	8008524 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	2b05      	cmp	r3, #5
 8008466:	d15d      	bne.n	8008524 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8008468:	2303      	movs	r3, #3
 800846a:	73fb      	strb	r3, [r7, #15]
    break;
 800846c:	e05a      	b.n	8008524 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	795a      	ldrb	r2, [r3, #5]
 8008472:	2301      	movs	r3, #1
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4613      	mov	r3, r2
 8008478:	2200      	movs	r2, #0
 800847a:	2100      	movs	r1, #0
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f873 	bl	8008568 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008488:	b29a      	uxth	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	220a      	movs	r2, #10
 8008492:	761a      	strb	r2, [r3, #24]
    break;
 8008494:	e049      	b.n	800852a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	795b      	ldrb	r3, [r3, #5]
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f003 fb1d 	bl	800badc <USBH_LL_GetURBState>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d105      	bne.n	80084b8 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	220d      	movs	r2, #13
 80084b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 80084b6:	e037      	b.n	8008528 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d103      	bne.n	80084c6 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2209      	movs	r2, #9
 80084c2:	761a      	strb	r2, [r3, #24]
    break;
 80084c4:	e030      	b.n	8008528 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	d12d      	bne.n	8008528 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	220b      	movs	r2, #11
 80084d0:	761a      	strb	r2, [r3, #24]
    break;
 80084d2:	e029      	b.n	8008528 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7e5b      	ldrb	r3, [r3, #25]
 80084d8:	3301      	adds	r3, #1
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	765a      	strb	r2, [r3, #25]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7e5b      	ldrb	r3, [r3, #25]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d809      	bhi.n	80084fc <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f003 fa0a 	bl	800b902 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80084fa:	e016      	b.n	800852a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008502:	2106      	movs	r1, #6
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800850e:	2302      	movs	r3, #2
 8008510:	73fb      	strb	r3, [r7, #15]
    break;
 8008512:	e00a      	b.n	800852a <USBH_HandleControl+0x2ca>

  default:
    break;
 8008514:	bf00      	nop
 8008516:	e008      	b.n	800852a <USBH_HandleControl+0x2ca>
    break;
 8008518:	bf00      	nop
 800851a:	e006      	b.n	800852a <USBH_HandleControl+0x2ca>
    break;
 800851c:	bf00      	nop
 800851e:	e004      	b.n	800852a <USBH_HandleControl+0x2ca>
    break;
 8008520:	bf00      	nop
 8008522:	e002      	b.n	800852a <USBH_HandleControl+0x2ca>
    break;
 8008524:	bf00      	nop
 8008526:	e000      	b.n	800852a <USBH_HandleControl+0x2ca>
    break;
 8008528:	bf00      	nop
  }
  return status;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af04      	add	r7, sp, #16
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	4613      	mov	r3, r2
 8008540:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008542:	79f9      	ldrb	r1, [r7, #7]
 8008544:	2300      	movs	r3, #0
 8008546:	9303      	str	r3, [sp, #12]
 8008548:	2308      	movs	r3, #8
 800854a:	9302      	str	r3, [sp, #8]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	2300      	movs	r3, #0
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	2300      	movs	r3, #0
 8008556:	2200      	movs	r2, #0
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f003 fa8e 	bl	800ba7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af04      	add	r7, sp, #16
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	4611      	mov	r1, r2
 8008574:	461a      	mov	r2, r3
 8008576:	460b      	mov	r3, r1
 8008578:	80fb      	strh	r3, [r7, #6]
 800857a:	4613      	mov	r3, r2
 800857c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800858c:	7979      	ldrb	r1, [r7, #5]
 800858e:	7e3b      	ldrb	r3, [r7, #24]
 8008590:	9303      	str	r3, [sp, #12]
 8008592:	88fb      	ldrh	r3, [r7, #6]
 8008594:	9302      	str	r3, [sp, #8]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	2301      	movs	r3, #1
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	2300      	movs	r3, #0
 80085a0:	2200      	movs	r2, #0
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f003 fa69 	bl	800ba7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b088      	sub	sp, #32
 80085b6:	af04      	add	r7, sp, #16
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	4611      	mov	r1, r2
 80085be:	461a      	mov	r2, r3
 80085c0:	460b      	mov	r3, r1
 80085c2:	80fb      	strh	r3, [r7, #6]
 80085c4:	4613      	mov	r3, r2
 80085c6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80085c8:	7979      	ldrb	r1, [r7, #5]
 80085ca:	2300      	movs	r3, #0
 80085cc:	9303      	str	r3, [sp, #12]
 80085ce:	88fb      	ldrh	r3, [r7, #6]
 80085d0:	9302      	str	r3, [sp, #8]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	2301      	movs	r3, #1
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	2300      	movs	r3, #0
 80085dc:	2201      	movs	r2, #1
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f003 fa4b 	bl	800ba7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085e4:	2300      	movs	r3, #0

}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b088      	sub	sp, #32
 80085f2:	af04      	add	r7, sp, #16
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	4611      	mov	r1, r2
 80085fa:	461a      	mov	r2, r3
 80085fc:	460b      	mov	r3, r1
 80085fe:	80fb      	strh	r3, [r7, #6]
 8008600:	4613      	mov	r3, r2
 8008602:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008612:	7979      	ldrb	r1, [r7, #5]
 8008614:	7e3b      	ldrb	r3, [r7, #24]
 8008616:	9303      	str	r3, [sp, #12]
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	9302      	str	r3, [sp, #8]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	9301      	str	r3, [sp, #4]
 8008620:	2301      	movs	r3, #1
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	2302      	movs	r3, #2
 8008626:	2200      	movs	r2, #0
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f003 fa26 	bl	800ba7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af04      	add	r7, sp, #16
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4611      	mov	r1, r2
 8008644:	461a      	mov	r2, r3
 8008646:	460b      	mov	r3, r1
 8008648:	80fb      	strh	r3, [r7, #6]
 800864a:	4613      	mov	r3, r2
 800864c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800864e:	7979      	ldrb	r1, [r7, #5]
 8008650:	2300      	movs	r3, #0
 8008652:	9303      	str	r3, [sp, #12]
 8008654:	88fb      	ldrh	r3, [r7, #6]
 8008656:	9302      	str	r3, [sp, #8]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	9301      	str	r3, [sp, #4]
 800865c:	2301      	movs	r3, #1
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	2302      	movs	r3, #2
 8008662:	2201      	movs	r2, #1
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f003 fa08 	bl	800ba7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af04      	add	r7, sp, #16
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	4608      	mov	r0, r1
 800867e:	4611      	mov	r1, r2
 8008680:	461a      	mov	r2, r3
 8008682:	4603      	mov	r3, r0
 8008684:	70fb      	strb	r3, [r7, #3]
 8008686:	460b      	mov	r3, r1
 8008688:	70bb      	strb	r3, [r7, #2]
 800868a:	4613      	mov	r3, r2
 800868c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800868e:	7878      	ldrb	r0, [r7, #1]
 8008690:	78ba      	ldrb	r2, [r7, #2]
 8008692:	78f9      	ldrb	r1, [r7, #3]
 8008694:	8b3b      	ldrh	r3, [r7, #24]
 8008696:	9302      	str	r3, [sp, #8]
 8008698:	7d3b      	ldrb	r3, [r7, #20]
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	7c3b      	ldrb	r3, [r7, #16]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4603      	mov	r3, r0
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f003 f99b 	bl	800b9de <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80086a8:	2300      	movs	r3, #0

}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f003 f9ba 	bl	800ba3c <USBH_LL_ClosePipe>

  return USBH_OK;
 80086c8:	2300      	movs	r3, #0

}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	460b      	mov	r3, r1
 80086dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f831 	bl	8008746 <USBH_GetFreePipe>
 80086e4:	4603      	mov	r3, r0
 80086e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086e8:	89fb      	ldrh	r3, [r7, #14]
 80086ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d007      	beq.n	8008702 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	89fa      	ldrh	r2, [r7, #14]
 80086f6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	32e0      	adds	r2, #224	; 0xe0
 80086fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008702:	89fb      	ldrh	r3, [r7, #14]
 8008704:	b2db      	uxtb	r3, r3
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	2b0a      	cmp	r3, #10
 800871e:	d80b      	bhi.n	8008738 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008720:	78fa      	ldrb	r2, [r7, #3]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	32e0      	adds	r2, #224	; 0xe0
 8008726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872a:	78fa      	ldrb	r2, [r7, #3]
 800872c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	32e0      	adds	r2, #224	; 0xe0
 8008734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008746:	b480      	push	{r7}
 8008748:	b085      	sub	sp, #20
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
 8008756:	e00e      	b.n	8008776 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008758:	7bfa      	ldrb	r2, [r7, #15]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	32e0      	adds	r2, #224	; 0xe0
 800875e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	b29b      	uxth	r3, r3
 800876e:	e007      	b.n	8008780 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	3301      	adds	r3, #1
 8008774:	73fb      	strb	r3, [r7, #15]
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	2b0a      	cmp	r3, #10
 800877a:	d9ed      	bls.n	8008758 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800877c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	4a08      	ldr	r2, [pc, #32]	; (80087bc <disk_status+0x30>)
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	79fa      	ldrb	r2, [r7, #7]
 80087a4:	4905      	ldr	r1, [pc, #20]	; (80087bc <disk_status+0x30>)
 80087a6:	440a      	add	r2, r1
 80087a8:	7a12      	ldrb	r2, [r2, #8]
 80087aa:	4610      	mov	r0, r2
 80087ac:	4798      	blx	r3
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20000248 	.word	0x20000248

080087c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	4603      	mov	r3, r0
 80087c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80087ce:	79fb      	ldrb	r3, [r7, #7]
 80087d0:	4a0d      	ldr	r2, [pc, #52]	; (8008808 <disk_initialize+0x48>)
 80087d2:	5cd3      	ldrb	r3, [r2, r3]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d111      	bne.n	80087fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	4a0b      	ldr	r2, [pc, #44]	; (8008808 <disk_initialize+0x48>)
 80087dc:	2101      	movs	r1, #1
 80087de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	4a09      	ldr	r2, [pc, #36]	; (8008808 <disk_initialize+0x48>)
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	79fa      	ldrb	r2, [r7, #7]
 80087ee:	4906      	ldr	r1, [pc, #24]	; (8008808 <disk_initialize+0x48>)
 80087f0:	440a      	add	r2, r1
 80087f2:	7a12      	ldrb	r2, [r2, #8]
 80087f4:	4610      	mov	r0, r2
 80087f6:	4798      	blx	r3
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000248 	.word	0x20000248

0800880c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800880c:	b590      	push	{r4, r7, lr}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	607a      	str	r2, [r7, #4]
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	4a0a      	ldr	r2, [pc, #40]	; (8008848 <disk_read+0x3c>)
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	689c      	ldr	r4, [r3, #8]
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	4a07      	ldr	r2, [pc, #28]	; (8008848 <disk_read+0x3c>)
 800882c:	4413      	add	r3, r2
 800882e:	7a18      	ldrb	r0, [r3, #8]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	68b9      	ldr	r1, [r7, #8]
 8008836:	47a0      	blx	r4
 8008838:	4603      	mov	r3, r0
 800883a:	75fb      	strb	r3, [r7, #23]
  return res;
 800883c:	7dfb      	ldrb	r3, [r7, #23]
}
 800883e:	4618      	mov	r0, r3
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	bd90      	pop	{r4, r7, pc}
 8008846:	bf00      	nop
 8008848:	20000248 	.word	0x20000248

0800884c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800884c:	b590      	push	{r4, r7, lr}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	4a0a      	ldr	r2, [pc, #40]	; (8008888 <disk_write+0x3c>)
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	68dc      	ldr	r4, [r3, #12]
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	4a07      	ldr	r2, [pc, #28]	; (8008888 <disk_write+0x3c>)
 800886c:	4413      	add	r3, r2
 800886e:	7a18      	ldrb	r0, [r3, #8]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	47a0      	blx	r4
 8008878:	4603      	mov	r3, r0
 800887a:	75fb      	strb	r3, [r7, #23]
  return res;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
}
 800887e:	4618      	mov	r0, r3
 8008880:	371c      	adds	r7, #28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd90      	pop	{r4, r7, pc}
 8008886:	bf00      	nop
 8008888:	20000248 	.word	0x20000248

0800888c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	603a      	str	r2, [r7, #0]
 8008896:	71fb      	strb	r3, [r7, #7]
 8008898:	460b      	mov	r3, r1
 800889a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	4a09      	ldr	r2, [pc, #36]	; (80088c4 <disk_ioctl+0x38>)
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	79fa      	ldrb	r2, [r7, #7]
 80088aa:	4906      	ldr	r1, [pc, #24]	; (80088c4 <disk_ioctl+0x38>)
 80088ac:	440a      	add	r2, r1
 80088ae:	7a10      	ldrb	r0, [r2, #8]
 80088b0:	79b9      	ldrb	r1, [r7, #6]
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	4798      	blx	r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20000248 	.word	0x20000248

080088c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3301      	adds	r3, #1
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80088d8:	89fb      	ldrh	r3, [r7, #14]
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	b21a      	sxth	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	b21b      	sxth	r3, r3
 80088e4:	4313      	orrs	r3, r2
 80088e6:	b21b      	sxth	r3, r3
 80088e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80088ea:	89fb      	ldrh	r3, [r7, #14]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3303      	adds	r3, #3
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	3202      	adds	r2, #2
 8008910:	7812      	ldrb	r2, [r2, #0]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	021b      	lsls	r3, r3, #8
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	3201      	adds	r2, #1
 800891e:	7812      	ldrb	r2, [r2, #0]
 8008920:	4313      	orrs	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7812      	ldrb	r2, [r2, #0]
 800892c:	4313      	orrs	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008930:	68fb      	ldr	r3, [r7, #12]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	887a      	ldrh	r2, [r7, #2]
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	887b      	ldrh	r3, [r7, #2]
 8008958:	0a1b      	lsrs	r3, r3, #8
 800895a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	607a      	str	r2, [r7, #4]
 8008962:	887a      	ldrh	r2, [r7, #2]
 8008964:	b2d2      	uxtb	r2, r2
 8008966:	701a      	strb	r2, [r3, #0]
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	0a1b      	lsrs	r3, r3, #8
 800898e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	607a      	str	r2, [r7, #4]
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	b2d2      	uxtb	r2, r2
 800899a:	701a      	strb	r2, [r3, #0]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	0a1b      	lsrs	r3, r3, #8
 80089a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	607a      	str	r2, [r7, #4]
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	607a      	str	r2, [r7, #4]
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	b2d2      	uxtb	r2, r2
 80089be:	701a      	strb	r2, [r3, #0]
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00d      	beq.n	8008a02 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	1c53      	adds	r3, r2, #1
 80089ea:	613b      	str	r3, [r7, #16]
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	1c59      	adds	r1, r3, #1
 80089f0:	6179      	str	r1, [r7, #20]
 80089f2:	7812      	ldrb	r2, [r2, #0]
 80089f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	607b      	str	r3, [r7, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f1      	bne.n	80089e6 <mem_cpy+0x1a>
	}
}
 8008a02:	bf00      	nop
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008a0e:	b480      	push	{r7}
 8008a10:	b087      	sub	sp, #28
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	617a      	str	r2, [r7, #20]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	607b      	str	r3, [r7, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1f3      	bne.n	8008a1e <mem_set+0x10>
}
 8008a36:	bf00      	nop
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008a42:	b480      	push	{r7}
 8008a44:	b089      	sub	sp, #36	; 0x24
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	61fb      	str	r3, [r7, #28]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	61fa      	str	r2, [r7, #28]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	61ba      	str	r2, [r7, #24]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	1acb      	subs	r3, r1, r3
 8008a6e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	607b      	str	r3, [r7, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <mem_cmp+0x40>
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d0eb      	beq.n	8008a5a <mem_cmp+0x18>

	return r;
 8008a82:	697b      	ldr	r3, [r7, #20]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3724      	adds	r7, #36	; 0x24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008a9a:	e002      	b.n	8008aa2 <chk_chr+0x12>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	607b      	str	r3, [r7, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <chk_chr+0x26>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d1f2      	bne.n	8008a9c <chk_chr+0xc>
	return *str;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
	...

08008ac8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60bb      	str	r3, [r7, #8]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	e029      	b.n	8008b30 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008adc:	4a27      	ldr	r2, [pc, #156]	; (8008b7c <chk_lock+0xb4>)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	011b      	lsls	r3, r3, #4
 8008ae2:	4413      	add	r3, r2
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d01d      	beq.n	8008b26 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008aea:	4a24      	ldr	r2, [pc, #144]	; (8008b7c <chk_lock+0xb4>)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	4413      	add	r3, r2
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d116      	bne.n	8008b2a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008afc:	4a1f      	ldr	r2, [pc, #124]	; (8008b7c <chk_lock+0xb4>)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	4413      	add	r3, r2
 8008b04:	3304      	adds	r3, #4
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d10c      	bne.n	8008b2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b10:	4a1a      	ldr	r2, [pc, #104]	; (8008b7c <chk_lock+0xb4>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	4413      	add	r3, r2
 8008b18:	3308      	adds	r3, #8
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d102      	bne.n	8008b2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b24:	e007      	b.n	8008b36 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008b26:	2301      	movs	r3, #1
 8008b28:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d9d2      	bls.n	8008adc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d109      	bne.n	8008b50 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <chk_lock+0x80>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d101      	bne.n	8008b4c <chk_lock+0x84>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e010      	b.n	8008b6e <chk_lock+0xa6>
 8008b4c:	2312      	movs	r3, #18
 8008b4e:	e00e      	b.n	8008b6e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d108      	bne.n	8008b68 <chk_lock+0xa0>
 8008b56:	4a09      	ldr	r2, [pc, #36]	; (8008b7c <chk_lock+0xb4>)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	011b      	lsls	r3, r3, #4
 8008b5c:	4413      	add	r3, r2
 8008b5e:	330c      	adds	r3, #12
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b66:	d101      	bne.n	8008b6c <chk_lock+0xa4>
 8008b68:	2310      	movs	r3, #16
 8008b6a:	e000      	b.n	8008b6e <chk_lock+0xa6>
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000228 	.word	0x20000228

08008b80 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b86:	2300      	movs	r3, #0
 8008b88:	607b      	str	r3, [r7, #4]
 8008b8a:	e002      	b.n	8008b92 <enq_lock+0x12>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	607b      	str	r3, [r7, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d806      	bhi.n	8008ba6 <enq_lock+0x26>
 8008b98:	4a09      	ldr	r2, [pc, #36]	; (8008bc0 <enq_lock+0x40>)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	4413      	add	r3, r2
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1f2      	bne.n	8008b8c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	bf14      	ite	ne
 8008bac:	2301      	movne	r3, #1
 8008bae:	2300      	moveq	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	20000228 	.word	0x20000228

08008bc4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	e01f      	b.n	8008c14 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008bd4:	4a41      	ldr	r2, [pc, #260]	; (8008cdc <inc_lock+0x118>)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	4413      	add	r3, r2
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d113      	bne.n	8008c0e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008be6:	4a3d      	ldr	r2, [pc, #244]	; (8008cdc <inc_lock+0x118>)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	4413      	add	r3, r2
 8008bee:	3304      	adds	r3, #4
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d109      	bne.n	8008c0e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008bfa:	4a38      	ldr	r2, [pc, #224]	; (8008cdc <inc_lock+0x118>)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	4413      	add	r3, r2
 8008c02:	3308      	adds	r3, #8
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d006      	beq.n	8008c1c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3301      	adds	r3, #1
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d9dc      	bls.n	8008bd4 <inc_lock+0x10>
 8008c1a:	e000      	b.n	8008c1e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008c1c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d132      	bne.n	8008c8a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	e002      	b.n	8008c30 <inc_lock+0x6c>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d806      	bhi.n	8008c44 <inc_lock+0x80>
 8008c36:	4a29      	ldr	r2, [pc, #164]	; (8008cdc <inc_lock+0x118>)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	4413      	add	r3, r2
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1f2      	bne.n	8008c2a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d101      	bne.n	8008c4e <inc_lock+0x8a>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e040      	b.n	8008cd0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4922      	ldr	r1, [pc, #136]	; (8008cdc <inc_lock+0x118>)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	440b      	add	r3, r1
 8008c5a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	491e      	ldr	r1, [pc, #120]	; (8008cdc <inc_lock+0x118>)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	440b      	add	r3, r1
 8008c68:	3304      	adds	r3, #4
 8008c6a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	491a      	ldr	r1, [pc, #104]	; (8008cdc <inc_lock+0x118>)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	011b      	lsls	r3, r3, #4
 8008c76:	440b      	add	r3, r1
 8008c78:	3308      	adds	r3, #8
 8008c7a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008c7c:	4a17      	ldr	r2, [pc, #92]	; (8008cdc <inc_lock+0x118>)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	011b      	lsls	r3, r3, #4
 8008c82:	4413      	add	r3, r2
 8008c84:	330c      	adds	r3, #12
 8008c86:	2200      	movs	r2, #0
 8008c88:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d009      	beq.n	8008ca4 <inc_lock+0xe0>
 8008c90:	4a12      	ldr	r2, [pc, #72]	; (8008cdc <inc_lock+0x118>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	4413      	add	r3, r2
 8008c98:	330c      	adds	r3, #12
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <inc_lock+0xe0>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e015      	b.n	8008cd0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d108      	bne.n	8008cbc <inc_lock+0xf8>
 8008caa:	4a0c      	ldr	r2, [pc, #48]	; (8008cdc <inc_lock+0x118>)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	4413      	add	r3, r2
 8008cb2:	330c      	adds	r3, #12
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	e001      	b.n	8008cc0 <inc_lock+0xfc>
 8008cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cc0:	4906      	ldr	r1, [pc, #24]	; (8008cdc <inc_lock+0x118>)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	011b      	lsls	r3, r3, #4
 8008cc6:	440b      	add	r3, r1
 8008cc8:	330c      	adds	r3, #12
 8008cca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3301      	adds	r3, #1
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	20000228 	.word	0x20000228

08008ce0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	607b      	str	r3, [r7, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d825      	bhi.n	8008d40 <dec_lock+0x60>
		n = Files[i].ctr;
 8008cf4:	4a17      	ldr	r2, [pc, #92]	; (8008d54 <dec_lock+0x74>)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	4413      	add	r3, r2
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008d02:	89fb      	ldrh	r3, [r7, #14]
 8008d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d08:	d101      	bne.n	8008d0e <dec_lock+0x2e>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008d0e:	89fb      	ldrh	r3, [r7, #14]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <dec_lock+0x3a>
 8008d14:	89fb      	ldrh	r3, [r7, #14]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008d1a:	4a0e      	ldr	r2, [pc, #56]	; (8008d54 <dec_lock+0x74>)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	4413      	add	r3, r2
 8008d22:	330c      	adds	r3, #12
 8008d24:	89fa      	ldrh	r2, [r7, #14]
 8008d26:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008d28:	89fb      	ldrh	r3, [r7, #14]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <dec_lock+0x5a>
 8008d2e:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <dec_lock+0x74>)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	011b      	lsls	r3, r3, #4
 8008d34:	4413      	add	r3, r2
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	737b      	strb	r3, [r7, #13]
 8008d3e:	e001      	b.n	8008d44 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008d40:	2302      	movs	r3, #2
 8008d42:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008d44:	7b7b      	ldrb	r3, [r7, #13]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000228 	.word	0x20000228

08008d58 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008d60:	2300      	movs	r3, #0
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e010      	b.n	8008d88 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d66:	4a0d      	ldr	r2, [pc, #52]	; (8008d9c <clear_lock+0x44>)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	4413      	add	r3, r2
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d105      	bne.n	8008d82 <clear_lock+0x2a>
 8008d76:	4a09      	ldr	r2, [pc, #36]	; (8008d9c <clear_lock+0x44>)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	011b      	lsls	r3, r3, #4
 8008d7c:	4413      	add	r3, r2
 8008d7e:	2200      	movs	r2, #0
 8008d80:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3301      	adds	r3, #1
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d9eb      	bls.n	8008d66 <clear_lock+0xe>
	}
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20000228 	.word	0x20000228

08008da0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	78db      	ldrb	r3, [r3, #3]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d034      	beq.n	8008e1e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7858      	ldrb	r0, [r3, #1]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	f7ff fd40 	bl	800884c <disk_write>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	73fb      	strb	r3, [r7, #15]
 8008dd6:	e022      	b.n	8008e1e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	1ad2      	subs	r2, r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d217      	bcs.n	8008e1e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	789b      	ldrb	r3, [r3, #2]
 8008df2:	613b      	str	r3, [r7, #16]
 8008df4:	e010      	b.n	8008e18 <sync_window+0x78>
					wsect += fs->fsize;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7858      	ldrb	r0, [r3, #1]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	f7ff fd1d 	bl	800884c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d8eb      	bhi.n	8008df6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d01b      	beq.n	8008e78 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff ffad 	bl	8008da0 <sync_window>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d113      	bne.n	8008e78 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7858      	ldrb	r0, [r3, #1]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	f7ff fcd5 	bl	800880c <disk_read>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008e68:	f04f 33ff 	mov.w	r3, #4294967295
 8008e6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff ff87 	bl	8008da0 <sync_window>
 8008e92:	4603      	mov	r3, r0
 8008e94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d158      	bne.n	8008f4e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d148      	bne.n	8008f36 <sync_fs+0xb2>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	791b      	ldrb	r3, [r3, #4]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d144      	bne.n	8008f36 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3334      	adds	r3, #52	; 0x34
 8008eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff fda9 	bl	8008a0e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3334      	adds	r3, #52	; 0x34
 8008ec0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ec4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff fd38 	bl	800893e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3334      	adds	r3, #52	; 0x34
 8008ed2:	4921      	ldr	r1, [pc, #132]	; (8008f58 <sync_fs+0xd4>)
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff fd4d 	bl	8008974 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	3334      	adds	r3, #52	; 0x34
 8008ede:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008ee2:	491e      	ldr	r1, [pc, #120]	; (8008f5c <sync_fs+0xd8>)
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff fd45 	bl	8008974 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3334      	adds	r3, #52	; 0x34
 8008eee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f7ff fd3b 	bl	8008974 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3334      	adds	r3, #52	; 0x34
 8008f02:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	f7ff fd31 	bl	8008974 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7858      	ldrb	r0, [r3, #1]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f7ff fc8e 	bl	800884c <disk_write>
			fs->fsi_flag = 0;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff fca4 	bl	800888c <disk_ioctl>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <sync_fs+0xca>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	41615252 	.word	0x41615252
 8008f5c:	61417272 	.word	0x61417272

08008f60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	3b02      	subs	r3, #2
 8008f6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	3b02      	subs	r3, #2
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d301      	bcc.n	8008f80 <clust2sect+0x20>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e008      	b.n	8008f92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	895b      	ldrh	r3, [r3, #10]
 8008f84:	461a      	mov	r2, r3
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	fb03 f202 	mul.w	r2, r3, r2
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	4413      	add	r3, r2
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b086      	sub	sp, #24
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d904      	bls.n	8008fbe <get_fat+0x20>
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d302      	bcc.n	8008fc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	e08c      	b.n	80090de <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d045      	beq.n	800905e <get_fat+0xc0>
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d05d      	beq.n	8009092 <get_fat+0xf4>
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d177      	bne.n	80090ca <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	085b      	lsrs	r3, r3, #1
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	0a5b      	lsrs	r3, r3, #9
 8008ff0:	4413      	add	r3, r2
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6938      	ldr	r0, [r7, #16]
 8008ff6:	f7ff ff17 	bl	8008e28 <move_window>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d167      	bne.n	80090d0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	60fa      	str	r2, [r7, #12]
 8009006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4413      	add	r3, r2
 800900e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009012:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	0a5b      	lsrs	r3, r3, #9
 800901c:	4413      	add	r3, r2
 800901e:	4619      	mov	r1, r3
 8009020:	6938      	ldr	r0, [r7, #16]
 8009022:	f7ff ff01 	bl	8008e28 <move_window>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d153      	bne.n	80090d4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	4413      	add	r3, r2
 8009036:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800903a:	021b      	lsls	r3, r3, #8
 800903c:	461a      	mov	r2, r3
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4313      	orrs	r3, r2
 8009042:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <get_fat+0xb6>
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	091b      	lsrs	r3, r3, #4
 8009052:	e002      	b.n	800905a <get_fat+0xbc>
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800905a:	617b      	str	r3, [r7, #20]
			break;
 800905c:	e03f      	b.n	80090de <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	0a1b      	lsrs	r3, r3, #8
 8009066:	4413      	add	r3, r2
 8009068:	4619      	mov	r1, r3
 800906a:	6938      	ldr	r0, [r7, #16]
 800906c:	f7ff fedc 	bl	8008e28 <move_window>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d130      	bne.n	80090d8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009084:	4413      	add	r3, r2
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff fc1e 	bl	80088c8 <ld_word>
 800908c:	4603      	mov	r3, r0
 800908e:	617b      	str	r3, [r7, #20]
			break;
 8009090:	e025      	b.n	80090de <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	09db      	lsrs	r3, r3, #7
 800909a:	4413      	add	r3, r2
 800909c:	4619      	mov	r1, r3
 800909e:	6938      	ldr	r0, [r7, #16]
 80090a0:	f7ff fec2 	bl	8008e28 <move_window>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d118      	bne.n	80090dc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80090b8:	4413      	add	r3, r2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff fc1c 	bl	80088f8 <ld_dword>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80090c6:	617b      	str	r3, [r7, #20]
			break;
 80090c8:	e009      	b.n	80090de <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80090ca:	2301      	movs	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
 80090ce:	e006      	b.n	80090de <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090d0:	bf00      	nop
 80090d2:	e004      	b.n	80090de <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090d4:	bf00      	nop
 80090d6:	e002      	b.n	80090de <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80090d8:	bf00      	nop
 80090da:	e000      	b.n	80090de <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80090dc:	bf00      	nop
		}
	}

	return val;
 80090de:	697b      	ldr	r3, [r7, #20]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80090e8:	b590      	push	{r4, r7, lr}
 80090ea:	b089      	sub	sp, #36	; 0x24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80090f4:	2302      	movs	r3, #2
 80090f6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	f240 80d6 	bls.w	80092ac <put_fat+0x1c4>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	429a      	cmp	r2, r3
 8009108:	f080 80d0 	bcs.w	80092ac <put_fat+0x1c4>
		switch (fs->fs_type) {
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b02      	cmp	r3, #2
 8009112:	d073      	beq.n	80091fc <put_fat+0x114>
 8009114:	2b03      	cmp	r3, #3
 8009116:	f000 8091 	beq.w	800923c <put_fat+0x154>
 800911a:	2b01      	cmp	r3, #1
 800911c:	f040 80c6 	bne.w	80092ac <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	61bb      	str	r3, [r7, #24]
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	085b      	lsrs	r3, r3, #1
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	4413      	add	r3, r2
 800912c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	0a5b      	lsrs	r3, r3, #9
 8009136:	4413      	add	r3, r2
 8009138:	4619      	mov	r1, r3
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7ff fe74 	bl	8008e28 <move_window>
 8009140:	4603      	mov	r3, r0
 8009142:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009144:	7ffb      	ldrb	r3, [r7, #31]
 8009146:	2b00      	cmp	r3, #0
 8009148:	f040 80a9 	bne.w	800929e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	1c59      	adds	r1, r3, #1
 8009156:	61b9      	str	r1, [r7, #24]
 8009158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915c:	4413      	add	r3, r2
 800915e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00d      	beq.n	8009186 <put_fat+0x9e>
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	b25b      	sxtb	r3, r3
 8009170:	f003 030f 	and.w	r3, r3, #15
 8009174:	b25a      	sxtb	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	b25b      	sxtb	r3, r3
 800917e:	4313      	orrs	r3, r2
 8009180:	b25b      	sxtb	r3, r3
 8009182:	b2db      	uxtb	r3, r3
 8009184:	e001      	b.n	800918a <put_fat+0xa2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	b2db      	uxtb	r3, r3
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	0a5b      	lsrs	r3, r3, #9
 800919c:	4413      	add	r3, r2
 800919e:	4619      	mov	r1, r3
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7ff fe41 	bl	8008e28 <move_window>
 80091a6:	4603      	mov	r3, r0
 80091a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091aa:	7ffb      	ldrb	r3, [r7, #31]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d178      	bne.n	80092a2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091bc:	4413      	add	r3, r2
 80091be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <put_fat+0xea>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	091b      	lsrs	r3, r3, #4
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	e00e      	b.n	80091f0 <put_fat+0x108>
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	b25b      	sxtb	r3, r3
 80091d8:	f023 030f 	bic.w	r3, r3, #15
 80091dc:	b25a      	sxtb	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	0a1b      	lsrs	r3, r3, #8
 80091e2:	b25b      	sxtb	r3, r3
 80091e4:	f003 030f 	and.w	r3, r3, #15
 80091e8:	b25b      	sxtb	r3, r3
 80091ea:	4313      	orrs	r3, r2
 80091ec:	b25b      	sxtb	r3, r3
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2201      	movs	r2, #1
 80091f8:	70da      	strb	r2, [r3, #3]
			break;
 80091fa:	e057      	b.n	80092ac <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	4413      	add	r3, r2
 8009206:	4619      	mov	r1, r3
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f7ff fe0d 	bl	8008e28 <move_window>
 800920e:	4603      	mov	r3, r0
 8009210:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009212:	7ffb      	ldrb	r3, [r7, #31]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d146      	bne.n	80092a6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009226:	4413      	add	r3, r2
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	b292      	uxth	r2, r2
 800922c:	4611      	mov	r1, r2
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff fb85 	bl	800893e <st_word>
			fs->wflag = 1;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	70da      	strb	r2, [r3, #3]
			break;
 800923a:	e037      	b.n	80092ac <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	09db      	lsrs	r3, r3, #7
 8009244:	4413      	add	r3, r2
 8009246:	4619      	mov	r1, r3
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7ff fded 	bl	8008e28 <move_window>
 800924e:	4603      	mov	r3, r0
 8009250:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009252:	7ffb      	ldrb	r3, [r7, #31]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d128      	bne.n	80092aa <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800926c:	4413      	add	r3, r2
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff fb42 	bl	80088f8 <ld_dword>
 8009274:	4603      	mov	r3, r0
 8009276:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800927a:	4323      	orrs	r3, r4
 800927c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800928c:	4413      	add	r3, r2
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff fb6f 	bl	8008974 <st_dword>
			fs->wflag = 1;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	70da      	strb	r2, [r3, #3]
			break;
 800929c:	e006      	b.n	80092ac <put_fat+0x1c4>
			if (res != FR_OK) break;
 800929e:	bf00      	nop
 80092a0:	e004      	b.n	80092ac <put_fat+0x1c4>
			if (res != FR_OK) break;
 80092a2:	bf00      	nop
 80092a4:	e002      	b.n	80092ac <put_fat+0x1c4>
			if (res != FR_OK) break;
 80092a6:	bf00      	nop
 80092a8:	e000      	b.n	80092ac <put_fat+0x1c4>
			if (res != FR_OK) break;
 80092aa:	bf00      	nop
		}
	}
	return res;
 80092ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3724      	adds	r7, #36	; 0x24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd90      	pop	{r4, r7, pc}

080092b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b088      	sub	sp, #32
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d904      	bls.n	80092dc <remove_chain+0x26>
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d301      	bcc.n	80092e0 <remove_chain+0x2a>
 80092dc:	2302      	movs	r3, #2
 80092de:	e04b      	b.n	8009378 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00c      	beq.n	8009300 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80092e6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	69b8      	ldr	r0, [r7, #24]
 80092ee:	f7ff fefb 	bl	80090e8 <put_fat>
 80092f2:	4603      	mov	r3, r0
 80092f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80092f6:	7ffb      	ldrb	r3, [r7, #31]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <remove_chain+0x4a>
 80092fc:	7ffb      	ldrb	r3, [r7, #31]
 80092fe:	e03b      	b.n	8009378 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7ff fe4b 	bl	8008f9e <get_fat>
 8009308:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d031      	beq.n	8009374 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <remove_chain+0x64>
 8009316:	2302      	movs	r3, #2
 8009318:	e02e      	b.n	8009378 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009320:	d101      	bne.n	8009326 <remove_chain+0x70>
 8009322:	2301      	movs	r3, #1
 8009324:	e028      	b.n	8009378 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009326:	2200      	movs	r2, #0
 8009328:	68b9      	ldr	r1, [r7, #8]
 800932a:	69b8      	ldr	r0, [r7, #24]
 800932c:	f7ff fedc 	bl	80090e8 <put_fat>
 8009330:	4603      	mov	r3, r0
 8009332:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009334:	7ffb      	ldrb	r3, [r7, #31]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <remove_chain+0x88>
 800933a:	7ffb      	ldrb	r3, [r7, #31]
 800933c:	e01c      	b.n	8009378 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	695a      	ldr	r2, [r3, #20]
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	3b02      	subs	r3, #2
 8009348:	429a      	cmp	r2, r3
 800934a:	d20b      	bcs.n	8009364 <remove_chain+0xae>
			fs->free_clst++;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	791b      	ldrb	r3, [r3, #4]
 800935a:	f043 0301 	orr.w	r3, r3, #1
 800935e:	b2da      	uxtb	r2, r3
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	429a      	cmp	r2, r3
 8009370:	d3c6      	bcc.n	8009300 <remove_chain+0x4a>
 8009372:	e000      	b.n	8009376 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009374:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3720      	adds	r7, #32
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b088      	sub	sp, #32
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10d      	bne.n	80093b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <create_chain+0x2c>
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d31b      	bcc.n	80093e4 <create_chain+0x64>
 80093ac:	2301      	movs	r3, #1
 80093ae:	61bb      	str	r3, [r7, #24]
 80093b0:	e018      	b.n	80093e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff fdf2 	bl	8008f9e <get_fat>
 80093ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d801      	bhi.n	80093c6 <create_chain+0x46>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e070      	b.n	80094a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093cc:	d101      	bne.n	80093d2 <create_chain+0x52>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	e06a      	b.n	80094a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d201      	bcs.n	80093e0 <create_chain+0x60>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	e063      	b.n	80094a8 <create_chain+0x128>
		scl = clst;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	3301      	adds	r3, #1
 80093ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d307      	bcc.n	8009408 <create_chain+0x88>
				ncl = 2;
 80093f8:	2302      	movs	r3, #2
 80093fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	429a      	cmp	r2, r3
 8009402:	d901      	bls.n	8009408 <create_chain+0x88>
 8009404:	2300      	movs	r3, #0
 8009406:	e04f      	b.n	80094a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009408:	69f9      	ldr	r1, [r7, #28]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff fdc7 	bl	8008f9e <get_fat>
 8009410:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00e      	beq.n	8009436 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d003      	beq.n	8009426 <create_chain+0xa6>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009424:	d101      	bne.n	800942a <create_chain+0xaa>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	e03e      	b.n	80094a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800942a:	69fa      	ldr	r2, [r7, #28]
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	429a      	cmp	r2, r3
 8009430:	d1da      	bne.n	80093e8 <create_chain+0x68>
 8009432:	2300      	movs	r3, #0
 8009434:	e038      	b.n	80094a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009436:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009438:	f04f 32ff 	mov.w	r2, #4294967295
 800943c:	69f9      	ldr	r1, [r7, #28]
 800943e:	6938      	ldr	r0, [r7, #16]
 8009440:	f7ff fe52 	bl	80090e8 <put_fat>
 8009444:	4603      	mov	r3, r0
 8009446:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009448:	7dfb      	ldrb	r3, [r7, #23]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <create_chain+0xe2>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6938      	ldr	r0, [r7, #16]
 800945a:	f7ff fe45 	bl	80090e8 <put_fat>
 800945e:	4603      	mov	r3, r0
 8009460:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d116      	bne.n	8009496 <create_chain+0x116>
		fs->last_clst = ncl;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	695a      	ldr	r2, [r3, #20]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	3b02      	subs	r3, #2
 8009478:	429a      	cmp	r2, r3
 800947a:	d804      	bhi.n	8009486 <create_chain+0x106>
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	1e5a      	subs	r2, r3, #1
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	791b      	ldrb	r3, [r3, #4]
 800948a:	f043 0301 	orr.w	r3, r3, #1
 800948e:	b2da      	uxtb	r2, r3
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	711a      	strb	r2, [r3, #4]
 8009494:	e007      	b.n	80094a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d102      	bne.n	80094a2 <create_chain+0x122>
 800949c:	f04f 33ff 	mov.w	r3, #4294967295
 80094a0:	e000      	b.n	80094a4 <create_chain+0x124>
 80094a2:	2301      	movs	r3, #1
 80094a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80094a6:	69fb      	ldr	r3, [r7, #28]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3720      	adds	r7, #32
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	3304      	adds	r3, #4
 80094c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	0a5b      	lsrs	r3, r3, #9
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	8952      	ldrh	r2, [r2, #10]
 80094d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80094d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	1d1a      	adds	r2, r3, #4
 80094da:	613a      	str	r2, [r7, #16]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <clmt_clust+0x3a>
 80094e6:	2300      	movs	r3, #0
 80094e8:	e010      	b.n	800950c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d307      	bcc.n	8009502 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	3304      	adds	r3, #4
 80094fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009500:	e7e9      	b.n	80094d6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009502:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4413      	add	r3, r2
}
 800950c:	4618      	mov	r0, r3
 800950e:	371c      	adds	r7, #28
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800952e:	d204      	bcs.n	800953a <dir_sdi+0x22>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	f003 031f 	and.w	r3, r3, #31
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <dir_sdi+0x26>
		return FR_INT_ERR;
 800953a:	2302      	movs	r3, #2
 800953c:	e063      	b.n	8009606 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d106      	bne.n	800955e <dir_sdi+0x46>
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b02      	cmp	r3, #2
 8009556:	d902      	bls.n	800955e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10c      	bne.n	800957e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	095b      	lsrs	r3, r3, #5
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	8912      	ldrh	r2, [r2, #8]
 800956c:	4293      	cmp	r3, r2
 800956e:	d301      	bcc.n	8009574 <dir_sdi+0x5c>
 8009570:	2302      	movs	r3, #2
 8009572:	e048      	b.n	8009606 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	61da      	str	r2, [r3, #28]
 800957c:	e029      	b.n	80095d2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	895b      	ldrh	r3, [r3, #10]
 8009582:	025b      	lsls	r3, r3, #9
 8009584:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009586:	e019      	b.n	80095bc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6979      	ldr	r1, [r7, #20]
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fd06 	bl	8008f9e <get_fat>
 8009592:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959a:	d101      	bne.n	80095a0 <dir_sdi+0x88>
 800959c:	2301      	movs	r3, #1
 800959e:	e032      	b.n	8009606 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d904      	bls.n	80095b0 <dir_sdi+0x98>
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d301      	bcc.n	80095b4 <dir_sdi+0x9c>
 80095b0:	2302      	movs	r3, #2
 80095b2:	e028      	b.n	8009606 <dir_sdi+0xee>
			ofs -= csz;
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d2e1      	bcs.n	8009588 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80095c4:	6979      	ldr	r1, [r7, #20]
 80095c6:	6938      	ldr	r0, [r7, #16]
 80095c8:	f7ff fcca 	bl	8008f60 <clust2sect>
 80095cc:	4602      	mov	r2, r0
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <dir_sdi+0xcc>
 80095e0:	2302      	movs	r3, #2
 80095e2:	e010      	b.n	8009606 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	69da      	ldr	r2, [r3, #28]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	0a5b      	lsrs	r3, r3, #9
 80095ec:	441a      	add	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095fe:	441a      	add	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b086      	sub	sp, #24
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	3320      	adds	r3, #32
 8009624:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <dir_next+0x28>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009634:	d301      	bcc.n	800963a <dir_next+0x2c>
 8009636:	2304      	movs	r3, #4
 8009638:	e0aa      	b.n	8009790 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009640:	2b00      	cmp	r3, #0
 8009642:	f040 8098 	bne.w	8009776 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10b      	bne.n	8009670 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	095b      	lsrs	r3, r3, #5
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	8912      	ldrh	r2, [r2, #8]
 8009660:	4293      	cmp	r3, r2
 8009662:	f0c0 8088 	bcc.w	8009776 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	61da      	str	r2, [r3, #28]
 800966c:	2304      	movs	r3, #4
 800966e:	e08f      	b.n	8009790 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	0a5b      	lsrs	r3, r3, #9
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	8952      	ldrh	r2, [r2, #10]
 8009678:	3a01      	subs	r2, #1
 800967a:	4013      	ands	r3, r2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d17a      	bne.n	8009776 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	4619      	mov	r1, r3
 8009688:	4610      	mov	r0, r2
 800968a:	f7ff fc88 	bl	8008f9e <get_fat>
 800968e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d801      	bhi.n	800969a <dir_next+0x8c>
 8009696:	2302      	movs	r3, #2
 8009698:	e07a      	b.n	8009790 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a0:	d101      	bne.n	80096a6 <dir_next+0x98>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e074      	b.n	8009790 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d358      	bcc.n	8009762 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	61da      	str	r2, [r3, #28]
 80096bc:	2304      	movs	r3, #4
 80096be:	e067      	b.n	8009790 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f7ff fe59 	bl	8009380 <create_chain>
 80096ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <dir_next+0xcc>
 80096d6:	2307      	movs	r3, #7
 80096d8:	e05a      	b.n	8009790 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d101      	bne.n	80096e4 <dir_next+0xd6>
 80096e0:	2302      	movs	r3, #2
 80096e2:	e055      	b.n	8009790 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ea:	d101      	bne.n	80096f0 <dir_next+0xe2>
 80096ec:	2301      	movs	r3, #1
 80096ee:	e04f      	b.n	8009790 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7ff fb55 	bl	8008da0 <sync_window>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <dir_next+0xf2>
 80096fc:	2301      	movs	r3, #1
 80096fe:	e047      	b.n	8009790 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3334      	adds	r3, #52	; 0x34
 8009704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff f97f 	bl	8008a0e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009710:	2300      	movs	r3, #0
 8009712:	613b      	str	r3, [r7, #16]
 8009714:	6979      	ldr	r1, [r7, #20]
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f7ff fc22 	bl	8008f60 <clust2sect>
 800971c:	4602      	mov	r2, r0
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	631a      	str	r2, [r3, #48]	; 0x30
 8009722:	e012      	b.n	800974a <dir_next+0x13c>
						fs->wflag = 1;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2201      	movs	r2, #1
 8009728:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7ff fb38 	bl	8008da0 <sync_window>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <dir_next+0x12c>
 8009736:	2301      	movs	r3, #1
 8009738:	e02a      	b.n	8009790 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	3301      	adds	r3, #1
 800973e:	613b      	str	r3, [r7, #16]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	631a      	str	r2, [r3, #48]	; 0x30
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	895b      	ldrh	r3, [r3, #10]
 800974e:	461a      	mov	r2, r3
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4293      	cmp	r3, r2
 8009754:	d3e6      	bcc.n	8009724 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	1ad2      	subs	r2, r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009768:	6979      	ldr	r1, [r7, #20]
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f7ff fbf8 	bl	8008f60 <clust2sect>
 8009770:	4602      	mov	r2, r0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009788:	441a      	add	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80097a8:	2100      	movs	r1, #0
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff feb4 	bl	8009518 <dir_sdi>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d12b      	bne.n	8009812 <dir_alloc+0x7a>
		n = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	4619      	mov	r1, r3
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f7ff fb2f 	bl	8008e28 <move_window>
 80097ca:	4603      	mov	r3, r0
 80097cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d11d      	bne.n	8009810 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2be5      	cmp	r3, #229	; 0xe5
 80097dc:	d004      	beq.n	80097e8 <dir_alloc+0x50>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d107      	bne.n	80097f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3301      	adds	r3, #1
 80097ec:	613b      	str	r3, [r7, #16]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d102      	bne.n	80097fc <dir_alloc+0x64>
 80097f6:	e00c      	b.n	8009812 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80097f8:	2300      	movs	r3, #0
 80097fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80097fc:	2101      	movs	r1, #1
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff ff05 	bl	800960e <dir_next>
 8009804:	4603      	mov	r3, r0
 8009806:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0d7      	beq.n	80097be <dir_alloc+0x26>
 800980e:	e000      	b.n	8009812 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009810:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	2b04      	cmp	r3, #4
 8009816:	d101      	bne.n	800981c <dir_alloc+0x84>
 8009818:	2307      	movs	r3, #7
 800981a:	75fb      	strb	r3, [r7, #23]
	return res;
 800981c:	7dfb      	ldrb	r3, [r7, #23]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b084      	sub	sp, #16
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	331a      	adds	r3, #26
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff f847 	bl	80088c8 <ld_word>
 800983a:	4603      	mov	r3, r0
 800983c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b03      	cmp	r3, #3
 8009844:	d109      	bne.n	800985a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	3314      	adds	r3, #20
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff f83c 	bl	80088c8 <ld_word>
 8009850:	4603      	mov	r3, r0
 8009852:	041b      	lsls	r3, r3, #16
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800985a:	68fb      	ldr	r3, [r7, #12]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	331a      	adds	r3, #26
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	b292      	uxth	r2, r2
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff f85f 	bl	800893e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d109      	bne.n	800989c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f103 0214 	add.w	r2, r3, #20
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	0c1b      	lsrs	r3, r3, #16
 8009892:	b29b      	uxth	r3, r3
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f7ff f851 	bl	800893e <st_word>
	}
}
 800989c:	bf00      	nop
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80098a4:	b590      	push	{r4, r7, lr}
 80098a6:	b087      	sub	sp, #28
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	331a      	adds	r3, #26
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff f808 	bl	80088c8 <ld_word>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <cmp_lfn+0x1e>
 80098be:	2300      	movs	r3, #0
 80098c0:	e059      	b.n	8009976 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ca:	1e5a      	subs	r2, r3, #1
 80098cc:	4613      	mov	r3, r2
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	4413      	add	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80098d8:	2301      	movs	r3, #1
 80098da:	81fb      	strh	r3, [r7, #14]
 80098dc:	2300      	movs	r3, #0
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	e033      	b.n	800994a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80098e2:	4a27      	ldr	r2, [pc, #156]	; (8009980 <cmp_lfn+0xdc>)
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	4413      	add	r3, r2
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	4413      	add	r3, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fe ffe9 	bl	80088c8 <ld_word>
 80098f6:	4603      	mov	r3, r0
 80098f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80098fa:	89fb      	ldrh	r3, [r7, #14]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01a      	beq.n	8009936 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2bfe      	cmp	r3, #254	; 0xfe
 8009904:	d812      	bhi.n	800992c <cmp_lfn+0x88>
 8009906:	89bb      	ldrh	r3, [r7, #12]
 8009908:	4618      	mov	r0, r3
 800990a:	f001 fe13 	bl	800b534 <ff_wtoupper>
 800990e:	4603      	mov	r3, r0
 8009910:	461c      	mov	r4, r3
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	617a      	str	r2, [r7, #20]
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	4413      	add	r3, r2
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f001 fe07 	bl	800b534 <ff_wtoupper>
 8009926:	4603      	mov	r3, r0
 8009928:	429c      	cmp	r4, r3
 800992a:	d001      	beq.n	8009930 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800992c:	2300      	movs	r3, #0
 800992e:	e022      	b.n	8009976 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009930:	89bb      	ldrh	r3, [r7, #12]
 8009932:	81fb      	strh	r3, [r7, #14]
 8009934:	e006      	b.n	8009944 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009936:	89bb      	ldrh	r3, [r7, #12]
 8009938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800993c:	4293      	cmp	r3, r2
 800993e:	d001      	beq.n	8009944 <cmp_lfn+0xa0>
 8009940:	2300      	movs	r3, #0
 8009942:	e018      	b.n	8009976 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3301      	adds	r3, #1
 8009948:	613b      	str	r3, [r7, #16]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2b0c      	cmp	r3, #12
 800994e:	d9c8      	bls.n	80098e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <cmp_lfn+0xd0>
 800995c:	89fb      	ldrh	r3, [r7, #14]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d008      	beq.n	8009974 <cmp_lfn+0xd0>
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	4413      	add	r3, r2
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <cmp_lfn+0xd0>
 8009970:	2300      	movs	r3, #0
 8009972:	e000      	b.n	8009976 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009974:	2301      	movs	r3, #1
}
 8009976:	4618      	mov	r0, r3
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	bd90      	pop	{r4, r7, pc}
 800997e:	bf00      	nop
 8009980:	0800d8e8 	.word	0x0800d8e8

08009984 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4611      	mov	r1, r2
 8009990:	461a      	mov	r2, r3
 8009992:	460b      	mov	r3, r1
 8009994:	71fb      	strb	r3, [r7, #7]
 8009996:	4613      	mov	r3, r2
 8009998:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	330d      	adds	r3, #13
 800999e:	79ba      	ldrb	r2, [r7, #6]
 80099a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	330b      	adds	r3, #11
 80099a6:	220f      	movs	r2, #15
 80099a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	330c      	adds	r3, #12
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	331a      	adds	r3, #26
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe ffc0 	bl	800893e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80099be:	79fb      	ldrb	r3, [r7, #7]
 80099c0:	1e5a      	subs	r2, r3, #1
 80099c2:	4613      	mov	r3, r2
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	82fb      	strh	r3, [r7, #22]
 80099d2:	2300      	movs	r3, #0
 80099d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80099d6:	8afb      	ldrh	r3, [r7, #22]
 80099d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099dc:	4293      	cmp	r3, r2
 80099de:	d007      	beq.n	80099f0 <put_lfn+0x6c>
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	61fa      	str	r2, [r7, #28]
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4413      	add	r3, r2
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80099f0:	4a17      	ldr	r2, [pc, #92]	; (8009a50 <put_lfn+0xcc>)
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	4413      	add	r3, r2
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	461a      	mov	r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	4413      	add	r3, r2
 80099fe:	8afa      	ldrh	r2, [r7, #22]
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe ff9b 	bl	800893e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009a08:	8afb      	ldrh	r3, [r7, #22]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <put_lfn+0x90>
 8009a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a12:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	3301      	adds	r3, #1
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b0c      	cmp	r3, #12
 8009a1e:	d9da      	bls.n	80099d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009a20:	8afb      	ldrh	r3, [r7, #22]
 8009a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d006      	beq.n	8009a38 <put_lfn+0xb4>
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d103      	bne.n	8009a40 <put_lfn+0xbc>
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	79fa      	ldrb	r2, [r7, #7]
 8009a44:	701a      	strb	r2, [r3, #0]
}
 8009a46:	bf00      	nop
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	0800d8e8 	.word	0x0800d8e8

08009a54 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08c      	sub	sp, #48	; 0x30
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009a62:	220b      	movs	r2, #11
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7fe ffb0 	bl	80089cc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b05      	cmp	r3, #5
 8009a70:	d92b      	bls.n	8009aca <gen_numname+0x76>
		sr = seq;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009a76:	e022      	b.n	8009abe <gen_numname+0x6a>
			wc = *lfn++;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	1c9a      	adds	r2, r3, #2
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009a82:	2300      	movs	r3, #0
 8009a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a86:	e017      	b.n	8009ab8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	005a      	lsls	r2, r3, #1
 8009a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	4413      	add	r3, r2
 8009a94:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009a96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a98:	085b      	lsrs	r3, r3, #1
 8009a9a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d005      	beq.n	8009ab2 <gen_numname+0x5e>
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009aac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009ab0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	2b0f      	cmp	r3, #15
 8009abc:	d9e4      	bls.n	8009a88 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1d8      	bne.n	8009a78 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009aca:	2307      	movs	r3, #7
 8009acc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f003 030f 	and.w	r3, r3, #15
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	3330      	adds	r3, #48	; 0x30
 8009ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ae2:	2b39      	cmp	r3, #57	; 0x39
 8009ae4:	d904      	bls.n	8009af0 <gen_numname+0x9c>
 8009ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aea:	3307      	adds	r3, #7
 8009aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	1e5a      	subs	r2, r3, #1
 8009af4:	62ba      	str	r2, [r7, #40]	; 0x28
 8009af6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009afa:	4413      	add	r3, r2
 8009afc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009b00:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	091b      	lsrs	r3, r3, #4
 8009b08:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1de      	bne.n	8009ace <gen_numname+0x7a>
	ns[i] = '~';
 8009b10:	f107 0214 	add.w	r2, r7, #20
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	4413      	add	r3, r2
 8009b18:	227e      	movs	r2, #126	; 0x7e
 8009b1a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b20:	e016      	b.n	8009b50 <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	4413      	add	r3, r2
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b80      	cmp	r3, #128	; 0x80
 8009b2c:	d90d      	bls.n	8009b4a <gen_numname+0xf6>
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	4413      	add	r3, r2
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	2bff      	cmp	r3, #255	; 0xff
 8009b38:	d007      	beq.n	8009b4a <gen_numname+0xf6>
			if (j == i - 1) break;
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d010      	beq.n	8009b66 <gen_numname+0x112>
			j++;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	3301      	adds	r3, #1
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d207      	bcs.n	8009b68 <gen_numname+0x114>
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	4413      	add	r3, r2
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	2b20      	cmp	r3, #32
 8009b62:	d1de      	bne.n	8009b22 <gen_numname+0xce>
 8009b64:	e000      	b.n	8009b68 <gen_numname+0x114>
			if (j == i - 1) break;
 8009b66:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	2b07      	cmp	r3, #7
 8009b6c:	d808      	bhi.n	8009b80 <gen_numname+0x12c>
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	62ba      	str	r2, [r7, #40]	; 0x28
 8009b74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009b78:	4413      	add	r3, r2
 8009b7a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009b7e:	e000      	b.n	8009b82 <gen_numname+0x12e>
 8009b80:	2120      	movs	r1, #32
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	627a      	str	r2, [r7, #36]	; 0x24
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	460a      	mov	r2, r1
 8009b8e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	2b07      	cmp	r3, #7
 8009b94:	d9e8      	bls.n	8009b68 <gen_numname+0x114>
}
 8009b96:	bf00      	nop
 8009b98:	3730      	adds	r7, #48	; 0x30
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b085      	sub	sp, #20
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009baa:	230b      	movs	r3, #11
 8009bac:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	0852      	lsrs	r2, r2, #1
 8009bb4:	01db      	lsls	r3, r3, #7
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	1c59      	adds	r1, r3, #1
 8009bbe:	6079      	str	r1, [r7, #4]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	60bb      	str	r3, [r7, #8]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1ed      	bne.n	8009bae <sum_sfn+0x10>
	return sum;
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009bee:	2100      	movs	r1, #0
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff fc91 	bl	8009518 <dir_sdi>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <dir_find+0x24>
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	e0a9      	b.n	8009d58 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c04:	23ff      	movs	r3, #255	; 0xff
 8009c06:	753b      	strb	r3, [r7, #20]
 8009c08:	7d3b      	ldrb	r3, [r7, #20]
 8009c0a:	757b      	strb	r3, [r7, #21]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c12:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	69db      	ldr	r3, [r3, #28]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6938      	ldr	r0, [r7, #16]
 8009c1c:	f7ff f904 	bl	8008e28 <move_window>
 8009c20:	4603      	mov	r3, r0
 8009c22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f040 8090 	bne.w	8009d4c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c34:	7dbb      	ldrb	r3, [r7, #22]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d102      	bne.n	8009c40 <dir_find+0x60>
 8009c3a:	2304      	movs	r3, #4
 8009c3c:	75fb      	strb	r3, [r7, #23]
 8009c3e:	e08a      	b.n	8009d56 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a1b      	ldr	r3, [r3, #32]
 8009c44:	330b      	adds	r3, #11
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c4c:	73fb      	strb	r3, [r7, #15]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	7bfa      	ldrb	r2, [r7, #15]
 8009c52:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009c54:	7dbb      	ldrb	r3, [r7, #22]
 8009c56:	2be5      	cmp	r3, #229	; 0xe5
 8009c58:	d007      	beq.n	8009c6a <dir_find+0x8a>
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	f003 0308 	and.w	r3, r3, #8
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d009      	beq.n	8009c78 <dir_find+0x98>
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	2b0f      	cmp	r3, #15
 8009c68:	d006      	beq.n	8009c78 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c6a:	23ff      	movs	r3, #255	; 0xff
 8009c6c:	757b      	strb	r3, [r7, #21]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f04f 32ff 	mov.w	r2, #4294967295
 8009c74:	631a      	str	r2, [r3, #48]	; 0x30
 8009c76:	e05e      	b.n	8009d36 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	2b0f      	cmp	r3, #15
 8009c7c:	d136      	bne.n	8009cec <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d154      	bne.n	8009d36 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009c8c:	7dbb      	ldrb	r3, [r7, #22]
 8009c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00d      	beq.n	8009cb2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	7b5b      	ldrb	r3, [r3, #13]
 8009c9c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009c9e:	7dbb      	ldrb	r3, [r7, #22]
 8009ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ca4:	75bb      	strb	r3, [r7, #22]
 8009ca6:	7dbb      	ldrb	r3, [r7, #22]
 8009ca8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	695a      	ldr	r2, [r3, #20]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009cb2:	7dba      	ldrb	r2, [r7, #22]
 8009cb4:	7d7b      	ldrb	r3, [r7, #21]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d115      	bne.n	8009ce6 <dir_find+0x106>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	330d      	adds	r3, #13
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	7d3a      	ldrb	r2, [r7, #20]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d10e      	bne.n	8009ce6 <dir_find+0x106>
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	68da      	ldr	r2, [r3, #12]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f7ff fde6 	bl	80098a4 <cmp_lfn>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <dir_find+0x106>
 8009cde:	7d7b      	ldrb	r3, [r7, #21]
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	e000      	b.n	8009ce8 <dir_find+0x108>
 8009ce6:	23ff      	movs	r3, #255	; 0xff
 8009ce8:	757b      	strb	r3, [r7, #21]
 8009cea:	e024      	b.n	8009d36 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009cec:	7d7b      	ldrb	r3, [r7, #21]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d109      	bne.n	8009d06 <dir_find+0x126>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff ff51 	bl	8009b9e <sum_sfn>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	461a      	mov	r2, r3
 8009d00:	7d3b      	ldrb	r3, [r7, #20]
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d024      	beq.n	8009d50 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <dir_find+0x14a>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a18      	ldr	r0, [r3, #32]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3324      	adds	r3, #36	; 0x24
 8009d1c:	220b      	movs	r2, #11
 8009d1e:	4619      	mov	r1, r3
 8009d20:	f7fe fe8f 	bl	8008a42 <mem_cmp>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d014      	beq.n	8009d54 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009d2a:	23ff      	movs	r3, #255	; 0xff
 8009d2c:	757b      	strb	r3, [r7, #21]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f04f 32ff 	mov.w	r2, #4294967295
 8009d34:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009d36:	2100      	movs	r1, #0
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff fc68 	bl	800960e <dir_next>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f43f af65 	beq.w	8009c14 <dir_find+0x34>
 8009d4a:	e004      	b.n	8009d56 <dir_find+0x176>
		if (res != FR_OK) break;
 8009d4c:	bf00      	nop
 8009d4e:	e002      	b.n	8009d56 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009d50:	bf00      	nop
 8009d52:	e000      	b.n	8009d56 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009d54:	bf00      	nop

	return res;
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08c      	sub	sp, #48	; 0x30
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d74:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <dir_register+0x20>
 8009d7c:	2306      	movs	r3, #6
 8009d7e:	e0e0      	b.n	8009f42 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009d80:	2300      	movs	r3, #0
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24
 8009d84:	e002      	b.n	8009d8c <dir_register+0x2c>
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	3301      	adds	r3, #1
 8009d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	68da      	ldr	r2, [r3, #12]
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	4413      	add	r3, r2
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1f4      	bne.n	8009d86 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009da2:	f107 030c 	add.w	r3, r7, #12
 8009da6:	220c      	movs	r2, #12
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fe fe0f 	bl	80089cc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d032      	beq.n	8009e1e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2240      	movs	r2, #64	; 0x40
 8009dbc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dc4:	e016      	b.n	8009df4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	f107 010c 	add.w	r1, r7, #12
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd6:	f7ff fe3d 	bl	8009a54 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff ff00 	bl	8009be0 <dir_find>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d106      	bne.n	8009dfc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df0:	3301      	adds	r3, #1
 8009df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	2b63      	cmp	r3, #99	; 0x63
 8009df8:	d9e5      	bls.n	8009dc6 <dir_register+0x66>
 8009dfa:	e000      	b.n	8009dfe <dir_register+0x9e>
			if (res != FR_OK) break;
 8009dfc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	2b64      	cmp	r3, #100	; 0x64
 8009e02:	d101      	bne.n	8009e08 <dir_register+0xa8>
 8009e04:	2307      	movs	r3, #7
 8009e06:	e09c      	b.n	8009f42 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	d002      	beq.n	8009e16 <dir_register+0xb6>
 8009e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e14:	e095      	b.n	8009f42 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009e16:	7dfa      	ldrb	r2, [r7, #23]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <dir_register+0xd8>
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	330c      	adds	r3, #12
 8009e2c:	4a47      	ldr	r2, [pc, #284]	; (8009f4c <dir_register+0x1ec>)
 8009e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e32:	089b      	lsrs	r3, r3, #2
 8009e34:	3301      	adds	r3, #1
 8009e36:	e000      	b.n	8009e3a <dir_register+0xda>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009e3c:	6a39      	ldr	r1, [r7, #32]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7ff fcaa 	bl	8009798 <dir_alloc>
 8009e44:	4603      	mov	r3, r0
 8009e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d148      	bne.n	8009ee4 <dir_register+0x184>
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	623b      	str	r3, [r7, #32]
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d042      	beq.n	8009ee4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	695a      	ldr	r2, [r3, #20]
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	015b      	lsls	r3, r3, #5
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff fb54 	bl	8009518 <dir_sdi>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d132      	bne.n	8009ee4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3324      	adds	r3, #36	; 0x24
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff fe8b 	bl	8009b9e <sum_sfn>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	4619      	mov	r1, r3
 8009e92:	69f8      	ldr	r0, [r7, #28]
 8009e94:	f7fe ffc8 	bl	8008e28 <move_window>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d11d      	bne.n	8009ee2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	68d8      	ldr	r0, [r3, #12]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a19      	ldr	r1, [r3, #32]
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	7efb      	ldrb	r3, [r7, #27]
 8009eb4:	f7ff fd66 	bl	8009984 <put_lfn>
				fs->wflag = 1;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff fba4 	bl	800960e <dir_next>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d107      	bne.n	8009ee4 <dir_register+0x184>
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	623b      	str	r3, [r7, #32]
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1d5      	bne.n	8009e8c <dir_register+0x12c>
 8009ee0:	e000      	b.n	8009ee4 <dir_register+0x184>
				if (res != FR_OK) break;
 8009ee2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d128      	bne.n	8009f3e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	69f8      	ldr	r0, [r7, #28]
 8009ef4:	f7fe ff98 	bl	8008e28 <move_window>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009efe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d11b      	bne.n	8009f3e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe fd7d 	bl	8008a0e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a18      	ldr	r0, [r3, #32]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3324      	adds	r3, #36	; 0x24
 8009f1c:	220b      	movs	r2, #11
 8009f1e:	4619      	mov	r1, r3
 8009f20:	f7fe fd54 	bl	80089cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	330c      	adds	r3, #12
 8009f30:	f002 0218 	and.w	r2, r2, #24
 8009f34:	b2d2      	uxtb	r2, r2
 8009f36:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3730      	adds	r7, #48	; 0x30
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	4ec4ec4f 	.word	0x4ec4ec4f

08009f50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08a      	sub	sp, #40	; 0x28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	613b      	str	r3, [r7, #16]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	1c5a      	adds	r2, r3, #1
 8009f74:	61ba      	str	r2, [r7, #24]
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	4413      	add	r3, r2
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f80:	2b1f      	cmp	r3, #31
 8009f82:	d96a      	bls.n	800a05a <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f86:	2b2f      	cmp	r3, #47	; 0x2f
 8009f88:	d006      	beq.n	8009f98 <create_name+0x48>
 8009f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f8c:	2b5c      	cmp	r3, #92	; 0x5c
 8009f8e:	d110      	bne.n	8009fb2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009f90:	e002      	b.n	8009f98 <create_name+0x48>
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	3301      	adds	r3, #1
 8009f96:	61bb      	str	r3, [r7, #24]
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b2f      	cmp	r3, #47	; 0x2f
 8009fa2:	d0f6      	beq.n	8009f92 <create_name+0x42>
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	4413      	add	r3, r2
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	2b5c      	cmp	r3, #92	; 0x5c
 8009fae:	d0f0      	beq.n	8009f92 <create_name+0x42>
			break;
 8009fb0:	e054      	b.n	800a05c <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2bfe      	cmp	r3, #254	; 0xfe
 8009fb6:	d901      	bls.n	8009fbc <create_name+0x6c>
 8009fb8:	2306      	movs	r3, #6
 8009fba:	e1bf      	b.n	800a33c <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8009fc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b80      	cmp	r3, #128	; 0x80
 8009fc8:	d925      	bls.n	800a016 <create_name+0xc6>
 8009fca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2bff      	cmp	r3, #255	; 0xff
 8009fd0:	d021      	beq.n	800a016 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	1c5a      	adds	r2, r3, #1
 8009fd6:	61ba      	str	r2, [r7, #24]
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	4413      	add	r3, r2
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8009fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fe4:	021b      	lsls	r3, r3, #8
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	4413      	add	r3, r2
 8009ff0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 8009ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff6:	2b3f      	cmp	r3, #63	; 0x3f
 8009ff8:	d903      	bls.n	800a002 <create_name+0xb2>
 8009ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ffe:	2b7e      	cmp	r3, #126	; 0x7e
 800a000:	d909      	bls.n	800a016 <create_name+0xc6>
 800a002:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a006:	2b00      	cmp	r3, #0
 800a008:	da03      	bge.n	800a012 <create_name+0xc2>
 800a00a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a00e:	2bff      	cmp	r3, #255	; 0xff
 800a010:	d101      	bne.n	800a016 <create_name+0xc6>
 800a012:	2306      	movs	r3, #6
 800a014:	e192      	b.n	800a33c <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a018:	2101      	movs	r1, #1
 800a01a:	4618      	mov	r0, r3
 800a01c:	f001 fa2a 	bl	800b474 <ff_convert>
 800a020:	4603      	mov	r3, r0
 800a022:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <create_name+0xde>
 800a02a:	2306      	movs	r3, #6
 800a02c:	e186      	b.n	800a33c <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a02e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a030:	2b7f      	cmp	r3, #127	; 0x7f
 800a032:	d809      	bhi.n	800a048 <create_name+0xf8>
 800a034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a036:	4619      	mov	r1, r3
 800a038:	489a      	ldr	r0, [pc, #616]	; (800a2a4 <create_name+0x354>)
 800a03a:	f7fe fd29 	bl	8008a90 <chk_chr>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <create_name+0xf8>
 800a044:	2306      	movs	r3, #6
 800a046:	e179      	b.n	800a33c <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	617a      	str	r2, [r7, #20]
 800a04e:	005b      	lsls	r3, r3, #1
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a056:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a058:	e78a      	b.n	8009f70 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a05a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	441a      	add	r2, r3
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a068:	2b1f      	cmp	r3, #31
 800a06a:	d801      	bhi.n	800a070 <create_name+0x120>
 800a06c:	2304      	movs	r3, #4
 800a06e:	e000      	b.n	800a072 <create_name+0x122>
 800a070:	2300      	movs	r3, #0
 800a072:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a076:	e011      	b.n	800a09c <create_name+0x14c>
		w = lfn[di - 1];
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a07e:	3b01      	subs	r3, #1
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4413      	add	r3, r2
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a08a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a08c:	2b20      	cmp	r3, #32
 800a08e:	d002      	beq.n	800a096 <create_name+0x146>
 800a090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a092:	2b2e      	cmp	r3, #46	; 0x2e
 800a094:	d106      	bne.n	800a0a4 <create_name+0x154>
		di--;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	3b01      	subs	r3, #1
 800a09a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1ea      	bne.n	800a078 <create_name+0x128>
 800a0a2:	e000      	b.n	800a0a6 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800a0a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <create_name+0x16c>
 800a0b8:	2306      	movs	r3, #6
 800a0ba:	e13f      	b.n	800a33c <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3324      	adds	r3, #36	; 0x24
 800a0c0:	220b      	movs	r2, #11
 800a0c2:	2120      	movs	r1, #32
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe fca2 	bl	8008a0e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61bb      	str	r3, [r7, #24]
 800a0ce:	e002      	b.n	800a0d6 <create_name+0x186>
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	61bb      	str	r3, [r7, #24]
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	4413      	add	r3, r2
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	2b20      	cmp	r3, #32
 800a0e2:	d0f5      	beq.n	800a0d0 <create_name+0x180>
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a0f0:	d0ee      	beq.n	800a0d0 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d009      	beq.n	800a10c <create_name+0x1bc>
 800a0f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0fc:	f043 0303 	orr.w	r3, r3, #3
 800a100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a104:	e002      	b.n	800a10c <create_name+0x1bc>
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	3b01      	subs	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d009      	beq.n	800a126 <create_name+0x1d6>
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a118:	3b01      	subs	r3, #1
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	881b      	ldrh	r3, [r3, #0]
 800a122:	2b2e      	cmp	r3, #46	; 0x2e
 800a124:	d1ef      	bne.n	800a106 <create_name+0x1b6>

	i = b = 0; ni = 8;
 800a126:	2300      	movs	r3, #0
 800a128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a12c:	2300      	movs	r3, #0
 800a12e:	623b      	str	r3, [r7, #32]
 800a130:	2308      	movs	r3, #8
 800a132:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	61ba      	str	r2, [r7, #24]
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	4413      	add	r3, r2
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 80aa 	beq.w	800a2a0 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a14c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a14e:	2b20      	cmp	r3, #32
 800a150:	d006      	beq.n	800a160 <create_name+0x210>
 800a152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a154:	2b2e      	cmp	r3, #46	; 0x2e
 800a156:	d10a      	bne.n	800a16e <create_name+0x21e>
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d006      	beq.n	800a16e <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800a160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a164:	f043 0303 	orr.w	r3, r3, #3
 800a168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a16c:	e097      	b.n	800a29e <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a16e:	6a3a      	ldr	r2, [r7, #32]
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	429a      	cmp	r2, r3
 800a174:	d203      	bcs.n	800a17e <create_name+0x22e>
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d123      	bne.n	800a1c6 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	2b0b      	cmp	r3, #11
 800a182:	d106      	bne.n	800a192 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800a184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a188:	f043 0303 	orr.w	r3, r3, #3
 800a18c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a190:	e08d      	b.n	800a2ae <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	429a      	cmp	r2, r3
 800a198:	d005      	beq.n	800a1a6 <create_name+0x256>
 800a19a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a19e:	f043 0303 	orr.w	r3, r3, #3
 800a1a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d87e      	bhi.n	800a2ac <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	61bb      	str	r3, [r7, #24]
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	623b      	str	r3, [r7, #32]
 800a1b6:	230b      	movs	r3, #11
 800a1b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1c4:	e06b      	b.n	800a29e <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a1c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1c8:	2b7f      	cmp	r3, #127	; 0x7f
 800a1ca:	d910      	bls.n	800a1ee <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800a1cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 f9b0 	bl	800b534 <ff_wtoupper>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 f94b 	bl	800b474 <ff_convert>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a1e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a1e6:	f043 0302 	orr.w	r3, r3, #2
 800a1ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800a1ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1f0:	2bff      	cmp	r3, #255	; 0xff
 800a1f2:	d91a      	bls.n	800a22a <create_name+0x2da>
			if (i >= ni - 1) {
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	6a3a      	ldr	r2, [r7, #32]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d308      	bcc.n	800a210 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800a1fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a202:	f043 0303 	orr.w	r3, r3, #3
 800a206:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	623b      	str	r3, [r7, #32]
 800a20e:	e046      	b.n	800a29e <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800a210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a212:	0a1b      	lsrs	r3, r3, #8
 800a214:	b299      	uxth	r1, r3
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	623a      	str	r2, [r7, #32]
 800a21c:	b2c9      	uxtb	r1, r1
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	4413      	add	r3, r2
 800a222:	460a      	mov	r2, r1
 800a224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a228:	e02f      	b.n	800a28a <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a22a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <create_name+0x2f0>
 800a230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a232:	4619      	mov	r1, r3
 800a234:	481c      	ldr	r0, [pc, #112]	; (800a2a8 <create_name+0x358>)
 800a236:	f7fe fc2b 	bl	8008a90 <chk_chr>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d008      	beq.n	800a252 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a240:	235f      	movs	r3, #95	; 0x5f
 800a242:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a244:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a248:	f043 0303 	orr.w	r3, r3, #3
 800a24c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a250:	e01b      	b.n	800a28a <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a254:	2b40      	cmp	r3, #64	; 0x40
 800a256:	d909      	bls.n	800a26c <create_name+0x31c>
 800a258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a25a:	2b5a      	cmp	r3, #90	; 0x5a
 800a25c:	d806      	bhi.n	800a26c <create_name+0x31c>
					b |= 2;
 800a25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a262:	f043 0302 	orr.w	r3, r3, #2
 800a266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a26a:	e00e      	b.n	800a28a <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a26c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a26e:	2b60      	cmp	r3, #96	; 0x60
 800a270:	d90b      	bls.n	800a28a <create_name+0x33a>
 800a272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a274:	2b7a      	cmp	r3, #122	; 0x7a
 800a276:	d808      	bhi.n	800a28a <create_name+0x33a>
						b |= 1; w -= 0x20;
 800a278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a27c:	f043 0301 	orr.w	r3, r3, #1
 800a280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a286:	3b20      	subs	r3, #32
 800a288:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	623a      	str	r2, [r7, #32]
 800a290:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a292:	b2d1      	uxtb	r1, r2
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	4413      	add	r3, r2
 800a298:	460a      	mov	r2, r1
 800a29a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a29e:	e749      	b.n	800a134 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800a2a0:	bf00      	nop
 800a2a2:	e004      	b.n	800a2ae <create_name+0x35e>
 800a2a4:	0800d86c 	.word	0x0800d86c
 800a2a8:	0800d878 	.word	0x0800d878
			if (si > di) break;			/* No extension */
 800a2ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2b4:	2be5      	cmp	r3, #229	; 0xe5
 800a2b6:	d103      	bne.n	800a2c0 <create_name+0x370>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2205      	movs	r2, #5
 800a2bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b08      	cmp	r3, #8
 800a2c4:	d104      	bne.n	800a2d0 <create_name+0x380>
 800a2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2d4:	f003 030c 	and.w	r3, r3, #12
 800a2d8:	2b0c      	cmp	r3, #12
 800a2da:	d005      	beq.n	800a2e8 <create_name+0x398>
 800a2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2e0:	f003 0303 	and.w	r3, r3, #3
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d105      	bne.n	800a2f4 <create_name+0x3a4>
 800a2e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2ec:	f043 0302 	orr.w	r3, r3, #2
 800a2f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a2f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2f8:	f003 0302 	and.w	r3, r3, #2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d117      	bne.n	800a330 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a304:	f003 0303 	and.w	r3, r3, #3
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d105      	bne.n	800a318 <create_name+0x3c8>
 800a30c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a310:	f043 0310 	orr.w	r3, r3, #16
 800a314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a31c:	f003 030c 	and.w	r3, r3, #12
 800a320:	2b04      	cmp	r3, #4
 800a322:	d105      	bne.n	800a330 <create_name+0x3e0>
 800a324:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a328:	f043 0308 	orr.w	r3, r3, #8
 800a32c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a336:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a33a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3728      	adds	r7, #40	; 0x28
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a358:	e002      	b.n	800a360 <follow_path+0x1c>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	3301      	adds	r3, #1
 800a35e:	603b      	str	r3, [r7, #0]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	2b2f      	cmp	r3, #47	; 0x2f
 800a366:	d0f8      	beq.n	800a35a <follow_path+0x16>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b5c      	cmp	r3, #92	; 0x5c
 800a36e:	d0f4      	beq.n	800a35a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2200      	movs	r2, #0
 800a374:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2b1f      	cmp	r3, #31
 800a37c:	d80a      	bhi.n	800a394 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2280      	movs	r2, #128	; 0x80
 800a382:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a386:	2100      	movs	r1, #0
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7ff f8c5 	bl	8009518 <dir_sdi>
 800a38e:	4603      	mov	r3, r0
 800a390:	75fb      	strb	r3, [r7, #23]
 800a392:	e043      	b.n	800a41c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a394:	463b      	mov	r3, r7
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff fdd9 	bl	8009f50 <create_name>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d134      	bne.n	800a412 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff fc19 	bl	8009be0 <dir_find>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a3b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00a      	beq.n	800a3d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d127      	bne.n	800a416 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a3c6:	7afb      	ldrb	r3, [r7, #11]
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d122      	bne.n	800a416 <follow_path+0xd2>
 800a3d0:	2305      	movs	r3, #5
 800a3d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a3d4:	e01f      	b.n	800a416 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a3d6:	7afb      	ldrb	r3, [r7, #11]
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d11c      	bne.n	800a41a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	799b      	ldrb	r3, [r3, #6]
 800a3e4:	f003 0310 	and.w	r3, r3, #16
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d102      	bne.n	800a3f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a3ec:	2305      	movs	r3, #5
 800a3ee:	75fb      	strb	r3, [r7, #23]
 800a3f0:	e014      	b.n	800a41c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a400:	4413      	add	r3, r2
 800a402:	4619      	mov	r1, r3
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f7ff fa0e 	bl	8009826 <ld_clust>
 800a40a:	4602      	mov	r2, r0
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a410:	e7c0      	b.n	800a394 <follow_path+0x50>
			if (res != FR_OK) break;
 800a412:	bf00      	nop
 800a414:	e002      	b.n	800a41c <follow_path+0xd8>
				break;
 800a416:	bf00      	nop
 800a418:	e000      	b.n	800a41c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a41a:	bf00      	nop
			}
		}
	}

	return res;
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a426:	b480      	push	{r7}
 800a428:	b087      	sub	sp, #28
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a42e:	f04f 33ff 	mov.w	r3, #4294967295
 800a432:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d031      	beq.n	800a4a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	617b      	str	r3, [r7, #20]
 800a442:	e002      	b.n	800a44a <get_ldnumber+0x24>
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	3301      	adds	r3, #1
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b1f      	cmp	r3, #31
 800a450:	d903      	bls.n	800a45a <get_ldnumber+0x34>
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b3a      	cmp	r3, #58	; 0x3a
 800a458:	d1f4      	bne.n	800a444 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b3a      	cmp	r3, #58	; 0x3a
 800a460:	d11c      	bne.n	800a49c <get_ldnumber+0x76>
			tp = *path;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	60fa      	str	r2, [r7, #12]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	3b30      	subs	r3, #48	; 0x30
 800a472:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b09      	cmp	r3, #9
 800a478:	d80e      	bhi.n	800a498 <get_ldnumber+0x72>
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d10a      	bne.n	800a498 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d107      	bne.n	800a498 <get_ldnumber+0x72>
					vol = (int)i;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	3301      	adds	r3, #1
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	e002      	b.n	800a4a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a49c:	2300      	movs	r3, #0
 800a49e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a4a0:	693b      	ldr	r3, [r7, #16]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	371c      	adds	r7, #28
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
	...

0800a4b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	70da      	strb	r2, [r3, #3]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7fe fcac 	bl	8008e28 <move_window>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <check_fs+0x2a>
 800a4d6:	2304      	movs	r3, #4
 800a4d8:	e038      	b.n	800a54c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3334      	adds	r3, #52	; 0x34
 800a4de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe f9f0 	bl	80088c8 <ld_word>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d001      	beq.n	800a4f8 <check_fs+0x48>
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e029      	b.n	800a54c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4fe:	2be9      	cmp	r3, #233	; 0xe9
 800a500:	d009      	beq.n	800a516 <check_fs+0x66>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a508:	2beb      	cmp	r3, #235	; 0xeb
 800a50a:	d11e      	bne.n	800a54a <check_fs+0x9a>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a512:	2b90      	cmp	r3, #144	; 0x90
 800a514:	d119      	bne.n	800a54a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3334      	adds	r3, #52	; 0x34
 800a51a:	3336      	adds	r3, #54	; 0x36
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fe f9eb 	bl	80088f8 <ld_dword>
 800a522:	4603      	mov	r3, r0
 800a524:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a528:	4a0a      	ldr	r2, [pc, #40]	; (800a554 <check_fs+0xa4>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d101      	bne.n	800a532 <check_fs+0x82>
 800a52e:	2300      	movs	r3, #0
 800a530:	e00c      	b.n	800a54c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	3334      	adds	r3, #52	; 0x34
 800a536:	3352      	adds	r3, #82	; 0x52
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe f9dd 	bl	80088f8 <ld_dword>
 800a53e:	4602      	mov	r2, r0
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <check_fs+0xa8>)
 800a542:	429a      	cmp	r2, r3
 800a544:	d101      	bne.n	800a54a <check_fs+0x9a>
 800a546:	2300      	movs	r3, #0
 800a548:	e000      	b.n	800a54c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a54a:	2302      	movs	r3, #2
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	00544146 	.word	0x00544146
 800a558:	33544146 	.word	0x33544146

0800a55c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b096      	sub	sp, #88	; 0x58
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	4613      	mov	r3, r2
 800a568:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2200      	movs	r2, #0
 800a56e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f7ff ff58 	bl	800a426 <get_ldnumber>
 800a576:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	da01      	bge.n	800a582 <find_volume+0x26>
 800a57e:	230b      	movs	r3, #11
 800a580:	e22e      	b.n	800a9e0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a582:	4aa8      	ldr	r2, [pc, #672]	; (800a824 <find_volume+0x2c8>)
 800a584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a58a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <find_volume+0x3a>
 800a592:	230c      	movs	r3, #12
 800a594:	e224      	b.n	800a9e0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a59a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	f023 0301 	bic.w	r3, r3, #1
 800a5a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d01a      	beq.n	800a5e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ae:	785b      	ldrb	r3, [r3, #1]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe f8eb 	bl	800878c <disk_status>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a5bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10c      	bne.n	800a5e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d007      	beq.n	800a5de <find_volume+0x82>
 800a5ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5d2:	f003 0304 	and.w	r3, r3, #4
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a5da:	230a      	movs	r3, #10
 800a5dc:	e200      	b.n	800a9e0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e1fe      	b.n	800a9e0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	785b      	ldrb	r3, [r3, #1]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fe f8e3 	bl	80087c0 <disk_initialize>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a60c:	2303      	movs	r3, #3
 800a60e:	e1e7      	b.n	800a9e0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d007      	beq.n	800a626 <find_volume+0xca>
 800a616:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a622:	230a      	movs	r3, #10
 800a624:	e1dc      	b.n	800a9e0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a62a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a62c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a62e:	f7ff ff3f 	bl	800a4b0 <check_fs>
 800a632:	4603      	mov	r3, r0
 800a634:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a638:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d14b      	bne.n	800a6d8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a640:	2300      	movs	r3, #0
 800a642:	643b      	str	r3, [r7, #64]	; 0x40
 800a644:	e01f      	b.n	800a686 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a64e:	011b      	lsls	r3, r3, #4
 800a650:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a654:	4413      	add	r3, r2
 800a656:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	3304      	adds	r3, #4
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d006      	beq.n	800a670 <find_volume+0x114>
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	3308      	adds	r3, #8
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe f946 	bl	80088f8 <ld_dword>
 800a66c:	4602      	mov	r2, r0
 800a66e:	e000      	b.n	800a672 <find_volume+0x116>
 800a670:	2200      	movs	r2, #0
 800a672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a67a:	440b      	add	r3, r1
 800a67c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a682:	3301      	adds	r3, #1
 800a684:	643b      	str	r3, [r7, #64]	; 0x40
 800a686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d9dc      	bls.n	800a646 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a68c:	2300      	movs	r3, #0
 800a68e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <find_volume+0x140>
 800a696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a698:	3b01      	subs	r3, #1
 800a69a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a6aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d005      	beq.n	800a6be <find_volume+0x162>
 800a6b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6b6:	f7ff fefb 	bl	800a4b0 <check_fs>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	e000      	b.n	800a6c0 <find_volume+0x164>
 800a6be:	2303      	movs	r3, #3
 800a6c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a6c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d905      	bls.n	800a6d8 <find_volume+0x17c>
 800a6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d4:	2b03      	cmp	r3, #3
 800a6d6:	d9e1      	bls.n	800a69c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a6d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6dc:	2b04      	cmp	r3, #4
 800a6de:	d101      	bne.n	800a6e4 <find_volume+0x188>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e17d      	b.n	800a9e0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a6e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d901      	bls.n	800a6f0 <find_volume+0x194>
 800a6ec:	230d      	movs	r3, #13
 800a6ee:	e177      	b.n	800a9e0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	3334      	adds	r3, #52	; 0x34
 800a6f4:	330b      	adds	r3, #11
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe f8e6 	bl	80088c8 <ld_word>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a702:	d001      	beq.n	800a708 <find_volume+0x1ac>
 800a704:	230d      	movs	r3, #13
 800a706:	e16b      	b.n	800a9e0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70a:	3334      	adds	r3, #52	; 0x34
 800a70c:	3316      	adds	r3, #22
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe f8da 	bl	80088c8 <ld_word>
 800a714:	4603      	mov	r3, r0
 800a716:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <find_volume+0x1d0>
 800a71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a720:	3334      	adds	r3, #52	; 0x34
 800a722:	3324      	adds	r3, #36	; 0x24
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe f8e7 	bl	80088f8 <ld_dword>
 800a72a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a730:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	789b      	ldrb	r3, [r3, #2]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d005      	beq.n	800a750 <find_volume+0x1f4>
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	789b      	ldrb	r3, [r3, #2]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d001      	beq.n	800a750 <find_volume+0x1f4>
 800a74c:	230d      	movs	r3, #13
 800a74e:	e147      	b.n	800a9e0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	789b      	ldrb	r3, [r3, #2]
 800a754:	461a      	mov	r2, r3
 800a756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a758:	fb02 f303 	mul.w	r3, r2, r3
 800a75c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a764:	b29a      	uxth	r2, r3
 800a766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a768:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	895b      	ldrh	r3, [r3, #10]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d008      	beq.n	800a784 <find_volume+0x228>
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	895b      	ldrh	r3, [r3, #10]
 800a776:	461a      	mov	r2, r3
 800a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77a:	895b      	ldrh	r3, [r3, #10]
 800a77c:	3b01      	subs	r3, #1
 800a77e:	4013      	ands	r3, r2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <find_volume+0x22c>
 800a784:	230d      	movs	r3, #13
 800a786:	e12b      	b.n	800a9e0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	3334      	adds	r3, #52	; 0x34
 800a78c:	3311      	adds	r3, #17
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe f89a 	bl	80088c8 <ld_word>
 800a794:	4603      	mov	r3, r0
 800a796:	461a      	mov	r2, r3
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	891b      	ldrh	r3, [r3, #8]
 800a7a0:	f003 030f 	and.w	r3, r3, #15
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <find_volume+0x252>
 800a7aa:	230d      	movs	r3, #13
 800a7ac:	e118      	b.n	800a9e0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	3334      	adds	r3, #52	; 0x34
 800a7b2:	3313      	adds	r3, #19
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fe f887 	bl	80088c8 <ld_word>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a7be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d106      	bne.n	800a7d2 <find_volume+0x276>
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	3334      	adds	r3, #52	; 0x34
 800a7c8:	3320      	adds	r3, #32
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe f894 	bl	80088f8 <ld_dword>
 800a7d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d4:	3334      	adds	r3, #52	; 0x34
 800a7d6:	330e      	adds	r3, #14
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe f875 	bl	80088c8 <ld_word>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a7e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <find_volume+0x290>
 800a7e8:	230d      	movs	r3, #13
 800a7ea:	e0f9      	b.n	800a9e0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a7ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f0:	4413      	add	r3, r2
 800a7f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7f4:	8912      	ldrh	r2, [r2, #8]
 800a7f6:	0912      	lsrs	r2, r2, #4
 800a7f8:	b292      	uxth	r2, r2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a7fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	429a      	cmp	r2, r3
 800a804:	d201      	bcs.n	800a80a <find_volume+0x2ae>
 800a806:	230d      	movs	r3, #13
 800a808:	e0ea      	b.n	800a9e0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a80a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a812:	8952      	ldrh	r2, [r2, #10]
 800a814:	fbb3 f3f2 	udiv	r3, r3, r2
 800a818:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d103      	bne.n	800a828 <find_volume+0x2cc>
 800a820:	230d      	movs	r3, #13
 800a822:	e0dd      	b.n	800a9e0 <find_volume+0x484>
 800a824:	20000220 	.word	0x20000220
		fmt = FS_FAT32;
 800a828:	2303      	movs	r3, #3
 800a82a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a834:	4293      	cmp	r3, r2
 800a836:	d802      	bhi.n	800a83e <find_volume+0x2e2>
 800a838:	2302      	movs	r3, #2
 800a83a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a844:	4293      	cmp	r3, r2
 800a846:	d802      	bhi.n	800a84e <find_volume+0x2f2>
 800a848:	2301      	movs	r3, #1
 800a84a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	1c9a      	adds	r2, r3, #2
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a85a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a85c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a860:	441a      	add	r2, r3
 800a862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a864:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a866:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86a:	441a      	add	r2, r3
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a874:	2b03      	cmp	r3, #3
 800a876:	d11e      	bne.n	800a8b6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	3334      	adds	r3, #52	; 0x34
 800a87c:	332a      	adds	r3, #42	; 0x2a
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe f822 	bl	80088c8 <ld_word>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <find_volume+0x332>
 800a88a:	230d      	movs	r3, #13
 800a88c:	e0a8      	b.n	800a9e0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a890:	891b      	ldrh	r3, [r3, #8]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <find_volume+0x33e>
 800a896:	230d      	movs	r3, #13
 800a898:	e0a2      	b.n	800a9e0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89c:	3334      	adds	r3, #52	; 0x34
 800a89e:	332c      	adds	r3, #44	; 0x2c
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fe f829 	bl	80088f8 <ld_dword>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	647b      	str	r3, [r7, #68]	; 0x44
 800a8b4:	e01f      	b.n	800a8f6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b8:	891b      	ldrh	r3, [r3, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <find_volume+0x366>
 800a8be:	230d      	movs	r3, #13
 800a8c0:	e08e      	b.n	800a9e0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c8:	441a      	add	r2, r3
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a8ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d103      	bne.n	800a8de <find_volume+0x382>
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	005b      	lsls	r3, r3, #1
 800a8dc:	e00a      	b.n	800a8f4 <find_volume+0x398>
 800a8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e0:	699a      	ldr	r2, [r3, #24]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	4413      	add	r3, r2
 800a8e8:	085a      	lsrs	r2, r3, #1
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a8f4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f8:	69da      	ldr	r2, [r3, #28]
 800a8fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a900:	0a5b      	lsrs	r3, r3, #9
 800a902:	429a      	cmp	r2, r3
 800a904:	d201      	bcs.n	800a90a <find_volume+0x3ae>
 800a906:	230d      	movs	r3, #13
 800a908:	e06a      	b.n	800a9e0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	f04f 32ff 	mov.w	r2, #4294967295
 800a910:	615a      	str	r2, [r3, #20]
 800a912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a914:	695a      	ldr	r2, [r3, #20]
 800a916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a918:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	2280      	movs	r2, #128	; 0x80
 800a91e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a924:	2b03      	cmp	r3, #3
 800a926:	d149      	bne.n	800a9bc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	3334      	adds	r3, #52	; 0x34
 800a92c:	3330      	adds	r3, #48	; 0x30
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fd ffca 	bl	80088c8 <ld_word>
 800a934:	4603      	mov	r3, r0
 800a936:	2b01      	cmp	r3, #1
 800a938:	d140      	bne.n	800a9bc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a93c:	3301      	adds	r3, #1
 800a93e:	4619      	mov	r1, r3
 800a940:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a942:	f7fe fa71 	bl	8008e28 <move_window>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d137      	bne.n	800a9bc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94e:	2200      	movs	r2, #0
 800a950:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	3334      	adds	r3, #52	; 0x34
 800a956:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fd ffb4 	bl	80088c8 <ld_word>
 800a960:	4603      	mov	r3, r0
 800a962:	461a      	mov	r2, r3
 800a964:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a968:	429a      	cmp	r2, r3
 800a96a:	d127      	bne.n	800a9bc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	3334      	adds	r3, #52	; 0x34
 800a970:	4618      	mov	r0, r3
 800a972:	f7fd ffc1 	bl	80088f8 <ld_dword>
 800a976:	4602      	mov	r2, r0
 800a978:	4b1b      	ldr	r3, [pc, #108]	; (800a9e8 <find_volume+0x48c>)
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d11e      	bne.n	800a9bc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	3334      	adds	r3, #52	; 0x34
 800a982:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a986:	4618      	mov	r0, r3
 800a988:	f7fd ffb6 	bl	80088f8 <ld_dword>
 800a98c:	4602      	mov	r2, r0
 800a98e:	4b17      	ldr	r3, [pc, #92]	; (800a9ec <find_volume+0x490>)
 800a990:	429a      	cmp	r2, r3
 800a992:	d113      	bne.n	800a9bc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a996:	3334      	adds	r3, #52	; 0x34
 800a998:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fd ffab 	bl	80088f8 <ld_dword>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9aa:	3334      	adds	r3, #52	; 0x34
 800a9ac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fd ffa1 	bl	80088f8 <ld_dword>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9be:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a9c2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a9c4:	4b0a      	ldr	r3, [pc, #40]	; (800a9f0 <find_volume+0x494>)
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	4b08      	ldr	r3, [pc, #32]	; (800a9f0 <find_volume+0x494>)
 800a9ce:	801a      	strh	r2, [r3, #0]
 800a9d0:	4b07      	ldr	r3, [pc, #28]	; (800a9f0 <find_volume+0x494>)
 800a9d2:	881a      	ldrh	r2, [r3, #0]
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a9d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9da:	f7fe f9bd 	bl	8008d58 <clear_lock>
#endif
	return FR_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3758      	adds	r7, #88	; 0x58
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	41615252 	.word	0x41615252
 800a9ec:	61417272 	.word	0x61417272
 800a9f0:	20000224 	.word	0x20000224

0800a9f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a9fe:	2309      	movs	r3, #9
 800aa00:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d01c      	beq.n	800aa42 <validate+0x4e>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d018      	beq.n	800aa42 <validate+0x4e>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d013      	beq.n	800aa42 <validate+0x4e>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	889a      	ldrh	r2, [r3, #4]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	88db      	ldrh	r3, [r3, #6]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d10c      	bne.n	800aa42 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	785b      	ldrb	r3, [r3, #1]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fd feac 	bl	800878c <disk_status>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <validate+0x4e>
			res = FR_OK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d102      	bne.n	800aa4e <validate+0x5a>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	e000      	b.n	800aa50 <validate+0x5c>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	6013      	str	r3, [r2, #0]
	return res;
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aa72:	f107 0310 	add.w	r3, r7, #16
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7ff fcd5 	bl	800a426 <get_ldnumber>
 800aa7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	da01      	bge.n	800aa88 <f_mount+0x28>
 800aa84:	230b      	movs	r3, #11
 800aa86:	e02b      	b.n	800aae0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aa88:	4a17      	ldr	r2, [pc, #92]	; (800aae8 <f_mount+0x88>)
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d005      	beq.n	800aaa4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aa98:	69b8      	ldr	r0, [r7, #24]
 800aa9a:	f7fe f95d 	bl	8008d58 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d002      	beq.n	800aab0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	490d      	ldr	r1, [pc, #52]	; (800aae8 <f_mount+0x88>)
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <f_mount+0x66>
 800aac0:	79fb      	ldrb	r3, [r7, #7]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d001      	beq.n	800aaca <f_mount+0x6a>
 800aac6:	2300      	movs	r3, #0
 800aac8:	e00a      	b.n	800aae0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aaca:	f107 010c 	add.w	r1, r7, #12
 800aace:	f107 0308 	add.w	r3, r7, #8
 800aad2:	2200      	movs	r2, #0
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7ff fd41 	bl	800a55c <find_volume>
 800aada:	4603      	mov	r3, r0
 800aadc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aade:	7dfb      	ldrb	r3, [r7, #23]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3720      	adds	r7, #32
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	20000220 	.word	0x20000220

0800aaec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	f107 030c 	add.w	r3, r7, #12
 800aaf8:	6018      	str	r0, [r3, #0]
 800aafa:	f107 0308 	add.w	r3, r7, #8
 800aafe:	6019      	str	r1, [r3, #0]
 800ab00:	1dfb      	adds	r3, r7, #7
 800ab02:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ab04:	f107 030c 	add.w	r3, r7, #12
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <f_open+0x26>
 800ab0e:	2309      	movs	r3, #9
 800ab10:	e231      	b.n	800af76 <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ab12:	1dfb      	adds	r3, r7, #7
 800ab14:	1dfa      	adds	r2, r7, #7
 800ab16:	7812      	ldrb	r2, [r2, #0]
 800ab18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ab1c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800ab1e:	1dfb      	adds	r3, r7, #7
 800ab20:	781a      	ldrb	r2, [r3, #0]
 800ab22:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800ab26:	f107 0308 	add.w	r3, r7, #8
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff fd16 	bl	800a55c <find_volume>
 800ab30:	4603      	mov	r3, r0
 800ab32:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800ab36:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f040 8210 	bne.w	800af60 <f_open+0x474>
		dj.obj.fs = fs;
 800ab40:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ab44:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800ab48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ab4c:	f107 0214 	add.w	r2, r7, #20
 800ab50:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ab52:	f107 0308 	add.w	r3, r7, #8
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fbf0 	bl	800a344 <follow_path>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ab6a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d11b      	bne.n	800abaa <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ab72:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800ab76:	b25b      	sxtb	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	da03      	bge.n	800ab84 <f_open+0x98>
				res = FR_INVALID_NAME;
 800ab7c:	2306      	movs	r3, #6
 800ab7e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800ab82:	e012      	b.n	800abaa <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab84:	1dfb      	adds	r3, r7, #7
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f023 0301 	bic.w	r3, r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bf14      	ite	ne
 800ab90:	2301      	movne	r3, #1
 800ab92:	2300      	moveq	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	461a      	mov	r2, r3
 800ab98:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fd ff92 	bl	8008ac8 <chk_lock>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800abaa:	1dfb      	adds	r3, r7, #7
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	f003 031c 	and.w	r3, r3, #28
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 809b 	beq.w	800acee <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800abb8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d019      	beq.n	800abf4 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800abc0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	d10e      	bne.n	800abe6 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800abc8:	f7fd ffda 	bl	8008b80 <enq_lock>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d006      	beq.n	800abe0 <f_open+0xf4>
 800abd2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff f8c2 	bl	8009d60 <dir_register>
 800abdc:	4603      	mov	r3, r0
 800abde:	e000      	b.n	800abe2 <f_open+0xf6>
 800abe0:	2312      	movs	r3, #18
 800abe2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800abe6:	1dfb      	adds	r3, r7, #7
 800abe8:	1dfa      	adds	r2, r7, #7
 800abea:	7812      	ldrb	r2, [r2, #0]
 800abec:	f042 0208 	orr.w	r2, r2, #8
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	e012      	b.n	800ac1a <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800abf4:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800abf8:	f003 0311 	and.w	r3, r3, #17
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d003      	beq.n	800ac08 <f_open+0x11c>
					res = FR_DENIED;
 800ac00:	2307      	movs	r3, #7
 800ac02:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800ac06:	e008      	b.n	800ac1a <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac08:	1dfb      	adds	r3, r7, #7
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <f_open+0x12e>
 800ac14:	2308      	movs	r3, #8
 800ac16:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac1a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f040 8082 	bne.w	800ad28 <f_open+0x23c>
 800ac24:	1dfb      	adds	r3, r7, #7
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d07b      	beq.n	800ad28 <f_open+0x23c>
				dw = GET_FATTIME();
 800ac30:	f7fa feb2 	bl	8005998 <get_fattime>
 800ac34:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ac38:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ac3c:	330e      	adds	r3, #14
 800ac3e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fd fe96 	bl	8008974 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ac48:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ac4c:	3316      	adds	r3, #22
 800ac4e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fd fe8e 	bl	8008974 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ac58:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ac5c:	330b      	adds	r3, #11
 800ac5e:	2220      	movs	r2, #32
 800ac60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ac62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ac66:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe fdda 	bl	8009826 <ld_clust>
 800ac72:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ac76:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ac7a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800ac7e:	2200      	movs	r2, #0
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fe fdef 	bl	8009864 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ac86:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ac8a:	331c      	adds	r3, #28
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fd fe70 	bl	8008974 <st_dword>
					fs->wflag = 1;
 800ac94:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ac98:	2201      	movs	r2, #1
 800ac9a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ac9c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d041      	beq.n	800ad28 <f_open+0x23c>
						dw = fs->winsect;
 800aca4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800aca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acaa:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800acae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800acb2:	2200      	movs	r2, #0
 800acb4:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fafc 	bl	80092b6 <remove_chain>
 800acbe:	4603      	mov	r3, r0
 800acc0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800acc4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d12d      	bne.n	800ad28 <f_open+0x23c>
							res = move_window(fs, dw);
 800accc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800acd0:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fe f8a7 	bl	8008e28 <move_window>
 800acda:	4603      	mov	r3, r0
 800acdc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ace0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ace4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800ace8:	3a01      	subs	r2, #1
 800acea:	611a      	str	r2, [r3, #16]
 800acec:	e01c      	b.n	800ad28 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800acee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d118      	bne.n	800ad28 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800acf6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800acfa:	f003 0310 	and.w	r3, r3, #16
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <f_open+0x21e>
					res = FR_NO_FILE;
 800ad02:	2304      	movs	r3, #4
 800ad04:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800ad08:	e00e      	b.n	800ad28 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ad0a:	1dfb      	adds	r3, r7, #7
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d008      	beq.n	800ad28 <f_open+0x23c>
 800ad16:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <f_open+0x23c>
						res = FR_DENIED;
 800ad22:	2307      	movs	r3, #7
 800ad24:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800ad28:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d136      	bne.n	800ad9e <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ad30:	1dfb      	adds	r3, r7, #7
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	f003 0308 	and.w	r3, r3, #8
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d005      	beq.n	800ad48 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800ad3c:	1dfb      	adds	r3, r7, #7
 800ad3e:	1dfa      	adds	r2, r7, #7
 800ad40:	7812      	ldrb	r2, [r2, #0]
 800ad42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad46:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ad48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ad4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad4e:	f107 030c 	add.w	r3, r7, #12
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ad56:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800ad5a:	f107 030c 	add.w	r3, r7, #12
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad62:	1dfb      	adds	r3, r7, #7
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	f023 0301 	bic.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	bf14      	ite	ne
 800ad6e:	2301      	movne	r3, #1
 800ad70:	2300      	moveq	r3, #0
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	461a      	mov	r2, r3
 800ad76:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fd ff21 	bl	8008bc4 <inc_lock>
 800ad82:	4602      	mov	r2, r0
 800ad84:	f107 030c 	add.w	r3, r7, #12
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ad8c:	f107 030c 	add.w	r3, r7, #12
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d102      	bne.n	800ad9e <f_open+0x2b2>
 800ad98:	2302      	movs	r3, #2
 800ad9a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ad9e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f040 80dc 	bne.w	800af60 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ada8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800adac:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fe fd37 	bl	8009826 <ld_clust>
 800adb8:	4602      	mov	r2, r0
 800adba:	f107 030c 	add.w	r3, r7, #12
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800adc2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800adc6:	331c      	adds	r3, #28
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fd fd95 	bl	80088f8 <ld_dword>
 800adce:	4602      	mov	r2, r0
 800add0:	f107 030c 	add.w	r3, r7, #12
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800add8:	f107 030c 	add.w	r3, r7, #12
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2200      	movs	r2, #0
 800ade0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ade2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800ade6:	f107 030c 	add.w	r3, r7, #12
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800adee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800adf2:	88da      	ldrh	r2, [r3, #6]
 800adf4:	f107 030c 	add.w	r3, r7, #12
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800adfc:	f107 030c 	add.w	r3, r7, #12
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	1dfa      	adds	r2, r7, #7
 800ae04:	7812      	ldrb	r2, [r2, #0]
 800ae06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ae08:	f107 030c 	add.w	r3, r7, #12
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ae12:	f107 030c 	add.w	r3, r7, #12
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ae1c:	f107 030c 	add.w	r3, r7, #12
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2200      	movs	r2, #0
 800ae24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ae26:	f107 030c 	add.w	r3, r7, #12
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3330      	adds	r3, #48	; 0x30
 800ae2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae32:	2100      	movs	r1, #0
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fd fdea 	bl	8008a0e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ae3a:	1dfb      	adds	r3, r7, #7
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 808c 	beq.w	800af60 <f_open+0x474>
 800ae48:	f107 030c 	add.w	r3, r7, #12
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 8085 	beq.w	800af60 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ae56:	f107 030c 	add.w	r3, r7, #12
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68da      	ldr	r2, [r3, #12]
 800ae5e:	f107 030c 	add.w	r3, r7, #12
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ae66:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ae6a:	895b      	ldrh	r3, [r3, #10]
 800ae6c:	025b      	lsls	r3, r3, #9
 800ae6e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ae72:	f107 030c 	add.w	r3, r7, #12
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae7e:	f107 030c 	add.w	r3, r7, #12
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800ae8a:	e01f      	b.n	800aecc <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 800ae8c:	f107 030c 	add.w	r3, r7, #12
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fe f881 	bl	8008f9e <get_fat>
 800ae9c:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800aea0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d802      	bhi.n	800aeae <f_open+0x3c2>
 800aea8:	2302      	movs	r3, #2
 800aeaa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aeae:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb6:	d102      	bne.n	800aebe <f_open+0x3d2>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aebe:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800aec2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800aecc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d105      	bne.n	800aee0 <f_open+0x3f4>
 800aed4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800aed8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800aedc:	429a      	cmp	r2, r3
 800aede:	d8d5      	bhi.n	800ae8c <f_open+0x3a0>
				}
				fp->clust = clst;
 800aee0:	f107 030c 	add.w	r3, r7, #12
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800aeea:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aeec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d135      	bne.n	800af60 <f_open+0x474>
 800aef4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800aef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d02f      	beq.n	800af60 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800af00:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800af04:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe f829 	bl	8008f60 <clust2sect>
 800af0e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800af12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800af16:	2b00      	cmp	r3, #0
 800af18:	d103      	bne.n	800af22 <f_open+0x436>
						res = FR_INT_ERR;
 800af1a:	2302      	movs	r3, #2
 800af1c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800af20:	e01e      	b.n	800af60 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800af22:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800af26:	0a5a      	lsrs	r2, r3, #9
 800af28:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800af2c:	441a      	add	r2, r3
 800af2e:	f107 030c 	add.w	r3, r7, #12
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800af36:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800af3a:	7858      	ldrb	r0, [r3, #1]
 800af3c:	f107 030c 	add.w	r3, r7, #12
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af46:	f107 030c 	add.w	r3, r7, #12
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6a1a      	ldr	r2, [r3, #32]
 800af4e:	2301      	movs	r3, #1
 800af50:	f7fd fc5c 	bl	800880c <disk_read>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <f_open+0x474>
 800af5a:	2301      	movs	r3, #1
 800af5c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800af60:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800af64:	2b00      	cmp	r3, #0
 800af66:	d004      	beq.n	800af72 <f_open+0x486>
 800af68:	f107 030c 	add.w	r3, r7, #12
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800af72:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800af76:	4618      	mov	r0, r3
 800af78:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b08c      	sub	sp, #48	; 0x30
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2200      	movs	r2, #0
 800af96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f107 0210 	add.w	r2, r7, #16
 800af9e:	4611      	mov	r1, r2
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff fd27 	bl	800a9f4 <validate>
 800afa6:	4603      	mov	r3, r0
 800afa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800afac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d107      	bne.n	800afc4 <f_write+0x44>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	7d5b      	ldrb	r3, [r3, #21]
 800afb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800afbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <f_write+0x4a>
 800afc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afc8:	e14b      	b.n	800b262 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	7d1b      	ldrb	r3, [r3, #20]
 800afce:	f003 0302 	and.w	r3, r3, #2
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <f_write+0x5a>
 800afd6:	2307      	movs	r3, #7
 800afd8:	e143      	b.n	800b262 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	699a      	ldr	r2, [r3, #24]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	441a      	add	r2, r3
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	f080 812d 	bcs.w	800b246 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	43db      	mvns	r3, r3
 800aff2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aff4:	e127      	b.n	800b246 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affe:	2b00      	cmp	r3, #0
 800b000:	f040 80e3 	bne.w	800b1ca <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	0a5b      	lsrs	r3, r3, #9
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	8952      	ldrh	r2, [r2, #10]
 800b00e:	3a01      	subs	r2, #1
 800b010:	4013      	ands	r3, r2
 800b012:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d143      	bne.n	800b0a2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10c      	bne.n	800b03c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d11a      	bne.n	800b064 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2100      	movs	r1, #0
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe f9a4 	bl	8009380 <create_chain>
 800b038:	62b8      	str	r0, [r7, #40]	; 0x28
 800b03a:	e013      	b.n	800b064 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	4619      	mov	r1, r3
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7fe fa30 	bl	80094b0 <clmt_clust>
 800b050:	62b8      	str	r0, [r7, #40]	; 0x28
 800b052:	e007      	b.n	800b064 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	4619      	mov	r1, r3
 800b05c:	4610      	mov	r0, r2
 800b05e:	f7fe f98f 	bl	8009380 <create_chain>
 800b062:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 80f2 	beq.w	800b250 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d104      	bne.n	800b07c <f_write+0xfc>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2202      	movs	r2, #2
 800b076:	755a      	strb	r2, [r3, #21]
 800b078:	2302      	movs	r3, #2
 800b07a:	e0f2      	b.n	800b262 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d104      	bne.n	800b08e <f_write+0x10e>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2201      	movs	r2, #1
 800b088:	755a      	strb	r2, [r3, #21]
 800b08a:	2301      	movs	r3, #1
 800b08c:	e0e9      	b.n	800b262 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b092:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d102      	bne.n	800b0a2 <f_write+0x122>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0a0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	7d1b      	ldrb	r3, [r3, #20]
 800b0a6:	b25b      	sxtb	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	da18      	bge.n	800b0de <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	7858      	ldrb	r0, [r3, #1]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a1a      	ldr	r2, [r3, #32]
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	f7fd fbc6 	bl	800884c <disk_write>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <f_write+0x150>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	755a      	strb	r2, [r3, #21]
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e0c8      	b.n	800b262 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	7d1b      	ldrb	r3, [r3, #20]
 800b0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	f7fd ff3a 	bl	8008f60 <clust2sect>
 800b0ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d104      	bne.n	800b0fe <f_write+0x17e>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	755a      	strb	r2, [r3, #21]
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	e0b1      	b.n	800b262 <f_write+0x2e2>
			sect += csect;
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	4413      	add	r3, r2
 800b104:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	0a5b      	lsrs	r3, r3, #9
 800b10a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b10c:	6a3b      	ldr	r3, [r7, #32]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d03c      	beq.n	800b18c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	6a3b      	ldr	r3, [r7, #32]
 800b116:	4413      	add	r3, r2
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	8952      	ldrh	r2, [r2, #10]
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d905      	bls.n	800b12c <f_write+0x1ac>
					cc = fs->csize - csect;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	895b      	ldrh	r3, [r3, #10]
 800b124:	461a      	mov	r2, r3
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	7858      	ldrb	r0, [r3, #1]
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	69f9      	ldr	r1, [r7, #28]
 800b136:	f7fd fb89 	bl	800884c <disk_write>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d004      	beq.n	800b14a <f_write+0x1ca>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2201      	movs	r2, #1
 800b144:	755a      	strb	r2, [r3, #21]
 800b146:	2301      	movs	r3, #1
 800b148:	e08b      	b.n	800b262 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6a1a      	ldr	r2, [r3, #32]
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	6a3a      	ldr	r2, [r7, #32]
 800b154:	429a      	cmp	r2, r3
 800b156:	d915      	bls.n	800b184 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6a1a      	ldr	r2, [r3, #32]
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	025b      	lsls	r3, r3, #9
 800b168:	69fa      	ldr	r2, [r7, #28]
 800b16a:	4413      	add	r3, r2
 800b16c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b170:	4619      	mov	r1, r3
 800b172:	f7fd fc2b 	bl	80089cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	7d1b      	ldrb	r3, [r3, #20]
 800b17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	025b      	lsls	r3, r3, #9
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b18a:	e03f      	b.n	800b20c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	429a      	cmp	r2, r3
 800b194:	d016      	beq.n	800b1c4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	699a      	ldr	r2, [r3, #24]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d210      	bcs.n	800b1c4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	7858      	ldrb	r0, [r3, #1]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	f7fd fb2c 	bl	800880c <disk_read>
 800b1b4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d004      	beq.n	800b1c4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	755a      	strb	r2, [r3, #21]
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e04e      	b.n	800b262 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1d2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b1d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d901      	bls.n	800b1e4 <f_write+0x264>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f2:	4413      	add	r3, r2
 800b1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f6:	69f9      	ldr	r1, [r7, #28]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fd fbe7 	bl	80089cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	7d1b      	ldrb	r3, [r3, #20]
 800b202:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b206:	b2da      	uxtb	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b20c:	69fa      	ldr	r2, [r7, #28]
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	4413      	add	r3, r2
 800b212:	61fb      	str	r3, [r7, #28]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	699a      	ldr	r2, [r3, #24]
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	441a      	add	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	619a      	str	r2, [r3, #24]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	68da      	ldr	r2, [r3, #12]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	429a      	cmp	r2, r3
 800b22a:	bf38      	it	cc
 800b22c:	461a      	movcc	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	60da      	str	r2, [r3, #12]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	441a      	add	r2, r3
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	601a      	str	r2, [r3, #0]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f47f aed4 	bne.w	800aff6 <f_write+0x76>
 800b24e:	e000      	b.n	800b252 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b250:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	7d1b      	ldrb	r3, [r3, #20]
 800b256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3730      	adds	r7, #48	; 0x30
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b086      	sub	sp, #24
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f107 0208 	add.w	r2, r7, #8
 800b278:	4611      	mov	r1, r2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff fbba 	bl	800a9f4 <validate>
 800b280:	4603      	mov	r3, r0
 800b282:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d168      	bne.n	800b35c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	7d1b      	ldrb	r3, [r3, #20]
 800b28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b292:	2b00      	cmp	r3, #0
 800b294:	d062      	beq.n	800b35c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	7d1b      	ldrb	r3, [r3, #20]
 800b29a:	b25b      	sxtb	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	da15      	bge.n	800b2cc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	7858      	ldrb	r0, [r3, #1]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1a      	ldr	r2, [r3, #32]
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	f7fd facc 	bl	800884c <disk_write>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <f_sync+0x54>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e04f      	b.n	800b35e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	7d1b      	ldrb	r3, [r3, #20]
 800b2c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b2cc:	f7fa fb64 	bl	8005998 <get_fattime>
 800b2d0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4610      	mov	r0, r2
 800b2dc:	f7fd fda4 	bl	8008e28 <move_window>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d138      	bne.n	800b35c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	330b      	adds	r3, #11
 800b2f4:	781a      	ldrb	r2, [r3, #0]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	330b      	adds	r3, #11
 800b2fa:	f042 0220 	orr.w	r2, r2, #32
 800b2fe:	b2d2      	uxtb	r2, r2
 800b300:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	461a      	mov	r2, r3
 800b30c:	68f9      	ldr	r1, [r7, #12]
 800b30e:	f7fe faa9 	bl	8009864 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f103 021c 	add.w	r2, r3, #28
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	4619      	mov	r1, r3
 800b31e:	4610      	mov	r0, r2
 800b320:	f7fd fb28 	bl	8008974 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3316      	adds	r3, #22
 800b328:	6939      	ldr	r1, [r7, #16]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fd fb22 	bl	8008974 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3312      	adds	r3, #18
 800b334:	2100      	movs	r1, #0
 800b336:	4618      	mov	r0, r3
 800b338:	f7fd fb01 	bl	800893e <st_word>
					fs->wflag = 1;
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2201      	movs	r2, #1
 800b340:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	4618      	mov	r0, r3
 800b346:	f7fd fd9d 	bl	8008e84 <sync_fs>
 800b34a:	4603      	mov	r3, r0
 800b34c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	7d1b      	ldrb	r3, [r3, #20]
 800b352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b356:	b2da      	uxtb	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff ff7b 	bl	800b26a <f_sync>
 800b374:	4603      	mov	r3, r0
 800b376:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d118      	bne.n	800b3b0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f107 0208 	add.w	r2, r7, #8
 800b384:	4611      	mov	r1, r2
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff fb34 	bl	800a9f4 <validate>
 800b38c:	4603      	mov	r3, r0
 800b38e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10c      	bne.n	800b3b0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fd fca0 	bl	8008ce0 <dec_lock>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d102      	bne.n	800b3b0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b087      	sub	sp, #28
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b3d2:	4b1f      	ldr	r3, [pc, #124]	; (800b450 <FATFS_LinkDriverEx+0x94>)
 800b3d4:	7a5b      	ldrb	r3, [r3, #9]
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d131      	bne.n	800b440 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b3dc:	4b1c      	ldr	r3, [pc, #112]	; (800b450 <FATFS_LinkDriverEx+0x94>)
 800b3de:	7a5b      	ldrb	r3, [r3, #9]
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	; (800b450 <FATFS_LinkDriverEx+0x94>)
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b3ea:	4b19      	ldr	r3, [pc, #100]	; (800b450 <FATFS_LinkDriverEx+0x94>)
 800b3ec:	7a5b      	ldrb	r3, [r3, #9]
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	4a17      	ldr	r2, [pc, #92]	; (800b450 <FATFS_LinkDriverEx+0x94>)
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b3fa:	4b15      	ldr	r3, [pc, #84]	; (800b450 <FATFS_LinkDriverEx+0x94>)
 800b3fc:	7a5b      	ldrb	r3, [r3, #9]
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	461a      	mov	r2, r3
 800b402:	4b13      	ldr	r3, [pc, #76]	; (800b450 <FATFS_LinkDriverEx+0x94>)
 800b404:	4413      	add	r3, r2
 800b406:	79fa      	ldrb	r2, [r7, #7]
 800b408:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b40a:	4b11      	ldr	r3, [pc, #68]	; (800b450 <FATFS_LinkDriverEx+0x94>)
 800b40c:	7a5b      	ldrb	r3, [r3, #9]
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	1c5a      	adds	r2, r3, #1
 800b412:	b2d1      	uxtb	r1, r2
 800b414:	4a0e      	ldr	r2, [pc, #56]	; (800b450 <FATFS_LinkDriverEx+0x94>)
 800b416:	7251      	strb	r1, [r2, #9]
 800b418:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b41a:	7dbb      	ldrb	r3, [r7, #22]
 800b41c:	3330      	adds	r3, #48	; 0x30
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	3301      	adds	r3, #1
 800b428:	223a      	movs	r2, #58	; 0x3a
 800b42a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	3302      	adds	r3, #2
 800b430:	222f      	movs	r2, #47	; 0x2f
 800b432:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	3303      	adds	r3, #3
 800b438:	2200      	movs	r2, #0
 800b43a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b440:	7dfb      	ldrb	r3, [r7, #23]
}
 800b442:	4618      	mov	r0, r3
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	20000248 	.word	0x20000248

0800b454 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b45e:	2200      	movs	r2, #0
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff ffaa 	bl	800b3bc <FATFS_LinkDriverEx>
 800b468:	4603      	mov	r3, r0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
	...

0800b474 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b474:	b480      	push	{r7}
 800b476:	b089      	sub	sp, #36	; 0x24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	6039      	str	r1, [r7, #0]
 800b47e:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800b480:	88fb      	ldrh	r3, [r7, #6]
 800b482:	2b7f      	cmp	r3, #127	; 0x7f
 800b484:	d802      	bhi.n	800b48c <ff_convert+0x18>
		c = chr;
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	837b      	strh	r3, [r7, #26]
 800b48a:	e047      	b.n	800b51c <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEM code to unicode */
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d005      	beq.n	800b49e <ff_convert+0x2a>
			p = oem2uni;
 800b492:	4b26      	ldr	r3, [pc, #152]	; (800b52c <ff_convert+0xb8>)
 800b494:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800b496:	f245 5320 	movw	r3, #21792	; 0x5520
 800b49a:	60bb      	str	r3, [r7, #8]
 800b49c:	e004      	b.n	800b4a8 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800b49e:	4b24      	ldr	r3, [pc, #144]	; (800b530 <ff_convert+0xbc>)
 800b4a0:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800b4a2:	f245 5320 	movw	r3, #21792	; 0x5520
 800b4a6:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800b4ac:	2310      	movs	r3, #16
 800b4ae:	613b      	str	r3, [r7, #16]
 800b4b0:	e023      	b.n	800b4fa <ff_convert+0x86>
			i = li + (hi - li) / 2;
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	0fda      	lsrs	r2, r3, #31
 800b4ba:	4413      	add	r3, r2
 800b4bc:	105b      	asrs	r3, r3, #1
 800b4be:	461a      	mov	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	88fa      	ldrh	r2, [r7, #6]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d014      	beq.n	800b502 <ff_convert+0x8e>
			if (chr > p[i * 2])
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	461a      	mov	r2, r3
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	881b      	ldrh	r3, [r3, #0]
 800b4e4:	88fa      	ldrh	r2, [r7, #6]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d902      	bls.n	800b4f0 <ff_convert+0x7c>
				li = i;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	e001      	b.n	800b4f4 <ff_convert+0x80>
			else
				hi = i;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	613b      	str	r3, [r7, #16]
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1d8      	bne.n	800b4b2 <ff_convert+0x3e>
 800b500:	e000      	b.n	800b504 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 800b502:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <ff_convert+0xa4>
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	3302      	adds	r3, #2
 800b510:	69fa      	ldr	r2, [r7, #28]
 800b512:	4413      	add	r3, r2
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	e000      	b.n	800b51a <ff_convert+0xa6>
 800b518:	2300      	movs	r3, #0
 800b51a:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800b51c:	8b7b      	ldrh	r3, [r7, #26]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3724      	adds	r7, #36	; 0x24
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	08022d7c 	.word	0x08022d7c
 800b530:	0800d8f8 	.word	0x0800d8f8

0800b534 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b534:	b480      	push	{r7}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4603      	mov	r3, r0
 800b53c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b53e:	88fb      	ldrh	r3, [r7, #6]
 800b540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b544:	d201      	bcs.n	800b54a <ff_wtoupper+0x16>
 800b546:	4b3e      	ldr	r3, [pc, #248]	; (800b640 <ff_wtoupper+0x10c>)
 800b548:	e000      	b.n	800b54c <ff_wtoupper+0x18>
 800b54a:	4b3e      	ldr	r3, [pc, #248]	; (800b644 <ff_wtoupper+0x110>)
 800b54c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	1c9a      	adds	r2, r3, #2
 800b552:	617a      	str	r2, [r7, #20]
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b558:	8a7b      	ldrh	r3, [r7, #18]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d068      	beq.n	800b630 <ff_wtoupper+0xfc>
 800b55e:	88fa      	ldrh	r2, [r7, #6]
 800b560:	8a7b      	ldrh	r3, [r7, #18]
 800b562:	429a      	cmp	r2, r3
 800b564:	d364      	bcc.n	800b630 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	1c9a      	adds	r2, r3, #2
 800b56a:	617a      	str	r2, [r7, #20]
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	823b      	strh	r3, [r7, #16]
 800b570:	8a3b      	ldrh	r3, [r7, #16]
 800b572:	0a1b      	lsrs	r3, r3, #8
 800b574:	81fb      	strh	r3, [r7, #14]
 800b576:	8a3b      	ldrh	r3, [r7, #16]
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b57c:	88fa      	ldrh	r2, [r7, #6]
 800b57e:	8a79      	ldrh	r1, [r7, #18]
 800b580:	8a3b      	ldrh	r3, [r7, #16]
 800b582:	440b      	add	r3, r1
 800b584:	429a      	cmp	r2, r3
 800b586:	da49      	bge.n	800b61c <ff_wtoupper+0xe8>
			switch (cmd) {
 800b588:	89fb      	ldrh	r3, [r7, #14]
 800b58a:	2b08      	cmp	r3, #8
 800b58c:	d84f      	bhi.n	800b62e <ff_wtoupper+0xfa>
 800b58e:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <ff_wtoupper+0x60>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5b9 	.word	0x0800b5b9
 800b598:	0800b5cb 	.word	0x0800b5cb
 800b59c:	0800b5e1 	.word	0x0800b5e1
 800b5a0:	0800b5e9 	.word	0x0800b5e9
 800b5a4:	0800b5f1 	.word	0x0800b5f1
 800b5a8:	0800b5f9 	.word	0x0800b5f9
 800b5ac:	0800b601 	.word	0x0800b601
 800b5b0:	0800b609 	.word	0x0800b609
 800b5b4:	0800b611 	.word	0x0800b611
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b5b8:	88fa      	ldrh	r2, [r7, #6]
 800b5ba:	8a7b      	ldrh	r3, [r7, #18]
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	80fb      	strh	r3, [r7, #6]
 800b5c8:	e027      	b.n	800b61a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b5ca:	88fa      	ldrh	r2, [r7, #6]
 800b5cc:	8a7b      	ldrh	r3, [r7, #18]
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	88fa      	ldrh	r2, [r7, #6]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	80fb      	strh	r3, [r7, #6]
 800b5de:	e01c      	b.n	800b61a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b5e0:	88fb      	ldrh	r3, [r7, #6]
 800b5e2:	3b10      	subs	r3, #16
 800b5e4:	80fb      	strh	r3, [r7, #6]
 800b5e6:	e018      	b.n	800b61a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b5e8:	88fb      	ldrh	r3, [r7, #6]
 800b5ea:	3b20      	subs	r3, #32
 800b5ec:	80fb      	strh	r3, [r7, #6]
 800b5ee:	e014      	b.n	800b61a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b5f0:	88fb      	ldrh	r3, [r7, #6]
 800b5f2:	3b30      	subs	r3, #48	; 0x30
 800b5f4:	80fb      	strh	r3, [r7, #6]
 800b5f6:	e010      	b.n	800b61a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b5f8:	88fb      	ldrh	r3, [r7, #6]
 800b5fa:	3b1a      	subs	r3, #26
 800b5fc:	80fb      	strh	r3, [r7, #6]
 800b5fe:	e00c      	b.n	800b61a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b600:	88fb      	ldrh	r3, [r7, #6]
 800b602:	3308      	adds	r3, #8
 800b604:	80fb      	strh	r3, [r7, #6]
 800b606:	e008      	b.n	800b61a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b608:	88fb      	ldrh	r3, [r7, #6]
 800b60a:	3b50      	subs	r3, #80	; 0x50
 800b60c:	80fb      	strh	r3, [r7, #6]
 800b60e:	e004      	b.n	800b61a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b610:	88fb      	ldrh	r3, [r7, #6]
 800b612:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b616:	80fb      	strh	r3, [r7, #6]
 800b618:	bf00      	nop
			}
			break;
 800b61a:	e008      	b.n	800b62e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b61c:	89fb      	ldrh	r3, [r7, #14]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d195      	bne.n	800b54e <ff_wtoupper+0x1a>
 800b622:	8a3b      	ldrh	r3, [r7, #16]
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	4413      	add	r3, r2
 800b62a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b62c:	e78f      	b.n	800b54e <ff_wtoupper+0x1a>
			break;
 800b62e:	bf00      	nop
	}

	return chr;
 800b630:	88fb      	ldrh	r3, [r7, #6]
}
 800b632:	4618      	mov	r0, r3
 800b634:	371c      	adds	r7, #28
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	08038200 	.word	0x08038200
 800b644:	080383f4 	.word	0x080383f4

0800b648 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b64c:	2201      	movs	r2, #1
 800b64e:	490e      	ldr	r1, [pc, #56]	; (800b688 <MX_USB_HOST_Init+0x40>)
 800b650:	480e      	ldr	r0, [pc, #56]	; (800b68c <MX_USB_HOST_Init+0x44>)
 800b652:	f7fb fe5d 	bl	8007310 <USBH_Init>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d001      	beq.n	800b660 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b65c:	f7f5 fd28 	bl	80010b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b660:	490b      	ldr	r1, [pc, #44]	; (800b690 <MX_USB_HOST_Init+0x48>)
 800b662:	480a      	ldr	r0, [pc, #40]	; (800b68c <MX_USB_HOST_Init+0x44>)
 800b664:	f7fb fec7 	bl	80073f6 <USBH_RegisterClass>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b66e:	f7f5 fd1f 	bl	80010b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b672:	4806      	ldr	r0, [pc, #24]	; (800b68c <MX_USB_HOST_Init+0x44>)
 800b674:	f7fb ff4c 	bl	8007510 <USBH_Start>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b67e:	f7f5 fd17 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b682:	bf00      	nop
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	0800b6a9 	.word	0x0800b6a9
 800b68c:	20000bd8 	.word	0x20000bd8
 800b690:	20000010 	.word	0x20000010

0800b694 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b698:	4802      	ldr	r0, [pc, #8]	; (800b6a4 <MX_USB_HOST_Process+0x10>)
 800b69a:	f7fb ff49 	bl	8007530 <USBH_Process>
}
 800b69e:	bf00      	nop
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000bd8 	.word	0x20000bd8

0800b6a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	2b04      	cmp	r3, #4
 800b6ba:	d819      	bhi.n	800b6f0 <USBH_UserProcess+0x48>
 800b6bc:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <USBH_UserProcess+0x1c>)
 800b6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b6f1 	.word	0x0800b6f1
 800b6c8:	0800b6e1 	.word	0x0800b6e1
 800b6cc:	0800b6f1 	.word	0x0800b6f1
 800b6d0:	0800b6e9 	.word	0x0800b6e9
 800b6d4:	0800b6d9 	.word	0x0800b6d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b6d8:	4b09      	ldr	r3, [pc, #36]	; (800b700 <USBH_UserProcess+0x58>)
 800b6da:	2203      	movs	r2, #3
 800b6dc:	701a      	strb	r2, [r3, #0]
  break;
 800b6de:	e008      	b.n	800b6f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b6e0:	4b07      	ldr	r3, [pc, #28]	; (800b700 <USBH_UserProcess+0x58>)
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	701a      	strb	r2, [r3, #0]
  break;
 800b6e6:	e004      	b.n	800b6f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b6e8:	4b05      	ldr	r3, [pc, #20]	; (800b700 <USBH_UserProcess+0x58>)
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	701a      	strb	r2, [r3, #0]
  break;
 800b6ee:	e000      	b.n	800b6f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b6f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b6f2:	bf00      	nop
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	20000254 	.word	0x20000254

0800b704 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b08a      	sub	sp, #40	; 0x28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b70c:	f107 0314 	add.w	r3, r7, #20
 800b710:	2200      	movs	r2, #0
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	605a      	str	r2, [r3, #4]
 800b716:	609a      	str	r2, [r3, #8]
 800b718:	60da      	str	r2, [r3, #12]
 800b71a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b724:	d13a      	bne.n	800b79c <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b726:	2300      	movs	r3, #0
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	4b1e      	ldr	r3, [pc, #120]	; (800b7a4 <HAL_HCD_MspInit+0xa0>)
 800b72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72e:	4a1d      	ldr	r2, [pc, #116]	; (800b7a4 <HAL_HCD_MspInit+0xa0>)
 800b730:	f043 0301 	orr.w	r3, r3, #1
 800b734:	6313      	str	r3, [r2, #48]	; 0x30
 800b736:	4b1b      	ldr	r3, [pc, #108]	; (800b7a4 <HAL_HCD_MspInit+0xa0>)
 800b738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	613b      	str	r3, [r7, #16]
 800b740:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b742:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b748:	2302      	movs	r3, #2
 800b74a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b74c:	2300      	movs	r3, #0
 800b74e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b750:	2303      	movs	r3, #3
 800b752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b754:	230a      	movs	r3, #10
 800b756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b758:	f107 0314 	add.w	r3, r7, #20
 800b75c:	4619      	mov	r1, r3
 800b75e:	4812      	ldr	r0, [pc, #72]	; (800b7a8 <HAL_HCD_MspInit+0xa4>)
 800b760:	f7f6 fade 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b764:	4b0f      	ldr	r3, [pc, #60]	; (800b7a4 <HAL_HCD_MspInit+0xa0>)
 800b766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b768:	4a0e      	ldr	r2, [pc, #56]	; (800b7a4 <HAL_HCD_MspInit+0xa0>)
 800b76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b76e:	6353      	str	r3, [r2, #52]	; 0x34
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]
 800b774:	4b0b      	ldr	r3, [pc, #44]	; (800b7a4 <HAL_HCD_MspInit+0xa0>)
 800b776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b778:	4a0a      	ldr	r2, [pc, #40]	; (800b7a4 <HAL_HCD_MspInit+0xa0>)
 800b77a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b77e:	6453      	str	r3, [r2, #68]	; 0x44
 800b780:	4b08      	ldr	r3, [pc, #32]	; (800b7a4 <HAL_HCD_MspInit+0xa0>)
 800b782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b78c:	2200      	movs	r2, #0
 800b78e:	2100      	movs	r1, #0
 800b790:	2043      	movs	r0, #67	; 0x43
 800b792:	f7f5 ff84 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b796:	2043      	movs	r0, #67	; 0x43
 800b798:	f7f5 ff9d 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b79c:	bf00      	nop
 800b79e:	3728      	adds	r7, #40	; 0x28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	40023800 	.word	0x40023800
 800b7a8:	40020000 	.word	0x40020000

0800b7ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fc f969 	bl	8007a92 <USBH_LL_IncTimer>
}
 800b7c0:	bf00      	nop
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fc f9ae 	bl	8007b38 <USBH_LL_Connect>
}
 800b7dc:	bf00      	nop
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fc f9c6 	bl	8007b84 <USBH_LL_Disconnect>
}
 800b7f8:	bf00      	nop
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	460b      	mov	r3, r1
 800b80a:	70fb      	strb	r3, [r7, #3]
 800b80c:	4613      	mov	r3, r2
 800b80e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fc f95b 	bl	8007ae6 <USBH_LL_PortEnabled>
} 
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b846:	4618      	mov	r0, r3
 800b848:	f7fc f95b 	bl	8007b02 <USBH_LL_PortDisabled>
} 
 800b84c:	bf00      	nop
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b862:	2b01      	cmp	r3, #1
 800b864:	d12a      	bne.n	800b8bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b866:	4a18      	ldr	r2, [pc, #96]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a15      	ldr	r2, [pc, #84]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b872:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b876:	4b14      	ldr	r3, [pc, #80]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b878:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b87c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b87e:	4b12      	ldr	r3, [pc, #72]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b880:	2208      	movs	r2, #8
 800b882:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b884:	4b10      	ldr	r3, [pc, #64]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b886:	2201      	movs	r2, #1
 800b888:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b88a:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b890:	4b0d      	ldr	r3, [pc, #52]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b892:	2202      	movs	r2, #2
 800b894:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b896:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b898:	2200      	movs	r2, #0
 800b89a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b89c:	480a      	ldr	r0, [pc, #40]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b89e:	f7f6 fbf2 	bl	8002086 <HAL_HCD_Init>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b8a8:	f7f5 fc02 	bl	80010b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b8ac:	4806      	ldr	r0, [pc, #24]	; (800b8c8 <USBH_LL_Init+0x74>)
 800b8ae:	f7f6 ffed 	bl	800288c <HAL_HCD_GetCurrentFrame>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7fc f8dc 	bl	8007a74 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20000fa4 	.word	0x20000fa4

0800b8cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7f6 ff5a 	bl	800279c <HAL_HCD_Start>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 f990 	bl	800bc14 <USBH_Get_USB_Status>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b084      	sub	sp, #16
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b90e:	2300      	movs	r3, #0
 800b910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f6 ff62 	bl	80027e2 <HAL_HCD_Stop>
 800b91e:	4603      	mov	r3, r0
 800b920:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b922:	7bfb      	ldrb	r3, [r7, #15]
 800b924:	4618      	mov	r0, r3
 800b926:	f000 f975 	bl	800bc14 <USBH_Get_USB_Status>
 800b92a:	4603      	mov	r3, r0
 800b92c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b92e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b940:	2301      	movs	r3, #1
 800b942:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f6 ffac 	bl	80028a8 <HAL_HCD_GetCurrentSpeed>
 800b950:	4603      	mov	r3, r0
 800b952:	2b01      	cmp	r3, #1
 800b954:	d007      	beq.n	800b966 <USBH_LL_GetSpeed+0x2e>
 800b956:	2b01      	cmp	r3, #1
 800b958:	d302      	bcc.n	800b960 <USBH_LL_GetSpeed+0x28>
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d006      	beq.n	800b96c <USBH_LL_GetSpeed+0x34>
 800b95e:	e008      	b.n	800b972 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b960:	2300      	movs	r3, #0
 800b962:	73fb      	strb	r3, [r7, #15]
    break;
 800b964:	e008      	b.n	800b978 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b966:	2301      	movs	r3, #1
 800b968:	73fb      	strb	r3, [r7, #15]
    break;
 800b96a:	e005      	b.n	800b978 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b96c:	2302      	movs	r3, #2
 800b96e:	73fb      	strb	r3, [r7, #15]
    break;
 800b970:	e002      	b.n	800b978 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b972:	2301      	movs	r3, #1
 800b974:	73fb      	strb	r3, [r7, #15]
    break;
 800b976:	bf00      	nop
  }
  return  speed;
 800b978:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b998:	4618      	mov	r0, r3
 800b99a:	f7f6 ff3f 	bl	800281c <HAL_HCD_ResetPort>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 f935 	bl	800bc14 <USBH_Get_USB_Status>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9ca:	78fa      	ldrb	r2, [r7, #3]
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7f6 ff47 	bl	8002862 <HAL_HCD_HC_GetXferCount>
 800b9d4:	4603      	mov	r3, r0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9de:	b590      	push	{r4, r7, lr}
 800b9e0:	b089      	sub	sp, #36	; 0x24
 800b9e2:	af04      	add	r7, sp, #16
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	4608      	mov	r0, r1
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	70fb      	strb	r3, [r7, #3]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70bb      	strb	r3, [r7, #2]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800ba06:	787c      	ldrb	r4, [r7, #1]
 800ba08:	78ba      	ldrb	r2, [r7, #2]
 800ba0a:	78f9      	ldrb	r1, [r7, #3]
 800ba0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba0e:	9302      	str	r3, [sp, #8]
 800ba10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	4623      	mov	r3, r4
 800ba1e:	f7f6 fb94 	bl	800214a <HAL_HCD_HC_Init>
 800ba22:	4603      	mov	r3, r0
 800ba24:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 f8f3 	bl	800bc14 <USBH_Get_USB_Status>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd90      	pop	{r4, r7, pc}

0800ba3c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba56:	78fa      	ldrb	r2, [r7, #3]
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f6 fc0d 	bl	800227a <HAL_HCD_HC_Halt>
 800ba60:	4603      	mov	r3, r0
 800ba62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 f8d4 	bl	800bc14 <USBH_Get_USB_Status>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ba7a:	b590      	push	{r4, r7, lr}
 800ba7c:	b089      	sub	sp, #36	; 0x24
 800ba7e:	af04      	add	r7, sp, #16
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	4608      	mov	r0, r1
 800ba84:	4611      	mov	r1, r2
 800ba86:	461a      	mov	r2, r3
 800ba88:	4603      	mov	r3, r0
 800ba8a:	70fb      	strb	r3, [r7, #3]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70bb      	strb	r3, [r7, #2]
 800ba90:	4613      	mov	r3, r2
 800ba92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800baa2:	787c      	ldrb	r4, [r7, #1]
 800baa4:	78ba      	ldrb	r2, [r7, #2]
 800baa6:	78f9      	ldrb	r1, [r7, #3]
 800baa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bab0:	9302      	str	r3, [sp, #8]
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	9301      	str	r3, [sp, #4]
 800bab6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	4623      	mov	r3, r4
 800babe:	f7f6 fbff 	bl	80022c0 <HAL_HCD_HC_SubmitRequest>
 800bac2:	4603      	mov	r3, r0
 800bac4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 f8a3 	bl	800bc14 <USBH_Get_USB_Status>
 800bace:	4603      	mov	r3, r0
 800bad0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd90      	pop	{r4, r7, pc}

0800badc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	460b      	mov	r3, r1
 800bae6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800baee:	78fa      	ldrb	r2, [r7, #3]
 800baf0:	4611      	mov	r1, r2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7f6 fea0 	bl	8002838 <HAL_HCD_HC_GetURBState>
 800baf8:	4603      	mov	r3, r0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d103      	bne.n	800bb20 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bb18:	78fb      	ldrb	r3, [r7, #3]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 f8a6 	bl	800bc6c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bb20:	20c8      	movs	r0, #200	; 0xc8
 800bb22:	f7f5 fcbf 	bl	80014a4 <HAL_Delay>
  return USBH_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb46:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bb48:	78fa      	ldrb	r2, [r7, #3]
 800bb4a:	68f9      	ldr	r1, [r7, #12]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	00db      	lsls	r3, r3, #3
 800bb54:	440b      	add	r3, r1
 800bb56:	333b      	adds	r3, #59	; 0x3b
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00a      	beq.n	800bb74 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bb5e:	78fa      	ldrb	r2, [r7, #3]
 800bb60:	68f9      	ldr	r1, [r7, #12]
 800bb62:	4613      	mov	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	00db      	lsls	r3, r3, #3
 800bb6a:	440b      	add	r3, r1
 800bb6c:	3350      	adds	r3, #80	; 0x50
 800bb6e:	78ba      	ldrb	r2, [r7, #2]
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	e009      	b.n	800bb88 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bb74:	78fa      	ldrb	r2, [r7, #3]
 800bb76:	68f9      	ldr	r1, [r7, #12]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4413      	add	r3, r2
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	440b      	add	r3, r1
 800bb82:	3351      	adds	r3, #81	; 0x51
 800bb84:	78ba      	ldrb	r2, [r7, #2]
 800bb86:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3714      	adds	r7, #20
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b085      	sub	sp, #20
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	460b      	mov	r3, r1
 800bba0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbac:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800bbae:	78fa      	ldrb	r2, [r7, #3]
 800bbb0:	68b9      	ldr	r1, [r7, #8]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	440b      	add	r3, r1
 800bbbc:	333b      	adds	r3, #59	; 0x3b
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00a      	beq.n	800bbda <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800bbc4:	78fa      	ldrb	r2, [r7, #3]
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	440b      	add	r3, r1
 800bbd2:	3350      	adds	r3, #80	; 0x50
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	73fb      	strb	r3, [r7, #15]
 800bbd8:	e009      	b.n	800bbee <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800bbda:	78fa      	ldrb	r2, [r7, #3]
 800bbdc:	68b9      	ldr	r1, [r7, #8]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	440b      	add	r3, r1
 800bbe8:	3351      	adds	r3, #81	; 0x51
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7f5 fc4d 	bl	80014a4 <HAL_Delay>
}
 800bc0a:	bf00      	nop
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc22:	79fb      	ldrb	r3, [r7, #7]
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d817      	bhi.n	800bc58 <USBH_Get_USB_Status+0x44>
 800bc28:	a201      	add	r2, pc, #4	; (adr r2, 800bc30 <USBH_Get_USB_Status+0x1c>)
 800bc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2e:	bf00      	nop
 800bc30:	0800bc41 	.word	0x0800bc41
 800bc34:	0800bc47 	.word	0x0800bc47
 800bc38:	0800bc4d 	.word	0x0800bc4d
 800bc3c:	0800bc53 	.word	0x0800bc53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	73fb      	strb	r3, [r7, #15]
    break;
 800bc44:	e00b      	b.n	800bc5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bc46:	2302      	movs	r3, #2
 800bc48:	73fb      	strb	r3, [r7, #15]
    break;
 800bc4a:	e008      	b.n	800bc5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc50:	e005      	b.n	800bc5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bc52:	2302      	movs	r3, #2
 800bc54:	73fb      	strb	r3, [r7, #15]
    break;
 800bc56:	e002      	b.n	800bc5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bc58:	2302      	movs	r3, #2
 800bc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5c:	bf00      	nop
  }
  return usb_status;
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4603      	mov	r3, r0
 800bc74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800bc76:	79fb      	ldrb	r3, [r7, #7]
 800bc78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bc7a:	79fb      	ldrb	r3, [r7, #7]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d102      	bne.n	800bc86 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800bc80:	2301      	movs	r3, #1
 800bc82:	73fb      	strb	r3, [r7, #15]
 800bc84:	e001      	b.n	800bc8a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,(GPIO_PinState)data);
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc92:	4803      	ldr	r0, [pc, #12]	; (800bca0 <MX_DriverVbusFS+0x34>)
 800bc94:	f7f6 f9de 	bl	8002054 <HAL_GPIO_WritePin>
}
 800bc98:	bf00      	nop
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	40020000 	.word	0x40020000

0800bca4 <__libc_init_array>:
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	4e0d      	ldr	r6, [pc, #52]	; (800bcdc <__libc_init_array+0x38>)
 800bca8:	4c0d      	ldr	r4, [pc, #52]	; (800bce0 <__libc_init_array+0x3c>)
 800bcaa:	1ba4      	subs	r4, r4, r6
 800bcac:	10a4      	asrs	r4, r4, #2
 800bcae:	2500      	movs	r5, #0
 800bcb0:	42a5      	cmp	r5, r4
 800bcb2:	d109      	bne.n	800bcc8 <__libc_init_array+0x24>
 800bcb4:	4e0b      	ldr	r6, [pc, #44]	; (800bce4 <__libc_init_array+0x40>)
 800bcb6:	4c0c      	ldr	r4, [pc, #48]	; (800bce8 <__libc_init_array+0x44>)
 800bcb8:	f001 fdaa 	bl	800d810 <_init>
 800bcbc:	1ba4      	subs	r4, r4, r6
 800bcbe:	10a4      	asrs	r4, r4, #2
 800bcc0:	2500      	movs	r5, #0
 800bcc2:	42a5      	cmp	r5, r4
 800bcc4:	d105      	bne.n	800bcd2 <__libc_init_array+0x2e>
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bccc:	4798      	blx	r3
 800bcce:	3501      	adds	r5, #1
 800bcd0:	e7ee      	b.n	800bcb0 <__libc_init_array+0xc>
 800bcd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bcd6:	4798      	blx	r3
 800bcd8:	3501      	adds	r5, #1
 800bcda:	e7f2      	b.n	800bcc2 <__libc_init_array+0x1e>
 800bcdc:	08038740 	.word	0x08038740
 800bce0:	08038740 	.word	0x08038740
 800bce4:	08038740 	.word	0x08038740
 800bce8:	08038744 	.word	0x08038744

0800bcec <malloc>:
 800bcec:	4b02      	ldr	r3, [pc, #8]	; (800bcf8 <malloc+0xc>)
 800bcee:	4601      	mov	r1, r0
 800bcf0:	6818      	ldr	r0, [r3, #0]
 800bcf2:	f000 b86d 	b.w	800bdd0 <_malloc_r>
 800bcf6:	bf00      	nop
 800bcf8:	20000030 	.word	0x20000030

0800bcfc <free>:
 800bcfc:	4b02      	ldr	r3, [pc, #8]	; (800bd08 <free+0xc>)
 800bcfe:	4601      	mov	r1, r0
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	f000 b817 	b.w	800bd34 <_free_r>
 800bd06:	bf00      	nop
 800bd08:	20000030 	.word	0x20000030

0800bd0c <memcpy>:
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	1e43      	subs	r3, r0, #1
 800bd10:	440a      	add	r2, r1
 800bd12:	4291      	cmp	r1, r2
 800bd14:	d100      	bne.n	800bd18 <memcpy+0xc>
 800bd16:	bd10      	pop	{r4, pc}
 800bd18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd20:	e7f7      	b.n	800bd12 <memcpy+0x6>

0800bd22 <memset>:
 800bd22:	4402      	add	r2, r0
 800bd24:	4603      	mov	r3, r0
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d100      	bne.n	800bd2c <memset+0xa>
 800bd2a:	4770      	bx	lr
 800bd2c:	f803 1b01 	strb.w	r1, [r3], #1
 800bd30:	e7f9      	b.n	800bd26 <memset+0x4>
	...

0800bd34 <_free_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4605      	mov	r5, r0
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	d045      	beq.n	800bdc8 <_free_r+0x94>
 800bd3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd40:	1f0c      	subs	r4, r1, #4
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	bfb8      	it	lt
 800bd46:	18e4      	addlt	r4, r4, r3
 800bd48:	f001 fa48 	bl	800d1dc <__malloc_lock>
 800bd4c:	4a1f      	ldr	r2, [pc, #124]	; (800bdcc <_free_r+0x98>)
 800bd4e:	6813      	ldr	r3, [r2, #0]
 800bd50:	4610      	mov	r0, r2
 800bd52:	b933      	cbnz	r3, 800bd62 <_free_r+0x2e>
 800bd54:	6063      	str	r3, [r4, #4]
 800bd56:	6014      	str	r4, [r2, #0]
 800bd58:	4628      	mov	r0, r5
 800bd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd5e:	f001 ba3e 	b.w	800d1de <__malloc_unlock>
 800bd62:	42a3      	cmp	r3, r4
 800bd64:	d90c      	bls.n	800bd80 <_free_r+0x4c>
 800bd66:	6821      	ldr	r1, [r4, #0]
 800bd68:	1862      	adds	r2, r4, r1
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	bf04      	itt	eq
 800bd6e:	681a      	ldreq	r2, [r3, #0]
 800bd70:	685b      	ldreq	r3, [r3, #4]
 800bd72:	6063      	str	r3, [r4, #4]
 800bd74:	bf04      	itt	eq
 800bd76:	1852      	addeq	r2, r2, r1
 800bd78:	6022      	streq	r2, [r4, #0]
 800bd7a:	6004      	str	r4, [r0, #0]
 800bd7c:	e7ec      	b.n	800bd58 <_free_r+0x24>
 800bd7e:	4613      	mov	r3, r2
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	b10a      	cbz	r2, 800bd88 <_free_r+0x54>
 800bd84:	42a2      	cmp	r2, r4
 800bd86:	d9fa      	bls.n	800bd7e <_free_r+0x4a>
 800bd88:	6819      	ldr	r1, [r3, #0]
 800bd8a:	1858      	adds	r0, r3, r1
 800bd8c:	42a0      	cmp	r0, r4
 800bd8e:	d10b      	bne.n	800bda8 <_free_r+0x74>
 800bd90:	6820      	ldr	r0, [r4, #0]
 800bd92:	4401      	add	r1, r0
 800bd94:	1858      	adds	r0, r3, r1
 800bd96:	4282      	cmp	r2, r0
 800bd98:	6019      	str	r1, [r3, #0]
 800bd9a:	d1dd      	bne.n	800bd58 <_free_r+0x24>
 800bd9c:	6810      	ldr	r0, [r2, #0]
 800bd9e:	6852      	ldr	r2, [r2, #4]
 800bda0:	605a      	str	r2, [r3, #4]
 800bda2:	4401      	add	r1, r0
 800bda4:	6019      	str	r1, [r3, #0]
 800bda6:	e7d7      	b.n	800bd58 <_free_r+0x24>
 800bda8:	d902      	bls.n	800bdb0 <_free_r+0x7c>
 800bdaa:	230c      	movs	r3, #12
 800bdac:	602b      	str	r3, [r5, #0]
 800bdae:	e7d3      	b.n	800bd58 <_free_r+0x24>
 800bdb0:	6820      	ldr	r0, [r4, #0]
 800bdb2:	1821      	adds	r1, r4, r0
 800bdb4:	428a      	cmp	r2, r1
 800bdb6:	bf04      	itt	eq
 800bdb8:	6811      	ldreq	r1, [r2, #0]
 800bdba:	6852      	ldreq	r2, [r2, #4]
 800bdbc:	6062      	str	r2, [r4, #4]
 800bdbe:	bf04      	itt	eq
 800bdc0:	1809      	addeq	r1, r1, r0
 800bdc2:	6021      	streq	r1, [r4, #0]
 800bdc4:	605c      	str	r4, [r3, #4]
 800bdc6:	e7c7      	b.n	800bd58 <_free_r+0x24>
 800bdc8:	bd38      	pop	{r3, r4, r5, pc}
 800bdca:	bf00      	nop
 800bdcc:	20000258 	.word	0x20000258

0800bdd0 <_malloc_r>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	1ccd      	adds	r5, r1, #3
 800bdd4:	f025 0503 	bic.w	r5, r5, #3
 800bdd8:	3508      	adds	r5, #8
 800bdda:	2d0c      	cmp	r5, #12
 800bddc:	bf38      	it	cc
 800bdde:	250c      	movcc	r5, #12
 800bde0:	2d00      	cmp	r5, #0
 800bde2:	4606      	mov	r6, r0
 800bde4:	db01      	blt.n	800bdea <_malloc_r+0x1a>
 800bde6:	42a9      	cmp	r1, r5
 800bde8:	d903      	bls.n	800bdf2 <_malloc_r+0x22>
 800bdea:	230c      	movs	r3, #12
 800bdec:	6033      	str	r3, [r6, #0]
 800bdee:	2000      	movs	r0, #0
 800bdf0:	bd70      	pop	{r4, r5, r6, pc}
 800bdf2:	f001 f9f3 	bl	800d1dc <__malloc_lock>
 800bdf6:	4a21      	ldr	r2, [pc, #132]	; (800be7c <_malloc_r+0xac>)
 800bdf8:	6814      	ldr	r4, [r2, #0]
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	b991      	cbnz	r1, 800be24 <_malloc_r+0x54>
 800bdfe:	4c20      	ldr	r4, [pc, #128]	; (800be80 <_malloc_r+0xb0>)
 800be00:	6823      	ldr	r3, [r4, #0]
 800be02:	b91b      	cbnz	r3, 800be0c <_malloc_r+0x3c>
 800be04:	4630      	mov	r0, r6
 800be06:	f000 fb87 	bl	800c518 <_sbrk_r>
 800be0a:	6020      	str	r0, [r4, #0]
 800be0c:	4629      	mov	r1, r5
 800be0e:	4630      	mov	r0, r6
 800be10:	f000 fb82 	bl	800c518 <_sbrk_r>
 800be14:	1c43      	adds	r3, r0, #1
 800be16:	d124      	bne.n	800be62 <_malloc_r+0x92>
 800be18:	230c      	movs	r3, #12
 800be1a:	6033      	str	r3, [r6, #0]
 800be1c:	4630      	mov	r0, r6
 800be1e:	f001 f9de 	bl	800d1de <__malloc_unlock>
 800be22:	e7e4      	b.n	800bdee <_malloc_r+0x1e>
 800be24:	680b      	ldr	r3, [r1, #0]
 800be26:	1b5b      	subs	r3, r3, r5
 800be28:	d418      	bmi.n	800be5c <_malloc_r+0x8c>
 800be2a:	2b0b      	cmp	r3, #11
 800be2c:	d90f      	bls.n	800be4e <_malloc_r+0x7e>
 800be2e:	600b      	str	r3, [r1, #0]
 800be30:	50cd      	str	r5, [r1, r3]
 800be32:	18cc      	adds	r4, r1, r3
 800be34:	4630      	mov	r0, r6
 800be36:	f001 f9d2 	bl	800d1de <__malloc_unlock>
 800be3a:	f104 000b 	add.w	r0, r4, #11
 800be3e:	1d23      	adds	r3, r4, #4
 800be40:	f020 0007 	bic.w	r0, r0, #7
 800be44:	1ac3      	subs	r3, r0, r3
 800be46:	d0d3      	beq.n	800bdf0 <_malloc_r+0x20>
 800be48:	425a      	negs	r2, r3
 800be4a:	50e2      	str	r2, [r4, r3]
 800be4c:	e7d0      	b.n	800bdf0 <_malloc_r+0x20>
 800be4e:	428c      	cmp	r4, r1
 800be50:	684b      	ldr	r3, [r1, #4]
 800be52:	bf16      	itet	ne
 800be54:	6063      	strne	r3, [r4, #4]
 800be56:	6013      	streq	r3, [r2, #0]
 800be58:	460c      	movne	r4, r1
 800be5a:	e7eb      	b.n	800be34 <_malloc_r+0x64>
 800be5c:	460c      	mov	r4, r1
 800be5e:	6849      	ldr	r1, [r1, #4]
 800be60:	e7cc      	b.n	800bdfc <_malloc_r+0x2c>
 800be62:	1cc4      	adds	r4, r0, #3
 800be64:	f024 0403 	bic.w	r4, r4, #3
 800be68:	42a0      	cmp	r0, r4
 800be6a:	d005      	beq.n	800be78 <_malloc_r+0xa8>
 800be6c:	1a21      	subs	r1, r4, r0
 800be6e:	4630      	mov	r0, r6
 800be70:	f000 fb52 	bl	800c518 <_sbrk_r>
 800be74:	3001      	adds	r0, #1
 800be76:	d0cf      	beq.n	800be18 <_malloc_r+0x48>
 800be78:	6025      	str	r5, [r4, #0]
 800be7a:	e7db      	b.n	800be34 <_malloc_r+0x64>
 800be7c:	20000258 	.word	0x20000258
 800be80:	2000025c 	.word	0x2000025c

0800be84 <__cvt>:
 800be84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be88:	ec55 4b10 	vmov	r4, r5, d0
 800be8c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800be8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800be92:	2d00      	cmp	r5, #0
 800be94:	460e      	mov	r6, r1
 800be96:	4691      	mov	r9, r2
 800be98:	4619      	mov	r1, r3
 800be9a:	bfb8      	it	lt
 800be9c:	4622      	movlt	r2, r4
 800be9e:	462b      	mov	r3, r5
 800bea0:	f027 0720 	bic.w	r7, r7, #32
 800bea4:	bfbb      	ittet	lt
 800bea6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800beaa:	461d      	movlt	r5, r3
 800beac:	2300      	movge	r3, #0
 800beae:	232d      	movlt	r3, #45	; 0x2d
 800beb0:	bfb8      	it	lt
 800beb2:	4614      	movlt	r4, r2
 800beb4:	2f46      	cmp	r7, #70	; 0x46
 800beb6:	700b      	strb	r3, [r1, #0]
 800beb8:	d004      	beq.n	800bec4 <__cvt+0x40>
 800beba:	2f45      	cmp	r7, #69	; 0x45
 800bebc:	d100      	bne.n	800bec0 <__cvt+0x3c>
 800bebe:	3601      	adds	r6, #1
 800bec0:	2102      	movs	r1, #2
 800bec2:	e000      	b.n	800bec6 <__cvt+0x42>
 800bec4:	2103      	movs	r1, #3
 800bec6:	ab03      	add	r3, sp, #12
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	ab02      	add	r3, sp, #8
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	4632      	mov	r2, r6
 800bed0:	4653      	mov	r3, sl
 800bed2:	ec45 4b10 	vmov	d0, r4, r5
 800bed6:	f000 fbbb 	bl	800c650 <_dtoa_r>
 800beda:	2f47      	cmp	r7, #71	; 0x47
 800bedc:	4680      	mov	r8, r0
 800bede:	d102      	bne.n	800bee6 <__cvt+0x62>
 800bee0:	f019 0f01 	tst.w	r9, #1
 800bee4:	d026      	beq.n	800bf34 <__cvt+0xb0>
 800bee6:	2f46      	cmp	r7, #70	; 0x46
 800bee8:	eb08 0906 	add.w	r9, r8, r6
 800beec:	d111      	bne.n	800bf12 <__cvt+0x8e>
 800beee:	f898 3000 	ldrb.w	r3, [r8]
 800bef2:	2b30      	cmp	r3, #48	; 0x30
 800bef4:	d10a      	bne.n	800bf0c <__cvt+0x88>
 800bef6:	2200      	movs	r2, #0
 800bef8:	2300      	movs	r3, #0
 800befa:	4620      	mov	r0, r4
 800befc:	4629      	mov	r1, r5
 800befe:	f7f4 fd8f 	bl	8000a20 <__aeabi_dcmpeq>
 800bf02:	b918      	cbnz	r0, 800bf0c <__cvt+0x88>
 800bf04:	f1c6 0601 	rsb	r6, r6, #1
 800bf08:	f8ca 6000 	str.w	r6, [sl]
 800bf0c:	f8da 3000 	ldr.w	r3, [sl]
 800bf10:	4499      	add	r9, r3
 800bf12:	2200      	movs	r2, #0
 800bf14:	2300      	movs	r3, #0
 800bf16:	4620      	mov	r0, r4
 800bf18:	4629      	mov	r1, r5
 800bf1a:	f7f4 fd81 	bl	8000a20 <__aeabi_dcmpeq>
 800bf1e:	b938      	cbnz	r0, 800bf30 <__cvt+0xac>
 800bf20:	2230      	movs	r2, #48	; 0x30
 800bf22:	9b03      	ldr	r3, [sp, #12]
 800bf24:	454b      	cmp	r3, r9
 800bf26:	d205      	bcs.n	800bf34 <__cvt+0xb0>
 800bf28:	1c59      	adds	r1, r3, #1
 800bf2a:	9103      	str	r1, [sp, #12]
 800bf2c:	701a      	strb	r2, [r3, #0]
 800bf2e:	e7f8      	b.n	800bf22 <__cvt+0x9e>
 800bf30:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf34:	9b03      	ldr	r3, [sp, #12]
 800bf36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf38:	eba3 0308 	sub.w	r3, r3, r8
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	b004      	add	sp, #16
 800bf42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bf46 <__exponent>:
 800bf46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	bfba      	itte	lt
 800bf4e:	4249      	neglt	r1, r1
 800bf50:	232d      	movlt	r3, #45	; 0x2d
 800bf52:	232b      	movge	r3, #43	; 0x2b
 800bf54:	2909      	cmp	r1, #9
 800bf56:	f804 2b02 	strb.w	r2, [r4], #2
 800bf5a:	7043      	strb	r3, [r0, #1]
 800bf5c:	dd20      	ble.n	800bfa0 <__exponent+0x5a>
 800bf5e:	f10d 0307 	add.w	r3, sp, #7
 800bf62:	461f      	mov	r7, r3
 800bf64:	260a      	movs	r6, #10
 800bf66:	fb91 f5f6 	sdiv	r5, r1, r6
 800bf6a:	fb06 1115 	mls	r1, r6, r5, r1
 800bf6e:	3130      	adds	r1, #48	; 0x30
 800bf70:	2d09      	cmp	r5, #9
 800bf72:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf76:	f103 32ff 	add.w	r2, r3, #4294967295
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	dc09      	bgt.n	800bf92 <__exponent+0x4c>
 800bf7e:	3130      	adds	r1, #48	; 0x30
 800bf80:	3b02      	subs	r3, #2
 800bf82:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bf86:	42bb      	cmp	r3, r7
 800bf88:	4622      	mov	r2, r4
 800bf8a:	d304      	bcc.n	800bf96 <__exponent+0x50>
 800bf8c:	1a10      	subs	r0, r2, r0
 800bf8e:	b003      	add	sp, #12
 800bf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf92:	4613      	mov	r3, r2
 800bf94:	e7e7      	b.n	800bf66 <__exponent+0x20>
 800bf96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf9a:	f804 2b01 	strb.w	r2, [r4], #1
 800bf9e:	e7f2      	b.n	800bf86 <__exponent+0x40>
 800bfa0:	2330      	movs	r3, #48	; 0x30
 800bfa2:	4419      	add	r1, r3
 800bfa4:	7083      	strb	r3, [r0, #2]
 800bfa6:	1d02      	adds	r2, r0, #4
 800bfa8:	70c1      	strb	r1, [r0, #3]
 800bfaa:	e7ef      	b.n	800bf8c <__exponent+0x46>

0800bfac <_printf_float>:
 800bfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	b08d      	sub	sp, #52	; 0x34
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bfb8:	4616      	mov	r6, r2
 800bfba:	461f      	mov	r7, r3
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	f001 f8ff 	bl	800d1c0 <_localeconv_r>
 800bfc2:	6803      	ldr	r3, [r0, #0]
 800bfc4:	9304      	str	r3, [sp, #16]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7f4 f8fe 	bl	80001c8 <strlen>
 800bfcc:	2300      	movs	r3, #0
 800bfce:	930a      	str	r3, [sp, #40]	; 0x28
 800bfd0:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd4:	9005      	str	r0, [sp, #20]
 800bfd6:	3307      	adds	r3, #7
 800bfd8:	f023 0307 	bic.w	r3, r3, #7
 800bfdc:	f103 0208 	add.w	r2, r3, #8
 800bfe0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bfe4:	f8d4 b000 	ldr.w	fp, [r4]
 800bfe8:	f8c8 2000 	str.w	r2, [r8]
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bff4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bff8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bffc:	9307      	str	r3, [sp, #28]
 800bffe:	f8cd 8018 	str.w	r8, [sp, #24]
 800c002:	f04f 32ff 	mov.w	r2, #4294967295
 800c006:	4ba7      	ldr	r3, [pc, #668]	; (800c2a4 <_printf_float+0x2f8>)
 800c008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c00c:	f7f4 fd3a 	bl	8000a84 <__aeabi_dcmpun>
 800c010:	bb70      	cbnz	r0, 800c070 <_printf_float+0xc4>
 800c012:	f04f 32ff 	mov.w	r2, #4294967295
 800c016:	4ba3      	ldr	r3, [pc, #652]	; (800c2a4 <_printf_float+0x2f8>)
 800c018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c01c:	f7f4 fd14 	bl	8000a48 <__aeabi_dcmple>
 800c020:	bb30      	cbnz	r0, 800c070 <_printf_float+0xc4>
 800c022:	2200      	movs	r2, #0
 800c024:	2300      	movs	r3, #0
 800c026:	4640      	mov	r0, r8
 800c028:	4649      	mov	r1, r9
 800c02a:	f7f4 fd03 	bl	8000a34 <__aeabi_dcmplt>
 800c02e:	b110      	cbz	r0, 800c036 <_printf_float+0x8a>
 800c030:	232d      	movs	r3, #45	; 0x2d
 800c032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c036:	4a9c      	ldr	r2, [pc, #624]	; (800c2a8 <_printf_float+0x2fc>)
 800c038:	4b9c      	ldr	r3, [pc, #624]	; (800c2ac <_printf_float+0x300>)
 800c03a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c03e:	bf8c      	ite	hi
 800c040:	4690      	movhi	r8, r2
 800c042:	4698      	movls	r8, r3
 800c044:	2303      	movs	r3, #3
 800c046:	f02b 0204 	bic.w	r2, fp, #4
 800c04a:	6123      	str	r3, [r4, #16]
 800c04c:	6022      	str	r2, [r4, #0]
 800c04e:	f04f 0900 	mov.w	r9, #0
 800c052:	9700      	str	r7, [sp, #0]
 800c054:	4633      	mov	r3, r6
 800c056:	aa0b      	add	r2, sp, #44	; 0x2c
 800c058:	4621      	mov	r1, r4
 800c05a:	4628      	mov	r0, r5
 800c05c:	f000 f9e6 	bl	800c42c <_printf_common>
 800c060:	3001      	adds	r0, #1
 800c062:	f040 808d 	bne.w	800c180 <_printf_float+0x1d4>
 800c066:	f04f 30ff 	mov.w	r0, #4294967295
 800c06a:	b00d      	add	sp, #52	; 0x34
 800c06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c070:	4642      	mov	r2, r8
 800c072:	464b      	mov	r3, r9
 800c074:	4640      	mov	r0, r8
 800c076:	4649      	mov	r1, r9
 800c078:	f7f4 fd04 	bl	8000a84 <__aeabi_dcmpun>
 800c07c:	b110      	cbz	r0, 800c084 <_printf_float+0xd8>
 800c07e:	4a8c      	ldr	r2, [pc, #560]	; (800c2b0 <_printf_float+0x304>)
 800c080:	4b8c      	ldr	r3, [pc, #560]	; (800c2b4 <_printf_float+0x308>)
 800c082:	e7da      	b.n	800c03a <_printf_float+0x8e>
 800c084:	6861      	ldr	r1, [r4, #4]
 800c086:	1c4b      	adds	r3, r1, #1
 800c088:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c08c:	a80a      	add	r0, sp, #40	; 0x28
 800c08e:	d13e      	bne.n	800c10e <_printf_float+0x162>
 800c090:	2306      	movs	r3, #6
 800c092:	6063      	str	r3, [r4, #4]
 800c094:	2300      	movs	r3, #0
 800c096:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c09a:	ab09      	add	r3, sp, #36	; 0x24
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	ec49 8b10 	vmov	d0, r8, r9
 800c0a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c0a6:	6022      	str	r2, [r4, #0]
 800c0a8:	f8cd a004 	str.w	sl, [sp, #4]
 800c0ac:	6861      	ldr	r1, [r4, #4]
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f7ff fee8 	bl	800be84 <__cvt>
 800c0b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c0b8:	2b47      	cmp	r3, #71	; 0x47
 800c0ba:	4680      	mov	r8, r0
 800c0bc:	d109      	bne.n	800c0d2 <_printf_float+0x126>
 800c0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c0:	1cd8      	adds	r0, r3, #3
 800c0c2:	db02      	blt.n	800c0ca <_printf_float+0x11e>
 800c0c4:	6862      	ldr	r2, [r4, #4]
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	dd47      	ble.n	800c15a <_printf_float+0x1ae>
 800c0ca:	f1aa 0a02 	sub.w	sl, sl, #2
 800c0ce:	fa5f fa8a 	uxtb.w	sl, sl
 800c0d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c0d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0d8:	d824      	bhi.n	800c124 <_printf_float+0x178>
 800c0da:	3901      	subs	r1, #1
 800c0dc:	4652      	mov	r2, sl
 800c0de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c0e2:	9109      	str	r1, [sp, #36]	; 0x24
 800c0e4:	f7ff ff2f 	bl	800bf46 <__exponent>
 800c0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ea:	1813      	adds	r3, r2, r0
 800c0ec:	2a01      	cmp	r2, #1
 800c0ee:	4681      	mov	r9, r0
 800c0f0:	6123      	str	r3, [r4, #16]
 800c0f2:	dc02      	bgt.n	800c0fa <_printf_float+0x14e>
 800c0f4:	6822      	ldr	r2, [r4, #0]
 800c0f6:	07d1      	lsls	r1, r2, #31
 800c0f8:	d501      	bpl.n	800c0fe <_printf_float+0x152>
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	6123      	str	r3, [r4, #16]
 800c0fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c102:	2b00      	cmp	r3, #0
 800c104:	d0a5      	beq.n	800c052 <_printf_float+0xa6>
 800c106:	232d      	movs	r3, #45	; 0x2d
 800c108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c10c:	e7a1      	b.n	800c052 <_printf_float+0xa6>
 800c10e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c112:	f000 8177 	beq.w	800c404 <_printf_float+0x458>
 800c116:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c11a:	d1bb      	bne.n	800c094 <_printf_float+0xe8>
 800c11c:	2900      	cmp	r1, #0
 800c11e:	d1b9      	bne.n	800c094 <_printf_float+0xe8>
 800c120:	2301      	movs	r3, #1
 800c122:	e7b6      	b.n	800c092 <_printf_float+0xe6>
 800c124:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c128:	d119      	bne.n	800c15e <_printf_float+0x1b2>
 800c12a:	2900      	cmp	r1, #0
 800c12c:	6863      	ldr	r3, [r4, #4]
 800c12e:	dd0c      	ble.n	800c14a <_printf_float+0x19e>
 800c130:	6121      	str	r1, [r4, #16]
 800c132:	b913      	cbnz	r3, 800c13a <_printf_float+0x18e>
 800c134:	6822      	ldr	r2, [r4, #0]
 800c136:	07d2      	lsls	r2, r2, #31
 800c138:	d502      	bpl.n	800c140 <_printf_float+0x194>
 800c13a:	3301      	adds	r3, #1
 800c13c:	440b      	add	r3, r1
 800c13e:	6123      	str	r3, [r4, #16]
 800c140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c142:	65a3      	str	r3, [r4, #88]	; 0x58
 800c144:	f04f 0900 	mov.w	r9, #0
 800c148:	e7d9      	b.n	800c0fe <_printf_float+0x152>
 800c14a:	b913      	cbnz	r3, 800c152 <_printf_float+0x1a6>
 800c14c:	6822      	ldr	r2, [r4, #0]
 800c14e:	07d0      	lsls	r0, r2, #31
 800c150:	d501      	bpl.n	800c156 <_printf_float+0x1aa>
 800c152:	3302      	adds	r3, #2
 800c154:	e7f3      	b.n	800c13e <_printf_float+0x192>
 800c156:	2301      	movs	r3, #1
 800c158:	e7f1      	b.n	800c13e <_printf_float+0x192>
 800c15a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c15e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c162:	4293      	cmp	r3, r2
 800c164:	db05      	blt.n	800c172 <_printf_float+0x1c6>
 800c166:	6822      	ldr	r2, [r4, #0]
 800c168:	6123      	str	r3, [r4, #16]
 800c16a:	07d1      	lsls	r1, r2, #31
 800c16c:	d5e8      	bpl.n	800c140 <_printf_float+0x194>
 800c16e:	3301      	adds	r3, #1
 800c170:	e7e5      	b.n	800c13e <_printf_float+0x192>
 800c172:	2b00      	cmp	r3, #0
 800c174:	bfd4      	ite	le
 800c176:	f1c3 0302 	rsble	r3, r3, #2
 800c17a:	2301      	movgt	r3, #1
 800c17c:	4413      	add	r3, r2
 800c17e:	e7de      	b.n	800c13e <_printf_float+0x192>
 800c180:	6823      	ldr	r3, [r4, #0]
 800c182:	055a      	lsls	r2, r3, #21
 800c184:	d407      	bmi.n	800c196 <_printf_float+0x1ea>
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	4642      	mov	r2, r8
 800c18a:	4631      	mov	r1, r6
 800c18c:	4628      	mov	r0, r5
 800c18e:	47b8      	blx	r7
 800c190:	3001      	adds	r0, #1
 800c192:	d12b      	bne.n	800c1ec <_printf_float+0x240>
 800c194:	e767      	b.n	800c066 <_printf_float+0xba>
 800c196:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c19a:	f240 80dc 	bls.w	800c356 <_printf_float+0x3aa>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1a6:	f7f4 fc3b 	bl	8000a20 <__aeabi_dcmpeq>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d033      	beq.n	800c216 <_printf_float+0x26a>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	4a41      	ldr	r2, [pc, #260]	; (800c2b8 <_printf_float+0x30c>)
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	47b8      	blx	r7
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	f43f af54 	beq.w	800c066 <_printf_float+0xba>
 800c1be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	db02      	blt.n	800c1cc <_printf_float+0x220>
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	07d8      	lsls	r0, r3, #31
 800c1ca:	d50f      	bpl.n	800c1ec <_printf_float+0x240>
 800c1cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	47b8      	blx	r7
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	f43f af45 	beq.w	800c066 <_printf_float+0xba>
 800c1dc:	f04f 0800 	mov.w	r8, #0
 800c1e0:	f104 091a 	add.w	r9, r4, #26
 800c1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	4543      	cmp	r3, r8
 800c1ea:	dc09      	bgt.n	800c200 <_printf_float+0x254>
 800c1ec:	6823      	ldr	r3, [r4, #0]
 800c1ee:	079b      	lsls	r3, r3, #30
 800c1f0:	f100 8103 	bmi.w	800c3fa <_printf_float+0x44e>
 800c1f4:	68e0      	ldr	r0, [r4, #12]
 800c1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1f8:	4298      	cmp	r0, r3
 800c1fa:	bfb8      	it	lt
 800c1fc:	4618      	movlt	r0, r3
 800c1fe:	e734      	b.n	800c06a <_printf_float+0xbe>
 800c200:	2301      	movs	r3, #1
 800c202:	464a      	mov	r2, r9
 800c204:	4631      	mov	r1, r6
 800c206:	4628      	mov	r0, r5
 800c208:	47b8      	blx	r7
 800c20a:	3001      	adds	r0, #1
 800c20c:	f43f af2b 	beq.w	800c066 <_printf_float+0xba>
 800c210:	f108 0801 	add.w	r8, r8, #1
 800c214:	e7e6      	b.n	800c1e4 <_printf_float+0x238>
 800c216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c218:	2b00      	cmp	r3, #0
 800c21a:	dc2b      	bgt.n	800c274 <_printf_float+0x2c8>
 800c21c:	2301      	movs	r3, #1
 800c21e:	4a26      	ldr	r2, [pc, #152]	; (800c2b8 <_printf_float+0x30c>)
 800c220:	4631      	mov	r1, r6
 800c222:	4628      	mov	r0, r5
 800c224:	47b8      	blx	r7
 800c226:	3001      	adds	r0, #1
 800c228:	f43f af1d 	beq.w	800c066 <_printf_float+0xba>
 800c22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c22e:	b923      	cbnz	r3, 800c23a <_printf_float+0x28e>
 800c230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c232:	b913      	cbnz	r3, 800c23a <_printf_float+0x28e>
 800c234:	6823      	ldr	r3, [r4, #0]
 800c236:	07d9      	lsls	r1, r3, #31
 800c238:	d5d8      	bpl.n	800c1ec <_printf_float+0x240>
 800c23a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c23e:	4631      	mov	r1, r6
 800c240:	4628      	mov	r0, r5
 800c242:	47b8      	blx	r7
 800c244:	3001      	adds	r0, #1
 800c246:	f43f af0e 	beq.w	800c066 <_printf_float+0xba>
 800c24a:	f04f 0900 	mov.w	r9, #0
 800c24e:	f104 0a1a 	add.w	sl, r4, #26
 800c252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c254:	425b      	negs	r3, r3
 800c256:	454b      	cmp	r3, r9
 800c258:	dc01      	bgt.n	800c25e <_printf_float+0x2b2>
 800c25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c25c:	e794      	b.n	800c188 <_printf_float+0x1dc>
 800c25e:	2301      	movs	r3, #1
 800c260:	4652      	mov	r2, sl
 800c262:	4631      	mov	r1, r6
 800c264:	4628      	mov	r0, r5
 800c266:	47b8      	blx	r7
 800c268:	3001      	adds	r0, #1
 800c26a:	f43f aefc 	beq.w	800c066 <_printf_float+0xba>
 800c26e:	f109 0901 	add.w	r9, r9, #1
 800c272:	e7ee      	b.n	800c252 <_printf_float+0x2a6>
 800c274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c276:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c278:	429a      	cmp	r2, r3
 800c27a:	bfa8      	it	ge
 800c27c:	461a      	movge	r2, r3
 800c27e:	2a00      	cmp	r2, #0
 800c280:	4691      	mov	r9, r2
 800c282:	dd07      	ble.n	800c294 <_printf_float+0x2e8>
 800c284:	4613      	mov	r3, r2
 800c286:	4631      	mov	r1, r6
 800c288:	4642      	mov	r2, r8
 800c28a:	4628      	mov	r0, r5
 800c28c:	47b8      	blx	r7
 800c28e:	3001      	adds	r0, #1
 800c290:	f43f aee9 	beq.w	800c066 <_printf_float+0xba>
 800c294:	f104 031a 	add.w	r3, r4, #26
 800c298:	f04f 0b00 	mov.w	fp, #0
 800c29c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2a0:	9306      	str	r3, [sp, #24]
 800c2a2:	e015      	b.n	800c2d0 <_printf_float+0x324>
 800c2a4:	7fefffff 	.word	0x7fefffff
 800c2a8:	080384b4 	.word	0x080384b4
 800c2ac:	080384b0 	.word	0x080384b0
 800c2b0:	080384bc 	.word	0x080384bc
 800c2b4:	080384b8 	.word	0x080384b8
 800c2b8:	080384c0 	.word	0x080384c0
 800c2bc:	2301      	movs	r3, #1
 800c2be:	9a06      	ldr	r2, [sp, #24]
 800c2c0:	4631      	mov	r1, r6
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	47b8      	blx	r7
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	f43f aecd 	beq.w	800c066 <_printf_float+0xba>
 800c2cc:	f10b 0b01 	add.w	fp, fp, #1
 800c2d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c2d4:	ebaa 0309 	sub.w	r3, sl, r9
 800c2d8:	455b      	cmp	r3, fp
 800c2da:	dcef      	bgt.n	800c2bc <_printf_float+0x310>
 800c2dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	44d0      	add	r8, sl
 800c2e4:	db15      	blt.n	800c312 <_printf_float+0x366>
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	07da      	lsls	r2, r3, #31
 800c2ea:	d412      	bmi.n	800c312 <_printf_float+0x366>
 800c2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2f0:	eba3 020a 	sub.w	r2, r3, sl
 800c2f4:	eba3 0a01 	sub.w	sl, r3, r1
 800c2f8:	4592      	cmp	sl, r2
 800c2fa:	bfa8      	it	ge
 800c2fc:	4692      	movge	sl, r2
 800c2fe:	f1ba 0f00 	cmp.w	sl, #0
 800c302:	dc0e      	bgt.n	800c322 <_printf_float+0x376>
 800c304:	f04f 0800 	mov.w	r8, #0
 800c308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c30c:	f104 091a 	add.w	r9, r4, #26
 800c310:	e019      	b.n	800c346 <_printf_float+0x39a>
 800c312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c316:	4631      	mov	r1, r6
 800c318:	4628      	mov	r0, r5
 800c31a:	47b8      	blx	r7
 800c31c:	3001      	adds	r0, #1
 800c31e:	d1e5      	bne.n	800c2ec <_printf_float+0x340>
 800c320:	e6a1      	b.n	800c066 <_printf_float+0xba>
 800c322:	4653      	mov	r3, sl
 800c324:	4642      	mov	r2, r8
 800c326:	4631      	mov	r1, r6
 800c328:	4628      	mov	r0, r5
 800c32a:	47b8      	blx	r7
 800c32c:	3001      	adds	r0, #1
 800c32e:	d1e9      	bne.n	800c304 <_printf_float+0x358>
 800c330:	e699      	b.n	800c066 <_printf_float+0xba>
 800c332:	2301      	movs	r3, #1
 800c334:	464a      	mov	r2, r9
 800c336:	4631      	mov	r1, r6
 800c338:	4628      	mov	r0, r5
 800c33a:	47b8      	blx	r7
 800c33c:	3001      	adds	r0, #1
 800c33e:	f43f ae92 	beq.w	800c066 <_printf_float+0xba>
 800c342:	f108 0801 	add.w	r8, r8, #1
 800c346:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c34a:	1a9b      	subs	r3, r3, r2
 800c34c:	eba3 030a 	sub.w	r3, r3, sl
 800c350:	4543      	cmp	r3, r8
 800c352:	dcee      	bgt.n	800c332 <_printf_float+0x386>
 800c354:	e74a      	b.n	800c1ec <_printf_float+0x240>
 800c356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c358:	2a01      	cmp	r2, #1
 800c35a:	dc01      	bgt.n	800c360 <_printf_float+0x3b4>
 800c35c:	07db      	lsls	r3, r3, #31
 800c35e:	d53a      	bpl.n	800c3d6 <_printf_float+0x42a>
 800c360:	2301      	movs	r3, #1
 800c362:	4642      	mov	r2, r8
 800c364:	4631      	mov	r1, r6
 800c366:	4628      	mov	r0, r5
 800c368:	47b8      	blx	r7
 800c36a:	3001      	adds	r0, #1
 800c36c:	f43f ae7b 	beq.w	800c066 <_printf_float+0xba>
 800c370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c374:	4631      	mov	r1, r6
 800c376:	4628      	mov	r0, r5
 800c378:	47b8      	blx	r7
 800c37a:	3001      	adds	r0, #1
 800c37c:	f108 0801 	add.w	r8, r8, #1
 800c380:	f43f ae71 	beq.w	800c066 <_printf_float+0xba>
 800c384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c386:	2200      	movs	r2, #0
 800c388:	f103 3aff 	add.w	sl, r3, #4294967295
 800c38c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c390:	2300      	movs	r3, #0
 800c392:	f7f4 fb45 	bl	8000a20 <__aeabi_dcmpeq>
 800c396:	b9c8      	cbnz	r0, 800c3cc <_printf_float+0x420>
 800c398:	4653      	mov	r3, sl
 800c39a:	4642      	mov	r2, r8
 800c39c:	4631      	mov	r1, r6
 800c39e:	4628      	mov	r0, r5
 800c3a0:	47b8      	blx	r7
 800c3a2:	3001      	adds	r0, #1
 800c3a4:	d10e      	bne.n	800c3c4 <_printf_float+0x418>
 800c3a6:	e65e      	b.n	800c066 <_printf_float+0xba>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	4652      	mov	r2, sl
 800c3ac:	4631      	mov	r1, r6
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	47b8      	blx	r7
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	f43f ae57 	beq.w	800c066 <_printf_float+0xba>
 800c3b8:	f108 0801 	add.w	r8, r8, #1
 800c3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	4543      	cmp	r3, r8
 800c3c2:	dcf1      	bgt.n	800c3a8 <_printf_float+0x3fc>
 800c3c4:	464b      	mov	r3, r9
 800c3c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c3ca:	e6de      	b.n	800c18a <_printf_float+0x1de>
 800c3cc:	f04f 0800 	mov.w	r8, #0
 800c3d0:	f104 0a1a 	add.w	sl, r4, #26
 800c3d4:	e7f2      	b.n	800c3bc <_printf_float+0x410>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e7df      	b.n	800c39a <_printf_float+0x3ee>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	464a      	mov	r2, r9
 800c3de:	4631      	mov	r1, r6
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	47b8      	blx	r7
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	f43f ae3e 	beq.w	800c066 <_printf_float+0xba>
 800c3ea:	f108 0801 	add.w	r8, r8, #1
 800c3ee:	68e3      	ldr	r3, [r4, #12]
 800c3f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3f2:	1a9b      	subs	r3, r3, r2
 800c3f4:	4543      	cmp	r3, r8
 800c3f6:	dcf0      	bgt.n	800c3da <_printf_float+0x42e>
 800c3f8:	e6fc      	b.n	800c1f4 <_printf_float+0x248>
 800c3fa:	f04f 0800 	mov.w	r8, #0
 800c3fe:	f104 0919 	add.w	r9, r4, #25
 800c402:	e7f4      	b.n	800c3ee <_printf_float+0x442>
 800c404:	2900      	cmp	r1, #0
 800c406:	f43f ae8b 	beq.w	800c120 <_printf_float+0x174>
 800c40a:	2300      	movs	r3, #0
 800c40c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c410:	ab09      	add	r3, sp, #36	; 0x24
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	ec49 8b10 	vmov	d0, r8, r9
 800c418:	6022      	str	r2, [r4, #0]
 800c41a:	f8cd a004 	str.w	sl, [sp, #4]
 800c41e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c422:	4628      	mov	r0, r5
 800c424:	f7ff fd2e 	bl	800be84 <__cvt>
 800c428:	4680      	mov	r8, r0
 800c42a:	e648      	b.n	800c0be <_printf_float+0x112>

0800c42c <_printf_common>:
 800c42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c430:	4691      	mov	r9, r2
 800c432:	461f      	mov	r7, r3
 800c434:	688a      	ldr	r2, [r1, #8]
 800c436:	690b      	ldr	r3, [r1, #16]
 800c438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c43c:	4293      	cmp	r3, r2
 800c43e:	bfb8      	it	lt
 800c440:	4613      	movlt	r3, r2
 800c442:	f8c9 3000 	str.w	r3, [r9]
 800c446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c44a:	4606      	mov	r6, r0
 800c44c:	460c      	mov	r4, r1
 800c44e:	b112      	cbz	r2, 800c456 <_printf_common+0x2a>
 800c450:	3301      	adds	r3, #1
 800c452:	f8c9 3000 	str.w	r3, [r9]
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	0699      	lsls	r1, r3, #26
 800c45a:	bf42      	ittt	mi
 800c45c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c460:	3302      	addmi	r3, #2
 800c462:	f8c9 3000 	strmi.w	r3, [r9]
 800c466:	6825      	ldr	r5, [r4, #0]
 800c468:	f015 0506 	ands.w	r5, r5, #6
 800c46c:	d107      	bne.n	800c47e <_printf_common+0x52>
 800c46e:	f104 0a19 	add.w	sl, r4, #25
 800c472:	68e3      	ldr	r3, [r4, #12]
 800c474:	f8d9 2000 	ldr.w	r2, [r9]
 800c478:	1a9b      	subs	r3, r3, r2
 800c47a:	42ab      	cmp	r3, r5
 800c47c:	dc28      	bgt.n	800c4d0 <_printf_common+0xa4>
 800c47e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c482:	6822      	ldr	r2, [r4, #0]
 800c484:	3300      	adds	r3, #0
 800c486:	bf18      	it	ne
 800c488:	2301      	movne	r3, #1
 800c48a:	0692      	lsls	r2, r2, #26
 800c48c:	d42d      	bmi.n	800c4ea <_printf_common+0xbe>
 800c48e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c492:	4639      	mov	r1, r7
 800c494:	4630      	mov	r0, r6
 800c496:	47c0      	blx	r8
 800c498:	3001      	adds	r0, #1
 800c49a:	d020      	beq.n	800c4de <_printf_common+0xb2>
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	68e5      	ldr	r5, [r4, #12]
 800c4a0:	f8d9 2000 	ldr.w	r2, [r9]
 800c4a4:	f003 0306 	and.w	r3, r3, #6
 800c4a8:	2b04      	cmp	r3, #4
 800c4aa:	bf08      	it	eq
 800c4ac:	1aad      	subeq	r5, r5, r2
 800c4ae:	68a3      	ldr	r3, [r4, #8]
 800c4b0:	6922      	ldr	r2, [r4, #16]
 800c4b2:	bf0c      	ite	eq
 800c4b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4b8:	2500      	movne	r5, #0
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	bfc4      	itt	gt
 800c4be:	1a9b      	subgt	r3, r3, r2
 800c4c0:	18ed      	addgt	r5, r5, r3
 800c4c2:	f04f 0900 	mov.w	r9, #0
 800c4c6:	341a      	adds	r4, #26
 800c4c8:	454d      	cmp	r5, r9
 800c4ca:	d11a      	bne.n	800c502 <_printf_common+0xd6>
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	e008      	b.n	800c4e2 <_printf_common+0xb6>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	4652      	mov	r2, sl
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	47c0      	blx	r8
 800c4da:	3001      	adds	r0, #1
 800c4dc:	d103      	bne.n	800c4e6 <_printf_common+0xba>
 800c4de:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e6:	3501      	adds	r5, #1
 800c4e8:	e7c3      	b.n	800c472 <_printf_common+0x46>
 800c4ea:	18e1      	adds	r1, r4, r3
 800c4ec:	1c5a      	adds	r2, r3, #1
 800c4ee:	2030      	movs	r0, #48	; 0x30
 800c4f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4f4:	4422      	add	r2, r4
 800c4f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4fe:	3302      	adds	r3, #2
 800c500:	e7c5      	b.n	800c48e <_printf_common+0x62>
 800c502:	2301      	movs	r3, #1
 800c504:	4622      	mov	r2, r4
 800c506:	4639      	mov	r1, r7
 800c508:	4630      	mov	r0, r6
 800c50a:	47c0      	blx	r8
 800c50c:	3001      	adds	r0, #1
 800c50e:	d0e6      	beq.n	800c4de <_printf_common+0xb2>
 800c510:	f109 0901 	add.w	r9, r9, #1
 800c514:	e7d8      	b.n	800c4c8 <_printf_common+0x9c>
	...

0800c518 <_sbrk_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4c06      	ldr	r4, [pc, #24]	; (800c534 <_sbrk_r+0x1c>)
 800c51c:	2300      	movs	r3, #0
 800c51e:	4605      	mov	r5, r0
 800c520:	4608      	mov	r0, r1
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	f001 f966 	bl	800d7f4 <_sbrk>
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d102      	bne.n	800c532 <_sbrk_r+0x1a>
 800c52c:	6823      	ldr	r3, [r4, #0]
 800c52e:	b103      	cbz	r3, 800c532 <_sbrk_r+0x1a>
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	20001268 	.word	0x20001268

0800c538 <quorem>:
 800c538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	6903      	ldr	r3, [r0, #16]
 800c53e:	690c      	ldr	r4, [r1, #16]
 800c540:	42a3      	cmp	r3, r4
 800c542:	4680      	mov	r8, r0
 800c544:	f2c0 8082 	blt.w	800c64c <quorem+0x114>
 800c548:	3c01      	subs	r4, #1
 800c54a:	f101 0714 	add.w	r7, r1, #20
 800c54e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c552:	f100 0614 	add.w	r6, r0, #20
 800c556:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c55a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c55e:	eb06 030c 	add.w	r3, r6, ip
 800c562:	3501      	adds	r5, #1
 800c564:	eb07 090c 	add.w	r9, r7, ip
 800c568:	9301      	str	r3, [sp, #4]
 800c56a:	fbb0 f5f5 	udiv	r5, r0, r5
 800c56e:	b395      	cbz	r5, 800c5d6 <quorem+0x9e>
 800c570:	f04f 0a00 	mov.w	sl, #0
 800c574:	4638      	mov	r0, r7
 800c576:	46b6      	mov	lr, r6
 800c578:	46d3      	mov	fp, sl
 800c57a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c57e:	b293      	uxth	r3, r2
 800c580:	fb05 a303 	mla	r3, r5, r3, sl
 800c584:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c588:	b29b      	uxth	r3, r3
 800c58a:	ebab 0303 	sub.w	r3, fp, r3
 800c58e:	0c12      	lsrs	r2, r2, #16
 800c590:	f8de b000 	ldr.w	fp, [lr]
 800c594:	fb05 a202 	mla	r2, r5, r2, sl
 800c598:	fa13 f38b 	uxtah	r3, r3, fp
 800c59c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c5a0:	fa1f fb82 	uxth.w	fp, r2
 800c5a4:	f8de 2000 	ldr.w	r2, [lr]
 800c5a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c5ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5b6:	4581      	cmp	r9, r0
 800c5b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c5bc:	f84e 3b04 	str.w	r3, [lr], #4
 800c5c0:	d2db      	bcs.n	800c57a <quorem+0x42>
 800c5c2:	f856 300c 	ldr.w	r3, [r6, ip]
 800c5c6:	b933      	cbnz	r3, 800c5d6 <quorem+0x9e>
 800c5c8:	9b01      	ldr	r3, [sp, #4]
 800c5ca:	3b04      	subs	r3, #4
 800c5cc:	429e      	cmp	r6, r3
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	d330      	bcc.n	800c634 <quorem+0xfc>
 800c5d2:	f8c8 4010 	str.w	r4, [r8, #16]
 800c5d6:	4640      	mov	r0, r8
 800c5d8:	f001 f818 	bl	800d60c <__mcmp>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	db25      	blt.n	800c62c <quorem+0xf4>
 800c5e0:	3501      	adds	r5, #1
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f04f 0c00 	mov.w	ip, #0
 800c5e8:	f857 2b04 	ldr.w	r2, [r7], #4
 800c5ec:	f8d0 e000 	ldr.w	lr, [r0]
 800c5f0:	b293      	uxth	r3, r2
 800c5f2:	ebac 0303 	sub.w	r3, ip, r3
 800c5f6:	0c12      	lsrs	r2, r2, #16
 800c5f8:	fa13 f38e 	uxtah	r3, r3, lr
 800c5fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c604:	b29b      	uxth	r3, r3
 800c606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c60a:	45b9      	cmp	r9, r7
 800c60c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c610:	f840 3b04 	str.w	r3, [r0], #4
 800c614:	d2e8      	bcs.n	800c5e8 <quorem+0xb0>
 800c616:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c61a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c61e:	b92a      	cbnz	r2, 800c62c <quorem+0xf4>
 800c620:	3b04      	subs	r3, #4
 800c622:	429e      	cmp	r6, r3
 800c624:	461a      	mov	r2, r3
 800c626:	d30b      	bcc.n	800c640 <quorem+0x108>
 800c628:	f8c8 4010 	str.w	r4, [r8, #16]
 800c62c:	4628      	mov	r0, r5
 800c62e:	b003      	add	sp, #12
 800c630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c634:	6812      	ldr	r2, [r2, #0]
 800c636:	3b04      	subs	r3, #4
 800c638:	2a00      	cmp	r2, #0
 800c63a:	d1ca      	bne.n	800c5d2 <quorem+0x9a>
 800c63c:	3c01      	subs	r4, #1
 800c63e:	e7c5      	b.n	800c5cc <quorem+0x94>
 800c640:	6812      	ldr	r2, [r2, #0]
 800c642:	3b04      	subs	r3, #4
 800c644:	2a00      	cmp	r2, #0
 800c646:	d1ef      	bne.n	800c628 <quorem+0xf0>
 800c648:	3c01      	subs	r4, #1
 800c64a:	e7ea      	b.n	800c622 <quorem+0xea>
 800c64c:	2000      	movs	r0, #0
 800c64e:	e7ee      	b.n	800c62e <quorem+0xf6>

0800c650 <_dtoa_r>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	ec57 6b10 	vmov	r6, r7, d0
 800c658:	b097      	sub	sp, #92	; 0x5c
 800c65a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c65c:	9106      	str	r1, [sp, #24]
 800c65e:	4604      	mov	r4, r0
 800c660:	920b      	str	r2, [sp, #44]	; 0x2c
 800c662:	9312      	str	r3, [sp, #72]	; 0x48
 800c664:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c668:	e9cd 6700 	strd	r6, r7, [sp]
 800c66c:	b93d      	cbnz	r5, 800c67e <_dtoa_r+0x2e>
 800c66e:	2010      	movs	r0, #16
 800c670:	f7ff fb3c 	bl	800bcec <malloc>
 800c674:	6260      	str	r0, [r4, #36]	; 0x24
 800c676:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c67a:	6005      	str	r5, [r0, #0]
 800c67c:	60c5      	str	r5, [r0, #12]
 800c67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c680:	6819      	ldr	r1, [r3, #0]
 800c682:	b151      	cbz	r1, 800c69a <_dtoa_r+0x4a>
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	604a      	str	r2, [r1, #4]
 800c688:	2301      	movs	r3, #1
 800c68a:	4093      	lsls	r3, r2
 800c68c:	608b      	str	r3, [r1, #8]
 800c68e:	4620      	mov	r0, r4
 800c690:	f000 fdda 	bl	800d248 <_Bfree>
 800c694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	1e3b      	subs	r3, r7, #0
 800c69c:	bfbb      	ittet	lt
 800c69e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c6a2:	9301      	strlt	r3, [sp, #4]
 800c6a4:	2300      	movge	r3, #0
 800c6a6:	2201      	movlt	r2, #1
 800c6a8:	bfac      	ite	ge
 800c6aa:	f8c8 3000 	strge.w	r3, [r8]
 800c6ae:	f8c8 2000 	strlt.w	r2, [r8]
 800c6b2:	4baf      	ldr	r3, [pc, #700]	; (800c970 <_dtoa_r+0x320>)
 800c6b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c6b8:	ea33 0308 	bics.w	r3, r3, r8
 800c6bc:	d114      	bne.n	800c6e8 <_dtoa_r+0x98>
 800c6be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c6c4:	6013      	str	r3, [r2, #0]
 800c6c6:	9b00      	ldr	r3, [sp, #0]
 800c6c8:	b923      	cbnz	r3, 800c6d4 <_dtoa_r+0x84>
 800c6ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f000 8542 	beq.w	800d158 <_dtoa_r+0xb08>
 800c6d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c984 <_dtoa_r+0x334>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f000 8544 	beq.w	800d168 <_dtoa_r+0xb18>
 800c6e0:	f10b 0303 	add.w	r3, fp, #3
 800c6e4:	f000 bd3e 	b.w	800d164 <_dtoa_r+0xb14>
 800c6e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	f7f4 f994 	bl	8000a20 <__aeabi_dcmpeq>
 800c6f8:	4681      	mov	r9, r0
 800c6fa:	b168      	cbz	r0, 800c718 <_dtoa_r+0xc8>
 800c6fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6fe:	2301      	movs	r3, #1
 800c700:	6013      	str	r3, [r2, #0]
 800c702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 8524 	beq.w	800d152 <_dtoa_r+0xb02>
 800c70a:	4b9a      	ldr	r3, [pc, #616]	; (800c974 <_dtoa_r+0x324>)
 800c70c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c70e:	f103 3bff 	add.w	fp, r3, #4294967295
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	f000 bd28 	b.w	800d168 <_dtoa_r+0xb18>
 800c718:	aa14      	add	r2, sp, #80	; 0x50
 800c71a:	a915      	add	r1, sp, #84	; 0x54
 800c71c:	ec47 6b10 	vmov	d0, r6, r7
 800c720:	4620      	mov	r0, r4
 800c722:	f000 ffea 	bl	800d6fa <__d2b>
 800c726:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c72a:	9004      	str	r0, [sp, #16]
 800c72c:	2d00      	cmp	r5, #0
 800c72e:	d07c      	beq.n	800c82a <_dtoa_r+0x1da>
 800c730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c734:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c738:	46b2      	mov	sl, r6
 800c73a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c73e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c742:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c746:	2200      	movs	r2, #0
 800c748:	4b8b      	ldr	r3, [pc, #556]	; (800c978 <_dtoa_r+0x328>)
 800c74a:	4650      	mov	r0, sl
 800c74c:	4659      	mov	r1, fp
 800c74e:	f7f3 fd47 	bl	80001e0 <__aeabi_dsub>
 800c752:	a381      	add	r3, pc, #516	; (adr r3, 800c958 <_dtoa_r+0x308>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f3 fefa 	bl	8000550 <__aeabi_dmul>
 800c75c:	a380      	add	r3, pc, #512	; (adr r3, 800c960 <_dtoa_r+0x310>)
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	f7f3 fd3f 	bl	80001e4 <__adddf3>
 800c766:	4606      	mov	r6, r0
 800c768:	4628      	mov	r0, r5
 800c76a:	460f      	mov	r7, r1
 800c76c:	f7f3 fe86 	bl	800047c <__aeabi_i2d>
 800c770:	a37d      	add	r3, pc, #500	; (adr r3, 800c968 <_dtoa_r+0x318>)
 800c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c776:	f7f3 feeb 	bl	8000550 <__aeabi_dmul>
 800c77a:	4602      	mov	r2, r0
 800c77c:	460b      	mov	r3, r1
 800c77e:	4630      	mov	r0, r6
 800c780:	4639      	mov	r1, r7
 800c782:	f7f3 fd2f 	bl	80001e4 <__adddf3>
 800c786:	4606      	mov	r6, r0
 800c788:	460f      	mov	r7, r1
 800c78a:	f7f4 f991 	bl	8000ab0 <__aeabi_d2iz>
 800c78e:	2200      	movs	r2, #0
 800c790:	4682      	mov	sl, r0
 800c792:	2300      	movs	r3, #0
 800c794:	4630      	mov	r0, r6
 800c796:	4639      	mov	r1, r7
 800c798:	f7f4 f94c 	bl	8000a34 <__aeabi_dcmplt>
 800c79c:	b148      	cbz	r0, 800c7b2 <_dtoa_r+0x162>
 800c79e:	4650      	mov	r0, sl
 800c7a0:	f7f3 fe6c 	bl	800047c <__aeabi_i2d>
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	463b      	mov	r3, r7
 800c7a8:	f7f4 f93a 	bl	8000a20 <__aeabi_dcmpeq>
 800c7ac:	b908      	cbnz	r0, 800c7b2 <_dtoa_r+0x162>
 800c7ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7b2:	f1ba 0f16 	cmp.w	sl, #22
 800c7b6:	d859      	bhi.n	800c86c <_dtoa_r+0x21c>
 800c7b8:	4970      	ldr	r1, [pc, #448]	; (800c97c <_dtoa_r+0x32c>)
 800c7ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7c6:	f7f4 f953 	bl	8000a70 <__aeabi_dcmpgt>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d050      	beq.n	800c870 <_dtoa_r+0x220>
 800c7ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7d8:	1b5d      	subs	r5, r3, r5
 800c7da:	f1b5 0801 	subs.w	r8, r5, #1
 800c7de:	bf49      	itett	mi
 800c7e0:	f1c5 0301 	rsbmi	r3, r5, #1
 800c7e4:	2300      	movpl	r3, #0
 800c7e6:	9305      	strmi	r3, [sp, #20]
 800c7e8:	f04f 0800 	movmi.w	r8, #0
 800c7ec:	bf58      	it	pl
 800c7ee:	9305      	strpl	r3, [sp, #20]
 800c7f0:	f1ba 0f00 	cmp.w	sl, #0
 800c7f4:	db3e      	blt.n	800c874 <_dtoa_r+0x224>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	44d0      	add	r8, sl
 800c7fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c7fe:	9307      	str	r3, [sp, #28]
 800c800:	9b06      	ldr	r3, [sp, #24]
 800c802:	2b09      	cmp	r3, #9
 800c804:	f200 8090 	bhi.w	800c928 <_dtoa_r+0x2d8>
 800c808:	2b05      	cmp	r3, #5
 800c80a:	bfc4      	itt	gt
 800c80c:	3b04      	subgt	r3, #4
 800c80e:	9306      	strgt	r3, [sp, #24]
 800c810:	9b06      	ldr	r3, [sp, #24]
 800c812:	f1a3 0302 	sub.w	r3, r3, #2
 800c816:	bfcc      	ite	gt
 800c818:	2500      	movgt	r5, #0
 800c81a:	2501      	movle	r5, #1
 800c81c:	2b03      	cmp	r3, #3
 800c81e:	f200 808f 	bhi.w	800c940 <_dtoa_r+0x2f0>
 800c822:	e8df f003 	tbb	[pc, r3]
 800c826:	7f7d      	.short	0x7f7d
 800c828:	7131      	.short	0x7131
 800c82a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c82e:	441d      	add	r5, r3
 800c830:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c834:	2820      	cmp	r0, #32
 800c836:	dd13      	ble.n	800c860 <_dtoa_r+0x210>
 800c838:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c83c:	9b00      	ldr	r3, [sp, #0]
 800c83e:	fa08 f800 	lsl.w	r8, r8, r0
 800c842:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c846:	fa23 f000 	lsr.w	r0, r3, r0
 800c84a:	ea48 0000 	orr.w	r0, r8, r0
 800c84e:	f7f3 fe05 	bl	800045c <__aeabi_ui2d>
 800c852:	2301      	movs	r3, #1
 800c854:	4682      	mov	sl, r0
 800c856:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c85a:	3d01      	subs	r5, #1
 800c85c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c85e:	e772      	b.n	800c746 <_dtoa_r+0xf6>
 800c860:	9b00      	ldr	r3, [sp, #0]
 800c862:	f1c0 0020 	rsb	r0, r0, #32
 800c866:	fa03 f000 	lsl.w	r0, r3, r0
 800c86a:	e7f0      	b.n	800c84e <_dtoa_r+0x1fe>
 800c86c:	2301      	movs	r3, #1
 800c86e:	e7b1      	b.n	800c7d4 <_dtoa_r+0x184>
 800c870:	900f      	str	r0, [sp, #60]	; 0x3c
 800c872:	e7b0      	b.n	800c7d6 <_dtoa_r+0x186>
 800c874:	9b05      	ldr	r3, [sp, #20]
 800c876:	eba3 030a 	sub.w	r3, r3, sl
 800c87a:	9305      	str	r3, [sp, #20]
 800c87c:	f1ca 0300 	rsb	r3, sl, #0
 800c880:	9307      	str	r3, [sp, #28]
 800c882:	2300      	movs	r3, #0
 800c884:	930e      	str	r3, [sp, #56]	; 0x38
 800c886:	e7bb      	b.n	800c800 <_dtoa_r+0x1b0>
 800c888:	2301      	movs	r3, #1
 800c88a:	930a      	str	r3, [sp, #40]	; 0x28
 800c88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c88e:	2b00      	cmp	r3, #0
 800c890:	dd59      	ble.n	800c946 <_dtoa_r+0x2f6>
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	4699      	mov	r9, r3
 800c896:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c898:	2200      	movs	r2, #0
 800c89a:	6072      	str	r2, [r6, #4]
 800c89c:	2204      	movs	r2, #4
 800c89e:	f102 0014 	add.w	r0, r2, #20
 800c8a2:	4298      	cmp	r0, r3
 800c8a4:	6871      	ldr	r1, [r6, #4]
 800c8a6:	d953      	bls.n	800c950 <_dtoa_r+0x300>
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f000 fc99 	bl	800d1e0 <_Balloc>
 800c8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8b0:	6030      	str	r0, [r6, #0]
 800c8b2:	f1b9 0f0e 	cmp.w	r9, #14
 800c8b6:	f8d3 b000 	ldr.w	fp, [r3]
 800c8ba:	f200 80e6 	bhi.w	800ca8a <_dtoa_r+0x43a>
 800c8be:	2d00      	cmp	r5, #0
 800c8c0:	f000 80e3 	beq.w	800ca8a <_dtoa_r+0x43a>
 800c8c4:	ed9d 7b00 	vldr	d7, [sp]
 800c8c8:	f1ba 0f00 	cmp.w	sl, #0
 800c8cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c8d0:	dd74      	ble.n	800c9bc <_dtoa_r+0x36c>
 800c8d2:	4a2a      	ldr	r2, [pc, #168]	; (800c97c <_dtoa_r+0x32c>)
 800c8d4:	f00a 030f 	and.w	r3, sl, #15
 800c8d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c8dc:	ed93 7b00 	vldr	d7, [r3]
 800c8e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c8e4:	06f0      	lsls	r0, r6, #27
 800c8e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c8ea:	d565      	bpl.n	800c9b8 <_dtoa_r+0x368>
 800c8ec:	4b24      	ldr	r3, [pc, #144]	; (800c980 <_dtoa_r+0x330>)
 800c8ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c8f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8f6:	f7f3 ff55 	bl	80007a4 <__aeabi_ddiv>
 800c8fa:	e9cd 0100 	strd	r0, r1, [sp]
 800c8fe:	f006 060f 	and.w	r6, r6, #15
 800c902:	2503      	movs	r5, #3
 800c904:	4f1e      	ldr	r7, [pc, #120]	; (800c980 <_dtoa_r+0x330>)
 800c906:	e04c      	b.n	800c9a2 <_dtoa_r+0x352>
 800c908:	2301      	movs	r3, #1
 800c90a:	930a      	str	r3, [sp, #40]	; 0x28
 800c90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c90e:	4453      	add	r3, sl
 800c910:	f103 0901 	add.w	r9, r3, #1
 800c914:	9302      	str	r3, [sp, #8]
 800c916:	464b      	mov	r3, r9
 800c918:	2b01      	cmp	r3, #1
 800c91a:	bfb8      	it	lt
 800c91c:	2301      	movlt	r3, #1
 800c91e:	e7ba      	b.n	800c896 <_dtoa_r+0x246>
 800c920:	2300      	movs	r3, #0
 800c922:	e7b2      	b.n	800c88a <_dtoa_r+0x23a>
 800c924:	2300      	movs	r3, #0
 800c926:	e7f0      	b.n	800c90a <_dtoa_r+0x2ba>
 800c928:	2501      	movs	r5, #1
 800c92a:	2300      	movs	r3, #0
 800c92c:	9306      	str	r3, [sp, #24]
 800c92e:	950a      	str	r5, [sp, #40]	; 0x28
 800c930:	f04f 33ff 	mov.w	r3, #4294967295
 800c934:	9302      	str	r3, [sp, #8]
 800c936:	4699      	mov	r9, r3
 800c938:	2200      	movs	r2, #0
 800c93a:	2312      	movs	r3, #18
 800c93c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c93e:	e7aa      	b.n	800c896 <_dtoa_r+0x246>
 800c940:	2301      	movs	r3, #1
 800c942:	930a      	str	r3, [sp, #40]	; 0x28
 800c944:	e7f4      	b.n	800c930 <_dtoa_r+0x2e0>
 800c946:	2301      	movs	r3, #1
 800c948:	9302      	str	r3, [sp, #8]
 800c94a:	4699      	mov	r9, r3
 800c94c:	461a      	mov	r2, r3
 800c94e:	e7f5      	b.n	800c93c <_dtoa_r+0x2ec>
 800c950:	3101      	adds	r1, #1
 800c952:	6071      	str	r1, [r6, #4]
 800c954:	0052      	lsls	r2, r2, #1
 800c956:	e7a2      	b.n	800c89e <_dtoa_r+0x24e>
 800c958:	636f4361 	.word	0x636f4361
 800c95c:	3fd287a7 	.word	0x3fd287a7
 800c960:	8b60c8b3 	.word	0x8b60c8b3
 800c964:	3fc68a28 	.word	0x3fc68a28
 800c968:	509f79fb 	.word	0x509f79fb
 800c96c:	3fd34413 	.word	0x3fd34413
 800c970:	7ff00000 	.word	0x7ff00000
 800c974:	080384c1 	.word	0x080384c1
 800c978:	3ff80000 	.word	0x3ff80000
 800c97c:	08038558 	.word	0x08038558
 800c980:	08038530 	.word	0x08038530
 800c984:	080384cb 	.word	0x080384cb
 800c988:	07f1      	lsls	r1, r6, #31
 800c98a:	d508      	bpl.n	800c99e <_dtoa_r+0x34e>
 800c98c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c990:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c994:	f7f3 fddc 	bl	8000550 <__aeabi_dmul>
 800c998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c99c:	3501      	adds	r5, #1
 800c99e:	1076      	asrs	r6, r6, #1
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	d1f0      	bne.n	800c988 <_dtoa_r+0x338>
 800c9a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c9aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9ae:	f7f3 fef9 	bl	80007a4 <__aeabi_ddiv>
 800c9b2:	e9cd 0100 	strd	r0, r1, [sp]
 800c9b6:	e01a      	b.n	800c9ee <_dtoa_r+0x39e>
 800c9b8:	2502      	movs	r5, #2
 800c9ba:	e7a3      	b.n	800c904 <_dtoa_r+0x2b4>
 800c9bc:	f000 80a0 	beq.w	800cb00 <_dtoa_r+0x4b0>
 800c9c0:	f1ca 0600 	rsb	r6, sl, #0
 800c9c4:	4b9f      	ldr	r3, [pc, #636]	; (800cc44 <_dtoa_r+0x5f4>)
 800c9c6:	4fa0      	ldr	r7, [pc, #640]	; (800cc48 <_dtoa_r+0x5f8>)
 800c9c8:	f006 020f 	and.w	r2, r6, #15
 800c9cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c9d8:	f7f3 fdba 	bl	8000550 <__aeabi_dmul>
 800c9dc:	e9cd 0100 	strd	r0, r1, [sp]
 800c9e0:	1136      	asrs	r6, r6, #4
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	2502      	movs	r5, #2
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	d17f      	bne.n	800caea <_dtoa_r+0x49a>
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1e1      	bne.n	800c9b2 <_dtoa_r+0x362>
 800c9ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 8087 	beq.w	800cb04 <_dtoa_r+0x4b4>
 800c9f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	4b93      	ldr	r3, [pc, #588]	; (800cc4c <_dtoa_r+0x5fc>)
 800c9fe:	4630      	mov	r0, r6
 800ca00:	4639      	mov	r1, r7
 800ca02:	f7f4 f817 	bl	8000a34 <__aeabi_dcmplt>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d07c      	beq.n	800cb04 <_dtoa_r+0x4b4>
 800ca0a:	f1b9 0f00 	cmp.w	r9, #0
 800ca0e:	d079      	beq.n	800cb04 <_dtoa_r+0x4b4>
 800ca10:	9b02      	ldr	r3, [sp, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	dd35      	ble.n	800ca82 <_dtoa_r+0x432>
 800ca16:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ca1a:	9308      	str	r3, [sp, #32]
 800ca1c:	4639      	mov	r1, r7
 800ca1e:	2200      	movs	r2, #0
 800ca20:	4b8b      	ldr	r3, [pc, #556]	; (800cc50 <_dtoa_r+0x600>)
 800ca22:	4630      	mov	r0, r6
 800ca24:	f7f3 fd94 	bl	8000550 <__aeabi_dmul>
 800ca28:	e9cd 0100 	strd	r0, r1, [sp]
 800ca2c:	9f02      	ldr	r7, [sp, #8]
 800ca2e:	3501      	adds	r5, #1
 800ca30:	4628      	mov	r0, r5
 800ca32:	f7f3 fd23 	bl	800047c <__aeabi_i2d>
 800ca36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca3a:	f7f3 fd89 	bl	8000550 <__aeabi_dmul>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	4b84      	ldr	r3, [pc, #528]	; (800cc54 <_dtoa_r+0x604>)
 800ca42:	f7f3 fbcf 	bl	80001e4 <__adddf3>
 800ca46:	4605      	mov	r5, r0
 800ca48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ca4c:	2f00      	cmp	r7, #0
 800ca4e:	d15d      	bne.n	800cb0c <_dtoa_r+0x4bc>
 800ca50:	2200      	movs	r2, #0
 800ca52:	4b81      	ldr	r3, [pc, #516]	; (800cc58 <_dtoa_r+0x608>)
 800ca54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca58:	f7f3 fbc2 	bl	80001e0 <__aeabi_dsub>
 800ca5c:	462a      	mov	r2, r5
 800ca5e:	4633      	mov	r3, r6
 800ca60:	e9cd 0100 	strd	r0, r1, [sp]
 800ca64:	f7f4 f804 	bl	8000a70 <__aeabi_dcmpgt>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	f040 8288 	bne.w	800cf7e <_dtoa_r+0x92e>
 800ca6e:	462a      	mov	r2, r5
 800ca70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ca74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca78:	f7f3 ffdc 	bl	8000a34 <__aeabi_dcmplt>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f040 827c 	bne.w	800cf7a <_dtoa_r+0x92a>
 800ca82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca86:	e9cd 2300 	strd	r2, r3, [sp]
 800ca8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f2c0 8150 	blt.w	800cd32 <_dtoa_r+0x6e2>
 800ca92:	f1ba 0f0e 	cmp.w	sl, #14
 800ca96:	f300 814c 	bgt.w	800cd32 <_dtoa_r+0x6e2>
 800ca9a:	4b6a      	ldr	r3, [pc, #424]	; (800cc44 <_dtoa_r+0x5f4>)
 800ca9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800caa0:	ed93 7b00 	vldr	d7, [r3]
 800caa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800caac:	f280 80d8 	bge.w	800cc60 <_dtoa_r+0x610>
 800cab0:	f1b9 0f00 	cmp.w	r9, #0
 800cab4:	f300 80d4 	bgt.w	800cc60 <_dtoa_r+0x610>
 800cab8:	f040 825e 	bne.w	800cf78 <_dtoa_r+0x928>
 800cabc:	2200      	movs	r2, #0
 800cabe:	4b66      	ldr	r3, [pc, #408]	; (800cc58 <_dtoa_r+0x608>)
 800cac0:	ec51 0b17 	vmov	r0, r1, d7
 800cac4:	f7f3 fd44 	bl	8000550 <__aeabi_dmul>
 800cac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cacc:	f7f3 ffc6 	bl	8000a5c <__aeabi_dcmpge>
 800cad0:	464f      	mov	r7, r9
 800cad2:	464e      	mov	r6, r9
 800cad4:	2800      	cmp	r0, #0
 800cad6:	f040 8234 	bne.w	800cf42 <_dtoa_r+0x8f2>
 800cada:	2331      	movs	r3, #49	; 0x31
 800cadc:	f10b 0501 	add.w	r5, fp, #1
 800cae0:	f88b 3000 	strb.w	r3, [fp]
 800cae4:	f10a 0a01 	add.w	sl, sl, #1
 800cae8:	e22f      	b.n	800cf4a <_dtoa_r+0x8fa>
 800caea:	07f2      	lsls	r2, r6, #31
 800caec:	d505      	bpl.n	800cafa <_dtoa_r+0x4aa>
 800caee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caf2:	f7f3 fd2d 	bl	8000550 <__aeabi_dmul>
 800caf6:	3501      	adds	r5, #1
 800caf8:	2301      	movs	r3, #1
 800cafa:	1076      	asrs	r6, r6, #1
 800cafc:	3708      	adds	r7, #8
 800cafe:	e772      	b.n	800c9e6 <_dtoa_r+0x396>
 800cb00:	2502      	movs	r5, #2
 800cb02:	e774      	b.n	800c9ee <_dtoa_r+0x39e>
 800cb04:	f8cd a020 	str.w	sl, [sp, #32]
 800cb08:	464f      	mov	r7, r9
 800cb0a:	e791      	b.n	800ca30 <_dtoa_r+0x3e0>
 800cb0c:	4b4d      	ldr	r3, [pc, #308]	; (800cc44 <_dtoa_r+0x5f4>)
 800cb0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d047      	beq.n	800cbac <_dtoa_r+0x55c>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	2000      	movs	r0, #0
 800cb22:	494e      	ldr	r1, [pc, #312]	; (800cc5c <_dtoa_r+0x60c>)
 800cb24:	f7f3 fe3e 	bl	80007a4 <__aeabi_ddiv>
 800cb28:	462a      	mov	r2, r5
 800cb2a:	4633      	mov	r3, r6
 800cb2c:	f7f3 fb58 	bl	80001e0 <__aeabi_dsub>
 800cb30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cb34:	465d      	mov	r5, fp
 800cb36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb3a:	f7f3 ffb9 	bl	8000ab0 <__aeabi_d2iz>
 800cb3e:	4606      	mov	r6, r0
 800cb40:	f7f3 fc9c 	bl	800047c <__aeabi_i2d>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb4c:	f7f3 fb48 	bl	80001e0 <__aeabi_dsub>
 800cb50:	3630      	adds	r6, #48	; 0x30
 800cb52:	f805 6b01 	strb.w	r6, [r5], #1
 800cb56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cb5a:	e9cd 0100 	strd	r0, r1, [sp]
 800cb5e:	f7f3 ff69 	bl	8000a34 <__aeabi_dcmplt>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d163      	bne.n	800cc2e <_dtoa_r+0x5de>
 800cb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	4937      	ldr	r1, [pc, #220]	; (800cc4c <_dtoa_r+0x5fc>)
 800cb6e:	f7f3 fb37 	bl	80001e0 <__aeabi_dsub>
 800cb72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cb76:	f7f3 ff5d 	bl	8000a34 <__aeabi_dcmplt>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	f040 80b7 	bne.w	800ccee <_dtoa_r+0x69e>
 800cb80:	eba5 030b 	sub.w	r3, r5, fp
 800cb84:	429f      	cmp	r7, r3
 800cb86:	f77f af7c 	ble.w	800ca82 <_dtoa_r+0x432>
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	4b30      	ldr	r3, [pc, #192]	; (800cc50 <_dtoa_r+0x600>)
 800cb8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb92:	f7f3 fcdd 	bl	8000550 <__aeabi_dmul>
 800cb96:	2200      	movs	r2, #0
 800cb98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cb9c:	4b2c      	ldr	r3, [pc, #176]	; (800cc50 <_dtoa_r+0x600>)
 800cb9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cba2:	f7f3 fcd5 	bl	8000550 <__aeabi_dmul>
 800cba6:	e9cd 0100 	strd	r0, r1, [sp]
 800cbaa:	e7c4      	b.n	800cb36 <_dtoa_r+0x4e6>
 800cbac:	462a      	mov	r2, r5
 800cbae:	4633      	mov	r3, r6
 800cbb0:	f7f3 fcce 	bl	8000550 <__aeabi_dmul>
 800cbb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cbb8:	eb0b 0507 	add.w	r5, fp, r7
 800cbbc:	465e      	mov	r6, fp
 800cbbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbc2:	f7f3 ff75 	bl	8000ab0 <__aeabi_d2iz>
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	f7f3 fc58 	bl	800047c <__aeabi_i2d>
 800cbcc:	3730      	adds	r7, #48	; 0x30
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbd6:	f7f3 fb03 	bl	80001e0 <__aeabi_dsub>
 800cbda:	f806 7b01 	strb.w	r7, [r6], #1
 800cbde:	42ae      	cmp	r6, r5
 800cbe0:	e9cd 0100 	strd	r0, r1, [sp]
 800cbe4:	f04f 0200 	mov.w	r2, #0
 800cbe8:	d126      	bne.n	800cc38 <_dtoa_r+0x5e8>
 800cbea:	4b1c      	ldr	r3, [pc, #112]	; (800cc5c <_dtoa_r+0x60c>)
 800cbec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cbf0:	f7f3 faf8 	bl	80001e4 <__adddf3>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbfc:	f7f3 ff38 	bl	8000a70 <__aeabi_dcmpgt>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d174      	bne.n	800ccee <_dtoa_r+0x69e>
 800cc04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc08:	2000      	movs	r0, #0
 800cc0a:	4914      	ldr	r1, [pc, #80]	; (800cc5c <_dtoa_r+0x60c>)
 800cc0c:	f7f3 fae8 	bl	80001e0 <__aeabi_dsub>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc18:	f7f3 ff0c 	bl	8000a34 <__aeabi_dcmplt>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	f43f af30 	beq.w	800ca82 <_dtoa_r+0x432>
 800cc22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc26:	2b30      	cmp	r3, #48	; 0x30
 800cc28:	f105 32ff 	add.w	r2, r5, #4294967295
 800cc2c:	d002      	beq.n	800cc34 <_dtoa_r+0x5e4>
 800cc2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cc32:	e04a      	b.n	800ccca <_dtoa_r+0x67a>
 800cc34:	4615      	mov	r5, r2
 800cc36:	e7f4      	b.n	800cc22 <_dtoa_r+0x5d2>
 800cc38:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <_dtoa_r+0x600>)
 800cc3a:	f7f3 fc89 	bl	8000550 <__aeabi_dmul>
 800cc3e:	e9cd 0100 	strd	r0, r1, [sp]
 800cc42:	e7bc      	b.n	800cbbe <_dtoa_r+0x56e>
 800cc44:	08038558 	.word	0x08038558
 800cc48:	08038530 	.word	0x08038530
 800cc4c:	3ff00000 	.word	0x3ff00000
 800cc50:	40240000 	.word	0x40240000
 800cc54:	401c0000 	.word	0x401c0000
 800cc58:	40140000 	.word	0x40140000
 800cc5c:	3fe00000 	.word	0x3fe00000
 800cc60:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cc64:	465d      	mov	r5, fp
 800cc66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	f7f3 fd99 	bl	80007a4 <__aeabi_ddiv>
 800cc72:	f7f3 ff1d 	bl	8000ab0 <__aeabi_d2iz>
 800cc76:	4680      	mov	r8, r0
 800cc78:	f7f3 fc00 	bl	800047c <__aeabi_i2d>
 800cc7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc80:	f7f3 fc66 	bl	8000550 <__aeabi_dmul>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4630      	mov	r0, r6
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cc90:	f7f3 faa6 	bl	80001e0 <__aeabi_dsub>
 800cc94:	f805 6b01 	strb.w	r6, [r5], #1
 800cc98:	eba5 060b 	sub.w	r6, r5, fp
 800cc9c:	45b1      	cmp	r9, r6
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	d139      	bne.n	800cd18 <_dtoa_r+0x6c8>
 800cca4:	f7f3 fa9e 	bl	80001e4 <__adddf3>
 800cca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccac:	4606      	mov	r6, r0
 800ccae:	460f      	mov	r7, r1
 800ccb0:	f7f3 fede 	bl	8000a70 <__aeabi_dcmpgt>
 800ccb4:	b9c8      	cbnz	r0, 800ccea <_dtoa_r+0x69a>
 800ccb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccba:	4630      	mov	r0, r6
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	f7f3 feaf 	bl	8000a20 <__aeabi_dcmpeq>
 800ccc2:	b110      	cbz	r0, 800ccca <_dtoa_r+0x67a>
 800ccc4:	f018 0f01 	tst.w	r8, #1
 800ccc8:	d10f      	bne.n	800ccea <_dtoa_r+0x69a>
 800ccca:	9904      	ldr	r1, [sp, #16]
 800cccc:	4620      	mov	r0, r4
 800ccce:	f000 fabb 	bl	800d248 <_Bfree>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ccd6:	702b      	strb	r3, [r5, #0]
 800ccd8:	f10a 0301 	add.w	r3, sl, #1
 800ccdc:	6013      	str	r3, [r2, #0]
 800ccde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f000 8241 	beq.w	800d168 <_dtoa_r+0xb18>
 800cce6:	601d      	str	r5, [r3, #0]
 800cce8:	e23e      	b.n	800d168 <_dtoa_r+0xb18>
 800ccea:	f8cd a020 	str.w	sl, [sp, #32]
 800ccee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ccf2:	2a39      	cmp	r2, #57	; 0x39
 800ccf4:	f105 33ff 	add.w	r3, r5, #4294967295
 800ccf8:	d108      	bne.n	800cd0c <_dtoa_r+0x6bc>
 800ccfa:	459b      	cmp	fp, r3
 800ccfc:	d10a      	bne.n	800cd14 <_dtoa_r+0x6c4>
 800ccfe:	9b08      	ldr	r3, [sp, #32]
 800cd00:	3301      	adds	r3, #1
 800cd02:	9308      	str	r3, [sp, #32]
 800cd04:	2330      	movs	r3, #48	; 0x30
 800cd06:	f88b 3000 	strb.w	r3, [fp]
 800cd0a:	465b      	mov	r3, fp
 800cd0c:	781a      	ldrb	r2, [r3, #0]
 800cd0e:	3201      	adds	r2, #1
 800cd10:	701a      	strb	r2, [r3, #0]
 800cd12:	e78c      	b.n	800cc2e <_dtoa_r+0x5de>
 800cd14:	461d      	mov	r5, r3
 800cd16:	e7ea      	b.n	800ccee <_dtoa_r+0x69e>
 800cd18:	2200      	movs	r2, #0
 800cd1a:	4b9b      	ldr	r3, [pc, #620]	; (800cf88 <_dtoa_r+0x938>)
 800cd1c:	f7f3 fc18 	bl	8000550 <__aeabi_dmul>
 800cd20:	2200      	movs	r2, #0
 800cd22:	2300      	movs	r3, #0
 800cd24:	4606      	mov	r6, r0
 800cd26:	460f      	mov	r7, r1
 800cd28:	f7f3 fe7a 	bl	8000a20 <__aeabi_dcmpeq>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d09a      	beq.n	800cc66 <_dtoa_r+0x616>
 800cd30:	e7cb      	b.n	800ccca <_dtoa_r+0x67a>
 800cd32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd34:	2a00      	cmp	r2, #0
 800cd36:	f000 808b 	beq.w	800ce50 <_dtoa_r+0x800>
 800cd3a:	9a06      	ldr	r2, [sp, #24]
 800cd3c:	2a01      	cmp	r2, #1
 800cd3e:	dc6e      	bgt.n	800ce1e <_dtoa_r+0x7ce>
 800cd40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cd42:	2a00      	cmp	r2, #0
 800cd44:	d067      	beq.n	800ce16 <_dtoa_r+0x7c6>
 800cd46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd4a:	9f07      	ldr	r7, [sp, #28]
 800cd4c:	9d05      	ldr	r5, [sp, #20]
 800cd4e:	9a05      	ldr	r2, [sp, #20]
 800cd50:	2101      	movs	r1, #1
 800cd52:	441a      	add	r2, r3
 800cd54:	4620      	mov	r0, r4
 800cd56:	9205      	str	r2, [sp, #20]
 800cd58:	4498      	add	r8, r3
 800cd5a:	f000 fb15 	bl	800d388 <__i2b>
 800cd5e:	4606      	mov	r6, r0
 800cd60:	2d00      	cmp	r5, #0
 800cd62:	dd0c      	ble.n	800cd7e <_dtoa_r+0x72e>
 800cd64:	f1b8 0f00 	cmp.w	r8, #0
 800cd68:	dd09      	ble.n	800cd7e <_dtoa_r+0x72e>
 800cd6a:	4545      	cmp	r5, r8
 800cd6c:	9a05      	ldr	r2, [sp, #20]
 800cd6e:	462b      	mov	r3, r5
 800cd70:	bfa8      	it	ge
 800cd72:	4643      	movge	r3, r8
 800cd74:	1ad2      	subs	r2, r2, r3
 800cd76:	9205      	str	r2, [sp, #20]
 800cd78:	1aed      	subs	r5, r5, r3
 800cd7a:	eba8 0803 	sub.w	r8, r8, r3
 800cd7e:	9b07      	ldr	r3, [sp, #28]
 800cd80:	b1eb      	cbz	r3, 800cdbe <_dtoa_r+0x76e>
 800cd82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d067      	beq.n	800ce58 <_dtoa_r+0x808>
 800cd88:	b18f      	cbz	r7, 800cdae <_dtoa_r+0x75e>
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	463a      	mov	r2, r7
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f000 fb9a 	bl	800d4c8 <__pow5mult>
 800cd94:	9a04      	ldr	r2, [sp, #16]
 800cd96:	4601      	mov	r1, r0
 800cd98:	4606      	mov	r6, r0
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f000 fafd 	bl	800d39a <__multiply>
 800cda0:	9904      	ldr	r1, [sp, #16]
 800cda2:	9008      	str	r0, [sp, #32]
 800cda4:	4620      	mov	r0, r4
 800cda6:	f000 fa4f 	bl	800d248 <_Bfree>
 800cdaa:	9b08      	ldr	r3, [sp, #32]
 800cdac:	9304      	str	r3, [sp, #16]
 800cdae:	9b07      	ldr	r3, [sp, #28]
 800cdb0:	1bda      	subs	r2, r3, r7
 800cdb2:	d004      	beq.n	800cdbe <_dtoa_r+0x76e>
 800cdb4:	9904      	ldr	r1, [sp, #16]
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f000 fb86 	bl	800d4c8 <__pow5mult>
 800cdbc:	9004      	str	r0, [sp, #16]
 800cdbe:	2101      	movs	r1, #1
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 fae1 	bl	800d388 <__i2b>
 800cdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdc8:	4607      	mov	r7, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f000 81d0 	beq.w	800d170 <_dtoa_r+0xb20>
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 fb77 	bl	800d4c8 <__pow5mult>
 800cdda:	9b06      	ldr	r3, [sp, #24]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	4607      	mov	r7, r0
 800cde0:	dc40      	bgt.n	800ce64 <_dtoa_r+0x814>
 800cde2:	9b00      	ldr	r3, [sp, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d139      	bne.n	800ce5c <_dtoa_r+0x80c>
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d136      	bne.n	800ce60 <_dtoa_r+0x810>
 800cdf2:	9b01      	ldr	r3, [sp, #4]
 800cdf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cdf8:	0d1b      	lsrs	r3, r3, #20
 800cdfa:	051b      	lsls	r3, r3, #20
 800cdfc:	b12b      	cbz	r3, 800ce0a <_dtoa_r+0x7ba>
 800cdfe:	9b05      	ldr	r3, [sp, #20]
 800ce00:	3301      	adds	r3, #1
 800ce02:	9305      	str	r3, [sp, #20]
 800ce04:	f108 0801 	add.w	r8, r8, #1
 800ce08:	2301      	movs	r3, #1
 800ce0a:	9307      	str	r3, [sp, #28]
 800ce0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d12a      	bne.n	800ce68 <_dtoa_r+0x818>
 800ce12:	2001      	movs	r0, #1
 800ce14:	e030      	b.n	800ce78 <_dtoa_r+0x828>
 800ce16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce1c:	e795      	b.n	800cd4a <_dtoa_r+0x6fa>
 800ce1e:	9b07      	ldr	r3, [sp, #28]
 800ce20:	f109 37ff 	add.w	r7, r9, #4294967295
 800ce24:	42bb      	cmp	r3, r7
 800ce26:	bfbf      	itttt	lt
 800ce28:	9b07      	ldrlt	r3, [sp, #28]
 800ce2a:	9707      	strlt	r7, [sp, #28]
 800ce2c:	1afa      	sublt	r2, r7, r3
 800ce2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ce30:	bfbb      	ittet	lt
 800ce32:	189b      	addlt	r3, r3, r2
 800ce34:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ce36:	1bdf      	subge	r7, r3, r7
 800ce38:	2700      	movlt	r7, #0
 800ce3a:	f1b9 0f00 	cmp.w	r9, #0
 800ce3e:	bfb5      	itete	lt
 800ce40:	9b05      	ldrlt	r3, [sp, #20]
 800ce42:	9d05      	ldrge	r5, [sp, #20]
 800ce44:	eba3 0509 	sublt.w	r5, r3, r9
 800ce48:	464b      	movge	r3, r9
 800ce4a:	bfb8      	it	lt
 800ce4c:	2300      	movlt	r3, #0
 800ce4e:	e77e      	b.n	800cd4e <_dtoa_r+0x6fe>
 800ce50:	9f07      	ldr	r7, [sp, #28]
 800ce52:	9d05      	ldr	r5, [sp, #20]
 800ce54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ce56:	e783      	b.n	800cd60 <_dtoa_r+0x710>
 800ce58:	9a07      	ldr	r2, [sp, #28]
 800ce5a:	e7ab      	b.n	800cdb4 <_dtoa_r+0x764>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e7d4      	b.n	800ce0a <_dtoa_r+0x7ba>
 800ce60:	9b00      	ldr	r3, [sp, #0]
 800ce62:	e7d2      	b.n	800ce0a <_dtoa_r+0x7ba>
 800ce64:	2300      	movs	r3, #0
 800ce66:	9307      	str	r3, [sp, #28]
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ce6e:	6918      	ldr	r0, [r3, #16]
 800ce70:	f000 fa3c 	bl	800d2ec <__hi0bits>
 800ce74:	f1c0 0020 	rsb	r0, r0, #32
 800ce78:	4440      	add	r0, r8
 800ce7a:	f010 001f 	ands.w	r0, r0, #31
 800ce7e:	d047      	beq.n	800cf10 <_dtoa_r+0x8c0>
 800ce80:	f1c0 0320 	rsb	r3, r0, #32
 800ce84:	2b04      	cmp	r3, #4
 800ce86:	dd3b      	ble.n	800cf00 <_dtoa_r+0x8b0>
 800ce88:	9b05      	ldr	r3, [sp, #20]
 800ce8a:	f1c0 001c 	rsb	r0, r0, #28
 800ce8e:	4403      	add	r3, r0
 800ce90:	9305      	str	r3, [sp, #20]
 800ce92:	4405      	add	r5, r0
 800ce94:	4480      	add	r8, r0
 800ce96:	9b05      	ldr	r3, [sp, #20]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	dd05      	ble.n	800cea8 <_dtoa_r+0x858>
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	9904      	ldr	r1, [sp, #16]
 800cea0:	4620      	mov	r0, r4
 800cea2:	f000 fb5f 	bl	800d564 <__lshift>
 800cea6:	9004      	str	r0, [sp, #16]
 800cea8:	f1b8 0f00 	cmp.w	r8, #0
 800ceac:	dd05      	ble.n	800ceba <_dtoa_r+0x86a>
 800ceae:	4639      	mov	r1, r7
 800ceb0:	4642      	mov	r2, r8
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 fb56 	bl	800d564 <__lshift>
 800ceb8:	4607      	mov	r7, r0
 800ceba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cebc:	b353      	cbz	r3, 800cf14 <_dtoa_r+0x8c4>
 800cebe:	4639      	mov	r1, r7
 800cec0:	9804      	ldr	r0, [sp, #16]
 800cec2:	f000 fba3 	bl	800d60c <__mcmp>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	da24      	bge.n	800cf14 <_dtoa_r+0x8c4>
 800ceca:	2300      	movs	r3, #0
 800cecc:	220a      	movs	r2, #10
 800cece:	9904      	ldr	r1, [sp, #16]
 800ced0:	4620      	mov	r0, r4
 800ced2:	f000 f9d0 	bl	800d276 <__multadd>
 800ced6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced8:	9004      	str	r0, [sp, #16]
 800ceda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 814d 	beq.w	800d17e <_dtoa_r+0xb2e>
 800cee4:	2300      	movs	r3, #0
 800cee6:	4631      	mov	r1, r6
 800cee8:	220a      	movs	r2, #10
 800ceea:	4620      	mov	r0, r4
 800ceec:	f000 f9c3 	bl	800d276 <__multadd>
 800cef0:	9b02      	ldr	r3, [sp, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	4606      	mov	r6, r0
 800cef6:	dc4f      	bgt.n	800cf98 <_dtoa_r+0x948>
 800cef8:	9b06      	ldr	r3, [sp, #24]
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	dd4c      	ble.n	800cf98 <_dtoa_r+0x948>
 800cefe:	e011      	b.n	800cf24 <_dtoa_r+0x8d4>
 800cf00:	d0c9      	beq.n	800ce96 <_dtoa_r+0x846>
 800cf02:	9a05      	ldr	r2, [sp, #20]
 800cf04:	331c      	adds	r3, #28
 800cf06:	441a      	add	r2, r3
 800cf08:	9205      	str	r2, [sp, #20]
 800cf0a:	441d      	add	r5, r3
 800cf0c:	4498      	add	r8, r3
 800cf0e:	e7c2      	b.n	800ce96 <_dtoa_r+0x846>
 800cf10:	4603      	mov	r3, r0
 800cf12:	e7f6      	b.n	800cf02 <_dtoa_r+0x8b2>
 800cf14:	f1b9 0f00 	cmp.w	r9, #0
 800cf18:	dc38      	bgt.n	800cf8c <_dtoa_r+0x93c>
 800cf1a:	9b06      	ldr	r3, [sp, #24]
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	dd35      	ble.n	800cf8c <_dtoa_r+0x93c>
 800cf20:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf24:	9b02      	ldr	r3, [sp, #8]
 800cf26:	b963      	cbnz	r3, 800cf42 <_dtoa_r+0x8f2>
 800cf28:	4639      	mov	r1, r7
 800cf2a:	2205      	movs	r2, #5
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 f9a2 	bl	800d276 <__multadd>
 800cf32:	4601      	mov	r1, r0
 800cf34:	4607      	mov	r7, r0
 800cf36:	9804      	ldr	r0, [sp, #16]
 800cf38:	f000 fb68 	bl	800d60c <__mcmp>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	f73f adcc 	bgt.w	800cada <_dtoa_r+0x48a>
 800cf42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf44:	465d      	mov	r5, fp
 800cf46:	ea6f 0a03 	mvn.w	sl, r3
 800cf4a:	f04f 0900 	mov.w	r9, #0
 800cf4e:	4639      	mov	r1, r7
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 f979 	bl	800d248 <_Bfree>
 800cf56:	2e00      	cmp	r6, #0
 800cf58:	f43f aeb7 	beq.w	800ccca <_dtoa_r+0x67a>
 800cf5c:	f1b9 0f00 	cmp.w	r9, #0
 800cf60:	d005      	beq.n	800cf6e <_dtoa_r+0x91e>
 800cf62:	45b1      	cmp	r9, r6
 800cf64:	d003      	beq.n	800cf6e <_dtoa_r+0x91e>
 800cf66:	4649      	mov	r1, r9
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f000 f96d 	bl	800d248 <_Bfree>
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4620      	mov	r0, r4
 800cf72:	f000 f969 	bl	800d248 <_Bfree>
 800cf76:	e6a8      	b.n	800ccca <_dtoa_r+0x67a>
 800cf78:	2700      	movs	r7, #0
 800cf7a:	463e      	mov	r6, r7
 800cf7c:	e7e1      	b.n	800cf42 <_dtoa_r+0x8f2>
 800cf7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cf82:	463e      	mov	r6, r7
 800cf84:	e5a9      	b.n	800cada <_dtoa_r+0x48a>
 800cf86:	bf00      	nop
 800cf88:	40240000 	.word	0x40240000
 800cf8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f000 80fa 	beq.w	800d18c <_dtoa_r+0xb3c>
 800cf98:	2d00      	cmp	r5, #0
 800cf9a:	dd05      	ble.n	800cfa8 <_dtoa_r+0x958>
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	462a      	mov	r2, r5
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f000 fadf 	bl	800d564 <__lshift>
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	9b07      	ldr	r3, [sp, #28]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d04c      	beq.n	800d048 <_dtoa_r+0x9f8>
 800cfae:	6871      	ldr	r1, [r6, #4]
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f000 f915 	bl	800d1e0 <_Balloc>
 800cfb6:	6932      	ldr	r2, [r6, #16]
 800cfb8:	3202      	adds	r2, #2
 800cfba:	4605      	mov	r5, r0
 800cfbc:	0092      	lsls	r2, r2, #2
 800cfbe:	f106 010c 	add.w	r1, r6, #12
 800cfc2:	300c      	adds	r0, #12
 800cfc4:	f7fe fea2 	bl	800bd0c <memcpy>
 800cfc8:	2201      	movs	r2, #1
 800cfca:	4629      	mov	r1, r5
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f000 fac9 	bl	800d564 <__lshift>
 800cfd2:	9b00      	ldr	r3, [sp, #0]
 800cfd4:	f8cd b014 	str.w	fp, [sp, #20]
 800cfd8:	f003 0301 	and.w	r3, r3, #1
 800cfdc:	46b1      	mov	r9, r6
 800cfde:	9307      	str	r3, [sp, #28]
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	9804      	ldr	r0, [sp, #16]
 800cfe6:	f7ff faa7 	bl	800c538 <quorem>
 800cfea:	4649      	mov	r1, r9
 800cfec:	4605      	mov	r5, r0
 800cfee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cff2:	9804      	ldr	r0, [sp, #16]
 800cff4:	f000 fb0a 	bl	800d60c <__mcmp>
 800cff8:	4632      	mov	r2, r6
 800cffa:	9000      	str	r0, [sp, #0]
 800cffc:	4639      	mov	r1, r7
 800cffe:	4620      	mov	r0, r4
 800d000:	f000 fb1e 	bl	800d640 <__mdiff>
 800d004:	68c3      	ldr	r3, [r0, #12]
 800d006:	4602      	mov	r2, r0
 800d008:	bb03      	cbnz	r3, 800d04c <_dtoa_r+0x9fc>
 800d00a:	4601      	mov	r1, r0
 800d00c:	9008      	str	r0, [sp, #32]
 800d00e:	9804      	ldr	r0, [sp, #16]
 800d010:	f000 fafc 	bl	800d60c <__mcmp>
 800d014:	9a08      	ldr	r2, [sp, #32]
 800d016:	4603      	mov	r3, r0
 800d018:	4611      	mov	r1, r2
 800d01a:	4620      	mov	r0, r4
 800d01c:	9308      	str	r3, [sp, #32]
 800d01e:	f000 f913 	bl	800d248 <_Bfree>
 800d022:	9b08      	ldr	r3, [sp, #32]
 800d024:	b9a3      	cbnz	r3, 800d050 <_dtoa_r+0xa00>
 800d026:	9a06      	ldr	r2, [sp, #24]
 800d028:	b992      	cbnz	r2, 800d050 <_dtoa_r+0xa00>
 800d02a:	9a07      	ldr	r2, [sp, #28]
 800d02c:	b982      	cbnz	r2, 800d050 <_dtoa_r+0xa00>
 800d02e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d032:	d029      	beq.n	800d088 <_dtoa_r+0xa38>
 800d034:	9b00      	ldr	r3, [sp, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	dd01      	ble.n	800d03e <_dtoa_r+0x9ee>
 800d03a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d03e:	9b05      	ldr	r3, [sp, #20]
 800d040:	1c5d      	adds	r5, r3, #1
 800d042:	f883 8000 	strb.w	r8, [r3]
 800d046:	e782      	b.n	800cf4e <_dtoa_r+0x8fe>
 800d048:	4630      	mov	r0, r6
 800d04a:	e7c2      	b.n	800cfd2 <_dtoa_r+0x982>
 800d04c:	2301      	movs	r3, #1
 800d04e:	e7e3      	b.n	800d018 <_dtoa_r+0x9c8>
 800d050:	9a00      	ldr	r2, [sp, #0]
 800d052:	2a00      	cmp	r2, #0
 800d054:	db04      	blt.n	800d060 <_dtoa_r+0xa10>
 800d056:	d125      	bne.n	800d0a4 <_dtoa_r+0xa54>
 800d058:	9a06      	ldr	r2, [sp, #24]
 800d05a:	bb1a      	cbnz	r2, 800d0a4 <_dtoa_r+0xa54>
 800d05c:	9a07      	ldr	r2, [sp, #28]
 800d05e:	bb0a      	cbnz	r2, 800d0a4 <_dtoa_r+0xa54>
 800d060:	2b00      	cmp	r3, #0
 800d062:	ddec      	ble.n	800d03e <_dtoa_r+0x9ee>
 800d064:	2201      	movs	r2, #1
 800d066:	9904      	ldr	r1, [sp, #16]
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 fa7b 	bl	800d564 <__lshift>
 800d06e:	4639      	mov	r1, r7
 800d070:	9004      	str	r0, [sp, #16]
 800d072:	f000 facb 	bl	800d60c <__mcmp>
 800d076:	2800      	cmp	r0, #0
 800d078:	dc03      	bgt.n	800d082 <_dtoa_r+0xa32>
 800d07a:	d1e0      	bne.n	800d03e <_dtoa_r+0x9ee>
 800d07c:	f018 0f01 	tst.w	r8, #1
 800d080:	d0dd      	beq.n	800d03e <_dtoa_r+0x9ee>
 800d082:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d086:	d1d8      	bne.n	800d03a <_dtoa_r+0x9ea>
 800d088:	9b05      	ldr	r3, [sp, #20]
 800d08a:	9a05      	ldr	r2, [sp, #20]
 800d08c:	1c5d      	adds	r5, r3, #1
 800d08e:	2339      	movs	r3, #57	; 0x39
 800d090:	7013      	strb	r3, [r2, #0]
 800d092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d096:	2b39      	cmp	r3, #57	; 0x39
 800d098:	f105 32ff 	add.w	r2, r5, #4294967295
 800d09c:	d04f      	beq.n	800d13e <_dtoa_r+0xaee>
 800d09e:	3301      	adds	r3, #1
 800d0a0:	7013      	strb	r3, [r2, #0]
 800d0a2:	e754      	b.n	800cf4e <_dtoa_r+0x8fe>
 800d0a4:	9a05      	ldr	r2, [sp, #20]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f102 0501 	add.w	r5, r2, #1
 800d0ac:	dd06      	ble.n	800d0bc <_dtoa_r+0xa6c>
 800d0ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d0b2:	d0e9      	beq.n	800d088 <_dtoa_r+0xa38>
 800d0b4:	f108 0801 	add.w	r8, r8, #1
 800d0b8:	9b05      	ldr	r3, [sp, #20]
 800d0ba:	e7c2      	b.n	800d042 <_dtoa_r+0x9f2>
 800d0bc:	9a02      	ldr	r2, [sp, #8]
 800d0be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d0c2:	eba5 030b 	sub.w	r3, r5, fp
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d021      	beq.n	800d10e <_dtoa_r+0xabe>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	220a      	movs	r2, #10
 800d0ce:	9904      	ldr	r1, [sp, #16]
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f000 f8d0 	bl	800d276 <__multadd>
 800d0d6:	45b1      	cmp	r9, r6
 800d0d8:	9004      	str	r0, [sp, #16]
 800d0da:	f04f 0300 	mov.w	r3, #0
 800d0de:	f04f 020a 	mov.w	r2, #10
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	d105      	bne.n	800d0f4 <_dtoa_r+0xaa4>
 800d0e8:	f000 f8c5 	bl	800d276 <__multadd>
 800d0ec:	4681      	mov	r9, r0
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	9505      	str	r5, [sp, #20]
 800d0f2:	e776      	b.n	800cfe2 <_dtoa_r+0x992>
 800d0f4:	f000 f8bf 	bl	800d276 <__multadd>
 800d0f8:	4631      	mov	r1, r6
 800d0fa:	4681      	mov	r9, r0
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	220a      	movs	r2, #10
 800d100:	4620      	mov	r0, r4
 800d102:	f000 f8b8 	bl	800d276 <__multadd>
 800d106:	4606      	mov	r6, r0
 800d108:	e7f2      	b.n	800d0f0 <_dtoa_r+0xaa0>
 800d10a:	f04f 0900 	mov.w	r9, #0
 800d10e:	2201      	movs	r2, #1
 800d110:	9904      	ldr	r1, [sp, #16]
 800d112:	4620      	mov	r0, r4
 800d114:	f000 fa26 	bl	800d564 <__lshift>
 800d118:	4639      	mov	r1, r7
 800d11a:	9004      	str	r0, [sp, #16]
 800d11c:	f000 fa76 	bl	800d60c <__mcmp>
 800d120:	2800      	cmp	r0, #0
 800d122:	dcb6      	bgt.n	800d092 <_dtoa_r+0xa42>
 800d124:	d102      	bne.n	800d12c <_dtoa_r+0xadc>
 800d126:	f018 0f01 	tst.w	r8, #1
 800d12a:	d1b2      	bne.n	800d092 <_dtoa_r+0xa42>
 800d12c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d130:	2b30      	cmp	r3, #48	; 0x30
 800d132:	f105 32ff 	add.w	r2, r5, #4294967295
 800d136:	f47f af0a 	bne.w	800cf4e <_dtoa_r+0x8fe>
 800d13a:	4615      	mov	r5, r2
 800d13c:	e7f6      	b.n	800d12c <_dtoa_r+0xadc>
 800d13e:	4593      	cmp	fp, r2
 800d140:	d105      	bne.n	800d14e <_dtoa_r+0xafe>
 800d142:	2331      	movs	r3, #49	; 0x31
 800d144:	f10a 0a01 	add.w	sl, sl, #1
 800d148:	f88b 3000 	strb.w	r3, [fp]
 800d14c:	e6ff      	b.n	800cf4e <_dtoa_r+0x8fe>
 800d14e:	4615      	mov	r5, r2
 800d150:	e79f      	b.n	800d092 <_dtoa_r+0xa42>
 800d152:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d1b8 <_dtoa_r+0xb68>
 800d156:	e007      	b.n	800d168 <_dtoa_r+0xb18>
 800d158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d15a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d1bc <_dtoa_r+0xb6c>
 800d15e:	b11b      	cbz	r3, 800d168 <_dtoa_r+0xb18>
 800d160:	f10b 0308 	add.w	r3, fp, #8
 800d164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	4658      	mov	r0, fp
 800d16a:	b017      	add	sp, #92	; 0x5c
 800d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d170:	9b06      	ldr	r3, [sp, #24]
 800d172:	2b01      	cmp	r3, #1
 800d174:	f77f ae35 	ble.w	800cde2 <_dtoa_r+0x792>
 800d178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d17a:	9307      	str	r3, [sp, #28]
 800d17c:	e649      	b.n	800ce12 <_dtoa_r+0x7c2>
 800d17e:	9b02      	ldr	r3, [sp, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	dc03      	bgt.n	800d18c <_dtoa_r+0xb3c>
 800d184:	9b06      	ldr	r3, [sp, #24]
 800d186:	2b02      	cmp	r3, #2
 800d188:	f73f aecc 	bgt.w	800cf24 <_dtoa_r+0x8d4>
 800d18c:	465d      	mov	r5, fp
 800d18e:	4639      	mov	r1, r7
 800d190:	9804      	ldr	r0, [sp, #16]
 800d192:	f7ff f9d1 	bl	800c538 <quorem>
 800d196:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d19a:	f805 8b01 	strb.w	r8, [r5], #1
 800d19e:	9a02      	ldr	r2, [sp, #8]
 800d1a0:	eba5 030b 	sub.w	r3, r5, fp
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	ddb0      	ble.n	800d10a <_dtoa_r+0xaba>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	220a      	movs	r2, #10
 800d1ac:	9904      	ldr	r1, [sp, #16]
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f000 f861 	bl	800d276 <__multadd>
 800d1b4:	9004      	str	r0, [sp, #16]
 800d1b6:	e7ea      	b.n	800d18e <_dtoa_r+0xb3e>
 800d1b8:	080384c0 	.word	0x080384c0
 800d1bc:	080384c2 	.word	0x080384c2

0800d1c0 <_localeconv_r>:
 800d1c0:	4b04      	ldr	r3, [pc, #16]	; (800d1d4 <_localeconv_r+0x14>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6a18      	ldr	r0, [r3, #32]
 800d1c6:	4b04      	ldr	r3, [pc, #16]	; (800d1d8 <_localeconv_r+0x18>)
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	bf08      	it	eq
 800d1cc:	4618      	moveq	r0, r3
 800d1ce:	30f0      	adds	r0, #240	; 0xf0
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	20000030 	.word	0x20000030
 800d1d8:	20000094 	.word	0x20000094

0800d1dc <__malloc_lock>:
 800d1dc:	4770      	bx	lr

0800d1de <__malloc_unlock>:
 800d1de:	4770      	bx	lr

0800d1e0 <_Balloc>:
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	460e      	mov	r6, r1
 800d1e8:	b93d      	cbnz	r5, 800d1fa <_Balloc+0x1a>
 800d1ea:	2010      	movs	r0, #16
 800d1ec:	f7fe fd7e 	bl	800bcec <malloc>
 800d1f0:	6260      	str	r0, [r4, #36]	; 0x24
 800d1f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1f6:	6005      	str	r5, [r0, #0]
 800d1f8:	60c5      	str	r5, [r0, #12]
 800d1fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d1fc:	68eb      	ldr	r3, [r5, #12]
 800d1fe:	b183      	cbz	r3, 800d222 <_Balloc+0x42>
 800d200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d208:	b9b8      	cbnz	r0, 800d23a <_Balloc+0x5a>
 800d20a:	2101      	movs	r1, #1
 800d20c:	fa01 f506 	lsl.w	r5, r1, r6
 800d210:	1d6a      	adds	r2, r5, #5
 800d212:	0092      	lsls	r2, r2, #2
 800d214:	4620      	mov	r0, r4
 800d216:	f000 fabf 	bl	800d798 <_calloc_r>
 800d21a:	b160      	cbz	r0, 800d236 <_Balloc+0x56>
 800d21c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d220:	e00e      	b.n	800d240 <_Balloc+0x60>
 800d222:	2221      	movs	r2, #33	; 0x21
 800d224:	2104      	movs	r1, #4
 800d226:	4620      	mov	r0, r4
 800d228:	f000 fab6 	bl	800d798 <_calloc_r>
 800d22c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d22e:	60e8      	str	r0, [r5, #12]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1e4      	bne.n	800d200 <_Balloc+0x20>
 800d236:	2000      	movs	r0, #0
 800d238:	bd70      	pop	{r4, r5, r6, pc}
 800d23a:	6802      	ldr	r2, [r0, #0]
 800d23c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d240:	2300      	movs	r3, #0
 800d242:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d246:	e7f7      	b.n	800d238 <_Balloc+0x58>

0800d248 <_Bfree>:
 800d248:	b570      	push	{r4, r5, r6, lr}
 800d24a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d24c:	4606      	mov	r6, r0
 800d24e:	460d      	mov	r5, r1
 800d250:	b93c      	cbnz	r4, 800d262 <_Bfree+0x1a>
 800d252:	2010      	movs	r0, #16
 800d254:	f7fe fd4a 	bl	800bcec <malloc>
 800d258:	6270      	str	r0, [r6, #36]	; 0x24
 800d25a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d25e:	6004      	str	r4, [r0, #0]
 800d260:	60c4      	str	r4, [r0, #12]
 800d262:	b13d      	cbz	r5, 800d274 <_Bfree+0x2c>
 800d264:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d266:	686a      	ldr	r2, [r5, #4]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d26e:	6029      	str	r1, [r5, #0]
 800d270:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d274:	bd70      	pop	{r4, r5, r6, pc}

0800d276 <__multadd>:
 800d276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d27a:	690d      	ldr	r5, [r1, #16]
 800d27c:	461f      	mov	r7, r3
 800d27e:	4606      	mov	r6, r0
 800d280:	460c      	mov	r4, r1
 800d282:	f101 0c14 	add.w	ip, r1, #20
 800d286:	2300      	movs	r3, #0
 800d288:	f8dc 0000 	ldr.w	r0, [ip]
 800d28c:	b281      	uxth	r1, r0
 800d28e:	fb02 7101 	mla	r1, r2, r1, r7
 800d292:	0c0f      	lsrs	r7, r1, #16
 800d294:	0c00      	lsrs	r0, r0, #16
 800d296:	fb02 7000 	mla	r0, r2, r0, r7
 800d29a:	b289      	uxth	r1, r1
 800d29c:	3301      	adds	r3, #1
 800d29e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d2a2:	429d      	cmp	r5, r3
 800d2a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d2a8:	f84c 1b04 	str.w	r1, [ip], #4
 800d2ac:	dcec      	bgt.n	800d288 <__multadd+0x12>
 800d2ae:	b1d7      	cbz	r7, 800d2e6 <__multadd+0x70>
 800d2b0:	68a3      	ldr	r3, [r4, #8]
 800d2b2:	42ab      	cmp	r3, r5
 800d2b4:	dc12      	bgt.n	800d2dc <__multadd+0x66>
 800d2b6:	6861      	ldr	r1, [r4, #4]
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	3101      	adds	r1, #1
 800d2bc:	f7ff ff90 	bl	800d1e0 <_Balloc>
 800d2c0:	6922      	ldr	r2, [r4, #16]
 800d2c2:	3202      	adds	r2, #2
 800d2c4:	f104 010c 	add.w	r1, r4, #12
 800d2c8:	4680      	mov	r8, r0
 800d2ca:	0092      	lsls	r2, r2, #2
 800d2cc:	300c      	adds	r0, #12
 800d2ce:	f7fe fd1d 	bl	800bd0c <memcpy>
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	f7ff ffb7 	bl	800d248 <_Bfree>
 800d2da:	4644      	mov	r4, r8
 800d2dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2e0:	3501      	adds	r5, #1
 800d2e2:	615f      	str	r7, [r3, #20]
 800d2e4:	6125      	str	r5, [r4, #16]
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2ec <__hi0bits>:
 800d2ec:	0c02      	lsrs	r2, r0, #16
 800d2ee:	0412      	lsls	r2, r2, #16
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	b9b2      	cbnz	r2, 800d322 <__hi0bits+0x36>
 800d2f4:	0403      	lsls	r3, r0, #16
 800d2f6:	2010      	movs	r0, #16
 800d2f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d2fc:	bf04      	itt	eq
 800d2fe:	021b      	lsleq	r3, r3, #8
 800d300:	3008      	addeq	r0, #8
 800d302:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d306:	bf04      	itt	eq
 800d308:	011b      	lsleq	r3, r3, #4
 800d30a:	3004      	addeq	r0, #4
 800d30c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d310:	bf04      	itt	eq
 800d312:	009b      	lsleq	r3, r3, #2
 800d314:	3002      	addeq	r0, #2
 800d316:	2b00      	cmp	r3, #0
 800d318:	db06      	blt.n	800d328 <__hi0bits+0x3c>
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	d503      	bpl.n	800d326 <__hi0bits+0x3a>
 800d31e:	3001      	adds	r0, #1
 800d320:	4770      	bx	lr
 800d322:	2000      	movs	r0, #0
 800d324:	e7e8      	b.n	800d2f8 <__hi0bits+0xc>
 800d326:	2020      	movs	r0, #32
 800d328:	4770      	bx	lr

0800d32a <__lo0bits>:
 800d32a:	6803      	ldr	r3, [r0, #0]
 800d32c:	f013 0207 	ands.w	r2, r3, #7
 800d330:	4601      	mov	r1, r0
 800d332:	d00b      	beq.n	800d34c <__lo0bits+0x22>
 800d334:	07da      	lsls	r2, r3, #31
 800d336:	d423      	bmi.n	800d380 <__lo0bits+0x56>
 800d338:	0798      	lsls	r0, r3, #30
 800d33a:	bf49      	itett	mi
 800d33c:	085b      	lsrmi	r3, r3, #1
 800d33e:	089b      	lsrpl	r3, r3, #2
 800d340:	2001      	movmi	r0, #1
 800d342:	600b      	strmi	r3, [r1, #0]
 800d344:	bf5c      	itt	pl
 800d346:	600b      	strpl	r3, [r1, #0]
 800d348:	2002      	movpl	r0, #2
 800d34a:	4770      	bx	lr
 800d34c:	b298      	uxth	r0, r3
 800d34e:	b9a8      	cbnz	r0, 800d37c <__lo0bits+0x52>
 800d350:	0c1b      	lsrs	r3, r3, #16
 800d352:	2010      	movs	r0, #16
 800d354:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d358:	bf04      	itt	eq
 800d35a:	0a1b      	lsreq	r3, r3, #8
 800d35c:	3008      	addeq	r0, #8
 800d35e:	071a      	lsls	r2, r3, #28
 800d360:	bf04      	itt	eq
 800d362:	091b      	lsreq	r3, r3, #4
 800d364:	3004      	addeq	r0, #4
 800d366:	079a      	lsls	r2, r3, #30
 800d368:	bf04      	itt	eq
 800d36a:	089b      	lsreq	r3, r3, #2
 800d36c:	3002      	addeq	r0, #2
 800d36e:	07da      	lsls	r2, r3, #31
 800d370:	d402      	bmi.n	800d378 <__lo0bits+0x4e>
 800d372:	085b      	lsrs	r3, r3, #1
 800d374:	d006      	beq.n	800d384 <__lo0bits+0x5a>
 800d376:	3001      	adds	r0, #1
 800d378:	600b      	str	r3, [r1, #0]
 800d37a:	4770      	bx	lr
 800d37c:	4610      	mov	r0, r2
 800d37e:	e7e9      	b.n	800d354 <__lo0bits+0x2a>
 800d380:	2000      	movs	r0, #0
 800d382:	4770      	bx	lr
 800d384:	2020      	movs	r0, #32
 800d386:	4770      	bx	lr

0800d388 <__i2b>:
 800d388:	b510      	push	{r4, lr}
 800d38a:	460c      	mov	r4, r1
 800d38c:	2101      	movs	r1, #1
 800d38e:	f7ff ff27 	bl	800d1e0 <_Balloc>
 800d392:	2201      	movs	r2, #1
 800d394:	6144      	str	r4, [r0, #20]
 800d396:	6102      	str	r2, [r0, #16]
 800d398:	bd10      	pop	{r4, pc}

0800d39a <__multiply>:
 800d39a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39e:	4614      	mov	r4, r2
 800d3a0:	690a      	ldr	r2, [r1, #16]
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	bfb8      	it	lt
 800d3a8:	460b      	movlt	r3, r1
 800d3aa:	4688      	mov	r8, r1
 800d3ac:	bfbc      	itt	lt
 800d3ae:	46a0      	movlt	r8, r4
 800d3b0:	461c      	movlt	r4, r3
 800d3b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d3b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d3ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3c2:	eb07 0609 	add.w	r6, r7, r9
 800d3c6:	42b3      	cmp	r3, r6
 800d3c8:	bfb8      	it	lt
 800d3ca:	3101      	addlt	r1, #1
 800d3cc:	f7ff ff08 	bl	800d1e0 <_Balloc>
 800d3d0:	f100 0514 	add.w	r5, r0, #20
 800d3d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d3d8:	462b      	mov	r3, r5
 800d3da:	2200      	movs	r2, #0
 800d3dc:	4573      	cmp	r3, lr
 800d3de:	d316      	bcc.n	800d40e <__multiply+0x74>
 800d3e0:	f104 0214 	add.w	r2, r4, #20
 800d3e4:	f108 0114 	add.w	r1, r8, #20
 800d3e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d3ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	9b00      	ldr	r3, [sp, #0]
 800d3f4:	9201      	str	r2, [sp, #4]
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d80c      	bhi.n	800d414 <__multiply+0x7a>
 800d3fa:	2e00      	cmp	r6, #0
 800d3fc:	dd03      	ble.n	800d406 <__multiply+0x6c>
 800d3fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d402:	2b00      	cmp	r3, #0
 800d404:	d05d      	beq.n	800d4c2 <__multiply+0x128>
 800d406:	6106      	str	r6, [r0, #16]
 800d408:	b003      	add	sp, #12
 800d40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40e:	f843 2b04 	str.w	r2, [r3], #4
 800d412:	e7e3      	b.n	800d3dc <__multiply+0x42>
 800d414:	f8b2 b000 	ldrh.w	fp, [r2]
 800d418:	f1bb 0f00 	cmp.w	fp, #0
 800d41c:	d023      	beq.n	800d466 <__multiply+0xcc>
 800d41e:	4689      	mov	r9, r1
 800d420:	46ac      	mov	ip, r5
 800d422:	f04f 0800 	mov.w	r8, #0
 800d426:	f859 4b04 	ldr.w	r4, [r9], #4
 800d42a:	f8dc a000 	ldr.w	sl, [ip]
 800d42e:	b2a3      	uxth	r3, r4
 800d430:	fa1f fa8a 	uxth.w	sl, sl
 800d434:	fb0b a303 	mla	r3, fp, r3, sl
 800d438:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d43c:	f8dc 4000 	ldr.w	r4, [ip]
 800d440:	4443      	add	r3, r8
 800d442:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d446:	fb0b 840a 	mla	r4, fp, sl, r8
 800d44a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d44e:	46e2      	mov	sl, ip
 800d450:	b29b      	uxth	r3, r3
 800d452:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d456:	454f      	cmp	r7, r9
 800d458:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d45c:	f84a 3b04 	str.w	r3, [sl], #4
 800d460:	d82b      	bhi.n	800d4ba <__multiply+0x120>
 800d462:	f8cc 8004 	str.w	r8, [ip, #4]
 800d466:	9b01      	ldr	r3, [sp, #4]
 800d468:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d46c:	3204      	adds	r2, #4
 800d46e:	f1ba 0f00 	cmp.w	sl, #0
 800d472:	d020      	beq.n	800d4b6 <__multiply+0x11c>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	4689      	mov	r9, r1
 800d478:	46a8      	mov	r8, r5
 800d47a:	f04f 0b00 	mov.w	fp, #0
 800d47e:	f8b9 c000 	ldrh.w	ip, [r9]
 800d482:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d486:	fb0a 440c 	mla	r4, sl, ip, r4
 800d48a:	445c      	add	r4, fp
 800d48c:	46c4      	mov	ip, r8
 800d48e:	b29b      	uxth	r3, r3
 800d490:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d494:	f84c 3b04 	str.w	r3, [ip], #4
 800d498:	f859 3b04 	ldr.w	r3, [r9], #4
 800d49c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d4a0:	0c1b      	lsrs	r3, r3, #16
 800d4a2:	fb0a b303 	mla	r3, sl, r3, fp
 800d4a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d4aa:	454f      	cmp	r7, r9
 800d4ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d4b0:	d805      	bhi.n	800d4be <__multiply+0x124>
 800d4b2:	f8c8 3004 	str.w	r3, [r8, #4]
 800d4b6:	3504      	adds	r5, #4
 800d4b8:	e79b      	b.n	800d3f2 <__multiply+0x58>
 800d4ba:	46d4      	mov	ip, sl
 800d4bc:	e7b3      	b.n	800d426 <__multiply+0x8c>
 800d4be:	46e0      	mov	r8, ip
 800d4c0:	e7dd      	b.n	800d47e <__multiply+0xe4>
 800d4c2:	3e01      	subs	r6, #1
 800d4c4:	e799      	b.n	800d3fa <__multiply+0x60>
	...

0800d4c8 <__pow5mult>:
 800d4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4cc:	4615      	mov	r5, r2
 800d4ce:	f012 0203 	ands.w	r2, r2, #3
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	460f      	mov	r7, r1
 800d4d6:	d007      	beq.n	800d4e8 <__pow5mult+0x20>
 800d4d8:	3a01      	subs	r2, #1
 800d4da:	4c21      	ldr	r4, [pc, #132]	; (800d560 <__pow5mult+0x98>)
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4e2:	f7ff fec8 	bl	800d276 <__multadd>
 800d4e6:	4607      	mov	r7, r0
 800d4e8:	10ad      	asrs	r5, r5, #2
 800d4ea:	d035      	beq.n	800d558 <__pow5mult+0x90>
 800d4ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4ee:	b93c      	cbnz	r4, 800d500 <__pow5mult+0x38>
 800d4f0:	2010      	movs	r0, #16
 800d4f2:	f7fe fbfb 	bl	800bcec <malloc>
 800d4f6:	6270      	str	r0, [r6, #36]	; 0x24
 800d4f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4fc:	6004      	str	r4, [r0, #0]
 800d4fe:	60c4      	str	r4, [r0, #12]
 800d500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d508:	b94c      	cbnz	r4, 800d51e <__pow5mult+0x56>
 800d50a:	f240 2171 	movw	r1, #625	; 0x271
 800d50e:	4630      	mov	r0, r6
 800d510:	f7ff ff3a 	bl	800d388 <__i2b>
 800d514:	2300      	movs	r3, #0
 800d516:	f8c8 0008 	str.w	r0, [r8, #8]
 800d51a:	4604      	mov	r4, r0
 800d51c:	6003      	str	r3, [r0, #0]
 800d51e:	f04f 0800 	mov.w	r8, #0
 800d522:	07eb      	lsls	r3, r5, #31
 800d524:	d50a      	bpl.n	800d53c <__pow5mult+0x74>
 800d526:	4639      	mov	r1, r7
 800d528:	4622      	mov	r2, r4
 800d52a:	4630      	mov	r0, r6
 800d52c:	f7ff ff35 	bl	800d39a <__multiply>
 800d530:	4639      	mov	r1, r7
 800d532:	4681      	mov	r9, r0
 800d534:	4630      	mov	r0, r6
 800d536:	f7ff fe87 	bl	800d248 <_Bfree>
 800d53a:	464f      	mov	r7, r9
 800d53c:	106d      	asrs	r5, r5, #1
 800d53e:	d00b      	beq.n	800d558 <__pow5mult+0x90>
 800d540:	6820      	ldr	r0, [r4, #0]
 800d542:	b938      	cbnz	r0, 800d554 <__pow5mult+0x8c>
 800d544:	4622      	mov	r2, r4
 800d546:	4621      	mov	r1, r4
 800d548:	4630      	mov	r0, r6
 800d54a:	f7ff ff26 	bl	800d39a <__multiply>
 800d54e:	6020      	str	r0, [r4, #0]
 800d550:	f8c0 8000 	str.w	r8, [r0]
 800d554:	4604      	mov	r4, r0
 800d556:	e7e4      	b.n	800d522 <__pow5mult+0x5a>
 800d558:	4638      	mov	r0, r7
 800d55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d55e:	bf00      	nop
 800d560:	08038620 	.word	0x08038620

0800d564 <__lshift>:
 800d564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d568:	460c      	mov	r4, r1
 800d56a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d56e:	6923      	ldr	r3, [r4, #16]
 800d570:	6849      	ldr	r1, [r1, #4]
 800d572:	eb0a 0903 	add.w	r9, sl, r3
 800d576:	68a3      	ldr	r3, [r4, #8]
 800d578:	4607      	mov	r7, r0
 800d57a:	4616      	mov	r6, r2
 800d57c:	f109 0501 	add.w	r5, r9, #1
 800d580:	42ab      	cmp	r3, r5
 800d582:	db32      	blt.n	800d5ea <__lshift+0x86>
 800d584:	4638      	mov	r0, r7
 800d586:	f7ff fe2b 	bl	800d1e0 <_Balloc>
 800d58a:	2300      	movs	r3, #0
 800d58c:	4680      	mov	r8, r0
 800d58e:	f100 0114 	add.w	r1, r0, #20
 800d592:	461a      	mov	r2, r3
 800d594:	4553      	cmp	r3, sl
 800d596:	db2b      	blt.n	800d5f0 <__lshift+0x8c>
 800d598:	6920      	ldr	r0, [r4, #16]
 800d59a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d59e:	f104 0314 	add.w	r3, r4, #20
 800d5a2:	f016 021f 	ands.w	r2, r6, #31
 800d5a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d5ae:	d025      	beq.n	800d5fc <__lshift+0x98>
 800d5b0:	f1c2 0e20 	rsb	lr, r2, #32
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	681e      	ldr	r6, [r3, #0]
 800d5b8:	468a      	mov	sl, r1
 800d5ba:	4096      	lsls	r6, r2
 800d5bc:	4330      	orrs	r0, r6
 800d5be:	f84a 0b04 	str.w	r0, [sl], #4
 800d5c2:	f853 0b04 	ldr.w	r0, [r3], #4
 800d5c6:	459c      	cmp	ip, r3
 800d5c8:	fa20 f00e 	lsr.w	r0, r0, lr
 800d5cc:	d814      	bhi.n	800d5f8 <__lshift+0x94>
 800d5ce:	6048      	str	r0, [r1, #4]
 800d5d0:	b108      	cbz	r0, 800d5d6 <__lshift+0x72>
 800d5d2:	f109 0502 	add.w	r5, r9, #2
 800d5d6:	3d01      	subs	r5, #1
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f8c8 5010 	str.w	r5, [r8, #16]
 800d5de:	4621      	mov	r1, r4
 800d5e0:	f7ff fe32 	bl	800d248 <_Bfree>
 800d5e4:	4640      	mov	r0, r8
 800d5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ea:	3101      	adds	r1, #1
 800d5ec:	005b      	lsls	r3, r3, #1
 800d5ee:	e7c7      	b.n	800d580 <__lshift+0x1c>
 800d5f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	e7cd      	b.n	800d594 <__lshift+0x30>
 800d5f8:	4651      	mov	r1, sl
 800d5fa:	e7dc      	b.n	800d5b6 <__lshift+0x52>
 800d5fc:	3904      	subs	r1, #4
 800d5fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d602:	f841 2f04 	str.w	r2, [r1, #4]!
 800d606:	459c      	cmp	ip, r3
 800d608:	d8f9      	bhi.n	800d5fe <__lshift+0x9a>
 800d60a:	e7e4      	b.n	800d5d6 <__lshift+0x72>

0800d60c <__mcmp>:
 800d60c:	6903      	ldr	r3, [r0, #16]
 800d60e:	690a      	ldr	r2, [r1, #16]
 800d610:	1a9b      	subs	r3, r3, r2
 800d612:	b530      	push	{r4, r5, lr}
 800d614:	d10c      	bne.n	800d630 <__mcmp+0x24>
 800d616:	0092      	lsls	r2, r2, #2
 800d618:	3014      	adds	r0, #20
 800d61a:	3114      	adds	r1, #20
 800d61c:	1884      	adds	r4, r0, r2
 800d61e:	4411      	add	r1, r2
 800d620:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d624:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d628:	4295      	cmp	r5, r2
 800d62a:	d003      	beq.n	800d634 <__mcmp+0x28>
 800d62c:	d305      	bcc.n	800d63a <__mcmp+0x2e>
 800d62e:	2301      	movs	r3, #1
 800d630:	4618      	mov	r0, r3
 800d632:	bd30      	pop	{r4, r5, pc}
 800d634:	42a0      	cmp	r0, r4
 800d636:	d3f3      	bcc.n	800d620 <__mcmp+0x14>
 800d638:	e7fa      	b.n	800d630 <__mcmp+0x24>
 800d63a:	f04f 33ff 	mov.w	r3, #4294967295
 800d63e:	e7f7      	b.n	800d630 <__mcmp+0x24>

0800d640 <__mdiff>:
 800d640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d644:	460d      	mov	r5, r1
 800d646:	4607      	mov	r7, r0
 800d648:	4611      	mov	r1, r2
 800d64a:	4628      	mov	r0, r5
 800d64c:	4614      	mov	r4, r2
 800d64e:	f7ff ffdd 	bl	800d60c <__mcmp>
 800d652:	1e06      	subs	r6, r0, #0
 800d654:	d108      	bne.n	800d668 <__mdiff+0x28>
 800d656:	4631      	mov	r1, r6
 800d658:	4638      	mov	r0, r7
 800d65a:	f7ff fdc1 	bl	800d1e0 <_Balloc>
 800d65e:	2301      	movs	r3, #1
 800d660:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d668:	bfa4      	itt	ge
 800d66a:	4623      	movge	r3, r4
 800d66c:	462c      	movge	r4, r5
 800d66e:	4638      	mov	r0, r7
 800d670:	6861      	ldr	r1, [r4, #4]
 800d672:	bfa6      	itte	ge
 800d674:	461d      	movge	r5, r3
 800d676:	2600      	movge	r6, #0
 800d678:	2601      	movlt	r6, #1
 800d67a:	f7ff fdb1 	bl	800d1e0 <_Balloc>
 800d67e:	692b      	ldr	r3, [r5, #16]
 800d680:	60c6      	str	r6, [r0, #12]
 800d682:	6926      	ldr	r6, [r4, #16]
 800d684:	f105 0914 	add.w	r9, r5, #20
 800d688:	f104 0214 	add.w	r2, r4, #20
 800d68c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d690:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d694:	f100 0514 	add.w	r5, r0, #20
 800d698:	f04f 0e00 	mov.w	lr, #0
 800d69c:	f852 ab04 	ldr.w	sl, [r2], #4
 800d6a0:	f859 4b04 	ldr.w	r4, [r9], #4
 800d6a4:	fa1e f18a 	uxtah	r1, lr, sl
 800d6a8:	b2a3      	uxth	r3, r4
 800d6aa:	1ac9      	subs	r1, r1, r3
 800d6ac:	0c23      	lsrs	r3, r4, #16
 800d6ae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d6b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d6b6:	b289      	uxth	r1, r1
 800d6b8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d6bc:	45c8      	cmp	r8, r9
 800d6be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d6c2:	4694      	mov	ip, r2
 800d6c4:	f845 3b04 	str.w	r3, [r5], #4
 800d6c8:	d8e8      	bhi.n	800d69c <__mdiff+0x5c>
 800d6ca:	45bc      	cmp	ip, r7
 800d6cc:	d304      	bcc.n	800d6d8 <__mdiff+0x98>
 800d6ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d6d2:	b183      	cbz	r3, 800d6f6 <__mdiff+0xb6>
 800d6d4:	6106      	str	r6, [r0, #16]
 800d6d6:	e7c5      	b.n	800d664 <__mdiff+0x24>
 800d6d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d6dc:	fa1e f381 	uxtah	r3, lr, r1
 800d6e0:	141a      	asrs	r2, r3, #16
 800d6e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d6f0:	f845 3b04 	str.w	r3, [r5], #4
 800d6f4:	e7e9      	b.n	800d6ca <__mdiff+0x8a>
 800d6f6:	3e01      	subs	r6, #1
 800d6f8:	e7e9      	b.n	800d6ce <__mdiff+0x8e>

0800d6fa <__d2b>:
 800d6fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6fe:	460e      	mov	r6, r1
 800d700:	2101      	movs	r1, #1
 800d702:	ec59 8b10 	vmov	r8, r9, d0
 800d706:	4615      	mov	r5, r2
 800d708:	f7ff fd6a 	bl	800d1e0 <_Balloc>
 800d70c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d710:	4607      	mov	r7, r0
 800d712:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d716:	bb34      	cbnz	r4, 800d766 <__d2b+0x6c>
 800d718:	9301      	str	r3, [sp, #4]
 800d71a:	f1b8 0300 	subs.w	r3, r8, #0
 800d71e:	d027      	beq.n	800d770 <__d2b+0x76>
 800d720:	a802      	add	r0, sp, #8
 800d722:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d726:	f7ff fe00 	bl	800d32a <__lo0bits>
 800d72a:	9900      	ldr	r1, [sp, #0]
 800d72c:	b1f0      	cbz	r0, 800d76c <__d2b+0x72>
 800d72e:	9a01      	ldr	r2, [sp, #4]
 800d730:	f1c0 0320 	rsb	r3, r0, #32
 800d734:	fa02 f303 	lsl.w	r3, r2, r3
 800d738:	430b      	orrs	r3, r1
 800d73a:	40c2      	lsrs	r2, r0
 800d73c:	617b      	str	r3, [r7, #20]
 800d73e:	9201      	str	r2, [sp, #4]
 800d740:	9b01      	ldr	r3, [sp, #4]
 800d742:	61bb      	str	r3, [r7, #24]
 800d744:	2b00      	cmp	r3, #0
 800d746:	bf14      	ite	ne
 800d748:	2102      	movne	r1, #2
 800d74a:	2101      	moveq	r1, #1
 800d74c:	6139      	str	r1, [r7, #16]
 800d74e:	b1c4      	cbz	r4, 800d782 <__d2b+0x88>
 800d750:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d754:	4404      	add	r4, r0
 800d756:	6034      	str	r4, [r6, #0]
 800d758:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d75c:	6028      	str	r0, [r5, #0]
 800d75e:	4638      	mov	r0, r7
 800d760:	b003      	add	sp, #12
 800d762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d76a:	e7d5      	b.n	800d718 <__d2b+0x1e>
 800d76c:	6179      	str	r1, [r7, #20]
 800d76e:	e7e7      	b.n	800d740 <__d2b+0x46>
 800d770:	a801      	add	r0, sp, #4
 800d772:	f7ff fdda 	bl	800d32a <__lo0bits>
 800d776:	9b01      	ldr	r3, [sp, #4]
 800d778:	617b      	str	r3, [r7, #20]
 800d77a:	2101      	movs	r1, #1
 800d77c:	6139      	str	r1, [r7, #16]
 800d77e:	3020      	adds	r0, #32
 800d780:	e7e5      	b.n	800d74e <__d2b+0x54>
 800d782:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d786:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d78a:	6030      	str	r0, [r6, #0]
 800d78c:	6918      	ldr	r0, [r3, #16]
 800d78e:	f7ff fdad 	bl	800d2ec <__hi0bits>
 800d792:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d796:	e7e1      	b.n	800d75c <__d2b+0x62>

0800d798 <_calloc_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	fb02 f401 	mul.w	r4, r2, r1
 800d79e:	4621      	mov	r1, r4
 800d7a0:	f7fe fb16 	bl	800bdd0 <_malloc_r>
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	b118      	cbz	r0, 800d7b0 <_calloc_r+0x18>
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	f7fe fab9 	bl	800bd22 <memset>
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}

0800d7b4 <__ascii_mbtowc>:
 800d7b4:	b082      	sub	sp, #8
 800d7b6:	b901      	cbnz	r1, 800d7ba <__ascii_mbtowc+0x6>
 800d7b8:	a901      	add	r1, sp, #4
 800d7ba:	b142      	cbz	r2, 800d7ce <__ascii_mbtowc+0x1a>
 800d7bc:	b14b      	cbz	r3, 800d7d2 <__ascii_mbtowc+0x1e>
 800d7be:	7813      	ldrb	r3, [r2, #0]
 800d7c0:	600b      	str	r3, [r1, #0]
 800d7c2:	7812      	ldrb	r2, [r2, #0]
 800d7c4:	1c10      	adds	r0, r2, #0
 800d7c6:	bf18      	it	ne
 800d7c8:	2001      	movne	r0, #1
 800d7ca:	b002      	add	sp, #8
 800d7cc:	4770      	bx	lr
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	e7fb      	b.n	800d7ca <__ascii_mbtowc+0x16>
 800d7d2:	f06f 0001 	mvn.w	r0, #1
 800d7d6:	e7f8      	b.n	800d7ca <__ascii_mbtowc+0x16>

0800d7d8 <__ascii_wctomb>:
 800d7d8:	b149      	cbz	r1, 800d7ee <__ascii_wctomb+0x16>
 800d7da:	2aff      	cmp	r2, #255	; 0xff
 800d7dc:	bf85      	ittet	hi
 800d7de:	238a      	movhi	r3, #138	; 0x8a
 800d7e0:	6003      	strhi	r3, [r0, #0]
 800d7e2:	700a      	strbls	r2, [r1, #0]
 800d7e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d7e8:	bf98      	it	ls
 800d7ea:	2001      	movls	r0, #1
 800d7ec:	4770      	bx	lr
 800d7ee:	4608      	mov	r0, r1
 800d7f0:	4770      	bx	lr
	...

0800d7f4 <_sbrk>:
 800d7f4:	4b04      	ldr	r3, [pc, #16]	; (800d808 <_sbrk+0x14>)
 800d7f6:	6819      	ldr	r1, [r3, #0]
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	b909      	cbnz	r1, 800d800 <_sbrk+0xc>
 800d7fc:	4903      	ldr	r1, [pc, #12]	; (800d80c <_sbrk+0x18>)
 800d7fe:	6019      	str	r1, [r3, #0]
 800d800:	6818      	ldr	r0, [r3, #0]
 800d802:	4402      	add	r2, r0
 800d804:	601a      	str	r2, [r3, #0]
 800d806:	4770      	bx	lr
 800d808:	20000260 	.word	0x20000260
 800d80c:	20001270 	.word	0x20001270

0800d810 <_init>:
 800d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d812:	bf00      	nop
 800d814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d816:	bc08      	pop	{r3}
 800d818:	469e      	mov	lr, r3
 800d81a:	4770      	bx	lr

0800d81c <_fini>:
 800d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81e:	bf00      	nop
 800d820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d822:	bc08      	pop	{r3}
 800d824:	469e      	mov	lr, r3
 800d826:	4770      	bx	lr
